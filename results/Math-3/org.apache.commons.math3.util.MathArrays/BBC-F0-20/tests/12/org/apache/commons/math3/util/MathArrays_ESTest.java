/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:55:22 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = (-1899.153F);
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      floatArray0[4] = (-2098.35F);
      floatArray0[5] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1899.153F), Float.NEGATIVE_INFINITY, (-2098.35F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) (-2098.35F);
      doubleArray0[2] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[4] = (double) (-2098.35F);
      try { 
        MathArrays.normalizeArray(doubleArray0, (-3370.8858370035));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.scaleInPlace((-1.7976931348623157E308), doubleArray0);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1613L);
      longArray0[1] = 3952090531849364496L;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1613L);
      doubleArray0[8] = (double) 3952090531849364496L;
      doubleArray0[2] = (double) 3952090531849364496L;
      doubleArray0[3] = (double) 912L;
      doubleArray0[4] = (double) (-1613L);
      doubleArray0[5] = (double) 912L;
      doubleArray0[6] = (double) 3952090531849364496L;
      doubleArray0[7] = 4.3466666666666665E18;
      doubleArray0[8] = (double) 3952090531849364496L;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {(-1613.0), 0.0, 3.9520905318493645E18, 912.0, (-1613.0), 912.0, 3.9520905318493645E18, 4.3466666666666665E18, 3.9520905318493645E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1613.0), 0.0, 3.9520905318493645E18, 912.0, (-1613.0), 912.0, 3.9520905318493645E18, 4.3466666666666665E18, 3.9520905318493645E18}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {(-1613.0), 0.0, 3.9520905318493645E18, 912.0, (-1613.0), 912.0, 3.9520905318493645E18, 4.3466666666666665E18, 3.9520905318493645E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1613.0), 0.0, 3.9520905318493645E18, 912.0, (-1613.0), 912.0, 3.9520905318493645E18, 4.3466666666666665E18, 3.9520905318493645E18}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(8.1086725070699018E18, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (3,952,090,531,849,364,500 >= 912)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 845.4950210524694;
      doubleArray0[2] = 845.4950210524694;
      doubleArray0[3] = 1581.0;
      doubleArray0[4] = 2110.898517;
      doubleArray0[5] = (-6609.75215724015);
      doubleArray0[6] = (-2212.096090196457);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 845.4950210524694, 845.4950210524694, 1581.0, 2110.898517, (-6609.75215724015), (-2212.096090196457)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 845.4950210524694, 845.4950210524694, 1581.0, 2110.898517, (-6609.75215724015), (-2212.096090196457)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 714861.8306245157, 714861.8306245157, 2499561.0, 4455892.549072799, 4.368882358014082E7, 4893369.112262453}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 845.4950210524694, 845.4950210524694, 1581.0, 2110.898517, (-6609.75215724015), (-2212.096090196457)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 714861.8306245157, 714861.8306245157, 2499561.0, 4455892.549072799, 4.368882358014082E7, 4893369.112262453}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals((-2.850303314354279E11), double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-0.0013888888689039883);
      doubleArray0[1] = (-39.82);
      doubleArray0[2] = 2.608E18;
      doubleArray0[3] = 655.874;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 8.0;
      doubleArray0[6] = 511.13127223;
      doubleArray0[7] = 1.700416E38;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-0.0013888888689039883), (-39.82), 2.608E18, 655.874, (-1.0), 8.0, 511.13127223, 1.700416E38}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.700416E38, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {1.304E19}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1.304E19, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {1.304E19}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
      assertEquals(14, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(14, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-3.4028235E38F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1692.12F;
      floatArray0[5] = 74.003F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1.4E-45F;
      floatArray0[8] = 938.91754F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-3.4028235E38F), 0.0F, 1.0F, 0.0F, 1692.12F, 74.003F, 0.0F, 1.4E-45F, 938.91754F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1.4E-45F;
      doubleArray0[1] = (double) 74.003F;
      doubleArray0[2] = (double) 1692.12F;
      doubleArray0[3] = (double) 1.4E-45F;
      doubleArray0[4] = (double) 1.4E-45F;
      doubleArray0[5] = (double) 938.91754F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0.0F;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.401298464324817E-45, 74.00299835205078, 1692.1199951171875, 1.401298464324817E-45, 1.401298464324817E-45, 938.9175415039062, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 938.91754F;
      doubleArray1[1] = (double) 0.0F;
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {938.9175415039062, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {881566.1497437395, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 58;
      intArray0[1] = (-3522);
      intArray0[2] = (-2944);
      intArray0[3] = (-302);
      intArray0[4] = 2140627355;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2140627355;
      intArray1[1] = (-302);
      intArray1[2] = (-3522);
      intArray1[3] = (-302);
      intArray1[4] = 58;
      intArray1[5] = 2140627355;
      intArray1[6] = (-302);
      intArray1[7] = 58;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {58, (-3522), (-2944), (-302), 2140627355}, intArray0);
      assertArrayEquals(new int[] {2140627355, (-302), (-3522), (-302), 58, 2140627355, (-302), 58}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(8, intArray1.length);
      assertEquals((-13708904), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertArrayEquals(new int[] {2140627355, (-302), (-3522), (-302), 58, 2140627355, (-302), 58}, intArray2);
      assertArrayEquals(new int[] {2140627355, (-302), (-3522), (-302), 58, 2140627355, (-302), 58}, intArray1);
      assertEquals(8, intArray2.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = 1.1795268640216787E-8;
      doubleArray0[1] = (-3384.08534);
      doubleArray0[2] = 3.4439717236742845E-8;
      doubleArray0[3] = (-4.9E-324);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(16, doubleArray0.length);
      assertEquals(3384.08534, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2208.1234163;
      doubleArray0[1] = (-1700.2001731);
      doubleArray0[2] = (-2857.0);
      doubleArray0[3] = 3331.2013516997677;
      doubleArray0[4] = 1.0496395061728394E37;
      doubleArray0[5] = 88.0792585667;
      doubleArray0[6] = 682.7954;
      doubleArray0[7] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {2208.1234163, (-1700.2001731), (-2857.0), 3331.2013516997677, 1.0496395061728394E37, 88.0792585667, 682.7954, 1.304E19}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.0496395061728394E37, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-427.99F);
      floatArray0[1] = (-2505.89F);
      floatArray0[3] = (-1614.6312F);
      floatArray0[4] = Float.NEGATIVE_INFINITY;
      floatArray0[5] = (-1458.89F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1.0F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-427.99F);
      floatArray1[1] = 1.0F;
      floatArray1[2] = (-1458.89F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-427.99F), (-2505.89F), 0.0F, (-1614.6312F), Float.NEGATIVE_INFINITY, (-1458.89F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-427.99F), 1.0F, (-1458.89F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {(-427.99F), (-2505.89F), 0.0F, (-1614.6312F), Float.NEGATIVE_INFINITY, (-1458.89F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0496395061728394E37;
      doubleArray0[1] = 1.0496395061728394E37;
      doubleArray0[2] = 0.07073719799518585;
      doubleArray0[4] = 0.07073719799518585;
      doubleArray0[5] = 1.0496395061728394E37;
      doubleArray0[6] = 1.0496395061728394E37;
      doubleArray0[7] = 0.07073719799518585;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.0496395061728394E37, 1.0496395061728394E37, 0.07073719799518585, 0.0, 0.07073719799518585, 1.0496395061728394E37, 1.0496395061728394E37, 0.07073719799518585}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(2.0992790123456787E37, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.375;
      doubleArray0[1] = 2.800552834259E-8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2.800552834259E-8;
      doubleArray2[1] = 1.375;
      doubleArray2[2] = 1.375;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      double[] doubleArray3 = new double[21];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.375;
      doubleArray3[1] = 1.375;
      doubleArray3[2] = 2.800552834259E-8;
      doubleArray3[3] = 1.375;
      doubleArray3[4] = 2.800552834259E-8;
      doubleArray3[5] = 1.375;
      doubleArray3[6] = 2.800552834259E-8;
      doubleArray3[7] = 2.800552834259E-8;
      doubleArray1[7] = doubleArray3;
      doubleArray1[8] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 3.6725170580355583E-9;
      doubleArray0[2] = (-870.3609778143599);
      doubleArray0[3] = 536.3497;
      doubleArray0[4] = 1.883511811213715E-8;
      doubleArray0[5] = 834.32875588892;
      doubleArray0[6] = (-2338.38514318);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {20.0, 3.6725170580355583E-9, (-870.3609778143599), 536.3497, 1.883511811213715E-8, 834.32875588892, (-2338.38514318)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(2685.0975369882117, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {20.0, 3.6725170580355583E-9, (-870.3609778143599), 536.3497, 1.883511811213715E-8, 834.32875588892, (-2338.38514318)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {20.0, 3.6725170580355583E-9, (-870.3609778143599), 536.3497, 1.883511811213715E-8, 834.32875588892, (-2338.38514318)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {20.0, 3.6725170580355583E-9, (-870.3609778143599), 536.3497, 1.883511811213715E-8, 834.32875588892, (-2338.38514318)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-549);
      intArray0[1] = 0;
      intArray0[2] = (-2291);
      intArray0[3] = 6;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {(-549), 0, (-2291), 6}, intArray1);
      assertArrayEquals(new int[] {(-549), 0, (-2291), 6}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertArrayEquals(new int[] {(-549), 0, (-2291), 6}, intArray1);
      assertArrayEquals(new int[] {(-549), 0, (-2291), 6}, intArray2);
      assertArrayEquals(new int[] {(-549), 0, (-2291), 6}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray2.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[3];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1196);
      intArray1[1] = 112;
      intArray1[2] = 134217729;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1196), 112, 134217729}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertEquals(134219037, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2261.18634429);
      doubleArray1[1] = 3987.0;
      doubleArray1[2] = (-90.25);
      doubleArray1[3] = 1.86285714285714278E18;
      doubleArray1[4] = 982.4446045807;
      doubleArray1[5] = 3.834E-20;
      doubleArray1[6] = (-3323.67152);
      doubleArray1[7] = 987.3;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray1);
      assertArrayEquals(new double[] {(-2261.18634429), 3987.0, (-90.25), 1.86285714285714278E18, 982.4446045807, 3.834E-20, (-3323.67152), 987.3}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-hRJo>{mt$w";
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[4];
      int int0 = 1625;
      intArray0[0] = 1625;
      intArray0[1] = 2537;
      int int1 = 191;
      intArray0[2] = 191;
      intArray0[3] = (-696);
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.linearCombination(0.0, (-2337.34), 1.304E19, 0.0, (-1.0), 0.0, (-1.0), 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 695.0875917;
      doubleArray0[1] = (-1186.549);
      doubleArray0[2] = 0.14285714285714285;
      doubleArray0[3] = (-147.39);
      doubleArray0[4] = Double.NaN;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1002.733220877);
      assertArrayEquals(new double[] {695.0875917, (-1186.549), 0.14285714285714285, (-147.39), Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1091.244853938861), 1862.8090986770837, (-0.22427694560047473), 231.3932530843778, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination((-1186.549), 2.925681159240093E-8, 0.14285714285714285, (-147.39), (-147.39), 0.3936265707015991, (-1804.3736382881013), (-732.05635));
      assertEquals(1320824.1073121515, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 67;
      intArray0[1] = 67;
      intArray0[2] = 67;
      intArray0[3] = 67;
      intArray0[4] = 67;
      intArray0[5] = 67;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 134217729;
      intArray1[1] = 67;
      intArray1[2] = 67;
      intArray1[3] = 67;
      intArray1[4] = 67;
      intArray1[5] = 67;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertArrayEquals(new int[] {67, 67, 67, 67, 67, 67}, intArray0);
      assertArrayEquals(new int[] {134217729, 67, 67, 67, 67, 67}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(1.34217662E8, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertArrayEquals(new int[] {67, 67, 67, 67, 67, 67}, intArray0);
      assertArrayEquals(new int[] {134217729, 67, 67, 67, 67, 67}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(1.34217662E8, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.008333333333329196;
      doubleArray0[1] = 1341.32626239378;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (-313.2135307336);
      doubleArray0[4] = 1797.995712;
      doubleArray0[5] = 2013.4851258623;
      doubleArray0[6] = 94.9077621;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.008333333333329196, 1341.32626239378, 3.834E-20, (-313.2135307336), 1797.995712, 2013.4851258623, 94.9077621}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(3032.0252759232167, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 114;
      intArray0[1] = (-884);
      intArray0[2] = 1868;
      intArray0[3] = 32760;
      intArray0[4] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 119);
      assertArrayEquals(new int[] {114, (-884), 1868, 32760, 0}, intArray0);
      assertEquals(119, intArray1.length);
      assertEquals(5, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertArrayEquals(new int[] {114, (-884), 1868, 32760, 0}, intArray0);
      assertEquals(119, intArray1.length);
      assertEquals(119, intArray2.length);
      assertEquals(5, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray2);
      
      long[][] longArray0 = new long[3][0];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 1868;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 119;
      longArray2[4] = (long) 1868;
      longArray2[5] = (long) 0;
      longArray2[6] = (long) 114;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 1868;
      longArray3[1] = (long) 32760;
      longArray0[2] = longArray3;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2634.422F;
      floatArray0[1] = (-3614.0F);
      floatArray0[2] = 1027.391F;
      floatArray0[3] = 921.97F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {2634.422F, (-3614.0F), 1027.391F, 921.97F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 934;
      intArray0[1] = 2784;
      intArray0[2] = 4631;
      intArray0[3] = 2;
      intArray0[4] = 196;
      intArray0[5] = (-2723);
      intArray0[6] = 1;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {934, 2784, 4631, 2, 196, (-2723), 1}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 1.304E19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = (-745.5373);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 424.7727612917088;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, (-745.5373), 0.0, 0.0, 424.7727612917088, Double.NaN}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-745.5373);
      doubleArray2[1] = (-227.3116168);
      doubleArray2[2] = 424.7727612917088;
      doubleArray2[3] = (-745.5373);
      double[] doubleArray3 = MathArrays.convolve(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, (-745.5373), 0.0, 0.0, 424.7727612917088, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 239141.92812432483, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-745.5373), (-227.3116168), 424.7727612917088, (-745.5373)}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotNull(doubleArray3);
      
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[2][1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.304E19;
      doubleArray2[1] = 87.9952;
      doubleArray2[2] = 1034.5951;
      doubleArray2[3] = 1.8307188599677033E-8;
      doubleArray2[4] = 2836.843256;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 87.9952, 1034.5951, 1.8307188599677033E-8, 2836.843256}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      long[][] longArray0 = new long[0][6];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-868.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-868.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 2656.69F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, (-868.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2656.69F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 499.771361908;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 499.771361908;
      doubleArray1[1] = 499.771361908;
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {499.771361908, 499.771361908}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {499.771361908, 499.771361908}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2570;
      intArray0[1] = 0;
      intArray0[2] = (-3137);
      intArray0[3] = (-2432);
      intArray0[4] = 736;
      intArray0[5] = 41;
      intArray0[6] = (-465);
      intArray0[7] = 312;
      intArray0[8] = 2547;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertArrayEquals(new int[] {2570, 0, (-3137), (-2432), 736, 41, (-465), 312, 2547}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2547, 41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-478.1129), 587.02788, 946.4876337, (-1405.936), 946.4876337, 2160.85, (-401.17814863405), 119.0);
      assertEquals(386110.9637318978, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[3] = (-401.17814863405);
      doubleArray0[4] = (-1405.936);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 946.4876337;
      doubleArray0[8] = Double.NaN;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-1.0), 0.0, (-401.17814863405), (-1405.936), (-1.0), (-1.0), 946.4876337, Double.NaN}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 2855.9F;
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      floatArray0[4] = (float) (-1L);
      floatArray0[5] = (float) (-1L);
      floatArray0[6] = 2855.9F;
      floatArray0[7] = Float.NaN;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 2855.9F, Float.NEGATIVE_INFINITY, (-1.0F), (-1.0F), 2855.9F, Float.NaN}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(3078);
      assertEquals(3078, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 219;
      intArray0[2] = 219;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 219, 219}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Integer integer0 = new Integer(111);
      assertEquals(111, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 111;
      doubleArray0[1] = (double) 111;
      doubleArray0[2] = (double) 111;
      doubleArray0[3] = (double) 111;
      doubleArray0[4] = (double) 111;
      doubleArray0[5] = (double) 111;
      doubleArray0[6] = (double) 111;
      doubleArray0[7] = (double) 111;
      doubleArray0[8] = (double) 111;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 111);
      assertArrayEquals(new double[] {111.0, 111.0, 111.0, 111.0, 111.0, 111.0, 111.0, 111.0, 111.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(111, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 499.771361908;
      double double0 = MathArrays.linearCombination((-448.3042958437), 499.771361908, 499.771361908, 499.771361908, 2808.23, 2808.23, 499.771361908, (-448.3042958437));
      assertEquals(7687827.850117352, double0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 2160.85;
      doubleArray1[2] = 499.771361908;
      doubleArray1[3] = 7687827.850117352;
      doubleArray1[4] = 1.0;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-368.602396576);
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-1695));
      assertEquals((-1695), (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 11;
      intArray0[1] = (-1695);
      intArray0[2] = 11;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {11, (-1695), 11}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-8);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-8);
      doubleArray0[1] = (double) 973L;
      doubleArray0[2] = (double) (-8);
      doubleArray0[4] = (double) (-8);
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {(-8.0), 973.0, (-8.0), 0.0, (-8.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(11);
      assertEquals(11, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-8), 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "o+)Iu*;#3";
      stringArray0[3] = "";
      stringArray0[4] = "7yl|Td";
      stringArray0[5] = "";
      stringArray0[6] = "gl>=p@h:l9.]#e@!*;4";
      stringArray0[7] = "COVARIANCE_MATRIX";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[][] doubleArray1 = new double[8][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = null;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = 0.902267575263977;
      double double1 = 3.6968428372063937;
      double double2 = (-2854.6666007500835);
      double double3 = MathArrays.linearCombination((-5843727.600140994), 3.733196613760534E7, (-3.940510424527919E-20), 0.9285714285714286, 3.6968428372063937, (-2854.6666007500835), 5.2240336371356666E-9, (-5843727.600140994));
      assertEquals((-2.181578408964066E14), double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-0.43);
      doubleArray0[1] = 3.6968428372063937;
      doubleArray0[2] = (-2.181578408964066E14);
      doubleArray0[3] = 3.733196613760534E7;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (3.697 >= -218,157,840,896,406.6)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "number of successes ({0}) must be less than or equal to population size ({1})";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 56;
      intArray0[1] = (-3299);
      intArray0[2] = (-21);
      intArray0[3] = 119;
      intArray0[4] = 12;
      intArray0[5] = (-619);
      intArray0[6] = (-4122);
      intArray0[7] = 253;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {56, (-3299), (-21), 119, 12, (-619), (-4122), 253}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 3098;
      intArray0[2] = 14;
      intArray0[3] = 1626;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 3098, 14, 1626}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 499.771361908;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {249771.41418337714}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 836);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 499.771361908;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {249771.41418337714}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double(1.44888888888888883E18);
      assertEquals(1.44888888888888883E18, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1.304E19);
      assertEquals(1.304E19, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(double0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 13, 13);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray0[2] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[][] longArray0 = new long[5][6];
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      MathArrays.scaleInPlace(5114.7, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[3] = "";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      double double0 = MathArrays.linearCombination((-478.1129), 975.002029301, 1.0, (-4828.4), 951074.0872877567, 7285633.6739956895, 1513.238, (double) 0);
      assertEquals(6.929176925818948E12, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 5.650007086920087E-9;
      doubleArray0[1] = 2564.181319407;
      doubleArray0[2] = 975.002029301;
      doubleArray0[3] = 1513.238;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.902267575263977;
      doubleArray0[6] = 951074.0872877567;
      doubleArray0[7] = 1513.238;
      doubleArray0[8] = 1.0;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (2,564.181 > 975.002)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long[][] longArray0 = new long[5][6];
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 973L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 973L;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 973.0, 0.0, 0.0, 0.0, 973.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(0.0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-8);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-8);
      doubleArray0[1] = (double) 973L;
      doubleArray0[2] = (double) (-8);
      doubleArray0[3] = (double) (-8);
      doubleArray0[4] = (double) (-8);
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {(-8.0), 973.0, (-8.0), (-8.0), (-8.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 219;
      int int1 = 0;
      double double0 = 1518.257238233043;
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 8;
      intArray1[1] = 0;
      intArray1[2] = 219;
      intArray1[3] = 0;
      intArray1[4] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.linearCombination((double) 3088L, (-1.0), 0.0, (-478.1129), (-1.0), (-478.1129), 2160.85, 1.0);
      assertEquals((-449.03710000000007), double0, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "77gZ[AK+`gUE";
      stringArray0[1] = "h=#tR\">LA34Mc/M3";
      stringArray0[2] = "h=#tR\">LA34Mc/M3";
      stringArray0[3] = "0B";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1005);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(1005, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long[][] longArray0 = new long[5][6];
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3012.0);
      doubleArray0[1] = 1998171.313467017;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2506.77821684;
      doubleArray1[1] = 1998171.313467017;
      doubleArray1[2] = 1998171.313467017;
      doubleArray1[3] = 1998171.313467017;
      doubleArray1[4] = 1998171.313467017;
      doubleArray1[5] = (-3012.0);
      doubleArray1[6] = (-3012.0);
      doubleArray1[7] = (-3012.0);
      doubleArray1[8] = 1998171.313467017;
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-3012.0), 1998171.313467017}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2506.77821684, 1998171.313467017, 1998171.313467017, 1998171.313467017, 1998171.313467017, (-3012.0), (-3012.0), (-3012.0), 1998171.313467017}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(5518.77821684, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = Double.NaN;
      doubleArray0[5] = 424.7727612917088;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 587.02788;
      long[][] longArray0 = new long[0][1];
      long[] longArray1 = new long[3];
      longArray1[0] = (-3161L);
      longArray1[1] = (-163L);
      longArray1[2] = (-2444L);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "u*DGFMp)y(w)c&s";
      stringArray0[3] = "~P'j$eJ'M*l";
      stringArray0[4] = "";
      stringArray0[6] = "$VALUES";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 305;
      intArray0[1] = 9;
      intArray0[2] = 1471;
      intArray0[3] = 769;
      intArray0[4] = 215;
      intArray0[5] = (-4868);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {305, 9, 1471, 769, 215, (-4868)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 587.02788;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 587.02788;
      doubleArray1[3] = 587.02788;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {587.02788, 0.0, 587.02788, 587.02788, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(587.02788, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray0 = new long[2][0];
      long[] longArray1 = new long[1];
      longArray1[0] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[1] = 1L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      MathArrays.checkNonNegative(longArray1);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray2));
      assertNotSame(longArray1, longArray2);
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = new Integer((-13));
      assertEquals((-13), (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-13);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-13);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-13);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-13.0), (-1.0), (-13.0), (-1.0), (-13.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      MathArrays.scaleInPlace(0.1428571343421936, doubleArray0);
      assertArrayEquals(new double[] {(-0.1428571343421936), (-1.8571427464485168), (-0.1428571343421936), (-1.8571427464485168), (-0.1428571343421936), (-1.8571427464485168)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-0.1428571343421936), (-1.8571427464485168), (-0.1428571343421936), (-1.8571427464485168), (-0.1428571343421936), (-1.8571427464485168)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "BjJw%";
      stringArray0[1] = "";
      stringArray0[2] = ";-m{} reXP}Mz";
      stringArray0[3] = ";-m{} reXP}Mz";
      stringArray0[4] = "?Pv[VNXYIY_Z,n/ex{7";
      stringArray0[5] = ";-m{} reXP}Mz";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 973L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 973L;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 973.0, 0.0, 0.0, 0.0, 973.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      MathArrays.scaleInPlace(Double.POSITIVE_INFINITY, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.POSITIVE_INFINITY, Double.NaN, Double.NaN, Double.NaN, Double.POSITIVE_INFINITY, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.POSITIVE_INFINITY, Double.NaN, Double.NaN, Double.NaN, Double.POSITIVE_INFINITY, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "r:fk[WrA{@!:^gU)e{a";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[2] = "r:fk[WrA{@!:^gU)e{a";
      stringArray0[3] = "r:fk[WrA{@!:^gU)e{a";
      stringArray0[4] = "?Pv[VNXYIY_Z,n/ex{7";
      stringArray0[5] = "";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[7] = "?Pv[VNXYIY_Z,n/ex{7";
      stringArray0[8] = "?Pv[VNXYIY_Z,n/ex{7";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "?Pv[VNXYIY_Z,n/ex{7";
      stringArray0[1] = "";
      stringArray0[2] = "r:fk[WrA{@!:^gU)e{a";
      stringArray0[3] = "]Y(s";
      stringArray0[4] = "?Pv[VNXYIY_Z,n/ex{7";
      stringArray0[5] = "?Pv[VNXYIY_Z,n/ex{7";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[7] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1330);
      intArray0[2] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1330), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.linearCombination((double) 0, (double) 0, (double) 0, 0.0, (double) 0, (double) 0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      long[][] longArray0 = new long[5][5];
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) (-1330);
      longArray1[4] = 9218868437227405312L;
      longArray1[5] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 173L;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) (-1330);
      longArray2[3] = (long) 0;
      longArray2[4] = (long) (-1330);
      longArray2[5] = 9218868437227405312L;
      longArray2[6] = (long) 0;
      longArray2[7] = (long) (-1330);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 9007199254740990L;
      longArray3[1] = 9218868437227405312L;
      longArray3[2] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) 0;
      longArray4[1] = 173L;
      longArray4[2] = (long) (-1330);
      longArray4[3] = (long) (-1330);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = (long) 0;
      longArray5[1] = (long) (-1330);
      longArray5[2] = (long) 0;
      longArray5[3] = 1L;
      longArray5[4] = (long) (-1330);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,330 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = new double[2][1];
      doubleArray2[0] = doubleArray1;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.scaleInPlace(2699.7, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 2699.7;
      doubleArray3[1] = 499.771361908;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = 499.771361908;
      double[] doubleArray4 = MathArrays.ebeSubtract(doubleArray3, doubleArray3);
      assertArrayEquals(new double[] {2699.7, 499.771361908, 0.0, 499.771361908}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray4.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotNull(doubleArray4);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[2] = "?Pv[VNXYIY_Z,n/ex{7";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays";
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-758.5414049116694);
      doubleArray0[1] = Double.NaN;
      doubleArray0[5] = 424.7727612917088;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 587.02788;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-758.5414049116694), Double.NaN, 0.0, Double.NaN, Double.POSITIVE_INFINITY, 587.02788}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      long[][] longArray0 = new long[0][1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = new long[3];
      longArray1[0] = (-3161L);
      longArray1[1] = (-163L);
      longArray1[2] = (-2444L);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "_uz";
      stringArray0[2] = "u*DGFMp)y(w)c&s";
      stringArray0[3] = "~P'j$eJ'M*l";
      stringArray0[4] = "";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[6] = "$VALUES";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long[][] longArray0 = new long[5][6];
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = (-368.602396576);
      doubleArray0[1] = (-368.602396576);
      doubleArray0[2] = (-368.602396576);
      doubleArray0[4] = (-368.602396576);
      doubleArray0[5] = (-368.602396576);
      doubleArray0[6] = (-368.602396576);
      doubleArray0[7] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(11, doubleArray0.length);
      assertFalse(boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -368.602 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1506L);
      longArray0[1] = (-1506L);
      double[] doubleArray0 = null;
      int int0 = 1186;
      Integer integer0 = new Integer(1186);
      assertEquals(1186, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int int1 = (-1805);
      int int2 = 1534;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 1534);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = new double[2][1];
      doubleArray2[0] = doubleArray1;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.scaleInPlace(2699.7, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2699.7;
      doubleArray3[1] = 499.771361908;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = 499.771361908;
      double[] doubleArray4 = MathArrays.ebeSubtract(doubleArray3, doubleArray3);
      assertArrayEquals(new double[] {2699.7, 499.771361908, 0.0, 499.771361908}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray4.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotNull(doubleArray4);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "r:fk[WrA{@!:^gU)e{a";
      stringArray0[2] = "?Pv[VNXYIY_Z,n/ex{7";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[4] = "";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int int0 = 0;
      double[][] doubleArray2 = new double[2][1];
      doubleArray2[0] = doubleArray1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 499.771361908;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (-2220.70479870983);
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = 499.771361908;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray3, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = 1186;
      Integer integer0 = new Integer((-1856));
      assertEquals((-1856), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      int int1 = (-1805);
      int int2 = (-179);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, (-179));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 499.771361908;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {249771.41418337714}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[][] doubleArray2 = new double[2][1];
      doubleArray2[0] = doubleArray1;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {249771.41418337714}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray0 = new long[5][0];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray0[1] = longArray2;
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0, 973);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(973, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 973
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1506L);
      longArray0[1] = (-1506L);
      longArray0[2] = 973L;
      int int0 = 1186;
      Integer integer0 = new Integer(1186);
      assertEquals(1186, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 499.771361908;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {499.771361908}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {499.771361908}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {249771.41418337714}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1561);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1561, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2047);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = (-1L);
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.linearCombination((double) (-1L), (-1.0), 0.0, (-478.1129), 0.902267575263977, (-478.1129), 2160.85, 1.0);
      assertEquals(1730.4642330145716, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-745.5373);
      double double0 = MathArrays.linearCombination((-745.5373), (-745.5373), (-745.5373), (-745.5373));
      assertEquals(1111651.7313825798, double0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-745.5373);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-745.5373), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-745.5373)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-695);
      intArray0[1] = 1876;
      intArray0[2] = 0;
      intArray0[3] = (-1213);
      intArray0[4] = 1876;
      intArray0[5] = 0;
      intArray0[6] = (-3985);
      intArray0[7] = 2;
      intArray0[8] = (-3985);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {(-695), 1876, 0, (-1213), 1876, 0, (-3985), 2, (-3985)}, intArray1);
      assertArrayEquals(new int[] {(-695), 1876, 0, (-1213), 1876, 0, (-3985), 2, (-3985)}, intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      MathArrays.scaleInPlace(555825.8656912899, doubleArray1);
      assertArrayEquals(new double[] {(-4.143889151776469E8)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-745.5373), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4.143889151776469E8)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(boolean2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, (-1213));
      assertArrayEquals(new double[] {(-745.5373), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1213.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 973L;
      doubleArray0[2] = (double) 973L;
      doubleArray0[3] = (double) (-1506L);
      doubleArray0[4] = (double) 973L;
      doubleArray0[5] = (double) (-1506L);
      doubleArray0[6] = (-1781.1898);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {973.0, 0.0, 973.0, (-1506.0), 973.0, (-1506.0), (-1781.1898)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 499.771361908;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {249771.41418337714}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[2][1];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {249771.41418337714}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {249771.41418337714}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination((-1261.53), 0.0, Double.POSITIVE_INFINITY, (double) 0, 1518.257238233043, 1518.257238233043, 1241.974587612, 1241.974587612);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long[][] longArray0 = new long[5][6];
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1940.1486056245;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1940.1486056245}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3764176.611906692}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[2] = (-1397);
      intArray0[3] = 2;
      intArray0[4] = 133;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, (-1397), 2, 133}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.checkPositive(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3), 1434);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2778.8F);
      floatArray0[2] = 1595.7F;
      floatArray0[3] = 353.04016F;
      floatArray0[4] = (-3405.153F);
      floatArray0[5] = 1330.42F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 2768.509F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 353.04016F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-2778.8F);
      floatArray1[4] = 0.0F;
      floatArray1[5] = (-3405.153F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, (-2778.8F), 1595.7F, 353.04016F, (-3405.153F), 1330.42F, 0.0F, 2768.509F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {353.04016F, 0.0F, 0.0F, (-2778.8F), 0.0F, (-3405.153F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1330);
      intArray0[2] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1330), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.linearCombination((double) 0, (double) 0, (double) 0, 0.0, (double) 0, (double) 0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 499.771361908;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {249771.41418337714}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace(929.96, doubleArray0);
      assertArrayEquals(new double[] {464767.3757199637}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = null;
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[2] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long[][] longArray0 = new long[5][6];
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.866598306880267E7;
      double double0 = (-659.675301911625);
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.866598306880267E7, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3.4841892392482794E14, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.866598306880267E7, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.733196613760534E7, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {1.866598306880267E7, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.733196613760534E7, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      double double0 = MathArrays.linearCombination(1.304E19, 1.304E19, 1.304E19, 1.304E19);
      assertEquals(3.400832E38, double0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      long long0 = 0L;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1506L);
      longArray0[1] = (-1506L);
      longArray0[2] = 973L;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1506L);
      floatArray0[1] = (float) (-6155L);
      floatArray0[2] = (float) 973L;
      floatArray0[3] = (float) 973L;
      floatArray0[4] = 746.36847F;
      floatArray0[5] = (float) (-1506L);
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-1506.0F), (-6155.0F), 973.0F, 973.0F, 746.36847F, (-1506.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1876;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {1876}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[9];
      intArray0[0] = 0;
      doubleArray0[2] = (double) 973L;
      doubleArray0[3] = (double) (-6155L);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 973L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 973.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<String>[] fieldElementArray0 = MathArrays.buildArray(field0, 97);
      assertEquals(97, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-745.5373);
      doubleArray0[1] = Double.NaN;
      doubleArray0[5] = 424.7727612917088;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 587.02788;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-745.5373), Double.NaN, 0.0, Double.NaN, Double.POSITIVE_INFINITY, 587.02788}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      long[][] longArray0 = new long[0][1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = new long[3];
      longArray1[0] = (-3161L);
      longArray1[1] = (-163L);
      longArray1[2] = (-2444L);
      try { 
        MathArrays.checkNonNegative(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,161 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1506L);
      longArray0[1] = (-915L);
      longArray0[6] = 973L;
      longArray0[3] = (-6155L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1506L);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-915L);
      doubleArray0[3] = (double) (-6155L);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (-915L);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1506.0), 0.0, (-915.0), (-6155.0), 0.0, (-915.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(4.1826511E7, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1506.0), 0.0, (-915.0), (-6155.0), 0.0, (-915.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3012.0), 0.0, (-1830.0), (-12310.0), 0.0, (-1830.0)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-1506.0), 0.0, (-915.0), (-6155.0), 0.0, (-915.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,012 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-1323), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1323);
      intArray1[1] = 0;
      intArray1[2] = (-1323);
      intArray1[3] = 0;
      intArray1[4] = (-1323);
      intArray1[5] = (-1323);
      intArray1[6] = 0;
      intArray1[7] = 0;
      int int0 = MathArrays.distanceInf(intArray1, intArray1);
      assertArrayEquals(new int[] {(-1323), 0, (-1323), 0, (-1323), (-1323), 0, 0}, intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(0, int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1613L);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1613.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1883.757F);
      floatArray0[1] = (-1883.757F);
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-1883.757F);
      floatArray1[3] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1883.757F), (-1883.757F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1883.757F), 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long[][] longArray0 = new long[5][6];
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-368.602396576);
      doubleArray0[1] = (-368.602396576);
      doubleArray0[2] = (-368.602396576);
      doubleArray0[3] = (-368.602396576);
      doubleArray0[4] = (-368.602396576);
      doubleArray0[5] = (-368.602396576);
      doubleArray0[6] = (-368.602396576);
      doubleArray0[7] = 1.1730463525082348E-7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-368.602396576), (-368.602396576), (-368.602396576), (-368.602396576), (-368.602396576), (-368.602396576), (-368.602396576), 1.1730463525082348E-7}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -368.602 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 499.771361908;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {249771.41418337714}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[][] doubleArray2 = new double[2][1];
      doubleArray2[0] = doubleArray1;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {249771.41418337714}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray0 = new long[5][0];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 0;
      longArray3[1] = (long) 0;
      longArray3[2] = (long) 0;
      longArray3[3] = (long) 0;
      longArray3[4] = (long) 0;
      longArray3[5] = (long) 0;
      longArray3[6] = (long) 0;
      longArray3[7] = (long) 0;
      longArray3[8] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) 0;
      longArray4[1] = (-608L);
      longArray4[2] = (long) 0;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = (long) 0;
      longArray5[1] = (long) 0;
      longArray5[2] = (long) 0;
      longArray5[3] = (-608L);
      longArray5[4] = 9218868437227405312L;
      longArray5[5] = (long) 0;
      longArray5[6] = (long) 0;
      longArray5[7] = 1017L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -608 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 587.02788;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 587.02788;
      doubleArray1[3] = 587.02788;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {587.02788, 0.0, 587.02788, 587.02788, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(587.02788, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray0 = new long[2][0];
      long[] longArray1 = new long[1];
      longArray1[0] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1L;
      longArray2[1] = 1L;
      longArray2[2] = 1L;
      longArray2[3] = 1L;
      longArray2[4] = 1L;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      MathArrays.checkNonNegative(longArray1);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray2));
      assertNotSame(longArray1, longArray2);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {587.02788, 0.0, 587.02788, 587.02788, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long[][] longArray0 = new long[1][9];
      long[] longArray1 = new long[4];
      longArray1[0] = 363L;
      longArray1[1] = 1779L;
      longArray1[2] = (-3161L);
      longArray1[3] = (-1949L);
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,161 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1940.1486056245;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1940.1486056245}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3764176.611906692}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (-527);
      intArray0[2] = (-1397);
      intArray0[3] = 2;
      intArray0[4] = 133;
      double double0 = MathArrays.linearCombination((double) 133, 2917.9361837817746, (-2615.236), (-2615.236), (double) (-1397), (-1.0));
      assertEquals(7228941.848138975, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {1940.1486056245}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3764176.611906692}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.scaleInPlace(2917.9361837817746, doubleArray0);
      assertArrayEquals(new double[] {5661229.818265485}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {5661229.818265485}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1330);
      intArray0[2] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1330), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.linearCombination((double) 0, (double) 0, (double) 0, 0.0, (double) 0, (double) 0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1330), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      try { 
        MathArrays.convolve(doubleArray1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1506L);
      longArray0[1] = (-915L);
      longArray0[2] = 973L;
      longArray0[3] = (-6155L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1506L);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1566, (-614));
      assertEquals(1566, objectArray0.length);
      assertNotNull(objectArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      Field<String> field1 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field1, 1149);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-745.5373);
      double double0 = MathArrays.linearCombination((-745.5373), (-745.5373), (-745.5373), (-745.5373));
      assertEquals(1111651.7313825798, double0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-745.5373);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-745.5373), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-745.5373)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1613L);
      longArray0[1] = (-1613L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1613L);
      doubleArray0[1] = (double) (-1613L);
      doubleArray0[2] = (double) (-1613L);
      doubleArray0[3] = (double) 920L;
      doubleArray0[4] = (double) (-1613L);
      doubleArray0[5] = (double) 920L;
      doubleArray0[6] = (double) (-1613L);
      doubleArray0[7] = 4.3466666666666665E18;
      doubleArray0[8] = (double) (-1613L);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {(-1613.0), (-1613.0), (-1613.0), 920.0, (-1613.0), 920.0, (-1613.0), 4.3466666666666665E18, (-1613.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1613.0), (-1613.0), (-1613.0), 920.0, (-1613.0), 920.0, (-1613.0), 4.3466666666666665E18, (-1613.0)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {(-1613.0), (-1613.0), (-1613.0), 920.0, (-1613.0), 920.0, (-1613.0), 4.3466666666666665E18, (-1613.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1613.0), (-1613.0), (-1613.0), 920.0, (-1613.0), 920.0, (-1613.0), 4.3466666666666665E18, (-1613.0)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(4.3466666666666665E18, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147258228, (-127));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2160.85;
      doubleArray2[1] = (-3621.0);
      doubleArray2[2] = (double) 1.0F;
      doubleArray2[3] = 2160.85;
      doubleArray2[4] = (double) 1.0F;
      doubleArray2[5] = (double) 1.0F;
      doubleArray2[6] = (double) 1.0F;
      doubleArray2[7] = 0.7214844226837158;
      doubleArray2[8] = (-3621.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (2,160.85 > -3,621)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) 0;
      float float0 = (-999.931F);
      floatArray1[3] = (-999.931F);
      floatArray1[4] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-999.931F), 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 499.771361908;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = 499.771361908;
      doubleArray0[4] = (double) 0;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (0 < 499.771)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 435;
      intArray0[1] = 19;
      intArray0[2] = (-1613);
      intArray0[3] = (-631);
      intArray0[4] = (-350);
      intArray0[5] = 5;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {435, 19, (-1613), (-631), (-350), 5}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1330);
      intArray0[2] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1330), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.linearCombination((double) 0, (double) 0, (double) 0, 0.0, (double) 0, (double) 0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double double2 = MathArrays.linearCombination((-133.6532902342913), 1.0, (double) 0, 3.834E-20, 0.0, 1.0);
      assertEquals((-133.6532902342913), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.scaleInPlace((-133.6532902342913), doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 973L;
      doubleArray0[3] = (double) (-6155L);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 973L;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) (-6155L);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 973.0, (-6155.0), 0.0, 0.0, 973.0, 0.0, (-6155.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(7.7661508E7, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 973.0, (-6155.0), 0.0, 0.0, 973.0, 0.0, (-6155.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1946.0, (-12310.0), 0.0, 0.0, 1946.0, 0.0, (-12310.0)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double1 = 0.902267575263977;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {0.0, 0.0, 973.0, (-6155.0), 0.0, 0.0, 973.0, 0.0, (-6155.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1946.0, (-12310.0), 0.0, 0.0, 1946.0, 0.0, (-12310.0)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1613L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1613L);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 920L;
      doubleArray0[4] = (double) (-1613L);
      doubleArray0[5] = (double) 920L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = 4.3466666666666665E18;
      doubleArray0[8] = (double) (-1L);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {(-1613.0), 0.0, 0.0, 920.0, (-1613.0), 920.0, 0.0, 4.3466666666666665E18, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1613.0), 0.0, 0.0, 920.0, (-1613.0), 920.0, 0.0, 4.3466666666666665E18, (-1.0)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {(-1613.0), 0.0, 0.0, 920.0, (-1613.0), 920.0, 0.0, 4.3466666666666665E18, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1613.0), 0.0, 0.0, 920.0, (-1613.0), 920.0, 0.0, 4.3466666666666665E18, (-1.0)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(4.3466666666666665E18, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1532), 1075);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = new Double(0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[19];
      floatArray0[0] = (-1883.757F);
      floatArray0[1] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(19, floatArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1213);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 499.771361908;
      doubleArray0[1] = 499.771361908;
      doubleArray0[2] = 499.771361908;
      doubleArray0[3] = 499.771361908;
      doubleArray0[4] = 499.771361908;
      doubleArray0[5] = 499.771361908;
      doubleArray0[6] = 499.771361908;
      doubleArray0[7] = 499.771361908;
      doubleArray0[8] = 499.771361908;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 499.771361908;
      doubleArray2[1] = 499.771361908;
      doubleArray2[2] = 499.771361908;
      doubleArray2[3] = 499.771361908;
      doubleArray2[4] = 499.771361908;
      doubleArray2[5] = 499.771361908;
      doubleArray2[6] = 499.771361908;
      doubleArray2[7] = 499.771361908;
      doubleArray1[3] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1506L);
      longArray0[1] = (-915L);
      longArray0[2] = 973L;
      longArray0[3] = (-6155L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1506L);
      doubleArray0[1] = (double) 973L;
      doubleArray0[2] = (double) (-915L);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 973L;
      doubleArray0[5] = (double) (-915L);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1506.0), 973.0, (-915.0), 0.0, 973.0, (-915.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(5835944.0, double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1506L);
      doubleArray1[1] = (double) (-6155L);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-3012.0), (-12310.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1506.0), (-6155.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      
      double double1 = (-368.602396576);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-1506.0), 973.0, (-915.0), 0.0, 973.0, (-915.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      
      try { 
        MathArrays.checkPositive(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,012 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 134217729;
      intArray0[1] = 0;
      double double2 = MathArrays.linearCombination(Double.NaN, (-1845.0782620441478), (-3290.017742), 1.0, (-3032.8014009), 3.834E-20, (-1119.197665704262), (-2613.375139));
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1330);
      intArray0[2] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1330), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1330);
      intArray1[1] = 1876;
      intArray1[2] = (-695);
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = (-3722);
      intArray1[6] = (-1330);
      intArray1[7] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertArrayEquals(new int[] {0, (-1330), 0}, intArray0);
      assertArrayEquals(new int[] {(-1330), 1876, (-695), 0, 0, (-3722), (-1330), 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(8, intArray1.length);
      assertEquals(3206, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-745.5373);
      double double0 = MathArrays.linearCombination((-745.5373), (-745.5373), (-745.5373), (-745.5373));
      assertEquals(1111651.7313825798, double0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-745.5373);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-745.5373), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-745.5373)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 145);
      assertArrayEquals(new double[] {(-745.5373)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(145, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      double double1 = MathArrays.linearCombination((-745.5373), (-745.5373), (-1.0), (double) 0, (-2711.0363), (-745.5373));
      assertEquals(2577004.54899528, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 145;
      longArray0[7] = (long) 145;
      longArray0[8] = (long) 145;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 145L, 145L, 145L}, longArray0);
      assertEquals(9, longArray0.length);
      
      double double2 = MathArrays.linearCombination((double) 145L, 9.219544613762692E-9, (-2057.5), (double) 0L, (-614.1960461439), 0.07490822288864472);
      assertEquals((-46.00833298503762), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-745.5373), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-745.5373)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(145, doubleArray2.length);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      MathArrays.scaleInPlace((-2057.5), doubleArray2);
      assertArrayEquals(new double[] {(-745.5373)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(145, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {(-745.5373)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(145, doubleArray3.length);
      assertEquals(145, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotNull(doubleArray3);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 145;
      intArray0[1] = 0;
      intArray0[2] = 145;
      intArray0[3] = 145;
      intArray0[4] = 0;
      intArray0[5] = 145;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 145;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2915));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 199;
      intArray0[2] = 0;
      intArray0[3] = (-2708);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      Integer integer0 = new Integer(414);
      assertEquals(414, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, 199, 0, (-2708), 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 199, 0, (-2708), 0, 0}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 199;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 199;
      doubleArray0[4] = 4317.9;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {199.0, 0.0, 0.0, 199.0, 4317.9}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-850));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[2] = 1518.257238233043;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1898, 310);
      assertEquals(1898, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, (-3.5997360512765566E-9));
      assertArrayEquals(new double[] {0.0, 0.0, 1518.257238233043, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, (-3.5997360512765566E-9), -0.0, -0.0, -0.0}, doubleArray3, 0.01);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1330);
      intArray0[2] = 0;
      Integer integer0 = new Integer((-1330));
      assertEquals((-1330), (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, (-1330), 0}, intArray0);
      assertArrayEquals(new int[] {0, (-1330), 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1330), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray1, (-1330));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 199;
      int int0 = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2708);
      long[][] longArray0 = new long[3][5];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 199;
      longArray2[2] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[1] = (long) 0;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-745.5373);
      double double0 = MathArrays.linearCombination((-745.5373), (-745.5373), (-745.5373), (-745.5373));
      assertEquals(1111651.7313825798, double0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-745.5373);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-745.5373), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-745.5373)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[][] longArray0 = new long[5][2];
      long[] longArray1 = new long[2];
      longArray1[0] = (-2805L);
      longArray1[1] = 529L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-2805L);
      longArray2[1] = (-2805L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-2805L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-2805L);
      longArray4[1] = (-2805L);
      longArray4[2] = 529L;
      longArray4[3] = 529L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = 1122L;
      longArray5[1] = (-2805L);
      longArray5[2] = (-2805L);
      longArray5[3] = (-2805L);
      longArray5[4] = (-2805L);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(0.0, Double.NaN, 0.0, Double.NaN, (-1.0), 1.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.scaleInPlace((-1660.3687), doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long[][] longArrayArray0 = null;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 3.834E-20;
      doubleArray3[2] = 3.834E-20;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      int int0 = 2200;
      int[] intArray0 = new int[5];
      intArray0[0] = 2200;
      intArray0[1] = (-527);
      intArray0[2] = (-527);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-2391), (-527));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1613L);
      longArray0[1] = (-1613L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1613L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1613L);
      doubleArray0[3] = (double) 920L;
      doubleArray0[4] = (double) (-1613L);
      doubleArray0[5] = (double) 920L;
      doubleArray0[6] = (double) (-1613L);
      doubleArray0[7] = 4.3466666666666665E18;
      doubleArray0[8] = (double) (-1L);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {(-1613.0), (-1.0), (-1613.0), 920.0, (-1613.0), 920.0, (-1613.0), 4.3466666666666665E18, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1613.0), (-1.0), (-1613.0), 920.0, (-1613.0), 920.0, (-1613.0), 4.3466666666666665E18, (-1.0)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {(-1613.0), (-1.0), (-1613.0), 920.0, (-1613.0), 920.0, (-1613.0), 4.3466666666666665E18, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1613.0), (-1.0), (-1613.0), 920.0, (-1613.0), 920.0, (-1613.0), 4.3466666666666665E18, (-1.0)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(4.3466666666666665E18, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2147258228, (-127));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1033.0);
      doubleArray0[2] = 3649.6;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {1.0, (-1033.0), 3649.6, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      assertArrayEquals(new double[] {1.0, (-1033.0), 3649.6, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("y&W{>M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.y&W{>M
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 990.824944);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1883.757F);
      floatArray0[1] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1883.757F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1213);
      intArray0[2] = 1876;
      intArray0[3] = 0;
      intArray0[4] = (-3985);
      intArray0[5] = (-603);
      intArray0[6] = 363;
      intArray0[7] = 134217729;
      intArray0[8] = 287;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, (-1213), 1876, 0, (-3985), (-603), 363, 134217729, 287}, intArray1);
      assertArrayEquals(new int[] {0, (-1213), 1876, 0, (-3985), (-603), 363, 134217729, 287}, intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 990.824944);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1883.757F);
      floatArray0[1] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1883.757F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1213);
      intArray0[2] = 1876;
      intArray0[3] = 0;
      intArray0[4] = (-3985);
      intArray0[5] = (-603);
      intArray0[6] = 363;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1360.8;
      doubleArray0[1] = 1360.8;
      doubleArray0[2] = 1360.8;
      doubleArray0[3] = 1360.8;
      doubleArray0[4] = 1360.8;
      doubleArray0[5] = 1360.8;
      doubleArray0[6] = 1360.8;
      double[][] doubleArray1 = new double[7][3];
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1360.8;
      doubleArray1[0] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1833.7798F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      double double0 = MathArrays.linearCombination(2772.717364, 1360.8, (double) (-1833.7798F), 1360.8, (double) 0.0F, 2928.4644, (double) 0.0F, (double) 0.0F);
      assertEquals(1277706.2572905752, double0, 0.01);
      
      floatArray0[4] = 3.4028235E38F;
      floatArray0[5] = 2289.2578F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1833.7798F), 0.0F, 0.0F, 0.0F, 3.4028235E38F, 2289.2578F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray0, 1360.8);
      assertArrayEquals(new double[] {1360.8, 1360.8, 1360.8, 1360.8, 1360.8, 1360.8, 1360.8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {194.39999999999998, 194.39999999999998, 194.39999999999998, 194.39999999999998, 194.39999999999998, 194.39999999999998, 194.39999999999998}, doubleArray3, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      MathArrays.checkPositive(doubleArray4);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertEquals(0, doubleArray4.length);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[3];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 499.771361908;
      doubleArray0[1] = 499.771361908;
      doubleArray0[2] = 499.771361908;
      doubleArray0[3] = 499.771361908;
      doubleArray0[4] = 499.771361908;
      doubleArray0[5] = 499.771361908;
      doubleArray0[6] = 499.771361908;
      doubleArray0[7] = 499.771361908;
      doubleArray0[8] = 499.771361908;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {499.771361908, 499.771361908, 499.771361908, 499.771361908, 499.771361908, 499.771361908, 499.771361908, 499.771361908, 499.771361908}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2137782504, 2147258228);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2.356194490192345);
      doubleArray0[1] = (-2.356194490192345);
      doubleArray0[0] = (-2.356194490192345);
      doubleArray0[3] = (-2.356194490192345);
      doubleArray0[4] = (-2.356194490192345);
      doubleArray0[5] = (-2.356194490192345);
      doubleArray0[6] = 1.1730463525082348E-7;
      double[] doubleArray1 = MathArrays.scale((-2.356194490192345), doubleArray0);
      assertArrayEquals(new double[] {(-2.356194490192345), (-2.356194490192345), 0.0, (-2.356194490192345), (-2.356194490192345), (-2.356194490192345), 1.1730463525082348E-7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.551652475612764, 5.551652475612764, -0.0, 5.551652475612764, 5.551652475612764, 5.551652475612764, (-2.76392535252013E-7)}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2.356194490192345), (-2.356194490192345), 0.0, (-2.356194490192345), (-2.356194490192345), (-2.356194490192345), 1.1730463525082348E-7}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-156L);
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (-954L);
      longArray0[5] = 1418L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -156 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2353665.3168326933;
      long[] longArray0 = new long[6];
      longArray0[0] = 1418L;
      longArray0[2] = 1418L;
      longArray0[3] = 1418L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1418L, 0L, 1418L, 1418L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 54;
      intArray0[1] = 54;
      intArray0[2] = 54;
      intArray0[3] = 54;
      intArray0[4] = 54;
      intArray0[5] = 54;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {54, 54, 54, 54, 54, 54}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1360.8;
      doubleArray0[1] = 1360.8;
      doubleArray0[2] = 1360.8;
      doubleArray0[3] = 1360.8;
      doubleArray0[4] = 1360.8;
      doubleArray0[5] = 1360.8;
      doubleArray0[6] = 1360.8;
      double[][] doubleArray1 = new double[7][3];
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1360.8;
      doubleArray1[0] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1833.7798F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      double double0 = MathArrays.linearCombination(2772.717364, 1360.8, (double) (-1833.7798F), 1360.8, (double) 0.0F, 2928.4644, (double) 0.0F, (double) 0.0F);
      assertEquals(1277706.2572905752, double0, 0.01);
      
      floatArray0[5] = 2289.2578F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1833.7798F), 0.0F, 0.0F, 0.0F, 0.0F, 2289.2578F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray0, 1360.8);
      assertArrayEquals(new double[] {1360.8, 1360.8, 1360.8, 1360.8, 1360.8, 1360.8, 1360.8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {194.39999999999998, 194.39999999999998, 194.39999999999998, 194.39999999999998, 194.39999999999998, 194.39999999999998, 194.39999999999998}, doubleArray3, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-6759);
      intArray0[1] = 215;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-6759), 215}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 108;
      intArray0[1] = 0;
      double double0 = MathArrays.linearCombination((double) 3.4028235E38F, 1929.9494859, (double) 0.0F, 1797.995712, 0.0, 418.19687347768, 0.0, 1929.9494859);
      assertEquals(6.567277399558743E41, double0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2772.717364;
      doubleArray0[1] = 418.19687347768;
      doubleArray0[2] = (double) 108;
      doubleArray0[3] = 418.19687347768;
      doubleArray0[4] = 418.19687347768;
      doubleArray0[5] = (double) 108;
      doubleArray0[6] = (double) (-4394);
      doubleArray0[7] = (double) (-4394);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 6.567277399558743E41);
      assertArrayEquals(new double[] {(-4.006697047366291E41), (-6.0431265008691125E40), (-1.560646918917479E40), (-6.0431265008691125E40), (-6.0431265008691125E40), (-1.560646918917479E40), 6.349520890484632E41, 6.349520890484632E41}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2772.717364, 418.19687347768, 108.0, 418.19687347768, 418.19687347768, 108.0, (-4394.0), (-4394.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 2772.717364);
      assertArrayEquals(new double[] {(-1691.635330687644), (-255.1419829309202), (-65.89081818664066), (-255.1419829309202), (-255.1419829309202), (-65.89081818664066), 2680.7801399268433, 2680.7801399268433}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2772.717364, 418.19687347768, 108.0, 418.19687347768, 418.19687347768, 108.0, (-4394.0), (-4394.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2.356194490192345);
      doubleArray0[1] = (-2.356194490192345);
      doubleArray0[2] = (-2.356194490192345);
      doubleArray0[3] = (-2.356194490192345);
      doubleArray0[4] = (-2.356194490192345);
      doubleArray0[5] = (-2.356194490192345);
      doubleArray0[6] = 1.1730463525082348E-7;
      double[] doubleArray1 = MathArrays.scale((-2.356194490192345), doubleArray0);
      assertArrayEquals(new double[] {(-2.356194490192345), (-2.356194490192345), (-2.356194490192345), (-2.356194490192345), (-2.356194490192345), (-2.356194490192345), 1.1730463525082348E-7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.551652475612764, 5.551652475612764, 5.551652475612764, 5.551652475612764, 5.551652475612764, 5.551652475612764, (-2.76392535252013E-7)}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2.356194490192345), (-2.356194490192345), (-2.356194490192345), (-2.356194490192345), (-2.356194490192345), (-2.356194490192345), 1.1730463525082348E-7}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-156L);
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (-954L);
      longArray0[5] = 1418L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -156 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1797.995712;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 3.142)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 28.3;
      doubleArray0[2] = 726.2;
      doubleArray0[3] = 1443.40782223587;
      doubleArray0[4] = 448.9074335;
      doubleArray0[5] = 289.1529919834;
      doubleArray0[6] = (-3158.7215975);
      doubleArray0[7] = 926.12990121;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {28.3, 0.0, 726.2, 1443.40782223587, 448.9074335, 289.1529919834, (-3158.7215975), 926.12990121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {800.89, 0.0, 527366.4400000001, 2083426.141291697, 201517.88385155695, 83609.45277295218, 9977522.130512951, 857716.5939152443}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {28.3, 0.0, 726.2, 1443.40782223587, 448.9074335, 289.1529919834, (-3158.7215975), 926.12990121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {800.89, 0.0, 527366.4400000001, 2083426.141291697, 201517.88385155695, 83609.45277295218, 9977522.130512951, 857716.5939152443}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(1.3731256155792972E7, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {28.3, 0.0, 726.2, 1443.40782223587, 448.9074335, 289.1529919834, (-3158.7215975), 926.12990121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {800.89, 0.0, 527366.4400000001, 2083426.141291697, 201517.88385155695, 83609.45277295218, 9977522.130512951, 857716.5939152443}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0353356890459364, Double.NaN, 0.0013770311209033324, 6.928048917255958E-4, 0.0022276307438335165, 0.0034583768030227026, (-3.165837726222721E-4), 0.001079762135628585}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {28.3, 0.0, 726.2, 1443.40782223587, 448.9074335, 289.1529919834, (-3158.7215975), 926.12990121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {800.89, 0.0, 527366.4400000001, 2083426.141291697, 201517.88385155695, 83609.45277295218, 9977522.130512951, 857716.5939152443}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0353356890459364, Double.NaN, 0.0013770311209033324, 6.928048917255958E-4, 0.0022276307438335165, 0.0034583768030227026, (-3.165837726222721E-4), 0.001079762135628585}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, 0.9999999999999999, 1.0, 1.0, 0.9999999999999999}, doubleArray3, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 990.824944);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1883.757F);
      floatArray0[1] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1883.757F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1213);
      intArray0[2] = 1876;
      intArray0[3] = 0;
      intArray0[4] = (-1213);
      intArray0[5] = (-603);
      intArray0[6] = 363;
      intArray0[7] = 134217729;
      intArray0[8] = 287;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, (-1213), 1876, 0, (-1213), (-603), 363, 134217729, 287}, intArray1);
      assertArrayEquals(new int[] {0, (-1213), 1876, 0, (-1213), (-603), 363, 134217729, 287}, intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) (-1213);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 134217729;
      doubleArray1[4] = 990.824944;
      doubleArray1[5] = (double) 0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 993;
      intArray0[1] = (-1183);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1183);
      MathArrays.scaleInPlace((-1183), doubleArray0);
      assertArrayEquals(new double[] {1399489.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination((double) (-1183), 0.9974949359893799, (-1613.0), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(Double.NaN, (-2827.42849432), (-4568.396720033469), Double.NaN, 0.0, 3303.8901376);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1269.82761046841);
      double double0 = new Double((-1269.82761046841));
      assertEquals((-1269.82761046841), double0, 0.01);
      
      MathArrays.scaleInPlace((-1269.82761046841), doubleArray0);
      assertArrayEquals(new double[] {1612462.1603079122}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-1269.82761046841), 1612462.1603079122, 0.0, 1612462.1603079122);
      assertEquals((-2.0475489719945264E9), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = new Double(1690.00342207);
      assertEquals(1690.00342207, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 926.12990121;
      doubleArray1[2] = 1443.40782223587;
      doubleArray1[3] = 926.12990121;
      doubleArray1[4] = 289.1529919834;
      doubleArray1[5] = 28.3;
      doubleArray1[6] = 448.9074335;
      doubleArray1[7] = 448.9074335;
      doubleArray1[8] = 3.834E-20;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      float float0 = 0.0F;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1518.257238233043);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-1518.257238233043)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray2, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 499.771361908;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {249771.41418337714}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[9][9];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      doubleArray2[7] = doubleArray0;
      doubleArray2[8] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("|[z])dcH'81^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.|[z])dcH'81^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 499.771361908;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {249771.41418337714}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 778;
      intArray0[1] = 0;
      intArray0[2] = (-1200);
      intArray0[3] = (-3202);
      intArray0[4] = 203;
      intArray0[5] = (-2377);
      intArray0[6] = 0;
      intArray0[7] = 1661;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {778, 0, (-1200), (-3202), 203, (-2377), 0, 1661}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[9][9];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray0;
      doubleArray2[8] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {499.771361908}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[3];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 499.771361908;
      doubleArray0[1] = 499.771361908;
      doubleArray0[2] = 499.771361908;
      doubleArray0[3] = 499.771361908;
      doubleArray0[4] = 499.771361908;
      doubleArray0[5] = 499.771361908;
      doubleArray0[6] = 499.771361908;
      doubleArray0[7] = 499.771361908;
      doubleArray0[8] = 499.771361908;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {499.771361908, 499.771361908, 499.771361908, 499.771361908, 499.771361908, 499.771361908, 499.771361908, 499.771361908, 499.771361908}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2137782504, 2147258228);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 199;
      int int0 = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2708);
      long long0 = 0L;
      long[][] longArray0 = new long[3][5];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 199;
      longArray2[2] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[1] = (long) 0;
      longArray3[2] = (long) (-2708);
      longArray3[3] = (long) 0;
      longArray3[4] = 0L;
      longArray3[5] = (long) 199;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-745.5373);
      double double0 = MathArrays.linearCombination((-745.5373), (-745.5373), (-745.5373), (-745.5373));
      assertEquals(1111651.7313825798, double0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-745.5373);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-745.5373), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-745.5373)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-695);
      intArray0[1] = 1876;
      intArray0[2] = 0;
      intArray0[3] = (-1213);
      intArray0[4] = 1876;
      intArray0[5] = 0;
      intArray0[6] = (-3985);
      intArray0[7] = 2;
      intArray0[8] = 363;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {(-695), 1876, 0, (-1213), 1876, 0, (-3985), 2, 363}, intArray1);
      assertArrayEquals(new int[] {(-695), 1876, 0, (-1213), 1876, 0, (-3985), 2, 363}, intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1330);
      intArray0[2] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1330), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.linearCombination((double) 0, (double) 0, (double) 0, 0.0, (double) 0, (double) 0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double double2 = MathArrays.linearCombination((-133.6532902342913), 1.0, (double) 0, 3.834E-20, 0.0, 1.0);
      assertEquals((-133.6532902342913), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.scaleInPlace((-133.6532902342913), doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (-133.6532902342913);
      doubleArray3[6] = 3.834E-20;
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1613L);
      longArray0[1] = (-1L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1613L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) 912L;
      doubleArray0[4] = (double) (-1613L);
      doubleArray0[5] = (double) 912L;
      doubleArray0[6] = (double) (-1L);
      doubleArray0[7] = 4.3466666666666665E18;
      doubleArray0[8] = (double) (-1L);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {(-1613.0), (-1.0), (-1.0), 912.0, (-1613.0), 912.0, (-1.0), 4.3466666666666665E18, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1613.0), (-1.0), (-1.0), 912.0, (-1613.0), 912.0, (-1.0), 4.3466666666666665E18, (-1.0)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {(-1613.0), (-1.0), (-1.0), 912.0, (-1613.0), 912.0, (-1.0), 4.3466666666666665E18, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1613.0), (-1.0), (-1.0), 912.0, (-1613.0), 912.0, (-1.0), 4.3466666666666665E18, (-1.0)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(4.3466666666666665E18, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (-1 >= -1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1330);
      intArray0[2] = 0;
      double double0 = new Integer((-1330));
      assertEquals((-1330), double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, (-1330), 0}, intArray0);
      assertArrayEquals(new int[] {0, (-1330), 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1330), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[8][0];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      doubleArray0[7] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 1665.4849386315352;
      double double2 = (-1099.3365765);
      double double3 = MathArrays.linearCombination(0.0, 1665.4849386315352, 1665.4849386315352, 1665.4849386315352, (-3.141592653589793), (-1832.3), (-1099.3365765), 3.834E-20);
      assertEquals(2779596.4210276613, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-1659.32474510107);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 1427.1051;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 3.32;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 3.834E-20, (-1659.32474510107), 3.834E-20, 1427.1051, Double.NaN, 1.304E19, 0.0, 3.32}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, Double.NaN, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-29.86023810283), (-29.86023810283), 0.0);
      assertEquals(0.0, double0, 0.01);
      
      long[][] longArray0 = new long[9][2];
      long[] longArray1 = new long[1];
      longArray1[0] = (-2362L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-2362L);
      longArray2[1] = (-2362L);
      longArray2[2] = (-2362L);
      longArray2[3] = (-2362L);
      longArray2[4] = (-2362L);
      longArray2[5] = (-2362L);
      longArray2[6] = (-2362L);
      longArray2[7] = (-2362L);
      longArray2[8] = (-2362L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-2362L);
      longArray3[1] = (-2362L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-2362L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = (-2362L);
      longArray5[1] = (-2362L);
      longArray5[2] = (-2362L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = (-2362L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      
      longArray0[6] = longArray7;
      long[] longArray8 = new long[6];
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray4));
      
      longArray8[0] = 0L;
      longArray8[1] = (-2362L);
      longArray8[2] = (-2362L);
      longArray8[3] = (-2362L);
      longArray8[4] = 1L;
      longArray8[5] = (-2362L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[3];
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray8));
      
      longArray9[0] = 1L;
      longArray9[1] = 0L;
      longArray9[2] = (-2362L);
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1225.855, 0.0, 2917.9361837817746, (-2615.236), 2917.9361837817746, 763.981, 0.0, 2917.9361837817746);
      assertEquals((-5401843.949906928), double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1940.1486056245;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1940.1486056245}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1330);
      intArray0[2] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1330), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.linearCombination((double) 0, (double) 0, (double) 0, 0.0, (double) 0, (double) 0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double double2 = MathArrays.linearCombination((-133.6532902342913), 1.0, (double) 0, 3.834E-20, 0.0, 1.0);
      assertEquals((-133.6532902342913), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.scaleInPlace((-133.6532902342913), doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (-133.6532902342913);
      doubleArray3[6] = 3.834E-20;
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 4932.68;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2658.72719);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-1.0), 3.834E-20, 4932.68, 0.0, (-2658.72719)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 716;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 716;
      intArray1[1] = 716;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertArrayEquals(new int[] {716}, intArray0);
      assertArrayEquals(new int[] {716, 716}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[][] doubleArray1 = new double[6][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {4932.68, (-1.0), 1.0, 0.0, (-2658.72719), 3.834E-20}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1683.93749475), -0.0, (-1683.93749475), 1.34217729E8);
      assertEquals((-2.2601426632329443E11), double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 152;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 134217729;
      intArray0[4] = 0;
      intArray0[5] = 2024;
      intArray0[6] = 228;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {152, 0, 0, 134217729, 0, 2024, 228}, intArray0);
      assertArrayEquals(new int[] {152, 0, 0, 134217729, 0, 2024, 228}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1683.93749475);
      doubleArray0[3] = (double) 2024;
      doubleArray0[4] = (-1683.93749475);
      doubleArray0[5] = (double) 152;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 134217729;
      doubleArray0[8] = (double) 2024;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1683.93749475), 2024.0, (-1683.93749475), 152.0, 0.0, 1.34217729E8, 2024.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.8014398791804988E16, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1360.8;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1360.8;
      doubleArray1[1] = 1360.8;
      doubleArray1[2] = 1360.8;
      doubleArray1[3] = 1360.8;
      doubleArray1[4] = 1360.8;
      doubleArray1[5] = 20.0;
      doubleArray1[6] = 1360.8;
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1360.8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1360.8, 1360.8, 1360.8, 1360.8, 1360.8, 20.0, 1360.8}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[7][3];
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1360.8;
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1643.81F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1643.81F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2300;
      intArray0[1] = 2800;
      intArray0[2] = (-531);
      intArray0[3] = 448;
      intArray0[4] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {2300, 2800, (-531), 448, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1643.81F);
      doubleArray0[1] = (double) 2300;
      doubleArray0[2] = (double) 448;
      doubleArray0[3] = (double) (-1643.81F);
      doubleArray0[4] = (double) 448;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,643.81 <= 2,300)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[9];
      longArray1[0] = (-1506L);
      longArray1[1] = (-915L);
      longArray1[2] = 973L;
      longArray1[3] = (-6155L);
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray1[6] = 2487L;
      longArray1[7] = 0L;
      longArray1[8] = 1852L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1033.0);
      doubleArray0[2] = 3649.6;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-1033.0), 3649.6, 0.0, 2.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1.438667416E7, double0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1486.8229055986235;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 3649.6;
      doubleArray1[3] = (-1033.0);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-368.602396576);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2013.4851258623;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-368.602396576), 0.0, 2013.4851258623}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-368.602396576), 0.0, 2013.4851258623}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1518.257238233043);
      doubleArray0[1] = (-220.36396117711);
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {(-1518.257238233043), (-220.36396117711), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1518.257238233043), (-220.36396117711), 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1518.257238233043), (-220.36396117711), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1534.1660004160872, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      float[] floatArray0 = new float[3];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1415.1709F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 1415.1709F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-1518.257238233043), (-220.36396117711), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      int int0 = (-3512);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-3512));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 134217729;
      intArray0[1] = 0;
      intArray0[2] = 2200;
      intArray0[3] = (-527);
      intArray0[4] = (-965);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {134217729, 0, 2200, (-527), (-965)}, intArray0);
      assertArrayEquals(new int[] {134217729, 0, 2200, (-527), (-965)}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1797.995712;
      doubleArray0[0] = 1797.995712;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = 0.0;
      double double1 = (-706.0);
      doubleArray0[4] = (-706.0);
      double double2 = (-3168.9191);
      doubleArray0[5] = (-3168.9191);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1797.995712, 0.0, 3.141592653589793, 0.0, (-706.0), (-3168.9191)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 3.142)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3621.0);
      doubleArray0[4] = 2160.85;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4222.0023622308845;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 1334.891799321;
      doubleArray0[3] = (-3032.8014009);
      doubleArray0[4] = 1558.4954620747;
      doubleArray0[5] = 20.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,032.801 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1484.0903);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1667.88;
      doubleArray0[3] = 35.428;
      doubleArray0[4] = 1922.781710965394;
      doubleArray0[5] = (-3928.0);
      doubleArray0[6] = Double.NaN;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {(-1484.0903), 0.0, 1667.88, 35.428, 1922.781710965394, (-3928.0), Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-20.0);
      int int0 = 44;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 44);
      assertArrayEquals(new double[] {(-20.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(44, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 236;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 236);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double double0 = (-1396.300724851827);
      double double1 = 3246.1;
      double double2 = 100.0;
      double double3 = MathArrays.linearCombination((-1396.300724851827), (-1396.300724851827), (-1396.300724851827), (-1396.300724851827), 1.304E19, 3246.1, (-1396.300724851827), 100.0);
      assertEquals(4.2329144E22, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-745.5373);
      doubleArray0[1] = Double.NaN;
      double double0 = 424.7727612917088;
      doubleArray0[2] = 424.7727612917088;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      double double1 = 587.02788;
      doubleArray0[5] = 587.02788;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-745.5373), Double.NaN, 424.7727612917088, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 587.02788}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-745.5373), Double.NaN, 424.7727612917088, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 587.02788}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (424.773 >= -\u221E)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 108;
      intArray0[1] = 0;
      intArray0[2] = (-4394);
      intArray0[3] = (-264);
      intArray0[4] = 0;
      intArray0[5] = 1379;
      intArray0[6] = 17;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 17;
      doubleArray0[2] = (double) 1379;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-4394);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 17;
      doubleArray0[7] = (double) 1379;
      doubleArray0[8] = (double) (-264);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(17.0, doubleArray1);
      assertEquals(17, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 499.771361908;
      MathArrays.convolve(doubleArray0, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 778;
      intArray0[1] = 0;
      intArray0[2] = (-1200);
      intArray0[3] = (-3202);
      intArray0[4] = 203;
      intArray0[5] = (-2377);
      intArray0[6] = 0;
      intArray0[7] = 1661;
      MathArrays.distance1(intArray0, intArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1940.1486056245;
      MathArrays.convolve(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[1] = (-527);
      intArray0[2] = (-1397);
      intArray0[3] = 2;
      intArray0[4] = 133;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray1 = new double[0];
      MathArrays.checkPositive(doubleArray1);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 28.3;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 726.2;
      doubleArray0[3] = 1443.40782223587;
      doubleArray0[4] = 448.9074335;
      doubleArray0[5] = 289.1529919834;
      doubleArray0[6] = (-3158.7215975);
      doubleArray0[7] = 926.12990121;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray1);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      MathArrays.ebeMultiply(doubleArray0, doubleArray2);
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1842.951;
      doubleArray0[2] = 1599.3164;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 638.954502;
      doubleArray0[6] = (-535.385);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1842.951, 1599.3164, 0.0, 0.0, 638.954502, (-535.385), 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2200;
      intArray0[1] = (-527);
      intArray0[2] = (-527);
      MathArrays.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Integer>>) null, (-127));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 208);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-359);
      intArray0[1] = (-460);
      intArray0[2] = (-1010);
      intArray0[3] = (-813);
      intArray0[4] = 258;
      intArray0[5] = (-1467);
      intArray0[6] = 0;
      intArray0[7] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-359), (-460), (-1010), (-813), 258, (-1467), 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = -0.0;
      doubleArray0[2] = 1970.283422823;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = (-1318.24998);
      doubleArray0[6] = 2836.99;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("8obN;>|FIMrT>4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.8obN;>|FIMrT>4
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4330.98;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-781.29214622);
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 683.1829182868097;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1951));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 199;
      intArray0[2] = 0;
      intArray0[3] = (-2708);
      intArray0[4] = (-1758);
      int int0 = 310;
      intArray0[5] = 310;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale(0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1269.82761046841);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.linearCombination(0.0, -0.0, 0.0, -0.0);
      MathArrays.linearCombination(1690.00342207, 3.32, 0.0, 0.0, 1690.00342207, 0.0);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
