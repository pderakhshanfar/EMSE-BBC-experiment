/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 17:15:02 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 3127.7099609375;
      doubleArray0[2] = 3127.7099609375;
      doubleArray0[3] = (-1316.404005);
      doubleArray0[4] = (-1403.8);
      doubleArray0[5] = 1251.304;
      doubleArray0[6] = (-2170.823);
      doubleArray0[7] = 3159504.0530103818;
      doubleArray0[8] = 1777.499382;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 3127.7099609375, 3127.7099609375, (-1316.404005), (-1403.8), 1251.304, (-2170.823), 3159504.0530103818, 1777.499382}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3328;
      intArray0[1] = 830;
      intArray0[2] = (-2146835618);
      intArray0[3] = (-394);
      intArray0[4] = 247;
      intArray0[5] = 2146980724;
      intArray0[6] = (-95);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 830;
      intArray1[1] = 2146980724;
      intArray1[2] = 247;
      intArray1[3] = (-95);
      intArray1[4] = 830;
      intArray1[5] = (-95);
      intArray1[6] = 2146980724;
      intArray1[7] = (-95);
      intArray1[8] = (-95);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(7, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals((-2153815), int0);
      assertArrayEquals(new int[] {830, 2146980724, 247, (-95), 830, (-95), 2146980724, (-95), (-95)}, intArray1);
      assertArrayEquals(new int[] {3328, 830, (-2146835618), (-394), 247, 2146980724, (-95)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-876.67535583);
      doubleArray0[1] = (-234.5079);
      doubleArray0[2] = (-876.67535583);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-876.67535583);
      doubleArray0[5] = (-876.67535583);
      doubleArray0[6] = (-876.67535583);
      doubleArray0[7] = (-876.67535583);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.2099079473622963E7);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-876.67535583), (-234.5079), (-876.67535583), 1.304E19, (-876.67535583), (-876.67535583), (-876.67535583), (-876.67535583)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.485714598240327E-9), (-3.974239815408303E-10), (-1.485714598240327E-9), 2.2099079473622967E7, (-1.485714598240327E-9), (-1.485714598240327E-9), (-1.485714598240327E-9), (-1.485714598240327E-9)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale((-876.67535583), doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-876.67535583), (-234.5079), (-876.67535583), 1.304E19, (-876.67535583), (-876.67535583), (-876.67535583), (-876.67535583)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.485714598240327E-9), (-3.974239815408303E-10), (-1.485714598240327E-9), 2.2099079473622967E7, (-1.485714598240327E-9), (-1.485714598240327E-9), (-1.485714598240327E-9), (-1.485714598240327E-9)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.302489374074164E-6, 3.4841181043268273E-7, 1.302489374074164E-6, (-1.9373718361053864E10), 1.302489374074164E-6, 1.302489374074164E-6, 1.302489374074164E-6, 1.302489374074164E-6}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals((-2.5263328742814236E29), double0, 0.01);
      assertArrayEquals(new double[] {(-876.67535583), (-234.5079), (-876.67535583), 1.304E19, (-876.67535583), (-876.67535583), (-876.67535583), (-876.67535583)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.485714598240327E-9), (-3.974239815408303E-10), (-1.485714598240327E-9), 2.2099079473622967E7, (-1.485714598240327E-9), (-1.485714598240327E-9), (-1.485714598240327E-9), (-1.485714598240327E-9)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.302489374074164E-6, 3.4841181043268273E-7, 1.302489374074164E-6, (-1.9373718361053864E10), 1.302489374074164E-6, 1.302489374074164E-6, 1.302489374074164E-6, 1.302489374074164E-6}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1.304E19;
      doubleArray3[1] = (-2.5263328742814236E29);
      try { 
        MathArrays.ebeSubtract(doubleArray3, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3127.71F);
      floatArray0[2] = Float.NEGATIVE_INFINITY;
      floatArray0[3] = 1.0F;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-3127.71F);
      floatArray1[1] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-3127.71F), Float.NEGATIVE_INFINITY, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3127.71F), Float.NEGATIVE_INFINITY}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[4] = 139.239334264;
      doubleArray0[5] = (double) (-3127.71F);
      doubleArray0[6] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[7] = (double) Float.NEGATIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 139.239334264, (-3127.7099609375), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 139.239334264, (-3127.7099609375)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-4418.9604F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.4E-45F);
      floatArray0[3] = -0.0F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-1.4E-45F);
      floatArray1[2] = (-4418.9604F);
      floatArray1[3] = -0.0F;
      floatArray1[4] = (-4418.9604F);
      floatArray1[5] = -0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-4418.9604F), 0.0F, (-1.4E-45F), -0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.4E-45F), (-4418.9604F), -0.0F, (-4418.9604F), -0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-4418.9604F);
      doubleArray0[1] = 1877696.9284159923;
      doubleArray0[2] = (double) (-1.4E-45F);
      doubleArray0[3] = (-0.05417713522911072);
      doubleArray0[4] = (double) (-1.4E-45F);
      doubleArray0[5] = (double) -0.0F;
      doubleArray0[6] = (double) (-1.4E-45F);
      doubleArray0[7] = (double) (-4418.9604F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1877707.3279416466, double0, 0.01);
      assertArrayEquals(new double[] {(-4418.96044921875), 1877696.9284159923, (-1.401298464324817E-45), (-0.05417713522911072), (-1.401298464324817E-45), -0.0, (-1.401298464324817E-45), (-4418.96044921875)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-4418.96044921875), 1877696.9284159923, (-1.401298464324817E-45), (-0.05417713522911072), (-1.401298464324817E-45), -0.0, (-1.401298464324817E-45), (-4418.96044921875)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4418.96044921875), 1877696.9284159923, (-1.401298464324817E-45), (-0.05417713522911072), (-1.401298464324817E-45), -0.0, (-1.401298464324817E-45), (-4418.96044921875)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long[][] longArray0 = new long[0][9];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2497.355636;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-7.800414592973399E-9);
      doubleArray0[3] = (-4474.120951);
      doubleArray0[4] = 1.44888888888888883E18;
      doubleArray0[5] = 1.625;
      doubleArray0[6] = 0.07073719799518585;
      doubleArray0[7] = 5.669184079525E-24;
      doubleArray0[8] = 781.065112039348;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.44888888888888883E18, double0, 0.01);
      assertArrayEquals(new double[] {2497.355636, 3.834E-20, (-7.800414592973399E-9), (-4474.120951), 1.44888888888888883E18, 1.625, 0.07073719799518585, 5.669184079525E-24, 781.065112039348}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.44888888888888883E18;
      doubleArray0[1] = 692.7664085619009;
      doubleArray0[2] = 903.634758293131;
      doubleArray0[3] = 3387.86298262;
      doubleArray0[4] = 0.19999998807907104;
      doubleArray0[5] = 2107.7116951;
      doubleArray0[6] = 0.9305076599121094;
      doubleArray0[7] = (-1875.8912316);
      doubleArray0[8] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1875.8912316), Double.NaN, 2107.7116951, 692.7664085619009, 3387.86298262, 1.44888888888888883E18, 0.9305076599121094, 903.634758293131, 0.19999998807907104}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[3][0];
      longArray0[0] = null;
      longArray0[1] = null;
      longArray0[2] = null;
      // Undeclared exception!
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 430.7100247191395;
      doubleArray0[1] = 492.0;
      doubleArray0[2] = (-4090.6620131099166);
      doubleArray0[3] = 1533.2681932;
      doubleArray0[4] = (-828.419146);
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 1.34217729E8;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 4.9E-324;
      try { 
        MathArrays.normalizeArray(doubleArray0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4553.982104156);
      doubleArray0[1] = (-4553.982104156);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(6440.30325450178, double0, 0.01);
      assertArrayEquals(new double[] {(-4553.982104156), (-4553.982104156)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      float float0 = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 436.0F;
      floatArray0[3] = 1380.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      float float1 = 1428.1F;
      floatArray0[6] = 1428.1F;
      float float2 = 3026.0F;
      floatArray0[7] = 3026.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 436.0F, 1380.0F, 0.0F, 1.0F, 1428.1F, 3026.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      int int0 = 9999;
      int[] intArray1 = MathArrays.copyOf(intArray0, 9999);
      assertEquals(0, intArray0.length);
      assertEquals(9999, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      MathArrays.distanceInf(intArray1, intArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2812.608449997);
      doubleArray0[1] = (-1811.5164315);
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (-20.0);
      doubleArray0[4] = (-0.12502530217170715);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = null;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-0.12502530217170715);
      doubleArray1[5] = doubleArray2;
      doubleArray1[6] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2116.7643279;
      doubleArray0[1] = (-1399.48297962);
      doubleArray0[2] = (-2383.8262466);
      doubleArray0[3] = 2534.95;
      doubleArray0[4] = (-48.2442786310797);
      doubleArray0[5] = 4964.255377855876;
      doubleArray0[6] = (-514.70286137463);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2116.7643279, (-1399.48297962), (-2383.8262466), 2534.95, (-48.2442786310797), 4964.255377855876, (-514.70286137463)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2116.7643279, (-1399.48297962), (-2383.8262466), 2534.95, (-48.2442786310797), 4964.255377855876, (-514.70286137463)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4233.5286558, (-2798.96595924), (-4767.6524932), 5069.9, (-96.4885572621594), 9928.510755711752, (-1029.40572274926)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      Integer[] integerArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      Double[] doubleArray3 = new Double[4];
      Double double0 = new Double(3.834E-20);
      assertEquals(3.834E-20, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray3[0] = double0;
      Double double1 = new Double(3.834E-20);
      assertEquals(3.834E-20, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray3[1] = double1;
      Double double2 = new Double((double) doubleArray3[1]);
      assertEquals(4, doubleArray3.length);
      assertEquals(3.834E-20, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      
      doubleArray3[2] = double2;
      Double double3 = new Double(1.304E19);
      assertEquals(1.304E19, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray3[3] = double3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, false);
      assertEquals(4, doubleArray3.length);
      assertFalse(boolean0);
      
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) doubleArray3[1];
      doubleArray4[1] = 1.304E19;
      doubleArray4[2] = (double) doubleArray3[0];
      doubleArray4[3] = 1.304E19;
      doubleArray4[4] = 3.834E-20;
      doubleArray4[5] = (double) doubleArray3[1];
      doubleArray4[6] = (double) doubleArray3[1];
      doubleArray4[7] = 1.304E19;
      doubleArray4[8] = (double) doubleArray3[3];
      try { 
        MathArrays.convolve(doubleArray4, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 342.014F;
      floatArray0[2] = (-1603.9F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-63.955F);
      floatArray0[6] = (-1302.3F);
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (-519.225F);
      floatArray1[2] = (-1.0F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-1302.3F);
      floatArray1[5] = 342.014F;
      floatArray1[6] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 342.014F, (-1603.9F), 0.0F, (-1.0F), (-63.955F), (-1302.3F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-519.225F), (-1.0F), 0.0F, (-1302.3F), 342.014F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4.068233003401932E-9);
      doubleArray0[1] = 1.2114610401694439E10;
      doubleArray0[2] = 3.211102415760213E7;
      doubleArray0[3] = (-843.01011);
      doubleArray0[4] = (-1451.0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-4.068233003401932E-9), 1.2114610401694439E10, 3.211102415760213E7, (-843.01011), (-1451.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 14;
      intArray0[2] = 16;
      intArray0[3] = (-10);
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 14;
      intArray1[1] = 14;
      intArray1[2] = 16;
      intArray1[3] = 14;
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(27.294688127912362, double1, 0.01);
      assertArrayEquals(new int[] {1, 14, 16, (-10)}, intArray0);
      assertArrayEquals(new int[] {14, 14, 16, 14}, intArray1);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-4.068233003401932E-9), 1.2114610401694439E10, 3.211102415760213E7, (-843.01011), (-1451.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1, 14, 16, (-10)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(-0.0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4.3466666666666665E18;
      doubleArray0[1] = (-1772.79945);
      doubleArray0[2] = (-1772.79945);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(4.3466666666666665E18, double0, 0.01);
      assertArrayEquals(new double[] {4.3466666666666665E18, (-1772.79945), (-1772.79945)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.scale(3724.134305986863, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(-0.0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 23;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {23}, intArray0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-9);
      intArray0[2] = 256;
      intArray0[3] = 2146202370;
      intArray0[4] = 108;
      intArray0[5] = 1531;
      intArray0[6] = 1;
      intArray0[7] = (-2890);
      intArray0[8] = 1042;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2542);
      intArray1[1] = 256;
      intArray1[2] = (-2890);
      intArray1[3] = 256;
      intArray1[4] = 1;
      intArray1[5] = 256;
      intArray1[6] = 1531;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3.356118100840571E-7);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 2643.88;
      doubleArray0[3] = (-630.5);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-4265.6421236);
      doubleArray0[6] = (-0.5);
      doubleArray0[7] = 1.9987994582857286E-8;
      doubleArray0[8] = 11.8933703117685;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3.356118100840571E-7), Double.NaN, 2643.88, (-630.5), 0.0, (-4265.6421236), (-0.5), 1.9987994582857286E-8, 11.8933703117685}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3.356118100840571E-7), Double.NaN, 2643.88, (-630.5), 0.0, (-4265.6421236), (-0.5), 1.9987994582857286E-8, 11.8933703117685}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale((-34.09), doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-3.356118100840571E-7), Double.NaN, 2643.88, (-630.5), 0.0, (-4265.6421236), (-0.5), 1.9987994582857286E-8, 11.8933703117685}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1441006605765508E-5, Double.NaN, (-90129.86920000002), 21493.745000000003, -0.0, 145415.739993524, 17.045, (-6.81390735329605E-7), (-405.4449939281882)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(11.8933703117685, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-3.991555538332612E-6), Double.NaN, 31444.6438998785, (-7498.769981570039), 0.0, (-50732.86139345337), (-5.94668515588425), 2.3772462136354444E-7, 141.45225737285634}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      Double[] doubleArray3 = new Double[2];
      doubleArray3[0] = (Double) (-7498.769981570039);
      doubleArray3[1] = (Double) Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray3.length);
      assertTrue(boolean0);
      
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray2, (-20.0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray4.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {(-3.991555538332612E-6), Double.NaN, 31444.6438998785, (-7498.769981570039), 0.0, (-50732.86139345337), (-5.94668515588425), 2.3772462136354444E-7, 141.45225737285634}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.9953723041058322E-9), Double.NaN, 23.596919683475498, (-5.62728182082065), 0.0, (-38.07132494252351), (-0.004462554972895044), 1.7839504924785798E-10, 0.10614963765852958}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {1.1441006605765508E-5, Double.NaN, (-90129.86920000002), 21493.745000000003, -0.0, 145415.739993524, 17.045, (-6.81390735329605E-7), (-405.4449939281882)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 581.75806F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 2103.64F;
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 3.4028235E38F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {581.75806F, 0.0F, 1.0F, 3.4028235E38F, 0.0F, 2103.64F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3.4028235E38F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-976.826F);
      floatArray0[2] = (-4403.2207F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, (-976.826F), (-4403.2207F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {0.0F, (-976.826F), (-4403.2207F)}, floatArray0, 0.01F);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-976.826F);
      doubleArray0[1] = (double) (-4403.2207F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-976.826F);
      doubleArray0[5] = (double) (-976.826F);
      doubleArray0[6] = (double) (-4403.2207F);
      doubleArray0[7] = (double) 0.0F;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.scaleInPlace(2806.14807, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, 0.0, 0.9689123630523682, 0.0, 0.9689123630523682, 0.0, (-2688.8), 0.0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.scaleInPlace(2806.14807, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(9.219544613762692E-9, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      int[] intArray0 = new int[2];
      intArray0[1] = (-1);
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {0, (-1)}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = MathArrays.copyOf(intArray1, 98);
      assertEquals(6, intArray1.length);
      assertEquals(98, intArray2.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.7827257129423813E-8;
      doubleArray0[1] = 496.2381018633362;
      doubleArray0[2] = (-1204.58);
      doubleArray0[3] = (-1438.62672877);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 2029.273391;
      doubleArray0[6] = 0.75;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(2807.999849144055, double0, 0.01);
      assertArrayEquals(new double[] {1.7827257129423813E-8, 496.2381018633362, (-1204.58), (-1438.62672877), 3.834E-20, 2029.273391, 0.75}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.7827257129423813E-8, 496.2381018633362, (-1204.58), (-1438.62672877), 3.834E-20, 2029.273391, 0.75}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      long[][] longArray0 = new long[1][0];
      long long0 = (-715L);
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-3183605296591799669L);
      doubleArray1[1] = (double) (-3183605296591799669L);
      doubleArray1[2] = (double) (-3183605296591799669L);
      doubleArray1[3] = (double) (-3183605296591799669L);
      doubleArray1[4] = (double) (-3183605296591799669L);
      doubleArray1[5] = (double) (-3183605296591799669L);
      doubleArray1[6] = (double) (-3183605296591799669L);
      doubleArray1[7] = (double) 2715L;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      Double double1 = new Double((-3715.33218353));
      assertEquals((-3715.33218353), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1;
      intArray2[1] = (-1);
      intArray2[2] = 1;
      intArray2[3] = 1;
      intArray2[4] = (-1580);
      intArray2[5] = (-1580);
      int int0 = MathArrays.distance1(intArray1, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(6, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {1, (-1), 1, 1, (-1580), (-1580)}, intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2665);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-2665)}, intArray0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-2665);
      floatArray0[4] = (float) (-2665);
      floatArray0[5] = (float) (-2665);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-2665.0F), (-2665.0F), (-2665.0F)}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[][] longArray1 = new long[3][1];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(3, longArray1.length);
      
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = 1.86285714285714278E18;
      doubleArray0[1] = 1.86285714285714278E18;
      doubleArray0[2] = 1.86285714285714278E18;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(15, doubleArray0.length);
      assertEquals(3.2265632186711654E18, double0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.86285714285714278E18;
      doubleArray1[1] = 3.2265632186711654E18;
      doubleArray1[2] = 3.2265632186711654E18;
      doubleArray1[3] = 1.86285714285714278E18;
      doubleArray1[4] = 1.86285714285714278E18;
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[][] longArray1 = new long[3][1];
      longArray1[0] = longArray0;
      longArray1[2] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(3, longArray1.length);
      
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int0 = 1;
      int int1 = 973;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Pair<Object, Object> pair0 = new Pair<Object, Object>(integer0, integer0);
      assertNotNull(pair0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2273.2F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2273.2F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-3002);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-3002)}, intArray0);
      assertArrayEquals(new int[] {(-3002)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3002);
      doubleArray0[1] = (-4.294974378E9);
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int int0 = 203;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 203);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 799.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {799.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {799.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(799.0, 799.0, 2975.0, (-1960.49801721038), 799.0, 0.0);
      assertEquals((-5194080.6012008805), double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[][] longArray1 = new long[3][1];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      long[][] longArray0 = new long[1][7];
      long[] longArray1 = new long[5];
      longArray1[0] = 1153L;
      longArray1[1] = 1108L;
      longArray1[2] = 1153L;
      longArray1[3] = 1L;
      longArray1[4] = (-267L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-0.1666666567325592);
      doubleArray1[1] = (-449.8574);
      doubleArray1[2] = (-4.294974378E9);
      doubleArray1[3] = 1.304E19;
      doubleArray1[4] = 0.5000000000042687;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1666666567325592), (-449.8574), (-4.294974378E9), 1.304E19, 0.5000000000042687}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1666666567325592), (-449.8574), (-4.294974378E9), 1.304E19, 0.5000000000042687}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(450.02406665673254, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1666666567325592), (-449.8574), (-4.294974378E9), 1.304E19, 0.5000000000042687}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-0.1666666567325592);
      doubleArray2[1] = 450.02406665673254;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Pair<Object, Object> pair0 = new Pair<Object, Object>(integer0, integer0);
      assertNotNull(pair0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.scaleInPlace(2806.14807, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$2";
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "u";
      stringArray1[2] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray1[3] = "org.apache.commons.math3.util.MathArrays$2";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray1, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(boolean1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.scale((-1.0), doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = (-1.0);
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2053.0903F);
      floatArray0[1] = (-63.0F);
      floatArray0[2] = 3092.2747F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-1082.3757F);
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (-1082.3757F);
      floatArray1[2] = 3092.2747F;
      floatArray1[3] = 3092.2747F;
      floatArray1[4] = (-2053.0903F);
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 3092.2747F;
      floatArray1[8] = (-2053.0903F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-2053.0903F), (-63.0F), 3092.2747F, 0.0F, 1.0F, (-1082.3757F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1082.3757F), 3092.2747F, 3092.2747F, (-2053.0903F), 0.0F, 0.0F, 3092.2747F, (-2053.0903F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-2665);
      intArray0[1] = 201;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-2665), 201, 0}, intArray0);
      
      Double double1 = new Double((-2665));
      assertEquals((-2665.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-2665));
      assertEquals((-2665.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 201);
      assertEquals(3, intArray0.length);
      assertEquals(201, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2665), 201, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long[] longArray0 = new long[7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2586.0F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (-459.27F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2586.0F, Float.NaN, (-459.27F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2586.0F;
      doubleArray0[1] = (double) 2586.0F;
      doubleArray0[2] = (double) 2586.0F;
      doubleArray0[3] = 251.4634966895;
      doubleArray0[4] = (double) (-459.27F);
      doubleArray0[5] = (double) Float.NaN;
      doubleArray0[6] = (double) (-459.27F);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {2586.0, 2586.0, 2586.0, 251.4634966895, (-459.2699890136719), Double.NaN, (-459.2699890136719)}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {2586.0, 2586.0, 2586.0, 251.4634966895, (-459.2699890136719), Double.NaN, (-459.2699890136719)}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = Float.NaN;
      floatArray1[1] = (-459.27F);
      floatArray1[2] = 2586.0F;
      floatArray1[3] = 2586.0F;
      floatArray1[4] = Float.NaN;
      floatArray1[5] = Float.NaN;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      assertEquals(6, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {Float.NaN, (-459.27F), 2586.0F, 2586.0F, Float.NaN, Float.NaN}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2586.0F, Float.NaN, (-459.27F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean1 == boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -459.27 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long[] longArray0 = new long[7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-3917.66F);
      floatArray0[1] = (-894.7F);
      floatArray0[2] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-3917.66F), (-894.7F), 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2826.559392193611;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2826.559392193611, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2826.559392193611, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7989437.997597916, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {2826.559392193611, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7989437.997597916, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1.0), 1078.2626329, 2281.448529, 2281.448529, 2826.559392193611, 3894737.393903788, (-1.0), 2281.448529);
      assertEquals(1.1013908208545734E10, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1024.408808);
      doubleArray0[1] = 1.1013908208545734E10;
      doubleArray0[2] = 2281.448529;
      doubleArray0[3] = 1.1013908208545734E10;
      doubleArray0[4] = 2826.559392193611;
      doubleArray0[5] = 1.1013908208545734E10;
      doubleArray0[6] = 2826.559392193611;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 2826.559392193611;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (11,013,908,208.546 >= 2,281.449)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      double double0 = 1.34217729E8;
      double double1 = MathArrays.linearCombination(1.34217729E8, 1.3421251076093401E8, 1.34217729E8, 2823.106823688796, 1.3421251076093401E8, (-31.171824));
      assertEquals(1.801407312505846E16, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.scaleInPlace(2806.14807, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[4] = "";
      stringArray0[5] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      assertEquals(6, stringArray0.length);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection2, false);
      assertEquals(5, doubleArray0.length);
      assertSame(mathArrays_OrderDirection2, mathArrays_OrderDirection0);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection1));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      float[] floatArray0 = new float[2];
      floatArray0[0] = 23.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {23.0F, 0.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1391.190264635;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1391.190264635}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1391.190264635}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1935410.3524152013}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(1391.190264635, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1391.190264635}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.692524040353822E9}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Double>> field0 = (Field<Pair<String, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.4E-45F);
      floatArray0[1] = (-1632.5842F);
      floatArray0[2] = (-214.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-2039.008F);
      floatArray0[6] = (-1049.54F);
      floatArray0[7] = 207.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-1.4E-45F), (-1632.5842F), (-214.0F), 0.0F, 1.0F, (-2039.008F), (-1049.54F), 207.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2.6925226491635575E9, double0, 0.01);
      assertArrayEquals(new double[] {1391.190264635}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.692524040353822E9}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.scaleInPlace(2806.14807, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double3 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = 1807.6355F;
      floatArray0[2] = 135.47723F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2817.91F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 76.0F;
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, 1807.6355F, 135.47723F, 0.0F, 2817.91F, 0.0F, 76.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2826.559392193611;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2826.559392193611, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2826.559392193611, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7989437.997597916, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(2115.734896, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {5980250.341680572, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Double>> field0 = (Field<Pair<String, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<String, Double>[][] pairArray0 = MathArrays.buildArray(field0, 24, (-1));
      assertEquals(24, pairArray0.length);
      assertNotNull(pairArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2826.559392193611;
      doubleArray0[3] = 429.88006934671;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "8t5Xn";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$2";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "8t5Xn";
      stringArray1[1] = "8t5Xn";
      stringArray1[2] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray1[3] = "8t5Xn";
      stringArray1[4] = "8t5Xn";
      stringArray1[5] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray1[6] = "8t5Xn";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray1, mathArrays_OrderDirection1, true);
      assertEquals(7, stringArray1.length);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(boolean1);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (0 < 429.88)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double(323.58);
      assertEquals(323.58, (double)double0, 0.01);
      assertNotNull(double0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2182, 2182);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1.34217729E8;
      double double0 = (-880.035066);
      doubleArray0[2] = (-880.035066);
      doubleArray0[3] = (-4338.204);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 1.34217729E8, (-880.035066), (-4338.204)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.34217729E8, (-880.035066), (-4338.204)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.801439877791744E16, (-2.3623261599777023E11), (-1.1645270031757144E12), 7635543.286922928, 1.8820013945616E7}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.scaleInPlace(2806.14807, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$2";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      assertEquals(2, stringArray0.length);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection2, false);
      assertEquals(5, doubleArray0.length);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection0);
      assertSame(mathArrays_OrderDirection2, mathArrays_OrderDirection1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), 0.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 429.3925;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 429.3925);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 429.3925}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 429.3925}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = 429.3925;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 429.3925;
      MathArrays.checkOrder(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 429.3925}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 429.3925}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 177;
      intArray0[2] = 11;
      intArray0[3] = 11;
      intArray0[4] = 11;
      intArray0[5] = 11;
      intArray0[6] = (-3976);
      intArray0[7] = (-3976);
      int[] intArray1 = MathArrays.copyOf(intArray0, 177);
      assertEquals(8, intArray0.length);
      assertEquals(177, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {177, 0, 11, 11, 11, 11, (-3976), (-3976)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 177;
      intArray2[2] = 177;
      intArray2[3] = (-3976);
      intArray2[4] = 6;
      int[] intArray3 = new int[3];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 177;
      intArray3[1] = 11;
      intArray3[2] = 11;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray2, intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1045.5416786577537);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1045.5416786577537), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1045.5416786577537), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 13
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-465.869949775694);
      doubleArray0[1] = 2141.6287333171313;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-465.869949775694);
      doubleArray1[2] = 0.0;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2182, 2182);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2826.559392193611;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.34217729E8;
      doubleArray1[1] = 2826.559392193611;
      doubleArray1[2] = 1.34217729E8;
      doubleArray1[3] = 1.34217729E8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.34217729E8, 2826.559392193611, 1.34217729E8, 1.34217729E8}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {1.34217729E8, 2826.559392193611, 1.34217729E8, 1.34217729E8}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      intArray0[1] = (-2147111917);
      intArray0[2] = 1598;
      intArray0[3] = 1598;
      intArray0[4] = 2145627568;
      intArray0[5] = (-2147111917);
      intArray0[6] = (-2147036302);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2147483632));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.63E18;
      doubleArray0[1] = 4025.46;
      doubleArray0[2] = 3794.74252309002;
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = 3291.0;
      doubleArray0[5] = 1455.5;
      doubleArray0[6] = 1499.0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,630,000,000,000,000,000 >= 4,025.46)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = MathArrays.scale((-1.0), doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "expansion factor smaller than one ({0})";
      stringArray0[1] = "";
      stringArray0[2] = "mu=loW63T";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      try { 
        MathArrays.normalizeArray(doubleArray0, (-1.0));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = MathArrays.scale((-1.0), doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double1 = MathArrays.distance1(doubleArray2, doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = new Double(0.0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-295.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = (-1488.0828F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-295.0F), 0.0F, 3.4028235E38F, (-1488.0828F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double double3 = MathArrays.linearCombination(Double.NaN, 1.00307692307692314E18, 0.0, Double.NaN, 1777.499382, 1777.499382);
      assertEquals(Double.NaN, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double4 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(Double.NaN, double4, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.scaleInPlace(2806.14807, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2806.14807;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 2806.14807;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 2806.14807;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-465.869949775694);
      doubleArray0[1] = 2141.6287333171313;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2141.6287333171313;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-465.869949775694), 2141.6287333171313, 0.0, 2141.6287333171313, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      assertEquals(9, doubleArray0.length);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-465.869949775694), 2141.6287333171313, 0.0, 2141.6287333171313, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 7;
      intArray0[1] = (-1);
      intArray0[2] = 2145627568;
      intArray0[3] = (-2147111917);
      intArray0[4] = (-2147036302);
      intArray0[5] = 1598;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1598);
      assertEquals(1598, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {7, (-1), 2145627568, (-2147111917), (-2147036302), 1598}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9390182.072843088, double0, 0.01);
      assertArrayEquals(new double[] {(-465.869949775694), 2141.6287333171313, 0.0, 2141.6287333171313, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1172.48967280543;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 134217729;
      doubleArray0[4] = (double) 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1172.48967280543, 0.0, 0.0, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-926.13F);
      floatArray0[5] = 0.0F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, 0.0F, 0.0F, (-1.0F), (-926.13F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NEGATIVE_INFINITY}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double double0 = MathArrays.linearCombination((-920.89), (double) 0.0F, (double) 0.0F, (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
      
      long[][] longArray0 = new long[3][5];
      long[] longArray1 = new long[1];
      longArray1[0] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 1112L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray3[6] = 0L;
      longArray3[7] = 0L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.scaleInPlace(2806.14807, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[2][1];
      long[] longArray1 = new long[3];
      longArray1[0] = 1698L;
      longArray1[1] = (-676L);
      longArray1[2] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-676L);
      longArray2[1] = 1L;
      longArray2[2] = (-676L);
      longArray2[3] = 1698L;
      longArray2[4] = (-676L);
      longArray2[5] = 1L;
      longArray2[6] = 1L;
      longArray2[7] = (-676L);
      longArray2[8] = 542L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 799.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {799.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {799.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {799.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {799.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 239);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(239, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {799.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {799.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-880.035066);
      doubleArray0[3] = (-4338.204);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3.834E-20, 1.34217729E8, (-880.035066), (-4338.204)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 1.34217729E8, (-880.035066), (-4338.204)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, 1.029181545972E-11, 1.801439877791744E16, (-2.3623261599777023E11), (-1.1645270031757144E12), 7635543.286922928, 1.8820013945616E7}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.scaleInPlace(2806.14807, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3217.7836952529988);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 2806.14807;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 2806.14807;
      doubleArray1[7] = 2806.14807;
      double double2 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6023.931765252999, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3217.7836952529988), 0.0, 0.0, 2806.14807, 0.0, 0.0, 2806.14807, 2806.14807}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 6023.931765252999;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-3217.7836952529988);
      doubleArray2[5] = 6023.931765252999;
      doubleArray2[6] = (-2729.85);
      doubleArray2[7] = 6023.931765252999;
      doubleArray2[8] = 0.19454771280288696;
      double[] doubleArray3 = MathArrays.scale((-2729.85), doubleArray2);
      assertEquals(9, doubleArray3.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {-0.0, (-1.64444301293759E7), -0.0, -0.0, 8784066.820486398, (-1.64444301293759E7), 7452081.0225, (-1.64444301293759E7), (-531.086073794961)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 6023.931765252999, 0.0, 0.0, (-3217.7836952529988), 6023.931765252999, (-2729.85), 6023.931765252999, 0.19454771280288696}, doubleArray2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("org.apache.commons.math3.util.MathArrays");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.org.apache.commons.math3.util.MathArrays
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.34217729E8;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 602.803;
      doubleArray1[3] = 1.34217729E8;
      doubleArray1[4] = 1.34217729E8;
      doubleArray1[5] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.34217729E8, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, (-1.0), 602.803, 1.34217729E8, 1.34217729E8, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(1.34217729E8, 0.0, 1.34217729E8, 602.803, 0.0, (-1592.801), 1.34217729E8, (-1.0));
      assertEquals(8.0772631965387E10, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(1.34217729E8, (-506.6929203925277), 1439957.4323710564, (-4296.0406003), (-463.940894), 5398597.372970036, (-506.6929203925277), 1439957.4323710564);
      assertEquals((-7.742753499584344E10), double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1374.855675614617, 5398597.372970036, 0.0, 1.34217729E8);
      assertEquals(7.422292238586016E9, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1439957.4323710564;
      doubleArray1[1] = (-463.940894);
      doubleArray1[2] = (-7.742753499584344E10);
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {1439957.4323710564, (-463.940894), (-7.742753499584344E10)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      
      double double2 = MathArrays.linearCombination((-1053.301912615), (-2.957007209750105E-8), 908.248485, (-1053.301912615), (-2.957007209750105E-8), (-4296.0406003));
      assertEquals((-956659.8662219957), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(0.0, (-298.9721694), 870.0, (-849.0930769), (-849.0930769), 778557.3450035836);
      assertEquals((-6.618063625890907E8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1439957.4323710564;
      doubleArray0[1] = 4821.1662868;
      doubleArray0[2] = (-2015.48378056);
      doubleArray0[3] = 429.3925;
      doubleArray0[4] = 8.364951735931177E12;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 5.650007086920087E-9;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 1942.53768037;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,439,957.432 >= 4,821.166)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (-684L);
      longArray1[4] = 0L;
      longArray1[5] = 10000L;
      longArray1[6] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray2[2] = (-1L);
      longArray3[1] = 10000L;
      longArray3[2] = 0L;
      double double0 = MathArrays.linearCombination((double) 0L, 4821.1662868, 1.2599210498948732, (double) 0L, (-2380.219), (double) (-684L), (-1926.764157837), 2652.823985152209);
      assertEquals((-3483296.3756415904), double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-18.430862426757812), 2124.89741, (double) 0L, (-2299.09));
      assertEquals((-39163.69183468399), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 97;
      intArray0[2] = 1499;
      intArray0[3] = 201;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 97, 1499, 201}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1499;
      doubleArray0[1] = (double) 97;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1499;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1499.0F}, floatArray0, 0.01F);
      
      double double1 = MathArrays.linearCombination(0.11111095942313305, 2685.298239776, (double) 201, (-766.8570053103405));
      assertEquals((-153839.89200361967), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination((double) 1499, (-153839.89200361967), 0.0, Double.NaN, 581.33903212, (double) 97, 0.0, (-153839.89200361967));
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2826.559392193611;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 429.88006934671;
      doubleArray0[4] = (-1886.2114667684823);
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 2826.559392193611;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2826.559392193611, Double.NEGATIVE_INFINITY, 0.0, 429.88006934671, (-1886.2114667684823)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 2826.559392193611}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-1.0), 0.0, (-1133.459), 4.3466666666666665E18, 926.72034, 429.88006934671, (-1603.6087), (-663.80246858));
      assertEquals((-4.926768453333332E21), double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-0.4883170636190211), (-2500.245650285), 926.72034, (-4.926768453333332E21));
      assertEquals((-4.565736536174339E24), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1777.499382;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1777.499382, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1777.499382}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 1777.499382}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 3159504.0530103818}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double double1 = MathArrays.linearCombination(0.7937005259840998, 48207.662868, 1156.0, 0.0);
      assertEquals(38262.44737479575, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Double[] doubleArray2 = new Double[4];
      doubleArray2[0] = (Double) 1777.499382;
      doubleArray2[1] = (Double) 0.0;
      doubleArray2[2] = (Double) 1777.499382;
      doubleArray2[3] = (Double) 1777.499382;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertEquals(4, doubleArray2.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1777.499382;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1777.499382, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1777.499382}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 1777.499382}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 3159504.0530103818}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double double1 = MathArrays.linearCombination(0.7937005259840998, 48207.662868, 1156.0, 0.0);
      assertEquals(38262.44737479575, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Double[] doubleArray2 = new Double[4];
      doubleArray2[0] = (Double) 1777.499382;
      doubleArray2[1] = (Double) 0.0;
      doubleArray2[2] = (Double) 1777.499382;
      double double2 = MathArrays.linearCombination(2806.14807, Double.POSITIVE_INFINITY, (double) doubleArray2[1], (-142.69995));
      assertEquals(4, doubleArray2.length);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 1777.499382}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 3159504.0530103818}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, 1.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray4 = new double[1][4];
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray4[0] = doubleArray5;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1045.5416786577537);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1045.5416786577537), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 5276.0F;
      floatArray0[1] = 0.0F;
      floatArray0[0] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Double[] doubleArray2 = new Double[4];
      Double double0 = Double.valueOf(16.5686860184316);
      assertEquals(16.5686860184316, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[0] = double0;
      doubleArray2[1] = (Double) (-1045.5416786577537);
      doubleArray2[2] = (Double) (-1045.5416786577537);
      doubleArray2[3] = (Double) (-1045.5416786577537);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertEquals(4, doubleArray2.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "i5G7t6d{R@oLK^N";
      stringArray0[1] = "T~";
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      long long0 = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (-684L);
      longArray1[4] = 0L;
      longArray1[5] = 10000L;
      long long1 = 0L;
      longArray1[6] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double double0 = 3159504.0530103818;
      double double1 = MathArrays.linearCombination((double) 0L, 1803.1773103064372, 3159504.0530103818, (double) 0L);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.167;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "i5G7t6d{R@oLK^N";
      stringArray0[1] = "i5G7t6d{R@oLK^N";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3860.4443316;
      doubleArray0[1] = 4.3466666666666665E18;
      doubleArray0[2] = (-2820.9829);
      doubleArray0[3] = 0.3333333333333333;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {3860.4443316, 4.3466666666666665E18, (-2820.9829), 0.3333333333333333}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      
      double double0 = MathArrays.linearCombination(8.0, 3.834E-20, 4.3466666666666665E18, (-420.541597585817), 4.3466666666666665E18, (-298.9721694), 4.3466666666666665E18, 4.3466666666666665E18);
      assertEquals(1.8893511111111107E37, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(4.3466666666666665E18, 1156.0, 0.3333333333333333, 778557.3450035836);
      assertEquals(5.024746666666667E21, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2826.559392193611;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 429.88006934671;
      doubleArray0[4] = (-1886.2114667684823);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {2826.559392193611, Double.NEGATIVE_INFINITY, 0.0, 429.88006934671, (-1886.2114667684823)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertArrayEquals(new double[] {2826.559392193611, Double.NEGATIVE_INFINITY, 0.0, 429.88006934671, (-1886.2114667684823)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1439957.4323710564;
      doubleArray0[1] = 4821.1662868;
      doubleArray0[2] = (-2015.48378056);
      doubleArray0[3] = 429.3925;
      doubleArray0[4] = 8.364951735931177E12;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 5.650007086920087E-9;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 1942.53768037;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1439957.4323710564, 4821.1662868, (-2015.48378056), 429.3925, 8.364951735931177E12, (-1.0), 5.650007086920087E-9, 1.0, 1942.53768037}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 799.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {799.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {799.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-1045.819), (-1352.5326503), 799.0, 2823.106823688796, 2975.0, (-1045.819));
      assertEquals(558855.1709314436, double0, 0.01);
      
      int[] intArray0 = new int[1];
      int int0 = 2013;
      intArray0[0] = 2013;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2013}, intArray0);
      assertArrayEquals(new int[] {2013}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {799.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {799.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {799.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {799.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int1 = (-2512);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-2512));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 429.3925);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 429.3925;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2789.896229;
      doubleArray1[1] = 429.3925;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 429.3925;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2789.896229, 429.3925, 0.0, 429.3925, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(1.34217729E8, 0.0, 0.0, 501.8300605051824, 5398597.372970036, 0.0, (-0.4883170636190211), 429.3925);
      assertEquals((-209.67968474003052), double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 5398597.372970036, (-1904.6348916699073));
      assertEquals((-1.028235692263623E10), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1786.73337989), 0.0, 0.0, (-1786.73337989), 0.0, (-2422.37566572));
      assertEquals(0.0, double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      Double double1 = new Double((-2422.37566572));
      assertEquals((-2422.37566572), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[0] = double1;
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[1] = double2;
      Double double3 = new Double(2377.13);
      assertEquals(2377.13, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[2] = double3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[0] = null;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) doubleArray0[2];
      doubleArray2[1] = (-2422.37566572);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(2886.681208220612, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (-4914.188);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 1439957.4323710564;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 4821.1662868;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (-3090.851685569119);
      doubleArray1[7] = (double) 0L;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 1, 2, 1}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0L);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1100.326);
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 20.0;
      doubleArray0[5] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-1100.326), 1.34217729E8, 1.34217729E8, 20.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 9007199254740990L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-1100.326), 1.34217729E8, 1.34217729E8, 20.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 7);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, (-1100.326), 1.34217729E8, 1.34217729E8, 20.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-1100.326), 1.34217729E8, 1.34217729E8, 20.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "i5G7t6d{R@oLK^N";
      stringArray0[1] = "T~";
      stringArray0[2] = "";
      stringArray0[3] = "";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1391.190264635;
      doubleArray0[1] = 5.904550754224647E13;
      doubleArray0[2] = 725.43;
      doubleArray0[3] = 1743.923643387506;
      doubleArray0[4] = 1.34217729E8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][0];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {725.43, 1391.190264635, 1743.923643387506, 1.34217729E8, 5.904550754224647E13}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertEquals(5, doubleArray0.length);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {725.43, 1391.190264635, 1743.923643387506, 1.34217729E8, 5.904550754224647E13}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-2544L);
      longArray0[1] = 0L;
      longArray0[2] = (-5776L);
      longArray0[3] = 1L;
      longArray0[4] = 5648769086999809661L;
      longArray0[5] = 1720L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,544 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 97;
      intArray0[2] = 1499;
      intArray0[3] = 201;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 97, 1499, 201}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1499;
      doubleArray0[1] = (double) 97;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@8\u0003zJsGa&?D9z@#32";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      assertEquals(7, doubleArray0.length);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {1499.0, 97.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 2806.14807;
      MathArrays.scaleInPlace(2806.14807, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.normalizeArray(doubleArray1, 2806.14807);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "i5G7t6d{R@oLK^N";
      stringArray0[1] = "T~";
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "i5G7t6d{R@oLK^N";
      stringArray0[1] = "T~";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 14;
      intArray0[1] = 14;
      intArray0[2] = 14;
      intArray0[3] = 14;
      intArray0[4] = (-1431655765);
      intArray0[5] = 14;
      intArray0[6] = 14;
      intArray0[7] = (-1882);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {14, 14, 14, 14, (-1431655765), 14, 14, (-1882)}, intArray0);
      
      double[] doubleArray0 = null;
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = MathArrays.scale((-1.0), doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance1(doubleArray2, doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = new Double(Double.NaN);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = MathArrays.distanceInf(doubleArray2, doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 134217729;
      intArray0[1] = 134217729;
      intArray0[2] = 0;
      intArray0[3] = 14;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 134217729;
      intArray0[7] = 0;
      intArray0[8] = 134217729;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 134217729;
      intArray1[2] = 14;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 429.3925;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 429.3925);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 429.3925}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 429.3925}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2789.896229;
      doubleArray2[1] = 429.3925;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 429.3925;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2789.896229, 429.3925, 0.0, 429.3925, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.linearCombination(1.34217729E8, 0.0, 0.0, 532.889879926, 5398597.372970036, 0.0, 9.313225746154785E-10, 429.3925);
      assertEquals(3.9990292862057684E-7, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 716.73169, 5398597.372970036, (-1904.6348916699073));
      assertEquals((-1.028235692263623E10), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1497.930844546967;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2823.106823688796;
      doubleArray0[5] = 2.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2823.106823688796;
      doubleArray0[8] = (-1045.819);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 1497.930844546967, 0.0, 2823.106823688796, 2.0, 0.0, 2823.106823688796, (-1045.819)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.11111095942313305;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2823.106823688796;
      doubleArray1[3] = 1497.930844546967;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 2,823.107)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long[][] longArray0 = new long[0][1];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination((-406.0231974070564), 503.77, (-406.0231974070564), 309.6882082692, 309.6882082692, (-1.0));
      assertEquals((-330592.59088674496), double0, 0.01);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "`B<";
      stringArray0[1] = "NO_REGRESSORS";
      stringArray0[2] = "w0nt(KMB,{KR+Jd";
      stringArray0[3] = "UMd\"KfY$2xV";
      stringArray0[4] = "p#7=({']M";
      stringArray0[5] = "%";
      stringArray0[6] = "]TZ9z~L#RJc0cqE/";
      stringArray0[7] = "*&CylQ>";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "i5G7t6d{R@oLK^N";
      stringArray0[1] = "T~";
      stringArray0[2] = "e\"jaGbr=: /J";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      assertEquals(4, stringArray0.length);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1814.36004755133);
      doubleArray0[1] = 2806.14807;
      double double0 = (-298.9721694);
      doubleArray0[2] = (-298.9721694);
      doubleArray0[3] = 3824.333554;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,814.36 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1497.930844546967;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2798.47;
      doubleArray0[5] = 2.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2798.47;
      doubleArray0[8] = (-1045.819);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 1497.930844546967, 0.0, 2798.47, 2.0, 0.0, 2798.47, (-1045.819)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.11111095942313305;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1497.930844546967;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long[][] longArray0 = new long[1][5];
      long[] longArray1 = new long[4];
      longArray1[0] = (long) (-1156);
      longArray1[1] = (-1156L);
      longArray1[2] = (long) (-1156);
      longArray1[3] = (long) (-1156);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      double double0 = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2253.2;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 2253.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 2253.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-1931);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1931), (-1931));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "i5G7t6d{R@oLK^N";
      stringArray0[1] = "T~";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      assertEquals(4, stringArray0.length);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1814.36004755133);
      doubleArray0[1] = 2806.14807;
      doubleArray0[2] = (-298.9721694);
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (2,806.148 > -298.972)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1045.819);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2798.47;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, (-1045.819), 0.0, 2798.47}, doubleArray0, 0.01);
      
      double double1 = 3824.333554;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1156);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1156);
      doubleArray0[1] = (double) (-1156);
      doubleArray0[2] = (double) (-1156);
      doubleArray0[3] = (double) (-1156);
      doubleArray0[4] = (double) (-1156);
      doubleArray0[5] = (double) (-1156);
      doubleArray0[6] = (double) (-1156);
      doubleArray0[7] = (double) (-1156);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(3269.661756206596, double0, 0.01);
      assertArrayEquals(new double[] {(-1156.0), (-1156.0), (-1156.0), (-1156.0), (-1156.0), (-1156.0), (-1156.0), (-1156.0)}, doubleArray0, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 1);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1156), 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1156)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1156), 0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 429.3925;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 429.3925);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 429.3925}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 429.3925}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2789.896229;
      doubleArray2[1] = 429.3925;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[1][3];
      doubleArray3[0] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 97;
      intArray0[2] = 1499;
      intArray0[3] = 201;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 97, 1499, 201}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1499;
      doubleArray0[1] = (double) 97;
      doubleArray0[2] = (double) 1499;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 201;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1499.0, 97.0, 1499.0, 0.0, 0.0, 0.0, 201.0}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 97;
      intArray1[2] = 1499;
      intArray1[3] = 0;
      intArray1[4] = 97;
      intArray1[5] = 97;
      intArray1[6] = 201;
      intArray1[7] = 201;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.linearCombination(0.4794255495071411, (double) 0.0F, Double.NaN, 1488.94203);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray2 = new Double[3];
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray2[0] = double1;
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray2[1] = double2;
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray2[2] = double3;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertEquals(3, doubleArray2.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 97;
      intArray0[2] = 1499;
      intArray0[3] = 201;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 97, 1499, 201}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1499;
      doubleArray0[1] = (double) 97;
      doubleArray0[2] = (double) 1499;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 201;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {1499.0, 201.0, 0.0, 1499.0, 97.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1499.0, 201.0, 0.0, 1499.0, 97.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1045.5416786577537);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1045.5416786577537), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 5276.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {5276.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.linearCombination(1093157.4018104735, (-920.89), 2685.298239776, 0.4342944622039795);
      assertEquals((-1.006676553543092E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = MathArrays.scale((-1.0), doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance1(doubleArray2, doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1777.499382;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1777.499382, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1777.499382}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-482);
      intArray0[1] = 83;
      intArray0[2] = 273;
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = 180;
      intArray0[6] = 0;
      intArray0[7] = 134217729;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1);
      assertEquals(8, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-482), 83, 273, 0, 2, 180, 0, 134217729}, intArray0);
      assertArrayEquals(new int[] {(-482)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 134217729);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 1777.499382}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.34217729E8}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[9][2];
      long[] longArray1 = new long[1];
      longArray1[0] = 1945L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (-482);
      longArray2[1] = (long) (-482);
      longArray2[2] = (long) 0;
      longArray2[3] = (long) (-482);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 273;
      longArray3[1] = (long) 1;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) 134217729;
      longArray4[1] = 1L;
      longArray4[2] = (long) 83;
      longArray4[3] = (long) 83;
      longArray4[4] = (long) 180;
      longArray4[5] = (long) 273;
      longArray4[6] = (long) 0;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = (long) 273;
      longArray5[1] = (long) 0;
      longArray5[2] = (long) 0;
      longArray5[3] = (long) 0;
      longArray5[4] = 4208363204685324176L;
      longArray5[5] = 0L;
      longArray5[6] = (long) 0;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = 1945L;
      longArray6[1] = (long) 0;
      longArray6[2] = 1L;
      longArray6[3] = 0L;
      longArray6[4] = (long) 134217729;
      longArray6[5] = (long) 0;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[9];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray2));
      
      longArray7[0] = (long) 134217729;
      longArray7[1] = (long) (-482);
      longArray7[2] = (long) 2;
      longArray7[3] = (long) 273;
      longArray7[4] = (long) 134217729;
      longArray7[5] = (long) (-482);
      longArray7[6] = (long) 180;
      longArray7[7] = 4208363204685324176L;
      longArray7[8] = (long) 134217729;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[3];
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray4));
      
      longArray8[0] = 1945L;
      longArray8[1] = (long) 0;
      longArray8[2] = 4208363204685324176L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[5];
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray7));
      
      longArray9[0] = (long) 273;
      longArray9[1] = (-945L);
      longArray9[2] = (long) 134217729;
      longArray9[3] = (long) (-482);
      longArray9[4] = (long) (-482);
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -482 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1777.499382;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1777.499382, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1777.499382}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-482);
      intArray0[1] = 83;
      intArray0[2] = 273;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = (-1786.73337989);
      double double1 = 0.0;
      double double2 = (-2422.37566572);
      double double3 = MathArrays.linearCombination((-1786.73337989), 0.0, 0.0, (-1786.73337989), 0.0, (-2422.37566572));
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      Double double4 = new Double((-2422.37566572));
      assertEquals((-2422.37566572), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      
      doubleArray0[0] = double4;
      Double double5 = new Double(0.0);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      
      doubleArray0[1] = double5;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 2182, 2182);
      assertEquals(2182, objectArray0.length);
      assertNotNull(objectArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1559.5), (-1559.5), 6.283185307179586, (-3594.1226952318));
      assertEquals(2409457.711089119, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 206;
      intArray0[3] = 143;
      intArray0[4] = 164;
      intArray0[5] = 26;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 0, 206, 143, 164, 26, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1, 0, 206, 143, 164, 26, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1923.6939548);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1622.769473;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 3.834E-20;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1923.6939548), Double.NEGATIVE_INFINITY, 6.283185307179586, 0.0, 1622.769473, 1.0, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2410));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long[][] longArray0 = new long[7][1];
      long[] longArray1 = new long[1];
      longArray1[0] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray3[6] = 0L;
      longArray3[7] = 0L;
      longArray3[8] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = 0L;
      longArray5[1] = 0L;
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray5[4] = 0L;
      longArray5[5] = 0L;
      longArray5[6] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray0[5] = longArray6;
      long[] longArray7 = new long[4];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray1));
      
      longArray7[0] = 0L;
      longArray7[1] = 0L;
      longArray7[2] = (-1L);
      longArray7[3] = 0L;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1045.5416786577537);
      doubleArray0[1] = (-1045.5416786577537);
      doubleArray0[2] = (-1045.5416786577537);
      doubleArray0[3] = (-1045.5416786577537);
      doubleArray0[4] = (-1045.5416786577537);
      doubleArray0[5] = (-1045.5416786577537);
      doubleArray0[6] = (-1045.5416786577537);
      double[] doubleArray1 = MathArrays.scale((-1045.5416786577537), doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1093157.4018104735, 1093157.4018104735, 1093157.4018104735, 1093157.4018104735, 1093157.4018104735, 1093157.4018104735, 1093157.4018104735}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2892222.629040022, double0, 0.01);
      assertArrayEquals(new double[] {(-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1093157.4018104735, 1093157.4018104735, 1093157.4018104735, 1093157.4018104735, 1093157.4018104735, 1093157.4018104735, 1093157.4018104735}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[7][9];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1093157.4018104735, 1093157.4018104735, 1093157.4018104735, 1093157.4018104735, 1093157.4018104735, 1093157.4018104735, 1093157.4018104735}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      double double1 = MathArrays.distance1(doubleArray3, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {(-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537), (-1045.5416786577537)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 2892222.629040022;
      doubleArray4[1] = 2892222.629040022;
      doubleArray4[2] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2669.25782315;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3347.0);
      doubleArray0[5] = 1488.94203;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 2669.25782315, 0.0, (-3347.0), 1488.94203, (-1.0), Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.linearCombination((double) 0.0F, (-2769.0140453223353), (-2769.0140453223353), (-1.0));
      assertEquals(2769.0140453223353, double0, 0.01);
      
      Double[] doubleArray2 = new Double[9];
      doubleArray2[0] = (Double) 0.0;
      doubleArray2[1] = (Double) 2669.25782315;
      doubleArray2[2] = (Double) (-1.0);
      doubleArray2[3] = (Double) 2669.25782315;
      doubleArray2[4] = (Double) 1488.94203;
      doubleArray2[5] = (Double) Double.NEGATIVE_INFINITY;
      doubleArray2[6] = (Double) 0.0;
      doubleArray2[7] = (Double) (-1.0);
      doubleArray2[8] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertEquals(9, doubleArray2.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equals(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 2669.25782315, 0.0, (-3347.0), 1488.94203, (-1.0), Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 5398597.372970036;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {5398597.372970036}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.9144853595438977E13}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(5398597.372970036, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {5398597.372970036}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5734133005593317E20}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";2I>\"= )E[Acpc|";
      stringArray0[1] = "~.3NG-W:Um3#";
      stringArray0[2] = "jU7W?`eE-|";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1045.819);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2798.47;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, (-1045.819), 0.0, 2798.47}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-1,045.819 < 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-988.4);
      doubleArray0[1] = (-266.71);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 4511);
      assertEquals(8, doubleArray0.length);
      assertEquals(4511, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-988.4), (-266.71), 0.0, 0.0, 0.0, 0.0, 3.834E-20, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2239.54;
      doubleArray0[1] = (-319.258511);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1205.2915717);
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 20.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2239.54, (-319.258511), 0.0, (-1205.2915717), 2.0, 20.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7684107.465558148, double0, 0.01);
      assertArrayEquals(new double[] {2239.54, (-319.258511), 0.0, (-1205.2915717), 2.0, 20.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      doubleArray0[7] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-4003.0F);
      floatArray0[2] = (-2805.0F);
      floatArray0[3] = 740.9669F;
      floatArray0[4] = (-1926.4834F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1156);
      intArray0[1] = 1415;
      intArray0[2] = (-126);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1156), 1415, (-126), 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1100.326);
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 20.0;
      doubleArray0[5] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-1100.326), 1.34217729E8, 1.34217729E8, 20.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 9007199254740990L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 3148L;
      longArray0[4] = 1917L;
      longArray0[5] = (-3898L);
      longArray0[6] = (-2230L);
      longArray0[7] = (-687L);
      longArray0[8] = 2147483647L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,898 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-273.007771894);
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = (-709.9899483829529);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1233.97;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-273.007771894), 1.34217729E8, (-709.9899483829529), Double.NaN, 0.0, 1233.97}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 74533.24351452632, 1.801439877791744E16, 504085.7268048281, Double.NaN, 0.0, 1522681.9609}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray2, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 602.803;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = (-1370.9);
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = 100.0;
      doubleArray0[6] = (-1616.1);
      doubleArray0[7] = 1.34217729E8;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 602.803, 1.34217729E8, (-1370.9), 1.7976931348623157E308, 100.0, (-1616.1), 1.34217729E8}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-465.869949775694);
      doubleArray0[1] = 2141.6287333171313;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = (-1073.705702334297);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1584.659);
      doubleArray0[7] = 1883.00218;
      doubleArray0[8] = (-1536.0111);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-465.869949775694), 2141.6287333171313, 0.0, (-3.141592653589793), (-1073.705702334297), 0.0, (-1584.659), 1883.00218, (-1536.0111)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-465.869949775694), 2141.6287333171313, 0.0, (-3.141592653589793), (-1073.705702334297), 0.0, (-1584.659), 1883.00218, (-1536.0111)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-465.869949775694), 2141.6287333171313, 0.0, (-3.141592653589793), (-1073.705702334297), 0.0, (-1584.659), 1883.00218, (-1536.0111)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, Double.NaN, -0.0, -0.0, Double.NaN, -0.0, 0.0, -0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      double[][] doubleArray4 = new double[8][6];
      doubleArray4[0] = doubleArray0;
      doubleArray4[1] = doubleArray2;
      doubleArray4[2] = doubleArray2;
      doubleArray4[3] = doubleArray1;
      doubleArray4[4] = doubleArray3;
      doubleArray4[5] = doubleArray0;
      doubleArray4[6] = doubleArray3;
      doubleArray4[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, doubleArray4);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(8, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-465.869949775694), 2141.6287333171313, 0.0, (-3.141592653589793), (-1073.705702334297), 0.0, (-1584.659), 1883.00218, (-1536.0111)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = -0.0;
      doubleArray0[2] = 1469.17658775929;
      doubleArray0[3] = (-1471.3895655014);
      doubleArray0[4] = 4379.0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1469.17658775929;
      doubleArray1[1] = 4379.0;
      doubleArray1[2] = 1469.17658775929;
      doubleArray1[3] = 1469.17658775929;
      doubleArray1[4] = 1469.17658775929;
      doubleArray1[5] = 1469.17658775929;
      doubleArray1[6] = 1469.17658775929;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-1111.0);
      doubleArray0[0] = (-1111.0);
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {(-1111.0)}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1111.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1234321.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("{0}x{1} and {2}x{3} matrices are not subtraction compatible");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.{0}x{1} and {2}x{3} matrices are not subtraction compatible
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 1.63E18;
      doubleArray0[0] = 1.63E18;
      double double1 = 4025.46;
      doubleArray0[1] = 4025.46;
      double double2 = 3794.74252309002;
      doubleArray0[2] = 3794.74252309002;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.complex.ComplexField";
      stringArray0[3] = "S6'pE$QipSm73o";
      stringArray0[4] = "element {0} is not positive: {1}";
      stringArray0[5] = "rVSJ])qj<+,5<q";
      stringArray0[6] = "J<)aZLv;Ob4;";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertEquals(7, stringArray0.length);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection2, false);
      assertEquals(7, doubleArray0.length);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection1);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {1.63E18, 4025.46, 3794.74252309002, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection1));
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection0));
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[][] longArray0 = new long[7][0];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = (-1067L);
      longArray1[2] = 3551L;
      longArray1[3] = 0L;
      longArray1[4] = (-1895L);
      longArray1[5] = 1829L;
      longArray1[6] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 1829L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray4[4] = 0L;
      longArray4[5] = (-1067L);
      longArray4[6] = 0L;
      longArray4[7] = 1L;
      longArray4[8] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 1023L;
      longArray5[1] = 3551L;
      longArray5[2] = 0L;
      longArray5[3] = (-1895L);
      longArray5[4] = 0L;
      longArray5[5] = (-1895L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray0[5] = longArray6;
      long[] longArray7 = new long[4];
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray2));
      
      longArray7[0] = 1829L;
      longArray7[1] = 0L;
      longArray7[2] = 0L;
      longArray7[3] = 0L;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,067 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1497.930844546967;
      doubleArray0[1] = 1497.930844546967;
      doubleArray0[2] = 1497.930844546967;
      doubleArray0[3] = 1497.930844546967;
      doubleArray0[4] = 1497.930844546967;
      doubleArray0[5] = 1497.930844546967;
      doubleArray0[6] = 1497.930844546967;
      MathArrays.scaleInPlace(1497.930844546967, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {2243796.8150451896, 2243796.8150451896, 2243796.8150451896, 2243796.8150451896, 2243796.8150451896, 2243796.8150451896, 2243796.8150451896}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1497.930844546967;
      doubleArray1[1] = 1684.92846162872;
      doubleArray1[2] = 1497.930844546967;
      doubleArray1[3] = 1497.930844546967;
      doubleArray1[4] = 1497.930844546967;
      doubleArray1[5] = 1497.930844546967;
      doubleArray1[6] = 1497.930844546967;
      doubleArray1[7] = 1497.930844546967;
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1497.930844546967, 1684.92846162872, 1497.930844546967, 1497.930844546967, 1497.930844546967, 1497.930844546967, 1497.930844546967, 1497.930844546967}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-188.3);
      doubleArray0[1] = -0.0;
      doubleArray0[2] = 484.76243473394;
      doubleArray0[3] = (-1062.2);
      double[][] doubleArray1 = new double[8][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 484.76243473394;
      doubleArray2[1] = -0.0;
      doubleArray2[2] = -0.0;
      doubleArray2[3] = (-188.3);
      doubleArray2[4] = 484.76243473394;
      doubleArray2[5] = 484.76243473394;
      doubleArray2[6] = (-1062.2);
      doubleArray2[7] = 484.76243473394;
      doubleArray2[8] = -0.0;
      doubleArray1[5] = doubleArray2;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2234.747984988);
      doubleArray0[1] = (-1550.87802528383);
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = (-283.346818209);
      doubleArray0[4] = (-4639.4640242758);
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-1550.87802528383), 6.283185307179586, 0.0, (-283.346818209), (-2234.747984988), (-4639.4640242758)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2206.567164423514);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1900.70176;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-175.938976252733);
      doubleArray0[7] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-2206.567164423514), 0.0, 0.0, 1900.70176, 0.0, 0.0, (-175.938976252733), 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2206.567164423514), 0.0, 0.0, 1900.70176, 0.0, 0.0, (-175.938976252733), 0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1060.7505867867894);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-175.938976252733);
      doubleArray1[7] = (-175.938976252733);
      MathArrays.scaleInPlace((-1060.7505867867894), doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, 1125191.807368518, -0.0, 186627.37229875353, 186627.37229875353}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3273.887819;
      doubleArray0[1] = (-2356.3531345);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3273.887819, (-2356.3531345)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3273.887819;
      doubleArray1[1] = (-2356.3531345);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {3273.887819, (-2356.3531345)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3273.887819, (-2356.3531345)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = 2182;
      int int1 = 29;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 29, 2182);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (-684L);
      longArray1[4] = 0L;
      longArray1[5] = 10000L;
      longArray1[6] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray2[2] = (-1L);
      longArray3[1] = 10000L;
      longArray3[2] = 0L;
      MathArrays.checkNonNegative(longArray3);
      assertEquals(6, longArray3.length);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertArrayEquals(new long[] {0L, 10000L, 0L, 0L, 0L, 0L}, longArray3);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, (-2348));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      int int0 = (-2495);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<String, Double>>) null, 2, (-2495));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 429.3925;
      doubleArray0[1] = 429.3925;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1750.6765669797976));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {429.3925, 429.3925}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-875.3382834898988), (-875.3382834898988)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {429.3925, 429.3925}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-875.3382834898988), (-875.3382834898988)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {429.3925, 429.3925}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-875.3382834898988), (-875.3382834898988)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      double double0 = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2253.2;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 2253.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 2253.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-1931);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1931), (-1931));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MathArrays.linearCombination((-1786.73337989), 0.0, 0.0, (-1786.73337989), 0.0, (-2422.37566572));
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-2422.37566572));
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(2377.13);
      doubleArray0[2] = double2;
      Double double3 = new Double(-0.0);
      doubleArray0[3] = double3;
      try { 
        Double.valueOf("~(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3375.688921932);
      doubleArray0[1] = (-851.54872921);
      doubleArray0[2] = (-243.0);
      doubleArray0[3] = (-314.6931343320858);
      doubleArray0[4] = 2592.0;
      doubleArray0[5] = (-2057.23);
      doubleArray0[6] = 1233.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-6751.377843864), (-1703.09745842), (-486.0), (-629.3862686641716), 5184.0, (-4114.46), 2466.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "i5G7t6d{R@oLK^N";
      stringArray0[1] = "T~";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1814.36004755133);
      doubleArray0[1] = 2806.14807;
      double double0 = (-298.9721694);
      doubleArray0[2] = (-298.9721694);
      doubleArray0[3] = 3824.333554;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,814.36 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (-144.6);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 993.79F;
      floatArray0[1] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      long[][] longArray0 = new long[8][8];
      long[] longArray1 = new long[7];
      longArray1[0] = (-365L);
      longArray1[1] = 0L;
      longArray1[2] = (-1L);
      longArray1[3] = 0L;
      longArray1[4] = (-1L);
      longArray1[5] = 10000L;
      longArray1[6] = (-1775L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = (-365L);
      longArray3[1] = 0L;
      longArray3[2] = (-1L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      longArray4[0] = (-1L);
      longArray4[1] = (-1775L);
      longArray4[2] = (-1775L);
      longArray4[3] = 0L;
      longArray4[4] = (-1L);
      longArray4[5] = (-1L);
      longArray4[6] = 0L;
      longArray4[7] = (-365L);
      longArray4[8] = (-1775L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = 0L;
      longArray5[1] = (-1L);
      longArray5[2] = 0L;
      longArray5[3] = (-365L);
      longArray5[4] = (-660L);
      longArray5[5] = (-1L);
      longArray5[6] = (-1775L);
      longArray5[7] = (-1L);
      longArray5[8] = (-365L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      longArray6[0] = (-1L);
      longArray6[1] = (-365L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[9];
      longArray7[0] = 187L;
      longArray7[1] = 0L;
      longArray7[2] = (-660L);
      longArray7[3] = 0L;
      longArray7[4] = 0L;
      longArray7[5] = (-365L);
      longArray7[6] = 0L;
      longArray7[7] = 10000L;
      longArray7[8] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[8];
      longArray8[0] = 0L;
      longArray8[1] = 0L;
      longArray8[2] = (-660L);
      longArray8[3] = 0L;
      longArray8[4] = 187L;
      longArray8[5] = 0L;
      longArray8[6] = (-1L);
      longArray8[7] = 0L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -365 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
