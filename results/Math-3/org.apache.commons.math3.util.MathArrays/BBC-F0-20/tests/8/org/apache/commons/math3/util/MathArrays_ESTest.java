/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:51:54 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      int int0 = (-2954);
      Integer integer0 = new Integer((-2954));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-2954), (int)integer0);
      
      Pair<Integer, Object> pair0 = new Pair<Integer, Object>(integer0, integer0);
      assertNotNull(pair0);
      assertTrue(integer0.equals((Object)int0));
      
      Pair<Integer, Object> pair1 = new Pair<Integer, Object>(pair0);
      assertNotNull(pair1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(pair1.equals((Object)pair0));
      
      Field<Pair<Integer, Object>> field0 = (Field<Pair<Integer, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int1 = 1925;
      int int2 = 2143145297;
      // Undeclared exception!
      MathArrays.buildArray(field0, 1925, 2143145297);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(176);
      assertNotNull(integer0);
      assertEquals(176, (int)integer0);
      
      Pair<Integer, Object> pair0 = new Pair<Integer, Object>(integer0, (Object) null);
      assertNotNull(pair0);
      
      Pair<Integer, Object> pair1 = new Pair<Integer, Object>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      Field<Pair<Integer, Object>> field0 = (Field<Pair<Integer, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2, 2);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.math3.util.Pair
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Object>> field0 = (Field<Pair<Integer, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null).when(field0).getZero();
      Pair<Integer, Object>[][] pairArray0 = MathArrays.buildArray(field0, 2, 2);
      assertNotNull(pairArray0);
      assertEquals(2, pairArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Object>> field0 = (Field<Pair<Integer, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<Integer, Object>[][] pairArray0 = MathArrays.buildArray(field0, 24, (-141));
      assertNotNull(pairArray0);
      assertEquals(24, pairArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2143572019);
      intArray0[1] = (-2903);
      intArray0[2] = (-709);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-709);
      intArray1[1] = (-709);
      intArray1[2] = (-2143572019);
      intArray1[3] = (-2903);
      intArray1[4] = (-2903);
      intArray1[5] = (-2903);
      intArray1[6] = (-2903);
      intArray1[7] = (-2143572019);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {(-2143572019), (-2903), (-709)}, intArray0);
      assertArrayEquals(new int[] {(-709), (-709), (-2143572019), (-2903), (-2903), (-2903), (-2903), (-2143572019)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-7822482), int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4.3466666666666665E18;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.8014398509481984E16;
      doubleArray0[3] = 186.4500933;
      doubleArray0[4] = 2329.503027054;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = (-0.3058015757857271);
      doubleArray0[7] = 0.0651995099379441;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {4.3466666666666665E18, 1.0, 1.8014398509481984E16, 186.4500933, 2329.503027054, 1.304E19, (-0.3058015757857271), 0.0651995099379441}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {4.3466666666666665E18, 1.0, 1.8014398509481984E16, 186.4500933, 2329.503027054, 1.304E19, (-0.3058015757857271), 0.0651995099379441}, doubleArray0, 0.01);
      assertEquals(1.3745378700845777E19, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (1 <= 18,014,398,509,481,984)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = (-1);
      intArray0[2] = (-410);
      intArray0[3] = (-1691);
      intArray0[4] = 2039;
      intArray0[5] = 163;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {2, (-1), (-410), (-1691), 2039, 163}, intArray0);
      assertArrayEquals(new int[] {2, (-1), (-410), (-1691), 2039, 163}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2039;
      floatArray0[1] = (float) 2039;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2039.0F, 2039.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-410);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 163;
      doubleArray0[3] = (double) (-1691);
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2039;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-1319);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1319));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2073419.0;
      doubleArray0[1] = (-508.0717);
      doubleArray0[2] = 4.3466666666666665E18;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2073419.0, (-508.0717), 4.3466666666666665E18}, doubleArray0, 0.01);
      assertEquals(4.3466666666666665E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-1984.50105028);
      doubleArray0[2] = 308247.04000000004;
      doubleArray0[3] = (-3529.458);
      doubleArray0[4] = 1746.405502;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 3.26E18;
      doubleArray0[7] = (-2539.426);
      doubleArray0[8] = 1.0708593250394448E-7;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, (-1984.50105028), 308247.04000000004, (-3529.458), 1746.405502, 3.834E-20, 3.26E18, (-2539.426), 1.0708593250394448E-7}, doubleArray0, 0.01);
      assertEquals(1.3441324339513573E19, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, (-1984.50105028), 308247.04000000004, (-3529.458), 1746.405502, 3.834E-20, 3.26E18, (-2539.426), 1.0708593250394448E-7}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.806692E38, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, (-1144), (-1144));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.125;
      doubleArray0[1] = 1163.824291;
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.125, 1163.824291}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2146090749;
      intArray0[1] = (-1);
      intArray0[2] = (-3895);
      intArray0[3] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2146090749, (-1), (-3895), 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 455.717F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {455.717F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 25;
      intArray0[1] = (-1870);
      intArray0[2] = 1431655765;
      intArray0[3] = 1928;
      intArray0[4] = 9;
      intArray0[5] = 0;
      intArray0[6] = 411;
      intArray0[7] = 4230;
      intArray0[8] = 0;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 411;
      intArray1[1] = 9;
      intArray1[2] = 510;
      intArray1[3] = 9;
      intArray1[4] = 9;
      intArray1[5] = 0;
      intArray1[6] = 1928;
      intArray1[7] = 1431655765;
      intArray1[8] = 0;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {411, 9, 510, 9, 9, 0, 1928, 1431655765, 0}, intArray1);
      assertArrayEquals(new int[] {25, (-1870), 1431655765, 1928, 9, 0, 411, 4230, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2.024663647830581E9, double0, 0.01);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1984.40573);
      doubleArray0[1] = (-6147.62);
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (-6147.62);
      doubleArray0[4] = 357.868081278052;
      doubleArray0[5] = (-819.471258421);
      doubleArray0[6] = (-819.471258421);
      doubleArray0[7] = 1.304E19;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1984.40573), (-6147.62), 1.304E19, (-6147.62), 357.868081278052, (-819.471258421), (-819.471258421), 1.304E19}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1984.40573), (-6147.62), 1.304E19, (-6147.62), 357.868081278052, (-819.471258421), (-819.471258421), 1.304E19}, doubleArray0, 0.01);
      assertEquals(1.8441344853345161E19, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("non positive definite linear operator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.non positive definite linear operator
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "";
      stringArray0[2] = "h)~r!_/$ 9W(s*aWX-C";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[5];
      double double0 = 1772.39;
      doubleArray0[0] = 1772.39;
      doubleArray0[1] = 832.660153427;
      doubleArray0[2] = 65.65614475127808;
      doubleArray0[3] = (-352.3880153);
      doubleArray0[4] = 1.1183885273176014E10;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1772.39, 832.660153427, 65.65614475127808, (-352.3880153), 1.1183885273176014E10}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1772.39;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 357.868081278052;
      doubleArray0[2] = 839.0;
      doubleArray0[4] = (-819.471258421);
      doubleArray0[5] = (-2124.74258);
      doubleArray0[6] = 1.304E19;
      double double0 = (-6147.62);
      doubleArray0[7] = (-6147.62);
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {357.868081278052, 0.0, 839.0, 0.0, (-819.471258421), (-2124.74258), 1.304E19, (-6147.62)}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.304E19, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("88iZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.88iZ
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 19.272866643559908;
      doubleArray0[2] = (-2990.683998062609);
      doubleArray0[3] = 149.2690237439741;
      doubleArray0[4] = 1258.0507911891732;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 19.272866643559908, (-2990.683998062609), 149.2690237439741, 1258.0507911891732}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 19.272866643559908, (-2990.683998062609), 149.2690237439741, 1258.0507911891732}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("{0} is not a finite number");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.{0} is not a finite number
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2832.567810546142;
      doubleArray0[1] = 0.9;
      doubleArray0[2] = 826.0;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 1.997844754509471E-9;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 6.123233995736766E-17;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {2832.567810546142, 0.9, 826.0, 1.34217729E8, 1.997844754509471E-9, 1.0, 6.123233995736766E-17}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5665.135621092284, 1.8, 1652.0, 2.68435458E8, 3.995689509018942E-9, 2.0, 1.2246467991473532E-16}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 2743L;
      longArray0[1] = 2409L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {2743L, 2409L}, longArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      double double0 = 839.0;
      doubleArray0[0] = 839.0;
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {839.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 364.53437511655;
      doubleArray0[1] = 1.5830993332061267E-10;
      doubleArray0[2] = (-2220.85);
      doubleArray0[3] = 4.9E-324;
      doubleArray0[4] = 203.6676;
      doubleArray0[5] = 6.032174644509064E-23;
      doubleArray0[6] = 0.16666666666666666;
      doubleArray0[7] = (-295.829123731);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-835.6105753);
      doubleArray0[1] = (-1716.2898346550646);
      doubleArray0[2] = 0.6537823779346629;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-835.6105753), (-1716.2898346550646), 0.6537823779346629}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1671.2211506), (-3432.5796693101292), 1.3075647558693257}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {(-835.6105753), (-1716.2898346550646), 0.6537823779346629}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(981);
      assertNotNull(integer0);
      assertEquals(981, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(2, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(981, (int)integer1);
      
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertNotNull(doubleArray3);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray3.length);
      assertArrayEquals(new double[] {(-835.6105753), (-1716.2898346550646), 0.6537823779346629}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1671.2211506), (-3432.5796693101292), 1.3075647558693257}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, false);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray3.length);
      assertArrayEquals(new double[] {(-835.6105753), (-1716.2898346550646), 0.6537823779346629}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1671.2211506), (-3432.5796693101292), 1.3075647558693257}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      Integer[] integerArray1 = new Integer[1];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray1, mathArrays_OrderDirection1, false);
      assertEquals(1, integerArray1.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertTrue(boolean1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertNotSame(integerArray1, integerArray0);
      
      double double0 = MathArrays.linearCombination(doubleArray3, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray3.length);
      assertArrayEquals(new double[] {(-835.6105753), (-1716.2898346550646), 0.6537823779346629}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1671.2211506), (-3432.5796693101292), 1.3075647558693257}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals((-5102.49325515426), double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long[] longArray0 = new long[6];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1236.12;
      doubleArray0[1] = 1236.12;
      doubleArray0[2] = 1236.12;
      doubleArray0[3] = 1236.12;
      doubleArray0[4] = 0.9985313415527344;
      doubleArray0[5] = 1236.12;
      doubleArray0[6] = 1236.12;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1236.12, 1236.12, 1236.12, 1236.12, 0.9985313415527344, 1236.12, 1236.12}, doubleArray0, 0.01);
      assertEquals(9167956.923464838, double0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.9985313415527344;
      doubleArray1[1] = 9167956.923464838;
      doubleArray1[2] = 0.9985313415527344;
      doubleArray1[3] = 9167956.923464838;
      doubleArray1[4] = 0.9985313415527344;
      doubleArray1[5] = 9167956.923464838;
      doubleArray1[6] = 0.9985313415527344;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {1236.12, 1236.12, 1236.12, 1236.12, 0.9985313415527344, 1236.12, 1236.12}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.9985313415527344, 9167956.923464838, 0.9985313415527344, 9167956.923464838, 0.9985313415527344, 9167956.923464838, 0.9985313415527344}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 542.536F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1214.879F;
      floatArray0[4] = (-1952.0F);
      floatArray0[5] = 0.0F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1214.879F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = (-1952.0F);
      floatArray1[4] = 1214.879F;
      floatArray1[5] = (-2715.85F);
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {542.536F, 1.0F, 0.0F, 1214.879F, (-1952.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1214.879F, 0.0F, 1.0F, (-1952.0F), 1214.879F, (-2715.85F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-0.49999999999999994);
      double[] doubleArray2 = new double[12];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.997844754509471E-9;
      doubleArray2[1] = 1.997844754509471E-9;
      doubleArray2[2] = (-1823.0);
      doubleArray2[3] = (-2397.628963726497);
      doubleArray2[4] = 1.997844754509471E-9;
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, 1.997844754509471E-9);
      assertNotNull(doubleArray3);
      assertEquals(12, doubleArray2.length);
      assertEquals(12, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      double[] doubleArray4 = MathArrays.convolve(doubleArray3, doubleArray2);
      assertNotNull(doubleArray4);
      assertEquals(12, doubleArray2.length);
      assertEquals(12, doubleArray3.length);
      assertEquals(23, doubleArray4.length);
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray3);
      assertEquals(12, doubleArray2.length);
      assertEquals(12, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(1.42572240348648E-9, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2808;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = (-1);
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 1;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[6];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = (-1197.6838F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1021.89264F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-2871.82F);
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1197.6838F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {3.4028235E38F, (-1197.6838F), 0.0F, 1021.89264F, (-1.0F), (-2871.82F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1197.6838F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-2871.82F);
      doubleArray1[1] = (double) (-1197.6838F);
      doubleArray1[2] = (double) 3.4028235E38F;
      doubleArray1[3] = (double) 0.0F;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray2.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2871.820068359375), (-1197.683837890625), 3.4028234663852886E38, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1164.209F);
      floatArray0[1] = (-4220.2F);
      floatArray0[2] = -0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1164.209F), (-4220.2F), -0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1164.209F), (-4220.2F), -0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-824);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1583);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1583);
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = (-432);
      intArray1[4] = (-1583);
      intArray1[5] = 0;
      intArray1[6] = 534;
      intArray1[7] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {(-824), 0, 0, (-1583)}, intArray0);
      assertArrayEquals(new int[] {(-1583), 0, 0, (-432), (-1583), 0, 534, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1910, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = new float[9];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3073.81);
      doubleArray0[1] = 817.84;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-3073.81), 817.84}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-6147.62), 1635.68}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-3073.81), 817.84}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-6147.62), 1635.68}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 1438;
      intArray0[2] = 1;
      intArray0[3] = 337;
      intArray0[4] = 1;
      intArray0[5] = 2147370174;
      intArray0[6] = (-489);
      intArray0[7] = (-1936);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {(-1), 1438, 1, 337, 1, 2147370174, (-489), (-1936)}, intArray0);
      assertArrayEquals(new int[] {(-1), 1438, 1, 337, 1, 2147370174, (-489), (-1936)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 337;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {337.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3.834E-20;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 344.1183210753312;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 44.2091F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 2306.7378F;
      floatArray0[3] = 3402.7913F;
      floatArray0[4] = 2048.0F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 2048.0F;
      floatArray1[1] = 2048.0F;
      floatArray1[2] = 44.2091F;
      floatArray1[3] = 44.2091F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 44.2091F;
      floatArray1[6] = 44.2091F;
      floatArray1[7] = 3402.7913F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {44.2091F, 0.0F, 2306.7378F, 3402.7913F, 2048.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2048.0F, 2048.0F, 44.2091F, 44.2091F, 0.0F, 44.2091F, 44.2091F, 3402.7913F}, floatArray1, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 4.116164446561962E-8;
      doubleArray2[1] = (double) 2306.7378F;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2445.29F);
      floatArray0[1] = (-1363.4044F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-2445.29F), (-1363.4044F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          double[] doubleArray0 = new double[3];
          int[] intArray0 = new int[0];
          int int0 = MathArrays.distance1(intArray0, intArray0);
          assertEquals(0, intArray0.length);
          assertArrayEquals(new int[] {}, intArray0);
          assertEquals(0, int0);
          
          double[] doubleArray1 = MathArrays.scale((-2475), doubleArray0);
          assertNotNull(doubleArray1);
          assertEquals(3, doubleArray0.length);
          assertEquals(3, doubleArray1.length);
          assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
          assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray1, 0.01);
          assertFalse(doubleArray1.equals((Object)doubleArray0));
          assertNotSame(doubleArray0, doubleArray1);
          assertNotSame(doubleArray1, doubleArray0);
          
          double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
          assertNotNull(doubleArray2);
          assertEquals(3, doubleArray0.length);
          assertEquals(3, doubleArray2.length);
          assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
          assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
          assertFalse(doubleArray0.equals((Object)doubleArray1));
          assertFalse(doubleArray2.equals((Object)doubleArray0));
          assertFalse(doubleArray2.equals((Object)doubleArray1));
          assertNotSame(doubleArray0, doubleArray2);
          assertNotSame(doubleArray0, doubleArray1);
          assertNotSame(doubleArray2, doubleArray0);
          assertNotSame(doubleArray2, doubleArray1);
          
          // Undeclared exception!
          try { 
            MathArrays.ebeSubtract(doubleArray1, (double[]) null);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.apache.commons.math3.util.MathArrays", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-240.88914058975);
      doubleArray1[1] = (-394.91503943990875);
      doubleArray1[2] = 2785561.0;
      doubleArray1[3] = 1175.2;
      doubleArray1[4] = 0.04168701738764507;
      doubleArray1[5] = (-6.032174644509064E-23);
      doubleArray1[6] = 1.34217729E8;
      doubleArray1[7] = 1.34217729E8;
      doubleArray1[8] = 4.983191803254889E-7;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1669;
      intArray0[1] = 1669;
      intArray0[2] = 1669;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1669, 1669, 1669}, intArray0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "convergence failed";
      stringArray0[1] = "convergence failed";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 1669);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(1669, intArray1.length);
      assertArrayEquals(new int[] {1669, 1669, 1669}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1669;
      doubleArray0[1] = (double) 1669;
      doubleArray0[2] = (double) 1669;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,669 >= 1,669)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][7];
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2341.44591466581);
      doubleArray1[1] = (-2341.44591466581);
      doubleArray1[2] = 705.2999825;
      doubleArray1[3] = (-2341.44591466581);
      doubleArray1[4] = (-2341.44591466581);
      doubleArray1[5] = 1730.4117976112807;
      MathArrays.scaleInPlace((-2341.44591466581), doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {5482368.971305212, 5482368.971305212, (-1651421.7626384925), 5482368.971305212, 5482368.971305212, (-4051665.634206454)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-2324.631606));
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {5482368.971305212, 5482368.971305212, (-1651421.7626384925), 5482368.971305212, 5482368.971305212, (-4051665.634206454)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-785.417420246013), (-785.417420246013), 236.586670349707, (-785.417420246013), (-785.417420246013), 580.451404634345}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray3);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2201);
      intArray0[1] = 2828;
      intArray0[2] = (-3403);
      intArray0[3] = (-249);
      intArray0[4] = (-1212);
      intArray0[5] = 32768;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2201), 2828, (-3403), (-249), (-1212), 32768}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-2324.631606);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = null;
      int[] intArray0 = new int[6];
      intArray0[0] = (-1438);
      intArray0[1] = (-1438);
      intArray0[2] = 2230;
      intArray0[3] = (-1438);
      intArray0[4] = (-1438);
      intArray0[5] = (-1438);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1438), (-1438), 2230, (-1438), (-1438), (-1438)}, intArray0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        MathArrays.scale((-117.931141966), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 16);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(16, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long[][] longArray0 = new long[4][5];
      long[] longArray1 = new long[2];
      longArray1[0] = 1073741824L;
      longArray1[1] = (-1088L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1088L);
      longArray2[1] = 1073741824L;
      longArray2[2] = (-1088L);
      longArray2[3] = 1073741824L;
      longArray2[4] = (-1088L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 1073741824L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 1073741824L;
      longArray4[1] = 1073741824L;
      longArray4[2] = 1073741824L;
      longArray4[3] = 1073741824L;
      longArray4[4] = 1073741824L;
      longArray4[5] = (-1608L);
      longArray4[6] = (-1088L);
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,088 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.scaleInPlace(1458.04, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = 1458.04;
      doubleArray1[1] = 5723168.83562945;
      doubleArray1[2] = 1458.04;
      double[][] doubleArray2 = new double[0][8];
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(3, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1458.04, 5723168.83562945}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 5723168.83562945;
      doubleArray3[1] = 1458.04;
      doubleArray3[2] = 1458.04;
      doubleArray3[3] = (-3672.8);
      doubleArray3[4] = 1458.04;
      doubleArray3[5] = 5723168.83562945;
      doubleArray3[6] = 5723168.83562945;
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray3);
      assertEquals(3, doubleArray1.length);
      assertEquals(7, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 1458.04, 5723168.83562945}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5723168.83562945, 1458.04, 1458.04, (-3672.8), 1458.04, 5723168.83562945, 5723168.83562945}, doubleArray3, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(5723168.83562945, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      boolean boolean0 = MathArrays.equals(doubleArray3, (double[]) null);
      assertEquals(7, doubleArray3.length);
      assertArrayEquals(new double[] {5723168.83562945, 1458.04, 1458.04, (-3672.8), 1458.04, 5723168.83562945, 5723168.83562945}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(boolean0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      boolean boolean1 = MathArrays.equals(doubleArray3, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(7, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 1458.04, 5723168.83562945}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5723168.83562945, 1458.04, 1458.04, (-3672.8), 1458.04, 5723168.83562945, 5723168.83562945}, doubleArray3, 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(boolean1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray4);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray4.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray4, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = (-1);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1087.5);
      double double2 = MathArrays.linearCombination(0.0, (-1087.5), (-1087.5), (-1087.5));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1182656.25, double2, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1182656.25;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1182656.25;
      doubleArray0[4] = 1182656.25;
      doubleArray0[5] = (-1087.5);
      double double3 = 277.8682466699;
      doubleArray0[6] = 277.8682466699;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1182656.25, 0.0, 1182656.25, 1182656.25, (-1087.5), 277.8682466699, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1182656.25, 0.0, 1182656.25, 1182656.25, (-1087.5), 277.8682466699, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double4 = MathArrays.linearCombination(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1182656.25, 0.0, 1182656.25, 1182656.25, (-1087.5), 277.8682466699, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      float float0 = 1040.9364F;
      floatArray0[1] = 1040.9364F;
      floatArray0[2] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1040.9364F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1182656.25, 0.0, 1182656.25, 1182656.25, (-1087.5), 277.8682466699, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 463.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 88.0F;
      floatArray0[3] = 2072.0F;
      floatArray0[4] = 893.00183F;
      floatArray0[5] = (-4768.77F);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 88.0F;
      floatArray1[1] = 463.0F;
      floatArray1[2] = (-4768.77F);
      floatArray1[3] = 463.0F;
      floatArray1[4] = (-1.0F);
      floatArray1[5] = 2072.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {463.0F, (-1.0F), 88.0F, 2072.0F, 893.00183F, (-4768.77F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {88.0F, 463.0F, (-4768.77F), 463.0F, (-1.0F), 2072.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float[] floatArray0 = new float[9];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1732.76273;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1732.76273}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1732.76273;
      doubleArray2[1] = 1732.76273;
      doubleArray2[2] = 1732.76273;
      doubleArray2[3] = 1732.76273;
      doubleArray2[4] = 1732.76273;
      doubleArray2[5] = 1732.76273;
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float[] floatArray0 = new float[9];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "l/2z0<JYlwN2uZ";
      stringArray0[1] = "";
      stringArray0[2] = "<xyB+AW }SLZ~#_";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 199;
      intArray0[1] = 1445;
      intArray0[2] = 199;
      intArray0[3] = 1445;
      intArray0[4] = 199;
      intArray0[5] = 1445;
      intArray0[6] = 199;
      intArray0[7] = 199;
      int[] intArray1 = MathArrays.copyOf(intArray0, 199);
      assertNotNull(intArray1);
      assertEquals(199, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {199, 1445, 199, 1445, 199, 1445, 199, 199}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[9];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4.666408939912842E8;
      doubleArray0[1] = 3778.53;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {4.666408939912842E8, 3778.53}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {4.666408939912842E8, 3778.53}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {4.666408939912842E8, 3778.53}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.666408939912842E8, 3778.53}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination(3778.53, 3778.53, Double.POSITIVE_INFINITY, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[18];
      intArray0[0] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(18, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-216.91297052);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2084.148F);
      floatArray0[1] = 81.05F;
      floatArray0[2] = 2333.426F;
      floatArray0[3] = 232.35F;
      floatArray0[4] = 822.41406F;
      floatArray0[5] = 1283.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-2084.148F), 81.05F, 2333.426F, 232.35F, 822.41406F, 1283.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1992.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-175.67953F);
      floatArray0[4] = 3.4028235E38F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {1992.0F, 0.0F, 0.0F, (-175.67953F), 3.4028235E38F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, Double.NaN, 1374.338, 1374.338, 3.834E-20);
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2001.75F);
      floatArray0[1] = 3402.9724F;
      floatArray0[2] = 1943.2821F;
      floatArray0[3] = 4131.89F;
      floatArray0[4] = (-786.87F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 91.4747F;
      floatArray0[7] = 0.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1943.2821F;
      floatArray1[1] = 0.0F;
      floatArray1[3] = 3402.9724F;
      floatArray1[4] = (-786.87F);
      floatArray1[5] = (-786.87F);
      floatArray1[6] = (-2001.75F);
      floatArray1[7] = (-2001.75F);
      floatArray1[8] = 4131.89F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {(-2001.75F), 3402.9724F, 1943.2821F, 4131.89F, (-786.87F), 0.0F, 91.4747F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1943.2821F, 0.0F, 0.0F, 3402.9724F, (-786.87F), (-786.87F), (-2001.75F), (-2001.75F), 4131.89F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = 1.304E19;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      MathArrays.scaleInPlace(1.304E19, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38}, doubleArray0, 0.01);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (-4088.03582833462));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 314.65967F;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 314.65967F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[0][2];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 314.65967F;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) (-1);
      doubleArray1[5] = (double) 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 314.65966796875, 0.0, 0.0, (-1.0), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = (-1);
      intArray1[2] = (-1);
      intArray1[3] = (-1);
      intArray1[4] = 0;
      intArray1[5] = (-1);
      intArray1[6] = 0;
      intArray1[7] = 2;
      intArray1[8] = 0;
      int int1 = MathArrays.distance1(intArray1, intArray1);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), 0, (-1), 0, 2, 0}, intArray1);
      assertTrue(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, int1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = null;
      Double[] doubleArray1 = new Double[5];
      Double double0 = new Double(419.45669889257783);
      assertNotNull(double0);
      assertEquals(419.45669889257783, (double)double0, 0.01);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(419.45669889257783);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(419.45669889257783, (double)double1, 0.01);
      
      doubleArray1[1] = double1;
      Double double2 = new Double(419.45669889257783);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(419.45669889257783, (double)double2, 0.01);
      
      doubleArray1[2] = double2;
      Double double3 = new Double(419.45669889257783);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(419.45669889257783, (double)double3, 0.01);
      
      doubleArray1[3] = double3;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 705.2999825;
      doubleArray0[3] = 705.2999825;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3262688.6667267415;
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 3480.1002, 1299.0, 0.0, 0.0, 0.0, 1.0, (-2.6033824355191673E-8));
      assertEquals((-2.6033824355191673E-8), double0, 0.01);
      
      float[] floatArray0 = new float[2];
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 89.44F;
      floatArray1[1] = (-2433.0F);
      floatArray1[2] = 89.44F;
      floatArray1[3] = (-2433.0F);
      floatArray1[4] = (-2433.0F);
      floatArray1[5] = 89.44F;
      floatArray1[6] = (-2433.0F);
      boolean boolean0 = MathArrays.equals(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {89.44F, (-2433.0F), 89.44F, (-2433.0F), (-2433.0F), 89.44F, (-2433.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 89.44F;
      doubleArray0[1] = (-2.6033824355191673E-8);
      doubleArray0[2] = 2363.1288;
      doubleArray0[3] = (double) (-2433.0F);
      doubleArray0[4] = (double) 89.44F;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (89.44 >= -0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, Double.NaN, 1374.338, 1374.338, 3.834E-20);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray0, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 14;
      intArray0[1] = (-696);
      intArray0[2] = (-332);
      intArray0[3] = (-1033);
      intArray0[4] = 955;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {14, (-696), (-332), (-1033), 955}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.checkOrder(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1644.8325F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1644.8325F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1644.8325F), 0.0F, 0.0F, 0.0F, (-1644.8325F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      double double1 = MathArrays.linearCombination((double) 0.0F, (double) (-1644.8325F), -0.0, 4.438921624363781E-8);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long[] longArray0 = new long[6];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 356L;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 356L;
      floatArray0[2] = (float) 65L;
      floatArray0[3] = (float) (-1073741824L);
      floatArray0[4] = (float) 356L;
      floatArray0[5] = (float) 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 356.0F, 65.0F, (-1.07374182E9F), 356.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long[] longArray0 = new long[6];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 129;
      intArray0[1] = 124;
      intArray0[2] = (-1438);
      intArray0[3] = 2230;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {129, 124, (-1438), 2230}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 30.31618325001346;
      doubleArray0[1] = 87514.87044745129;
      doubleArray0[2] = (-870.3674524);
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {30.31618325001346, 87514.87044745129, (-870.3674524), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 8114.517195;
      doubleArray0[1] = 8114.517195;
      doubleArray0[2] = 8114.517195;
      doubleArray0[3] = 8114.517195;
      doubleArray0[4] = 8114.517195;
      doubleArray0[5] = 8114.517195;
      doubleArray0[6] = 705.2999825;
      double double0 = MathArrays.linearCombination(8114.517195, (-817.452595224442), (-835.325), 757.0, (-2.6033824355191673E-8), (-817.452595224442), 8114.517195, 1010.310784);
      assertEquals(932610.0640371029, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {705.2999825, 0.0, 8114.517195, 8114.517195, 8114.517195, 8114.517195, 8114.517195, 8114.517195}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {705.2999825, 0.0, 8114.517195, 8114.517195, 8114.517195, 8114.517195, 8114.517195, 8114.517195}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertArrayEquals(new double[] {705.2999825, 0.0, 8114.517195, 8114.517195, 8114.517195, 8114.517195, 8114.517195, 8114.517195}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[][] longArray0 = new long[1][1];
      long[] longArray1 = new long[9];
      longArray1[0] = 1L;
      longArray1[1] = (-1133L);
      longArray1[2] = (-1133L);
      longArray1[3] = (-1133L);
      longArray1[4] = 2147483647L;
      longArray1[5] = 2147483647L;
      longArray1[6] = (-1133L);
      longArray1[7] = (-1133L);
      longArray1[8] = (-301L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = (-1);
      intArray1[2] = (-1);
      intArray1[3] = (-1);
      intArray1[4] = (-1);
      intArray1[5] = (-1);
      intArray1[6] = (-1);
      intArray1[7] = (-1);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 6.5845389307950675E7;
      doubleArray0[1] = 6.5845389307950675E7;
      doubleArray0[2] = 6.5845389307950675E7;
      doubleArray0[3] = 6.5845389307950675E7;
      doubleArray0[4] = 3654.01148437162;
      doubleArray0[5] = 6.5845389307950675E7;
      double[] doubleArray1 = MathArrays.scale(6.5845389307950675E7, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 3654.01148437162, 6.5845389307950675E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.335615293115585E15, 4.335615293115585E15, 4.335615293115585E15, 4.335615293115585E15, 2.4059980872417206E11, 4.335615293115585E15}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 6.5845389307950675E7;
      doubleArray2[1] = 3654.01148437162;
      doubleArray2[2] = 6.5845389307950675E7;
      doubleArray2[3] = 3654.01148437162;
      doubleArray2[4] = 6.5845389307950675E7;
      doubleArray2[5] = 3654.01148437162;
      doubleArray2[6] = 6.5845389307950675E7;
      doubleArray2[7] = 3654.01148437162;
      doubleArray2[8] = 496.2885026427529;
      double double0 = MathArrays.distance(doubleArray1, doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 3654.01148437162, 6.5845389307950675E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.335615293115585E15, 4.335615293115585E15, 4.335615293115585E15, 4.335615293115585E15, 2.4059980872417206E11, 4.335615293115585E15}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.5845389307950675E7, 3654.01148437162, 6.5845389307950675E7, 3654.01148437162, 6.5845389307950675E7, 3654.01148437162, 6.5845389307950675E7, 3654.01148437162, 496.2885026427529}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(9.694730463779234E15, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 3654.01148437162, 6.5845389307950675E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.335615293115585E15, 4.335615293115585E15, 4.335615293115585E15, 4.335615293115585E15, 2.4059980872417206E11, 4.335615293115585E15}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2.1678316736156048E16, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray3 = MathArrays.scale(247.1488272, doubleArray1);
      assertNotNull(doubleArray3);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 3654.01148437162, 6.5845389307950675E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.07154223488390106E18, 1.07154223488390106E18, 1.07154223488390106E18, 1.07154223488390106E18, 5.946396055072345E13, 1.07154223488390106E18}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {4.335615293115585E15, 4.335615293115585E15, 4.335615293115585E15, 4.335615293115585E15, 2.4059980872417206E11, 4.335615293115585E15}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1869.6597971);
      doubleArray0[2] = 183.0;
      doubleArray0[3] = (-283.8628);
      doubleArray0[4] = (-934.283);
      doubleArray0[5] = (-1363.788891);
      doubleArray0[6] = 1.34217729E8;
      doubleArray0[7] = 331.0;
      doubleArray0[8] = (-7.44321345601866E-11);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-7.44321345601866E-11);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NaN, (-1869.6597971), 183.0, (-283.8628), (-934.283), (-1363.788891), 1.34217729E8, 331.0, (-7.44321345601866E-11)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-7.44321345601866E-11)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {(-7.44321345601866E-11)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1669;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1669.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(0, int0);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      long[][] longArray0 = new long[2][4];
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) (-1);
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[1] = (long) (-1);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 6.585035837891752E7;
      doubleArray0[1] = (-774.561047040681);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 0.25534194707870483;
      doubleArray0[8] = (-612.2512180588);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {6.585035837891752E7, (-774.561047040681), 0.0, 0.0, (-1.0), (-1.0), 0.0, 0.25534194707870483, (-612.2512180588)}, doubleArray0, 0.01);
      assertEquals(6.585035838631914E7, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {4.336269698631873E15, 599944.8155927561, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0651995099379441, 374851.5540144842}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.585035837891752E7, (-774.561047040681), 0.0, 0.0, (-1.0), (-1.0), 0.0, 0.25534194707870483, (-612.2512180588)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[5];
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-404.6756F);
      floatArray1[4] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-404.6756F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      long[][] longArray0 = new long[2][3];
      long[] longArray1 = new long[6];
      longArray1[0] = (long) (-1);
      longArray1[1] = (long) (-1);
      longArray1[2] = 2147483647L;
      longArray1[3] = (long) (-1);
      longArray1[4] = (long) (-1);
      longArray1[5] = (-1133L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (-1);
      longArray2[1] = (long) (-1);
      longArray2[2] = (long) (-1);
      longArray2[3] = (long) (-1);
      longArray2[4] = (long) (-1);
      longArray2[5] = (long) (-1);
      longArray0[1] = longArray2;
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long[] longArray0 = new long[6];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 356L;
      doubleArray0[2] = (double) (-1073741824L);
      long[][] longArray1 = new long[6][6];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1116);
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1116), (-1116));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.linearCombination(0.0, 3480.1002, 1299.0, 0.0, 0.0, 0.0, 1.0, (-2.6033824355191673E-8));
      assertEquals((-2.6033824355191673E-8), double0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 5723168.83562945;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 3480.1002;
      doubleArray1[5] = (-3451.50105028);
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 5723168.83562945, 1.0, 1.0, 3480.1002, (-3451.50105028)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-2.6033824355191673E-8);
      doubleArray2[2] = (-2.6033824355191673E-8);
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = new Double[5];
      Double double0 = new Double(419.45669889257783);
      assertNotNull(double0);
      assertEquals(419.45669889257783, (double)double0, 0.01);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(419.45669889257783);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(419.45669889257783, (double)double1, 0.01);
      
      doubleArray1[1] = double1;
      Double double2 = new Double(419.45669889257783);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(419.45669889257783, (double)double2, 0.01);
      
      doubleArray1[2] = double2;
      Double double3 = new Double(419.45669889257783);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(419.45669889257783, (double)double3, 0.01);
      
      doubleArray1[3] = double3;
      Double double4 = new Double(3163.7);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals(3163.7, (double)double4, 0.01);
      
      doubleArray1[4] = double4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(5, doubleArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = (-756);
      intArray0[1] = (-756);
      intArray0[2] = 134217729;
      intArray0[3] = 2147483615;
      intArray0[4] = 1946;
      intArray0[5] = 1946;
      int int1 = 1;
      intArray0[6] = 1;
      int int2 = 134217729;
      intArray0[7] = 134217729;
      intArray0[8] = (-1344);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, (-756), 134217729, 2147483615, 1946, 1946, 1, 134217729, (-1344)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1087.5), (-1087.5), (-1087.5));
      assertEquals(1182656.25, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1182656.25;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1182656.25;
      doubleArray0[4] = 1182656.25;
      doubleArray0[5] = (-1087.5);
      doubleArray0[6] = 277.8682466699;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1182656.25, 0.0, 1182656.25, 1182656.25, (-1087.5), 277.8682466699, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1182656.25, 0.0, 1182656.25, 1182656.25, (-1087.5), 277.8682466699, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double1 = MathArrays.linearCombination(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1182656.25, 0.0, 1182656.25, 1182656.25, (-1087.5), 277.8682466699, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 1040.9364F;
      floatArray0[2] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1040.9364F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2114946016;
      int int0 = (-756);
      intArray0[1] = (-756);
      intArray0[2] = 134217729;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (double) 134217729;
      doubleArray0[2] = (-295.829123731);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (134,217,729 >= -295.829)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 103;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 103);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 2346;
      intArray0[2] = (-2233);
      intArray0[3] = 0;
      intArray0[4] = 2147483272;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1, 2346, (-2233), 0, 2147483272}, intArray0);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 2147483272;
      floatArray0[2] = (float) 2147483272;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 2147483272;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) (-2233);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 2.14748326E9F, 2.14748326E9F, 1.0F, 1.0F, 2.14748326E9F, 1.0F, (-2233.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-295.829123731);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-295.829123731), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1644.8325F);
      floatArray0[2] = (-1644.8325F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-4568.6F);
      floatArray0[5] = (-4568.6F);
      floatArray0[6] = (-1644.8325F);
      floatArray0[7] = (-1644.8325F);
      floatArray0[8] = (-4568.6F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1644.8325F), (-1644.8325F), 0.0F, (-4568.6F), (-4568.6F), (-1644.8325F), (-1644.8325F), (-4568.6F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.3312293965203944;
      doubleArray0[2] = 49.8884227432;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1299.0;
      MathArrays.scaleInPlace(520.25072968, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {675805.6978543199}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "FHzw/]=`rBN3";
      stringArray0[1] = "FHzw/]=`rBN3";
      stringArray0[2] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-37.8F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-581.06F);
      floatArray0[5] = (-1331.279F);
      floatArray0[6] = 2145.6F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 3477.891F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-37.8F), 0.0F, 0.0F, 0.0F, (-581.06F), (-1331.279F), 2145.6F, 0.0F, 3477.891F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-295.829123731);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-295.829123731), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-295.829123731), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-295.829123731), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-287.358053);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-287.358053)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-287.358053)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination((-287.358053), (-287.358053), 0.041666666666666664, (-764.49004383125), 0.0, 0.0);
      assertEquals(82542.7968721245, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 751;
      intArray0[1] = 1416;
      intArray0[2] = 0;
      intArray0[3] = 180;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-2202);
      intArray1[2] = 751;
      intArray1[3] = 180;
      intArray1[4] = 180;
      intArray1[5] = 180;
      intArray1[6] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {751, 1416, 0, 180}, intArray0);
      assertArrayEquals(new int[] {0, (-2202), 751, 180, 180, 180, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3618, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 180;
      doubleArray0[1] = (double) 751;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 628.97;
      doubleArray0[4] = (double) 180;
      doubleArray0[5] = (double) 180;
      doubleArray0[6] = 0.0;
      MathArrays.scaleInPlace(751, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {135180.0, 564001.0, 0.0, 472356.47000000003, 135180.0, 135180.0, 0.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{|oHC";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(0, int0);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-1), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{|oHC";
      stringArray0[1] = "{|oHC";
      stringArray0[2] = "FHzw/]=`rBN3";
      stringArray0[3] = "{|oHC";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = (double) (-1);
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      MathArrays.scaleInPlace((-1), doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, -0.0, -0.0, 1.0, 1.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 65L;
      floatArray0[1] = (float) 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {65.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1437L;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 65L;
      doubleArray0[6] = (double) 65.0F;
      doubleArray0[7] = 2363.1288;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1437.0, 0.0, 0.0, 0.0, 0.0, 65.0, 65.0, 2363.1288}, doubleArray0, 0.01);
      assertEquals(2767.272434255334, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1437.0, 0.0, 0.0, 0.0, 0.0, 65.0, 65.0, 2363.1288}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][3];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 65.0, 65.0, 1437.0, 2363.1288}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination((double) 65.0F, 0.0, (-1029.2), 183.0, (-1589.88726549519), Double.NaN);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long[] longArray0 = new long[6];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 356L;
      doubleArray0[1] = (double) (-1073741824L);
      doubleArray0[2] = (double) (-1073741824L);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 65L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 356L;
      doubleArray0[7] = (double) (-1073741824L);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.linearCombination(0.0, 3480.1002, 1299.0, 0.0, 0.0, 0.0, 1.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][7];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(1.0, 1.0, (-274.14), 0.0, (-612.2512180588), (-1280.805953), (-1280.805953), 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(784176.0048212121, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1437.0, 1437.0, 3097.1884738, (-1289.45834));
      assertEquals((-1928726.508093281), double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1289.45834);
      doubleArray0[1] = 1437.0;
      doubleArray0[2] = 1437.0;
      doubleArray0[3] = 1437.0;
      doubleArray0[4] = 1437.0;
      doubleArray0[5] = (-295.829123731);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.linearCombination((-3035.99142252697), (-1604.731043), (-1604.731043), (-1604.731043));
      assertEquals(7447111.402378626, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[6] = 1574;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1641);
      assertNotNull(intArray1);
      assertEquals(1641, intArray1.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, (-1), 0, (-1), 1574, 0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[][] longArray0 = new long[2][2];
      long[] longArray1 = new long[4];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1579L);
      longArray2[1] = 259L;
      longArray2[2] = 0L;
      longArray2[3] = 1L;
      longArray2[4] = 3696L;
      longArray2[5] = (-1579L);
      longArray2[6] = 0L;
      longArray2[7] = 0L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1741008477);
      intArray0[1] = (-2475);
      intArray0[2] = 2146488169;
      intArray0[3] = (-1741008477);
      intArray0[4] = (-1741008477);
      intArray0[5] = (-1741008477);
      intArray0[6] = (-1741008477);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1741008477), (-2475), 2146488169, (-1741008477), (-1741008477), (-1741008477), (-1741008477)}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1741008477);
      double[] doubleArray1 = MathArrays.scale((-2475), doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.741008477E9), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.308995980575E12, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.741008477E9), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.308995980575E12, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray0 = new long[7][3];
      long[] longArray1 = new long[4];
      longArray1[0] = (long) (-1741008477);
      longArray1[1] = (long) (-2475);
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 2146488169;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 2146488169;
      longArray2[1] = (long) (-1741008477);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) (-1741008477);
      longArray3[1] = (long) (-2475);
      longArray3[2] = 356L;
      longArray3[3] = (long) (-1741008477);
      longArray3[4] = (-1L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) (-2475);
      longArray4[1] = (long) (-2475);
      longArray4[2] = 598L;
      longArray4[3] = 356L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = (long) 0;
      longArray5[1] = 356L;
      longArray5[2] = (-241L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = 356L;
      longArray6[1] = (long) 2146488169;
      longArray6[2] = (long) 0;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[4];
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray7[0] = (long) (-1741008477);
      longArray7[1] = (-1L);
      longArray7[2] = (long) (-1741008477);
      longArray7[3] = (long) (-1741008477);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,741,008,477 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-295.829123731);
      doubleArray0[2] = -0.0;
      doubleArray0[3] = (-5277.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 6.283185307179586;
      doubleArray0[6] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-295.829 <= -0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(0, int0);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-1), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{|oHC";
      stringArray0[1] = "},zV";
      stringArray0[2] = "FHzw/]=`rBN3";
      stringArray0[3] = "{|oHC";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1299.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1579L));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1299.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1579.0), -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination((-2192.476799), (-1802.08), 1.304E19, (-2192.476799));
      assertEquals((-2.858989745896E22), double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1299.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1579.0), -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1299.0;
      double double2 = MathArrays.distance1(doubleArray2, doubleArray2);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1299.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1299.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1579.0), -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = 0;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 8114.517195;
      doubleArray0[1] = 8114.517195;
      doubleArray0[2] = 8114.517195;
      doubleArray0[3] = 8114.517195;
      doubleArray0[4] = 8114.517195;
      doubleArray0[5] = 8114.517195;
      doubleArray0[6] = 705.2999825;
      doubleArray0[7] = 8114.517195;
      MathArrays.scaleInPlace(8114.517195, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 5723168.83562945, 6.5845389307950675E7}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 5723168.83562945);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 5723168.83562945, 6.5845389307950675E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 70192.43693145321, 807568.0569568567}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(6.5845389307950675E7, (-2628.095526983825), 6.5845389307950675E7, 8114.517195);
      assertEquals(3.612555706381012E11, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 5723168.83562945, 6.5845389307950675E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 70192.43693145321, 807568.0569568567}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6.503782125099382E7, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double2 = new Double(6.5845389307950675E7);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(6.5845389307950675E7, double2, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 5723168.83562945, 6.5845389307950675E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 70192.43693145321, 807568.0569568567}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[1];
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 5723168.83562945, 6.5845389307950675E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 70192.43693145321, 807568.0569568567}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 705.2999825;
      doubleArray2[1] = (-2628.095526983825);
      doubleArray2[2] = 3.612555706381012E11;
      doubleArray2[3] = 3.612555706381012E11;
      doubleArray2[4] = 8114.517195;
      doubleArray2[5] = 6.5845389307950675E7;
      doubleArray2[6] = 3.612555706381012E11;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, Double.NaN, 1374.338, 1374.338, 3.834E-20);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1374.338;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1374.338}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.834E-20;
      doubleArray1[1] = 1374.338;
      doubleArray1[2] = 3.834E-20;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = 150.3543581532848;
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1374.338}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 1374.338, 3.834E-20, Double.NaN, 150.3543581532848}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1374.338}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean3 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1374.338}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.scaleInPlace(1888804.9382439998, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {7.241678133227495E-14, 2.595856401216382E9, 7.241678133227495E-14, Double.NaN, 2.8399005416643137E8}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-295.829123731);
      doubleArray0[2] = -0.0;
      double double0 = MathArrays.linearCombination(0.0, 0.0, (-2911.9386860421355), -0.0, 3.834E-20, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-295.829123731), -0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(87514.87044745129, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-5277.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-5277.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-5277.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5277.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1779.54395910397);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1779.54395910397)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3166776.7023834325}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1779.54395910397);
      doubleArray2[1] = (-1779.54395910397);
      doubleArray2[2] = (-1779.54395910397);
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 757;
      double double0 = 0.0;
      double double1 = 2137.965174;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2137.965174;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2137.965174, 6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {2137.965174, 6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2137.965174, 6.283185307179586, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[][] doubleArray2 = new double[3][9];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {2137.965174, 6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      int int0 = (-2688);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray1, (-2688));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.linearCombination(0.0, 3480.1002, 1299.0, 0.0, 0.0, 0.0, 1.0, (-2.6033824355191673E-8));
      assertEquals((-2.6033824355191673E-8), double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][7];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(1.0, 1.0, (-274.14), 0.0, (-612.2512180588), (-1280.805953), (-1280.805953), (-2.6033824355191673E-8));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(784176.0048545564, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 103;
      double[] doubleArray0 = null;
      double double0 = 705.2999825;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(103, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2114946016;
      intArray0[1] = (-756);
      intArray0[2] = 134217729;
      intArray0[3] = 2147483615;
      intArray0[4] = 1946;
      intArray0[5] = 14;
      intArray0[6] = 1;
      int int0 = 134217729;
      intArray0[7] = 134217729;
      intArray0[8] = (-1344);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {2114946016, (-756), 134217729, 2147483615, 1946, 14, 1, 134217729, (-1344)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 751;
      intArray0[1] = 1416;
      intArray0[2] = 0;
      intArray0[3] = 180;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-2202);
      intArray1[2] = 751;
      intArray1[3] = 180;
      intArray1[4] = 180;
      intArray1[5] = 180;
      intArray1[6] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {751, 1416, 0, 180}, intArray0);
      assertArrayEquals(new int[] {0, (-2202), 751, 180, 180, 180, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3618, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 180;
      doubleArray0[1] = (double) 751;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 628.97;
      doubleArray0[4] = (double) 180;
      doubleArray0[5] = (double) 180;
      doubleArray0[6] = 0.0;
      MathArrays.scaleInPlace(751, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {135180.0, 564001.0, 0.0, 472356.47000000003, 135180.0, 135180.0, 0.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{|oHC";
      stringArray0[1] = "";
      stringArray0[2] = "FHzw/]=`rBN3";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3451.50105028);
      doubleArray0[2] = 1467.332485394951;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2374.35427331005);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-3451.50105028), 1467.332485394951, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 4130.236922960836, (-1755.882649650786), -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(5324.18295986, (-2192.476799), 0.0036, 3514.502516300148);
      assertEquals((-1.1673134960915139E7), double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-3451.50105028), 1467.332485394951, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-3451.50105028), 1467.332485394951, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-3451.50105028), 1467.332485394951, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 4130.236922960836, (-1755.882649650786), -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = 0;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1299.0;
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1299.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1299.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2598.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1299.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2598.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3374802.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0L;
      doubleArray2[1] = 1299.0;
      doubleArray2[2] = 1299.0;
      doubleArray2[3] = (double) 0L;
      doubleArray2[4] = (double) (-1579L);
      doubleArray2[5] = (double) 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {1299.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2598.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1299.0, 1299.0, 0.0, (-1579.0), 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1574;
      intArray0[1] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {1574, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float[] floatArray0 = new float[9];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 103;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 1;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), 103, (-1), (-1), 1}, intArray0);
      assertEquals(0, int0);
      
      MathArrays.scaleInPlace(0.008333333333329196, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1), 199);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = Double.NaN;
      double double1 = 3.834E-20;
      double double2 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, Double.NaN, 1374.338, 1374.338, 3.834E-20);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      int[] intArray0 = new int[1];
      int int0 = 2147483612;
      intArray0[0] = 2147483612;
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2147483612}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2471.461085278457;
      doubleArray0[3] = Double.NaN;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      
      int int2 = 0;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int3 = 629;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 629, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 103;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      try { 
        MathArrays.convolve((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, Double.NaN, 1374.338, 1374.338, 3.834E-20);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1989.61919656, 3.834E-20, 1374.338, (-1910.88948928332));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2626208.0389226596), double1, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 261.916514;
      doubleArray0[2] = 1989.61919656;
      doubleArray0[3] = 1374.338;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 705.2999825;
      doubleArray0[6] = 2.7846729E7;
      MathArrays.checkPositive(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {3.834E-20, 261.916514, 1989.61919656, 1374.338, Double.NaN, 705.2999825, 2.7846729E7}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 8114.517195;
      doubleArray0[1] = 8114.517195;
      doubleArray0[2] = 8114.517195;
      doubleArray0[3] = 8114.517195;
      doubleArray0[4] = 8114.517195;
      doubleArray0[5] = 8114.517195;
      doubleArray0[6] = 705.2999825;
      doubleArray0[7] = 8114.517195;
      MathArrays.scaleInPlace(8114.517195, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 5723168.83562945, 6.5845389307950675E7}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 5723168.83562945);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 5723168.83562945, 6.5845389307950675E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 70192.43693145321, 807568.0569568567}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(6.5845389307950675E7, (-2628.095526983825), 6.5845389307950675E7, 8114.517195);
      assertEquals(3.612555706381012E11, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 5723168.83562945, 6.5845389307950675E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 70192.43693145321, 807568.0569568567}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6.503782125099382E7, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 5723168.83562945, 6.5845389307950675E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 70192.43693145321, 807568.0569568567}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(4.609177251556548E8, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 5723168.83562945, 6.5845389307950675E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 70192.43693145321, 807568.0569568567}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 5723168.83562945, 6.5845389307950675E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.665295736490753E7, 6.665295736490753E7, 6.665295736490753E7, 6.665295736490753E7, 6.665295736490753E7, 6.665295736490753E7, 5793361.272560904, 6.665295736490753E7}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 70192.43693145321, 807568.0569568567}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 5723168.83562945, 6.5845389307950675E7}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-287.358053);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-287.358053)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-287.358053)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-287.358053)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-287.358053)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-4568.6F);
      floatArray0[3] = (-1644.8325F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-4568.6F), (-1644.8325F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3451.50105028);
      doubleArray0[2] = 1467.332485394951;
      doubleArray0[3] = 431.373;
      doubleArray0[4] = 847.005775;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-3451.50105028), 1467.332485394951, 431.373, 847.005775}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-6903.00210056), 2934.664970789902, 862.746, 1694.01155}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 45;
      intArray0[1] = 276;
      double[][] doubleArray2 = new double[5][9];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, (-3451.50105028), 847.005775, 1467.332485394951, 431.373}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-6903.00210056), 862.746, 1694.01155, 2934.664970789902}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1, 45);
      assertNotNull(doubleArray3);
      assertEquals(5, doubleArray0.length);
      assertEquals(45, doubleArray3.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-3451.50105028), 847.005775, 1467.332485394951, 431.373}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-6903.00210056), 862.746, 1694.01155, 2934.664970789902}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-3451.50105028), 847.005775, 1467.332485394951, 431.373}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-6903.00210056), 862.746, 1694.01155, 2934.664970789902}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7738.06838191331, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -3,451.501)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.19999998807907104;
      doubleArray0[2] = 2654.1721938853;
      doubleArray0[3] = 4054.331;
      doubleArray0[4] = (-2.6033824355191673E-8);
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, 2654.1721938853);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, 3.834E-20);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3451.50105028);
      doubleArray0[2] = 1467.332485394951;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2374.35427331005);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-3451.50105028), 1467.332485394951, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 4130.236922960836, (-1755.882649650786), -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(5324.18295986, (-2192.476799), 0.0036, 3514.502516300148);
      assertEquals((-1.1673134960915139E7), double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-3451.50105028), 1467.332485394951, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-3451.50105028), 1467.332485394951, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, (-3451.50105028), 1467.332485394951, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 4130.236922960836, (-1755.882649650786), -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 455.87;
      doubleArray0[1] = -0.0;
      doubleArray0[2] = 797.1717346361626;
      doubleArray0[3] = (-431.905735466);
      doubleArray0[4] = 200.0;
      doubleArray0[5] = (-2059.820343789769);
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 277.0;
      doubleArray0[8] = 1599.36;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 797.1717346361626);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {455.87, -0.0, 797.1717346361626, (-431.905735466), 200.0, (-2059.820343789769), Double.NaN, 277.0, 1599.36}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {433.8274322936631, -0.0, 758.6262898069446, (-411.0219058286812), 190.32945019135417, (-1960.2223676323647), Double.NaN, 263.60628851502554, 1522.026547290221}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1073741823);
      intArray0[1] = (-603);
      intArray0[2] = 5369;
      intArray0[3] = (-1);
      int[] intArray1 = MathArrays.copyOf(intArray0, 1683);
      assertNotNull(intArray1);
      assertEquals(1683, intArray1.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1073741823), (-603), 5369, (-1)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 8114.517195;
      doubleArray0[1] = 8114.517195;
      doubleArray0[2] = 8114.517195;
      doubleArray0[3] = 8114.517195;
      doubleArray0[4] = 8114.517195;
      doubleArray0[5] = 8114.517195;
      double double0 = 705.2999825;
      doubleArray0[6] = 705.2999825;
      doubleArray0[7] = 8114.517195;
      MathArrays.scaleInPlace(8114.517195, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 5723168.83562945, 6.5845389307950675E7}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 5723168.83562945);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 5723168.83562945, 6.5845389307950675E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 70192.43693145321, 807568.0569568567}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = (-1.0);
      double double2 = MathArrays.linearCombination(6.5845389307950675E7, (-2628.095526983825), 6.5845389307950675E7, 8114.517195);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(3.612555706381012E11, double2, 0.01);
      
      double double3 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 5723168.83562945, 6.5845389307950675E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 70192.43693145321, 807568.0569568567}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(6.503782125099382E7, double3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double4 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 5723168.83562945, 6.5845389307950675E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 70192.43693145321, 807568.0569568567}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(4.609177251556548E8, double4, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 6.5845389307950675E7, 5723168.83562945, 6.5845389307950675E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 807568.0569568567, 70192.43693145321, 807568.0569568567}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long[][] longArray0 = new long[6][2];
      long[] longArray1 = new long[9];
      longArray1[0] = 2601L;
      longArray1[1] = (-1064L);
      long long0 = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (-2089L);
      longArray1[4] = 0L;
      longArray1[5] = (-2347L);
      longArray1[6] = (-975L);
      longArray1[7] = 0L;
      longArray1[8] = (-688L);
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0E-6);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-2347L);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = (-1949L);
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2579.164F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2635.9758F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.3923625F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-2579.164F), (-1.0F), 0.0F, 0.0F, 2635.9758F, 0.0F, 0.0F, 0.3923625F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-920.79);
      doubleArray0[1] = 1557.0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) 0.3923625F;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 845);
      assertNotNull(doubleArray1);
      assertEquals(845, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-920.79), 1557.0, 0.0, (-1.0), 0.392362505197525}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 103;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      int int0 = 1;
      intArray0[4] = 1;
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), 103, (-1), (-1), 1}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      MathArrays.scaleInPlace(0.008333333333329196, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 199);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = 1742.803031;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[0] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1742.803031;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, 1.0, 0.0, 0.0, 1.304E19, 1742.803031, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (13,040,000,000,000,000,000 >= 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3451.50105028);
      doubleArray0[2] = 1467.332485394951;
      doubleArray0[3] = 431.373;
      doubleArray0[4] = 847.005775;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-3451.50105028), 1467.332485394951, 431.373, 847.005775}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-6903.00210056), 2934.664970789902, 862.746, 1694.01155}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[10];
      intArray0[0] = 45;
      intArray0[1] = 276;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2752));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "sl;`zDU";
      stringArray0[1] = "=sgDz2XaC1&fV/eQPG";
      stringArray0[2] = "=sgDz2XaC1&fV/eQPG";
      stringArray0[3] = "";
      stringArray0[4] = "<xyB+AW }SLZ~#_";
      stringArray0[5] = "";
      stringArray0[6] = "l/2z0<JYlwN2uZ";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1445;
      int[] intArray1 = MathArrays.copyOf(intArray0, 199);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(199, intArray1.length);
      assertArrayEquals(new int[] {1445}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2579.164F);
      floatArray0[1] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2635.9758F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2579.164F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 2635.9758F;
      doubleArray0[3] = (-2757.639);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-2579.164F);
      doubleArray1[1] = (double) (-2579.164F);
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = 1.34217729E8;
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[6] = (double) 0.0F;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      double double1 = (-3451.50105028);
      doubleArray0[1] = (-3451.50105028);
      double double2 = 1467.332485394951;
      doubleArray0[2] = 1467.332485394951;
      double double3 = 431.373;
      doubleArray0[3] = 431.373;
      double double4 = 847.005775;
      doubleArray0[4] = 847.005775;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-0.09958409742519839);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1742.803031;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 0.0;
      double[][] doubleArray1 = new double[2][2];
      doubleArray1[1] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2579.164F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2635.9758F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-2579.164F), (-1.0F), 0.0F, 0.0F, 2635.9758F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((double) (-2579.164F), 3.834E-20, (double) 0.0F, 3.4439717236742845E-8, 3.834E-20, (double) 0.0F);
      assertEquals((-9.888515015625E-17), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1299.0;
      doubleArray0[1] = 639.505650267152;
      double[][] doubleArray1 = new double[0][6];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 639.505650267152, 1299.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 639.505650267152, 1299.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 408967.47672361287, 1661435.6793940607, 1687401.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 639.505650267152, 1299.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 408967.47672361287, 1661435.6793940607, 1687401.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(407668.47672361287, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3451.50105028);
      doubleArray0[2] = 1467.332485394951;
      doubleArray0[3] = 431.373;
      doubleArray0[4] = 847.005775;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-3451.50105028), 1467.332485394951, 431.373, 847.005775}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-6903.00210056), 2934.664970789902, 862.746, 1694.01155}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 4485;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {4485}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3451.50105028);
      doubleArray0[2] = 1467.332485394951;
      doubleArray0[3] = 431.373;
      doubleArray0[4] = 847.005775;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-3451.50105028), 1467.332485394951, 431.373, 847.005775}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-6903.00210056), 2934.664970789902, 862.746, 1694.01155}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 45;
      intArray0[1] = 276;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {45, 276}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.304E19, 1.304E19, 1.304E19, 1.304E19);
      assertEquals(3.400832E38, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-612.2512180588);
      doubleArray0[2] = 3.400832E38;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 3.400832E38;
      doubleArray0[6] = 3.400832E38;
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (13,040,000,000,000,000,000 > -612.251)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, (-3499.1223), 0.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-9223372036854775808L);
      longArray0[3] = 0L;
      longArray0[4] = 891L;
      longArray0[5] = 1302L;
      longArray0[6] = 0L;
      longArray0[7] = (-2058L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -9,223,372,036,854,775,808 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1060.868137097;
      doubleArray0[5] = 2080.19;
      doubleArray0[6] = (-1653.4);
      doubleArray0[7] = 20.0;
      doubleArray0[8] = (-1.0);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 20.0;
      doubleArray1[3] = 1060.868137097;
      doubleArray1[4] = 2080.19;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 1.0, 1060.868137097, 2080.19, (-1653.4), 20.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 20.0, 1060.868137097, 2080.19}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      double double0 = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1742.803031;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, 1742.803031, 1.304E19, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not strictly increasing (13,040,000,000,000,000,000 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1294.28449778), (-1294.28449778), (-1.0), (-2867.6803075), 0.0, 0.0, 0.0, 0.0);
      assertEquals(1678040.041501127, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1678040.041501127;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1294.28449778);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2867.6803075);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-2867.6803075);
      doubleArray2[3] = 1678040.041501127;
      doubleArray2[4] = (-1.0);
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, Double.NaN, 1374.338, 1374.338, 3.834E-20);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-295.829123731);
      doubleArray0[2] = -0.0;
      doubleArray0[3] = (-5277.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 6.283185307179586;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 2520.2274199159774;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -295.829)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1294.28449778), (-1294.28449778), (-1.0), (-2867.6803075), 0.0, 0.0, 0.0, 0.0);
      assertEquals(1678040.041501127, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1678040.041501127;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1294.28449778);
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2867.6803075);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-2867.6803075);
      doubleArray2[3] = 1678040.041501127;
      doubleArray2[4] = (-1.0);
      doubleArray1[1] = doubleArray2;
      int int0 = 0;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long[][] longArray0 = new long[6][2];
      long[] longArray1 = new long[9];
      longArray1[0] = 2601L;
      longArray1[1] = (-1064L);
      longArray1[2] = 0L;
      longArray1[3] = (-2089L);
      longArray1[4] = 0L;
      longArray1[5] = (-2347L);
      longArray1[6] = (-975L);
      longArray1[7] = 0L;
      longArray1[8] = (-688L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1064L);
      longArray2[1] = 0L;
      longArray2[2] = (-1064L);
      longArray2[3] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-1579L);
      longArray3[1] = (-2089L);
      longArray3[2] = 0L;
      longArray3[3] = (-688L);
      longArray3[4] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-1064L);
      longArray4[1] = 0L;
      longArray4[2] = (-2347L);
      longArray4[3] = (-1579L);
      longArray4[4] = (-975L);
      longArray4[5] = 0L;
      longArray4[6] = 0L;
      longArray4[7] = (-2347L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = (-688L);
      longArray5[1] = 2601L;
      longArray5[2] = 0L;
      longArray5[3] = (-1064L);
      longArray5[4] = 0L;
      longArray5[5] = 0L;
      longArray5[6] = 0L;
      longArray5[7] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = (-768.757);
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = 1437.0;
      doubleArray1[4] = (-665.44976);
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2575.96F);
      floatArray0[1] = 380.6F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = (-275.18F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-2575.96F), 380.6F, 0.0F, 3.4028235E38F, (-275.18F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 380.6F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-2575.96F);
      doubleArray0[5] = 2327.5291;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = (double) 0.0F;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 380.6000061035156, 0.0, (-2575.9599609375), 2327.5291, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 3696;
      intArray0[1] = 757;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3696;
      doubleArray0[1] = (double) 3696;
      doubleArray0[2] = (double) 757;
      doubleArray0[3] = (double) 757;
      doubleArray0[4] = (double) 757;
      doubleArray0[5] = (double) 757;
      MathArrays.scaleInPlace(757, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {2797872.0, 2797872.0, 573049.0, 573049.0, 573049.0, 573049.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 3696, 757);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      MathArrays.scaleInPlace((-1), doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-17), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2156.237089412);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3.32;
      doubleArray0[6] = (-744.95);
      doubleArray0[7] = 2793.4157689788954;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (6.283 >= 2)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3401.392);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1015.286056);
      doubleArray0[4] = 1.34217729E8;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3401.392), 0.0, 0.0, (-1015.286056), 1.34217729E8}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = (-2372);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-2372));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 38.4311302163996;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3198.193306245;
      doubleArray0[3] = (-20.6965);
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = (-116.8593744444);
      doubleArray0[6] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3198.193306245;
      doubleArray2[1] = (-20.6965);
      doubleArray2[2] = 1.34217729E8;
      doubleArray2[3] = (-116.8593744444);
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2194.5006871271;
      doubleArray0[2] = (-967.4316384065137);
      doubleArray0[3] = 1203.68902;
      doubleArray0[4] = (-2116.386);
      doubleArray0[5] = 1128.773665191006;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (-1200.0856573);
      doubleArray0[8] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2194.5006871271, (-967.4316384065137), 1203.68902, (-2116.386), 1128.773665191006, 1.0, (-1200.0856573), 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2414.25418813186);
      doubleArray0[1] = (-1312.3506917963412);
      doubleArray0[2] = 1483.88;
      doubleArray0[3] = 98.5021;
      doubleArray0[4] = 2498.809931;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {(-2414.25418813186), (-1312.3506917963412), 1483.88, 98.5021, 2498.809931}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5828623.284912226, 6336696.30793412, (-5442662.671111873), (-4370360.1040150765), (-1.0122163426281251E7), (-6266299.290934835), 7425570.82452897, 492276.05140871013, 6244051.071264223}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MathArrays.linearCombination(0.0, (-1087.5), (-1087.5), (-1087.5));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1182656.25;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1182656.25;
      doubleArray0[4] = 1182656.25;
      doubleArray0[5] = (-1087.5);
      doubleArray0[6] = 277.8682466699;
      doubleArray0[7] = 0.0;
      int int0 = 0;
      MathArrays.copyOf(doubleArray0, 0);
      double[] doubleArray1 = new double[0];
      MathArrays.safeNorm(doubleArray1);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = 20.0;
      doubleArray0[4] = 20.0;
      double[] doubleArray1 = MathArrays.scale(20.0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (400 >= 400)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1988);
      intArray0[1] = 2970;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 183;
      intArray0[5] = (-989);
      intArray0[6] = 1496;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {(-1988), 2970, 0, 0, 183, (-989), 1496}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 86.774;
      doubleArray0[3] = (-207.104);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 80.78180116;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 86.774)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1502.45;
      doubleArray0[1] = 409.40640178;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, (-381));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, (-1144), (-1144));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-1319);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1319));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, (-2186.9), 3480.1002);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3480.1002;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2186.9);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[][] doubleArray2 = new double[1][3];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1047.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1438.13F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 374.0F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 374.0F;
      doubleArray0[1] = (double) 374.0F;
      doubleArray0[2] = (double) (-1438.13F);
      doubleArray0[3] = (double) (-1438.13F);
      doubleArray0[4] = (double) 374.0F;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-1438.13F);
      doubleArray1[1] = (double) (-1438.13F);
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1437L;
      longArray0[1] = 0L;
      long long0 = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 65L;
      long long1 = 356L;
      longArray0[4] = 356L;
      long long2 = (-1073741824L);
      longArray0[5] = (-1073741824L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,073,741,824 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 49.8884227432;
      doubleArray0[3] = 1257.99461796;
      doubleArray0[4] = (-3651.94039925507);
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MathArrays.OrderDirection.valueOf("DECREASING");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-311.709375);
      doubleArray0[3] = 1687.10371386007;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-398.914);
      doubleArray0[6] = (-4025.716);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 338.356606425801;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 338.356606425801;
      doubleArray1[1] = 0.0;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "sl;`zDU";
      stringArray0[1] = "=sgDz2XaC1&fV/eQPG";
      stringArray0[2] = "-N^M";
      stringArray0[3] = "";
      stringArray0[4] = "<xyB+AW }SLZ~#_";
      stringArray0[5] = "";
      stringArray0[6] = "l/2z0<JYlwN2uZ";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1445;
      int[] intArray1 = MathArrays.copyOf(intArray0, 199);
      assertEquals(199, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 5324.18295986;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 3072.7;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 275;
      intArray0[1] = 282;
      intArray0[2] = 0;
      intArray0[3] = (-426);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      double double0 = MathArrays.linearCombination((double) 282, 3928.0, (double) 0, (double) 0);
      assertEquals(1107696.0, double0, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {275, 282, 0, (-426)}, intArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 282;
      floatArray0[1] = (float) 275;
      floatArray0[2] = (float) 282;
      floatArray0[3] = (float) 275;
      floatArray0[4] = (float) 282;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2342.0), (-2342.0), (-2342.0), (-2342.0), (-2342.0), (-2911.9386860421355));
      assertEquals(1.778968840271068E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 1.7976931348623157E308;
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 432.7324278275301;
      doubleArray0[2] = (-30.31618325001346);
      doubleArray0[3] = 0.0;
      double double1 = (-1774.97066493168);
      doubleArray0[4] = (-1774.97066493168);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly decreasing (-30.316 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
