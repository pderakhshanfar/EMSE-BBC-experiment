/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 12:20:15 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147483646, 2147483646);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2719.2778F);
      floatArray0[1] = 807.2926F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 807.2926F;
      floatArray0[4] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 807.2926F;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 673.2428;
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.equals(floatArray0, floatArray0);
      double[][] doubleArray3 = new double[19][6];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray2;
      doubleArray3[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      MathArrays.buildArray(field0, 0, 0);
      MathArrays.distanceInf(doubleArray1, doubleArray0);
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-147.39639149);
      doubleArray0[1] = 4.3466666666666665E18;
      doubleArray0[2] = (-420.7798353497001);
      doubleArray0[3] = 6.52E18;
      doubleArray0[4] = 2755.9314359;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[6];
      floatArray1[0] = (-3128.24F);
      floatArray1[1] = 258.36F;
      floatArray1[2] = (-1.4E-45F);
      floatArray1[3] = (-3.4028235E38F);
      floatArray1[4] = 0.0F;
      floatArray1[5] = (-1708.9838F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-3.4028235E38F);
      doubleArray0[1] = (double) (-3128.24F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 258.36F;
      doubleArray0[4] = (double) (-3128.24F);
      doubleArray0[5] = (double) (-1.4E-45F);
      doubleArray0[6] = (double) (-1708.9838F);
      doubleArray0[7] = (double) (-1.4E-45F);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1018.0;
      doubleArray0[1] = (-141.5033590834);
      doubleArray0[2] = (-310.0);
      doubleArray0[3] = (-7.44321345601866E-11);
      doubleArray0[4] = 2057.34178280912;
      doubleArray0[5] = (-413.68539);
      doubleArray0[6] = 1638.185243495;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2375);
      int[] intArray0 = new int[1];
      intArray0[0] = 2375;
      MathArrays.copyOf(intArray0);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-141.5033590834);
      doubleArray3[1] = (-310.0);
      doubleArray3[2] = (-7.44321345601866E-11);
      doubleArray3[3] = 1.0;
      doubleArray3[4] = (-310.0);
      doubleArray3[5] = (-141.5033590834);
      doubleArray3[6] = 1018.0;
      // Undeclared exception!
      MathArrays.convolve(doubleArray2, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = Double.NEGATIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2306;
      intArray0[1] = (-1788);
      intArray0[2] = 3062;
      intArray0[3] = 2;
      intArray0[4] = 134217729;
      intArray0[5] = 1560;
      intArray0[6] = 2146590351;
      intArray0[7] = (-1387);
      int[] intArray1 = new int[8];
      intArray1[0] = 1560;
      intArray1[1] = 1560;
      intArray1[2] = 2306;
      intArray1[3] = 134217729;
      intArray1[4] = 134217729;
      intArray1[5] = 134217729;
      intArray1[6] = 3062;
      intArray1[7] = 134217729;
      MathArrays.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-169.26906790148706);
      doubleArray0[1] = 2.0242814865207652E31;
      doubleArray0[2] = 2.0242814865207652E31;
      doubleArray0[3] = 2.0242814865207652E31;
      doubleArray0[4] = 2.0242814865207652E31;
      doubleArray0[5] = 2.0242814865207652E31;
      doubleArray0[6] = 0.19999998807907104;
      double[] doubleArray1 = MathArrays.scale(2.0242814865207652E31, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1002.69);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 599.281508;
      doubleArray0[3] = 3707.07154;
      doubleArray0[4] = (-1855.1056926795409);
      doubleArray0[5] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1002.69));
      MathArrays.linearCombination(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2086.8;
      doubleArray0[1] = 1.304E19;
      MathArrays.checkPositive(doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 32760);
      // Undeclared exception!
      MathArrays.ebeDivide(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(629);
      Object object0 = new Object();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(integer0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 13, 13);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 13, 13);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 756.0F;
      floatArray0[1] = (-713.0F);
      floatArray0[2] = (-852.0F);
      floatArray0[3] = 1040.152F;
      floatArray0[4] = Float.POSITIVE_INFINITY;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-852.0F);
      doubleArray0[1] = (double) (-852.0F);
      doubleArray0[2] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[3] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[4] = (double) 1040.152F;
      doubleArray0[5] = (double) 756.0F;
      doubleArray0[6] = (double) (-852.0F);
      doubleArray0[7] = (double) (-852.0F);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[6];
      floatArray1[0] = (-3128.24F);
      floatArray1[1] = 258.36F;
      floatArray1[2] = (-1.4E-45F);
      floatArray1[3] = (-3.4028235E38F);
      floatArray1[4] = 0.0F;
      floatArray1[5] = (-1689.0F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-3.4028235E38F);
      doubleArray0[1] = (double) (-3128.24F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 258.36F;
      doubleArray0[4] = (double) (-3128.24F);
      doubleArray0[5] = (double) (-3128.24F);
      doubleArray0[6] = (double) (-1689.0F);
      doubleArray0[7] = (double) (-1.4E-45F);
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-2300L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-2436L);
      double double0 = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) (-2300L);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double double1 = 1.34217729E8;
      MathArrays.linearCombination(3173.908989009, 721.0371980013902, 0.0, (double) 0L, 721.0371980013902, 1.34217729E8);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 2146711042;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146711042);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.POSITIVE_INFINITY;
      floatArray0[1] = 1818.0F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 1818.0F;
      doubleArray0[2] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[3] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[4] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[5] = (double) 1818.0F;
      doubleArray0[6] = (double) Float.POSITIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, (-4.9E-324));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[1];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2489.189876315;
      doubleArray0[2] = 1273.2829284560337;
      doubleArray0[3] = (-1359.23497);
      doubleArray0[4] = 0.6931470632553101;
      doubleArray0[5] = 154.149358724648;
      doubleArray0[6] = (-975.2952033477654);
      doubleArray0[7] = 0.041666666666666664;
      doubleArray0[8] = (-3624.6476);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 3042.991F;
      floatArray0[1] = (-699.33F);
      floatArray0[2] = (-5966.51F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 823.0439F;
      floatArray0[5] = (-1579.899F);
      float[] floatArray1 = new float[6];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-1579.899F);
      floatArray1[2] = 2829.1067F;
      floatArray1[3] = 3042.991F;
      floatArray1[4] = 823.0439F;
      floatArray1[5] = (-699.33F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-440), 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[38];
      MathArrays.distance1(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-695.2F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-2288.192F);
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-695.2F);
      floatArray1[1] = (-2288.192F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-695.2F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[5];
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 42189.17576636387;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      MathArrays.copyOf(doubleArray0, 0);
      MathArrays.distance1(intArray0, intArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 10;
      intArray0[1] = 2415;
      intArray0[2] = 13;
      int[] intArray1 = new int[4];
      intArray1[0] = 10;
      intArray1[1] = 10;
      intArray1[2] = (-173);
      intArray1[3] = 2415;
      MathArrays.distance(intArray0, intArray1);
      MathArrays.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2630);
      intArray0[1] = (-1159);
      intArray0[2] = (-3613);
      intArray0[3] = 134217729;
      intArray0[4] = (-5537);
      int[] intArray1 = new int[1];
      intArray1[0] = 134217729;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.26E18;
      doubleArray0[1] = 3.26E18;
      doubleArray0[2] = 3.26E18;
      doubleArray0[3] = 3.26E18;
      doubleArray0[4] = 3.26E18;
      doubleArray0[5] = 3.26E18;
      doubleArray0[6] = 3.26E18;
      double[] doubleArray1 = MathArrays.scale(3.26E18, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-110));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.26E18;
      doubleArray0[1] = 3.26E18;
      doubleArray0[2] = 3.26E18;
      doubleArray0[3] = 3.26E18;
      doubleArray0[4] = 3.26E18;
      doubleArray0[5] = 3.26E18;
      doubleArray0[6] = 3.26E18;
      double[] doubleArray1 = MathArrays.scale(3.26E18, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-110));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.26E18;
      doubleArray0[1] = 3.26E18;
      doubleArray0[2] = 3.26E18;
      doubleArray0[3] = 3.26E18;
      doubleArray0[4] = 3.26E18;
      doubleArray0[5] = 3.26E18;
      doubleArray0[6] = 3.26E18;
      double[] doubleArray1 = MathArrays.scale(3.26E18, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      float[] floatArray0 = new float[1];
      doubleArray0[1] = (double) 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-882.57680287);
      doubleArray0[1] = (-2660.2674607);
      doubleArray0[2] = (-2660.2674607);
      doubleArray0[3] = (-2660.2674607);
      MathArrays.scale((-2660.2674607), doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 3582;
      intArray0[1] = 2282;
      intArray0[2] = 396;
      intArray0[3] = (-1676);
      intArray0[4] = 1432;
      intArray0[5] = 6;
      intArray0[6] = (-3414);
      intArray0[7] = 2998;
      intArray0[8] = 26;
      int[] intArray1 = new int[4];
      intArray1[0] = 6;
      intArray1[1] = 26;
      intArray1[2] = 6;
      intArray1[3] = 2282;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1340.71208352521);
      doubleArray0[1] = (-1382.8);
      doubleArray0[2] = (-1048.84346);
      doubleArray0[3] = 3.834E-20;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray1, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      int[] intArray0 = new int[4];
      intArray0[0] = 13;
      intArray0[1] = 2146739544;
      intArray0[2] = (-1684);
      intArray0[3] = 0;
      MathArrays.copyOf(intArray0, 0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.scale(6379.077152, doubleArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 6379.077152;
      doubleArray1[1] = 6379.077152;
      doubleArray1[2] = 6379.077152;
      doubleArray1[3] = (-4.068233003401932E-9);
      doubleArray1[4] = 6379.077152;
      doubleArray1[5] = 6379.077152;
      doubleArray1[6] = 6379.077152;
      doubleArray1[7] = 6379.077152;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      MathArrays.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 142);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2328.0799359;
      doubleArray0[1] = 0.6576612368846843;
      doubleArray0[2] = 608.6292718923411;
      doubleArray0[3] = 2.608E18;
      doubleArray0[4] = 2244.293436;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2244.293436;
      doubleArray1[1] = 2328.0799359;
      doubleArray1[2] = 0.6576612368846843;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 2328.0799359;
      doubleArray1[5] = 2328.0799359;
      doubleArray1[6] = 0.6576612368846843;
      doubleArray1[7] = 608.6292718923411;
      doubleArray1[8] = 2.608E18;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-130.637F);
      floatArray0[2] = 3431.5457F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 136.7033F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 136.7033F;
      doubleArray0[1] = (double) 3431.5457F;
      doubleArray0[2] = (double) 3431.5457F;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-1.0F);
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = 6379934.991606999;
      doubleArray1[3] = (-18.430862426757812);
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      MathArrays.linearCombination((double) 2, 304.7778072881774, Double.NaN, (-1.5634744607283329E22), (double) 2, 304.7778072881774, (-490.4), Double.NaN);
      MathArrays.distance1(intArray0, intArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      Pair<String, Object> pair0 = new Pair<String, Object>((String) null, object0);
      Field<Pair<String, Object>> field0 = (Field<Pair<String, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      MathArrays.safeNorm(doubleArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "GWaU)";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "'e+qk7`y=]LVs";
      stringArray0[3] = "@h8HJ;$";
      stringArray0[4] = "";
      stringArray0[5] = "AO~Y";
      stringArray0[6] = "]Rtn";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">i+W/o00yxh7U";
      stringArray0[1] = ">i+W/o00yxh7U";
      stringArray0[2] = ">i+W/o00yxh7U";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[2];
      intArray1[0] = (-1);
      intArray1[1] = (-449);
      MathArrays.distance1(intArray1, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-449);
      doubleArray0[1] = (double) (-449);
      doubleArray0[2] = (double) (-449);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      MathArrays.equals((double[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1991.85);
      doubleArray0[1] = 2.608E18;
      doubleArray0[2] = 0.6576612368846843;
      doubleArray0[3] = 2244.293436;
      doubleArray0[4] = 516.4985515966;
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = (-0.3058015757857271);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1318.224926;
      doubleArray0[1] = (-3155.214853234017);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1287.216455;
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1287.216455;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[18];
      floatArray0[0] = 1091.4065F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = 1097L;
      longArray0[1] = 2147483648L;
      longArray0[2] = 4857L;
      longArray0[3] = 2147483648L;
      MathArrays.checkNonNegative(longArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 2110);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      long[][] longArray0 = new long[0][7];
      MathArrays.checkRectangular(longArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray1);
      MathArrays.scale((-3724.62921063), doubleArray1);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-3724.62921063);
      doubleArray2[1] = (-3724.62921063);
      doubleArray2[2] = (-3724.62921063);
      doubleArray2[3] = (-3724.62921063);
      doubleArray2[4] = (-3724.62921063);
      doubleArray2[5] = (-3724.62921063);
      doubleArray2[6] = (-3724.62921063);
      MathArrays.distanceInf(doubleArray0, doubleArray2);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-1352.875F);
      floatArray0[2] = (-3.4028235E38F);
      floatArray0[3] = 224.8F;
      floatArray0[4] = (-364.1F);
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(1.7976931348623157E308, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2071.0);
      doubleArray0[1] = 1501.0311446;
      doubleArray0[2] = 1513.325735919407;
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,071 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      long[][] longArray0 = new long[0][3];
      MathArrays.checkNonNegative(longArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
      MathArrays.ebeMultiply(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2485.884926);
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = (-1214.1320630409878);
      doubleArray1[3] = 640.9220851053852;
      doubleArray1[4] = (-756.1442934945605);
      MathArrays.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      MathArrays.equals((double[]) null, (double[]) null);
      MathArrays.equals((double[]) null, (double[]) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3468.57246;
      doubleArray0[1] = 721.7;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-878.644663);
      doubleArray0[4] = 2.925681159240093E-8;
      doubleArray0[5] = 2.8186882938824507E12;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = 1353.543536451;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 6;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 6;
      MathArrays.normalizeArray(doubleArray0, (-1017.849234843));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "H/-=";
      stringArray0[1] = "";
      stringArray0[2] = "yZY|)";
      stringArray0[3] = "=rF}{cT";
      stringArray0[4] = "org.apache.commons.math3.exception.NotFiniteNumberException";
      stringArray0[5] = "INCREASING";
      stringArray0[6] = "non square ({0}x{1}) linear operator";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1091.4117F;
      floatArray0[1] = 1091.4117F;
      floatArray0[2] = 1091.4117F;
      floatArray0[3] = 1091.4117F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.copyOf(doubleArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 1091.4117F;
      doubleArray1[1] = (double) 1091.4117F;
      MathArrays.distance1(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1045;
      intArray0[1] = 1045;
      intArray0[2] = 1045;
      intArray0[3] = 1045;
      intArray0[4] = 1045;
      intArray0[5] = (-708);
      intArray0[6] = 1045;
      intArray0[7] = 1045;
      MathArrays.distance(intArray0, intArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2897;
      longArray0[1] = (long) 1045;
      longArray0[2] = (long) 1045;
      longArray0[3] = (long) 1045;
      MathArrays.equals((double[]) null, (double[]) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1045;
      doubleArray0[1] = (double) (-708);
      doubleArray0[2] = (double) 1045L;
      doubleArray0[3] = (double) 1045;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-708);
      doubleArray1[1] = (double) 1045;
      doubleArray1[2] = (double) 1045;
      doubleArray1[3] = (double) 1045L;
      doubleArray1[4] = (double) 1045L;
      doubleArray1[5] = (double) 1045;
      doubleArray1[6] = (double) 1045;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-4360.0);
      doubleArray0[2] = (-433.97087217928);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[3][1];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-4360.0);
      doubleArray3[1] = 1.9197931717900045E7;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2672.8435814853);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 536.549493;
      doubleArray0[3] = 1456.531034873122;
      doubleArray0[4] = 1.34217729E8;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-34.0F);
      floatArray0[1] = (-1404.76F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-3805.37F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-3421.34F);
      floatArray0[6] = 3908.3F;
      MathArrays.equals((float[]) null, floatArray0);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[] floatArray0 = new float[18];
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2336.0;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 0.1111111111111111;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1481.29857956179;
      doubleArray0[0] = (-979.3820137637806);
      doubleArray0[8] = 1.304E19;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 164.7F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 2233.7932F;
      floatArray0[3] = (-74.9774F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-2872.97F);
      MathArrays.equals(floatArray0, (float[]) null);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 16;
      intArray0[2] = 1741;
      intArray0[3] = 1291;
      intArray0[4] = 1;
      intArray0[5] = 2145166130;
      intArray0[6] = 1304;
      intArray0[7] = 10;
      MathArrays.copyOf(intArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 465.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-731.5717F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1645.844F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 2261.6064F;
      MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.scale(752.81, doubleArray0);
      float float0 = 0.0F;
      float[] floatArray0 = new float[10];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      MathArrays.equals(floatArray0, (float[]) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Qv$?b[/hV~BtbRZIwF0";
      stringArray0[1] = "sy>`v[E0h(cXg[p)W";
      stringArray0[2] = "";
      stringArray0[3] = "NON_POSITIVE_MICROSPHERE_ELEMENTS";
      stringArray0[4] = "k+i$PvW[~jHJ<V";
      stringArray0[5] = "INCREASING";
      stringArray0[6] = "*I5/g_/d(j0";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$2";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.equals(doubleArray0, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 249;
      intArray0[1] = 1023;
      intArray0[2] = (-436);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-436);
      doubleArray0[1] = (double) 249;
      doubleArray0[2] = (double) (-436);
      doubleArray0[3] = (double) (-436);
      doubleArray0[4] = (double) 1023;
      doubleArray0[5] = (double) 1023;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 1023;
      doubleArray3[1] = (double) (-436);
      doubleArray3[2] = (-2.957007209750105E-8);
      doubleArray3[3] = (double) 249;
      doubleArray3[4] = (double) 1023;
      doubleArray3[5] = (double) (-436);
      doubleArray3[6] = (double) 0;
      doubleArray3[7] = 2.893485277253286E-8;
      doubleArray3[8] = (double) 249;
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 11 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-6.663542893624021E-14);
      doubleArray0[1] = 809.7281278170025;
      doubleArray0[2] = 537.509457015389;
      doubleArray0[3] = 4041.6578655888547;
      doubleArray0[4] = 0.589123107756734;
      doubleArray0[5] = 178.76199319;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 537.509457015389;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-128.1048714);
      doubleArray1[1] = 6.283185307179586;
      doubleArray1[2] = 6.283185307179586;
      doubleArray1[3] = 4041.6578655888547;
      doubleArray1[4] = (-1017.849234843);
      doubleArray1[5] = (-1017.849234843);
      MathArrays.equals((double[]) null, doubleArray1);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 2714.258F;
      floatArray1[1] = (-478.41F);
      floatArray1[2] = (-434.0F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-2509.0625F);
      floatArray1[5] = 1586.909F;
      MathArrays.equals(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 304.7778072881774;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (-490.4);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(546.796414992445, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2;
      float[] floatArray1 = new float[7];
      floatArray1[0] = (float) 2;
      floatArray1[1] = (float) 2;
      floatArray1[2] = (float) 2;
      floatArray1[3] = (float) 2;
      floatArray1[4] = (float) 2;
      floatArray1[5] = (float) 2;
      floatArray1[6] = (float) 2;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1456.531034873122;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = Double.NaN;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.linearCombination(Double.NaN, Double.NaN, 1456.531034873122, Double.NaN);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,456.531 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Integer integer0 = new Integer((-1179));
      Integer integer1 = Integer.getInteger("h1RSxYfz4'6b", integer0);
      Integer integer2 = new Integer((-1179));
      Integer integer3 = new Integer(134217729);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      integerArray0[1] = integer2;
      integerArray0[2] = integer2;
      integerArray0[3] = integer1;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      MathArrays.copyOf(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-215.4232);
      doubleArray1[1] = 576.2002345509;
      doubleArray1[2] = 0.9489846229553223;
      doubleArray1[3] = (-2155.7512);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      MathArrays.linearCombination(doubleArray1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 220.487;
      doubleArray1[1] = 4041.6578655888547;
      doubleArray1[2] = 4041.6578655888547;
      doubleArray1[3] = (-180.32559291110073);
      doubleArray1[4] = 220.487;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 220.487;
      doubleArray1[7] = Double.NaN;
      MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      MathArrays.equals(doubleArray1, doubleArray0);
      double[] doubleArray2 = new double[0];
      MathArrays.checkPositive(doubleArray2);
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 4041.6578655888547);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.scale(1353.629, doubleArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.linearCombination(4396.213299999999, 2672.8435814853, 0.0, (double) 0.0F, (double) 0.0F, (-2640.8490162243), 782.51613, 1123.1161241807);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf(";}:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.;}:
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      MathArrays.linearCombination((double) 2, 304.7778072881774, Double.NaN, (-1.5634744607283329E22), (double) 2, 304.7778072881774, (-490.4), Double.NaN);
      MathArrays.distance1(intArray0, intArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Object>> field0 = (Field<Pair<String, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 2);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-2672.8435814853);
      doubleArray0[0] = (-2672.8435814853);
      double double1 = Double.NaN;
      doubleArray0[1] = Double.NaN;
      double double2 = 0.1428571343421936;
      double double3 = 1.304E19;
      double double4 = 1.0;
      MathArrays.linearCombination(Double.NaN, 1.304E19, 94.390722, 0.0, (-1895.0), 1.0);
      long[] longArray0 = new long[1];
      longArray0[0] = (-4505L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,505 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[8][5];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-541.0028360227302);
      doubleArray1[1] = 1.34217729E8;
      doubleArray0[6] = doubleArray1;
      doubleArray0[7] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1059;
      intArray0[1] = 2699;
      intArray0[2] = (-14);
      intArray0[3] = (-2201);
      int[] intArray1 = new int[1];
      intArray1[0] = 1059;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 0;
      MathArrays.distance1(intArray0, intArray1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 135;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.distance(intArray1, intArray1);
      MathArrays.OrderDirection.values();
      MathArrays.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1017.849234843);
      doubleArray1[1] = (-128.1048714);
      doubleArray1[2] = 6.283185307179586;
      doubleArray1[3] = (-1017.849234843);
      doubleArray1[5] = (-128.1048714);
      doubleArray1[6] = 6.283185307179586;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray1);
      double double0 = new Double(0.0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.linearCombination(1.9813312309803723, 0.0, 0.0, 0.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      MathArrays.linearCombination((double) 2, 304.7778072881774, Double.NaN, (-1.5634744607283329E22), (double) 2, 304.7778072881774, (-490.4), Double.NaN);
      MathArrays.distance1(intArray0, intArray0);
      Field<Pair<String, Object>> field0 = (Field<Pair<String, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      MathArrays.linearCombination((double) 2, 304.7778072881774, Double.NaN, (-1.5634744607283329E22), (double) 2, 304.7778072881774, (-490.4), Double.NaN);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4041.6578655888547;
      doubleArray0[1] = 4041.6578655888547;
      doubleArray0[2] = 4041.6578655888547;
      doubleArray0[3] = 4041.6578655888547;
      doubleArray0[4] = (-128.1048714);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-128.1048714);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 4041.6578655888547;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-128.1048714);
      doubleArray1[1] = 6.283185307179586;
      doubleArray1[2] = 6.283185307179586;
      double double1 = (-1087.829073121);
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.34217729E8;
      doubleArray1[1] = 0.9315965175628662;
      doubleArray1[2] = 1.34217729E8;
      doubleArray1[3] = 0.7675435543060303;
      doubleArray1[4] = 4278.2660577617;
      doubleArray1[5] = 4278.2660577617;
      doubleArray1[6] = 4278.2660577617;
      doubleArray1[7] = 1.34217729E8;
      doubleArray1[8] = 1.34217729E8;
      MathArrays.distance(doubleArray0, doubleArray1);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.9315965175628662;
      doubleArray3[1] = 0.7675435543060303;
      doubleArray3[2] = (double) (-1.0F);
      doubleArray3[3] = (double) (-1.0F);
      doubleArray3[4] = (double) (-2183.0F);
      doubleArray3[5] = 0.9315965175628662;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = (double) (-1.0F);
      doubleArray3[8] = 0.7675435543060303;
      MathArrays.equals(doubleArray0, doubleArray3);
      MathArrays.checkPositive(doubleArray2);
      int[] intArray0 = new int[2];
      intArray0[0] = 14;
      intArray0[1] = 2435;
      MathArrays.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 299;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      MathArrays.checkOrder(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][0];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 0.0);
      MathArrays.scale(299, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray2);
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-1586.382);
      doubleArray3[1] = (-853.545182717709);
      doubleArray3[2] = (double) 0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray3, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[7];
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace((-1785.0), doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-0 <= -0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 819.731239593;
      doubleArray0[1] = 1866.2818175376767;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      MathArrays.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 819.731239593;
      doubleArray0[1] = 1866.2818175376767;
      doubleArray0[2] = 1866.2818175376767;
      doubleArray0[5] = 1866.2818175376767;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MathArrays.copyOf(intArray0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, 0.0, (-1499.4654416), 0.0, (-1499.4654416), 0.0, (double) 0);
      long[][] longArray0 = new long[2][9];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = 4607182418800017408L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (long) 0;
      longArray2[1] = 4607182418800017408L;
      longArray2[2] = (long) 0;
      longArray2[3] = 4607182418800017408L;
      longArray2[4] = 4607182418800017408L;
      longArray2[5] = (long) 0;
      longArray2[6] = 4607182418800017408L;
      longArray2[7] = (long) 0;
      longArray0[1] = longArray2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "MJAOqURDl";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "(GM";
      stringArray0[5] = "percentile implementation {0} does not support {1}";
      stringArray0[6] = "";
      stringArray0[7] = "-)y<Ydw!`L";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-925);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-925), (-74));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4041.6578655888547;
      doubleArray0[1] = 220.487;
      doubleArray0[2] = 4041.6578655888547;
      doubleArray0[3] = (-128.1048714);
      doubleArray0[4] = (-128.1048714);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-128.1048714);
      doubleArray1[1] = 4041.6578655888547;
      doubleArray1[2] = (double) 3191.656F;
      doubleArray1[3] = (-128.1048714);
      doubleArray1[4] = 4041.6578655888547;
      doubleArray1[5] = (-8.8638740556316);
      doubleArray1[6] = (-128.1048714);
      doubleArray1[7] = (-8.8638740556316);
      MathArrays.scaleInPlace((-8.8638740556316), doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (4,041.658 > 220.487)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.linearCombination(56.476, 56.476, 4439.22611229182, 4439.22611229182, 56.476, 56.476, (-49.259526917), 4439.22611229182);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1017.849234843);
      doubleArray0[1] = (-1017.849234843);
      doubleArray0[2] = (-4138.332697198);
      doubleArray0[3] = (-4138.332697198);
      doubleArray0[4] = (-4138.332697198);
      doubleArray0[5] = (-4138.332697198);
      doubleArray0[6] = (-4138.332697198);
      MathArrays.normalizeArray(doubleArray0, 2640.0666843537);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 299;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      MathArrays.checkOrder(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][0];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 3223.858216804;
      doubleArray2[4] = (-7.877917738262007E-9);
      doubleArray2[5] = (double) 299;
      doubleArray2[6] = (double) (-1);
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) (-1);
      doubleArray3[1] = (double) 299;
      doubleArray3[2] = (double) (-1);
      doubleArray3[3] = (double) (-1);
      doubleArray3[4] = 0.0;
      MathArrays.equals(doubleArray2, doubleArray3);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = null;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-128.1048714);
      doubleArray2[1] = 6.283185307179586;
      doubleArray2[2] = 6.283185307179586;
      doubleArray2[3] = 4041.6578655888547;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MathArrays.linearCombination((-1785.0), 1456.531034873122, 1456.531034873122, 0.0);
      MathArrays.linearCombination((-2599907.897248523), 1432.547, (-1.0), 274.25096, 1.0, 0.3936265707015991);
      MathArrays.OrderDirection.values();
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-4798.947F);
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 2145375893;
      intArray0[1] = (-1);
      intArray0[2] = (-2138682484);
      intArray0[3] = 2064;
      intArray0[4] = 1;
      intArray0[5] = 2146010277;
      intArray0[6] = (-494);
      MathArrays.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scale(1835.77, doubleArray0);
      int[] intArray0 = new int[8];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 167;
      intArray0[1] = 167;
      int int2 = 141;
      intArray0[2] = 141;
      int int3 = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 1;
      int int4 = 2872;
      intArray0[5] = 2872;
      intArray0[6] = 2;
      int int5 = 980;
      intArray0[7] = 980;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1619));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 299;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      MathArrays.checkOrder(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][0];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection1, true, false);
      int[] intArray1 = new int[6];
      intArray1[0] = 299;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = (-1);
      intArray1[4] = 299;
      intArray1[5] = (-1);
      MathArrays.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MathArrays.linearCombination(3.834E-20, (-1720.96498), 3.834E-20, (-1720.96498), (-1982.1836126115402), 3.834E-20, 3.834E-20, (-2778.532970646));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1720.96498);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[0];
      doubleArray1[5] = doubleArray2;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 1353.629;
      doubleArray0[2] = 0.0;
      double double0 = (-74.73235140393);
      doubleArray0[3] = (-74.73235140393);
      doubleArray0[4] = (-1383.07324);
      doubleArray0[5] = 1851.8;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray1, doubleArray1);
      long[] longArray0 = new long[4];
      longArray0[0] = (-3330L);
      longArray0[1] = (-39L);
      longArray0[2] = (-1L);
      longArray0[3] = 1714L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,330 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[][] longArray0 = new long[3][7];
      long[] longArray1 = new long[8];
      longArray1[0] = 1049L;
      longArray1[1] = (-1L);
      longArray1[2] = 2379L;
      longArray1[3] = 0L;
      longArray1[4] = (-243L);
      longArray1[5] = 2389L;
      longArray1[6] = 1800L;
      longArray1[7] = 0L;
      longArray0[0] = longArray1;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-243L);
      floatArray0[1] = (float) (-1L);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2379L;
      doubleArray0[1] = (double) 1800L;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1800L;
      doubleArray1[1] = (double) 1049L;
      doubleArray1[2] = (double) 1800L;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-128.1048714);
      doubleArray1[1] = 6.283185307179586;
      doubleArray1[2] = 6.283185307179586;
      doubleArray1[3] = 4041.6578655888547;
      doubleArray1[4] = (-1017.849234843);
      doubleArray1[5] = (-1017.849234843);
      MathArrays.equals((double[]) null, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "array size cannot be greater than {0}";
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 1347L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.linearCombination((-3105.4536116205823), 0.1428571343421936, (-665.0), 94.390722, 3.0, 6.123233995736766E-17);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      MathArrays.checkNonNegative(longArray0);
      long[][] longArray1 = new long[7][4];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      long[] longArray2 = new long[6];
      longArray2[0] = 1347L;
      longArray2[1] = 0L;
      longArray2[2] = 1347L;
      longArray2[3] = 0L;
      longArray2[4] = 1347L;
      longArray2[5] = 2819561105158720014L;
      longArray1[3] = longArray2;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      MathArrays.checkNonNegative(longArray1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 6.283185307179586;
      doubleArray1[1] = 6.283185307179586;
      doubleArray1[2] = 6.283185307179586;
      MathArrays.linearCombination(3861.0, 4.503599627370496E15, (-1.0), (-2.6437112632041807E-8), 6.283185307179586, 8.0);
      try { 
        MathArrays.convolve((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[9];
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 2.608E18;
      doubleArray2[1] = Double.NaN;
      try { 
        MathArrays.convolve(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = (-3122.5422514304896);
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.34217729E8;
      doubleArray1[1] = 0.9315965175628662;
      doubleArray1[2] = 1.34217729E8;
      doubleArray1[3] = 0.7675435543060303;
      doubleArray1[4] = 4278.2660577617;
      doubleArray1[5] = 4278.2660577617;
      doubleArray1[6] = 4278.2660577617;
      doubleArray1[7] = 1.34217729E8;
      doubleArray1[8] = 1.34217729E8;
      MathArrays.distance(doubleArray0, doubleArray1);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      float float0 = (-2183.0F);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.distance(doubleArray0, doubleArray2);
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1456.531034873122;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = (-2672.8435814853);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.linearCombination(536.549493, Double.NaN, 1.8981253268712386E8, 1.8981253268712386E8);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 6.283185307179586;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MathArrays.linearCombination((-1198.98348215363), (-1198.98348215363), (-1198.98348215363), (-1198.98348215363), (-1590.101024), (-1198.98348215363), 1.304E19, (-1198.98348215363));
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-740));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1179));
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("bY`y)j\"TU/J", integer2);
      integerArray0[3] = integer3;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "G{vIC=A7<Kzy#";
      stringArray0[1] = "bY`y)j\"TU/J";
      stringArray0[2] = "bY`y)j\"TU/J";
      stringArray0[3] = "bY`y)j\"TU/J";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1179), (int) integerArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 1045;
      Integer integer0 = new Integer((-3070));
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 1045;
      integerArray0[1] = (Integer) 1045;
      integerArray0[2] = (Integer) 2;
      integerArray0[3] = (Integer) 2;
      integerArray0[4] = (Integer) 1045;
      integerArray0[5] = integer0;
      integerArray0[6] = (Integer) 2;
      integerArray0[7] = (Integer) 2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (int)integerArray0[5];
      MathArrays.copyOf(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.86285714285714278E18;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-128.1048714);
      MathArrays.linearCombination(6.283185307179586, (-128.1048714), (-128.1048714), (-128.1048714), 6.283185307179586, (-1017.849234843));
      MathArrays.convolve(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(2921);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 134217729;
      int int1 = (-365);
      int int2 = (-39);
      int int3 = 2145375893;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-39), 2145375893);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1091.4117F;
      floatArray0[1] = 1091.4117F;
      floatArray0[2] = 1091.4117F;
      floatArray0[3] = 1091.4117F;
      floatArray0[4] = 1091.4117F;
      floatArray0[5] = 1091.4117F;
      floatArray0[6] = 1091.4117F;
      float[] floatArray1 = new float[3];
      floatArray1[0] = 1393.0533F;
      floatArray1[1] = 1091.4117F;
      floatArray1[2] = 1091.4117F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      MathArrays.equals(floatArray0, floatArray1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1091.4117F;
      doubleArray0[1] = (double) 1091.4117F;
      doubleArray0[2] = (double) 1091.4117F;
      doubleArray0[3] = (double) 1091.4117F;
      doubleArray0[4] = (double) 1091.4117F;
      doubleArray0[5] = (double) 1091.4117F;
      doubleArray0[6] = (double) 1091.4117F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[8];
      longArray1[0] = 0L;
      longArray1[1] = (-2300L);
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-2436L);
      doubleArray0[2] = (double) (-2436L);
      doubleArray0[3] = 100.0;
      doubleArray0[4] = (double) (-2300L);
      doubleArray0[5] = (double) (-2436L);
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 0L;
      MathArrays.normalizeArray(doubleArray0, (-2300L));
      MathArrays.scale(1.0E-6, doubleArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-2300L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-2436L);
      double double0 = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) (-2300L);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double double1 = 1.34217729E8;
      MathArrays.linearCombination(3173.908989009, 721.0371980013902, 0.0, (double) 0L, 721.0371980013902, 1.34217729E8);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2146711042;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2146711042);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "array size cannot be greater than {0}";
      int[] intArray0 = new int[2];
      intArray0[0] = 299;
      intArray0[1] = 299;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      MathArrays.distanceInf(doubleArray2, doubleArray1);
      MathArrays.linearCombination(100.0, 0.0, 143.25, 0.0, (-691.4206045164), 100.0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 1353.629;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-74.73235140393);
      doubleArray0[4] = (-1383.07324);
      doubleArray0[5] = 1851.8;
      doubleArray0[6] = 2648.239;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2197.65665);
      assertArrayEquals(new double[] {3.136716784794508, 675.7640586905655, 0.0, (-37.308182005711544), (-690.4633294120549), 924.4629687183041, 1322.0644172241025}, doubleArray1, 0.01);
      
      MathArrays.linearCombination((-424.031), (-424.031), 0.09090909090909091, 3.834E-20, (-74.73235140393), 1.0, (-74.73235140393), (-2.6033824355191673E-8));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long[][] longArray0 = new long[3][7];
      long[] longArray1 = new long[8];
      longArray1[0] = 1049L;
      longArray1[1] = (-1L);
      longArray1[2] = 2379L;
      longArray1[3] = 0L;
      longArray1[4] = (-243L);
      longArray1[5] = 2389L;
      longArray1[6] = 1800L;
      longArray1[7] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[18];
      longArray2[0] = 2389L;
      longArray2[1] = 0L;
      longArray2[2] = 2389L;
      longArray2[3] = 1049L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = (-243L);
      longArray3[1] = (-243L);
      longArray3[2] = 0L;
      longArray3[3] = 2379L;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2389L;
      doubleArray0[1] = (double) 2379L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      MathArrays.normalizeArray(doubleArray0, 1261.6);
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[5];
      intArray0[1] = (-844);
      intArray0[2] = 2140;
      intArray0[3] = 11;
      intArray0[4] = 160;
      MathArrays.distance(intArray0, intArray0);
      String[] stringArray0 = new String[0];
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 819.731239593;
      doubleArray0[1] = 1866.2818175376767;
      doubleArray0[2] = 1866.2818175376767;
      doubleArray0[5] = 1866.2818175376767;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MathArrays.copyOf(intArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, 0.0, (-1499.4654416), 0.0, (-1499.4654416), 0.0, (double) 0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace((-512.332), doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-956,155.896 <= -956,155.896)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      MathArrays.copyOf(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MathArrays.linearCombination(3.834E-20, (-1720.96498), 3.834E-20, (-1720.96498), (-1982.1836126115402), 3.834E-20, 3.834E-20, (-2778.532970646));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1720.96498);
      doubleArray0[1] = (-1720.96498);
      doubleArray0[2] = (-2778.532970646);
      doubleArray0[3] = (-3.144894684684941E-16);
      doubleArray0[4] = (-3.144894684684941E-16);
      doubleArray0[5] = (-2778.532970646);
      int[] intArray0 = new int[4];
      intArray0[0] = (-261);
      intArray0[1] = (-2056);
      intArray0[2] = 0;
      intArray0[3] = 4330;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1,720.965 >= -1,720.965)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-128.1048714);
      doubleArray0[3] = 4041.6578655888547;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1359.4;
      doubleArray0[2] = (-369.0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[7][5];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray0;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray2;
      doubleArray3[4] = doubleArray0;
      doubleArray3[5] = doubleArray1;
      doubleArray3[6] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.copyOf(doubleArray1, 794);
      try { 
        MathArrays.checkPositive(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2672.8435814853);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 536.549493;
      doubleArray0[3] = 1456.531034873122;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = (-1087.829073121);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1087.829073121);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathArrays.linearCombination(3.834E-20, (-1720.96498), 3.834E-20, (-1720.96498), (-1982.1836126115402), 3.834E-20, 3.834E-20, (-2778.532970646));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1720.96498);
      doubleArray0[1] = (-1720.96498);
      doubleArray0[2] = (-2778.532970646);
      doubleArray0[3] = (-3.144894684684941E-16);
      doubleArray0[4] = (-3.144894684684941E-16);
      doubleArray0[5] = (-2778.532970646);
      doubleArray0[6] = (-1720.96498);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.linearCombination(2.608E18, (-3.144894684684941E-16), (-1720.96498), (-1.0));
      MathArrays.linearCombination(0.01745329052209854, (-1720.96498), (-2.957007209750105E-8), 4932.104249211788);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.linearCombination(1.34217729E8, 925.7673170738876, (-3105.381427870996), 0.1428571343421936, 925.7673170738876, 94.390722);
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long[][] longArray0 = new long[4][3];
      long[] longArray1 = new long[6];
      longArray1[0] = (-3382L);
      longArray1[1] = (-491L);
      longArray1[2] = 2964L;
      longArray1[3] = (-3090L);
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2964L;
      doubleArray0[1] = (double) (-3382L);
      doubleArray0[2] = (double) (-3382L);
      doubleArray0[3] = (double) 1849L;
      doubleArray0[4] = (double) (-491L);
      doubleArray0[5] = (-560.8);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 1045;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = 2.14580482785185E13;
      MathArrays.copyOf(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = 134217729;
      MathArrays.buildArray(field0, 134217729, (-363));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-545.72574252);
      doubleArray0[1] = 3.141592653589793;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 660.94F;
      floatArray0[1] = 352.9F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (-1141.1F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1521.2794;
      doubleArray0[1] = 1521.2794;
      doubleArray0[2] = (-121.7);
      doubleArray0[3] = 1521.2794;
      doubleArray0[4] = 1521.2794;
      MathArrays.scaleInPlace(1521.2794, doubleArray0);
      assertArrayEquals(new double[] {2314291.0128643597, 2314291.0128643597, (-185139.70298), 2314291.0128643597, 2314291.0128643597}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {2314291.0128643597, 2314291.0128643597, (-185139.70298), 2314291.0128643597, 2314291.0128643597}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4632283.268380562, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 819.731239593;
      doubleArray0[1] = 1866.2818175376767;
      doubleArray0[2] = 1866.2818175376767;
      doubleArray0[4] = 819.731239593;
      doubleArray0[5] = 1866.2818175376767;
      doubleArray0[6] = 16.34099277;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,866.282 >= 1,866.282)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long[][] longArray0 = new long[4][3];
      long[] longArray1 = new long[6];
      longArray1[0] = (-3382L);
      longArray1[1] = (-491L);
      longArray1[2] = 2964L;
      longArray1[3] = (-3090L);
      longArray1[4] = 0L;
      longArray1[5] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = (-3090L);
      longArray2[1] = (-1941L);
      longArray2[2] = 2964L;
      longArray2[3] = (-3382L);
      longArray2[4] = 1L;
      longArray2[5] = (-3382L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = (-3382L);
      longArray3[1] = 1L;
      longArray3[2] = 1L;
      longArray3[3] = 0L;
      longArray3[4] = (-491L);
      longArray3[5] = (-1941L);
      longArray3[6] = (-3382L);
      longArray3[7] = (-3382L);
      long[] longArray4 = new long[5];
      longArray4[0] = (-491L);
      longArray4[2] = (-3090L);
      longArray4[3] = (-3382L);
      longArray4[4] = (-3090L);
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 3 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 1353.629;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-74.73235140393);
      doubleArray0[4] = (-1383.07324);
      doubleArray0[5] = 1851.8;
      doubleArray0[6] = 2648.239;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2197.65665);
      MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray0, 2);
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 2;
      doubleArray1[5] = (double) 0;
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long[][] longArray0 = new long[4][3];
      long[] longArray1 = new long[6];
      longArray1[0] = (-3382L);
      longArray1[1] = (-491L);
      longArray1[2] = 2964L;
      longArray1[3] = (-3090L);
      longArray1[4] = 0L;
      longArray1[5] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = (-3090L);
      longArray2[1] = (-1941L);
      longArray2[2] = 2964L;
      longArray2[3] = (-3382L);
      longArray2[4] = 1L;
      longArray2[5] = (-3382L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = (-3382L);
      longArray3[1] = 1L;
      longArray3[2] = 1L;
      longArray3[3] = 0L;
      longArray3[4] = (-491L);
      longArray3[5] = (-1941L);
      longArray3[6] = (-3382L);
      longArray3[7] = (-3382L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = (-491L);
      longArray4[1] = (-3382L);
      longArray4[2] = (-3090L);
      longArray4[3] = (-3382L);
      longArray4[4] = (-3090L);
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "array size cannot be greater than {0}";
      stringArray0[1] = "";
      MathArrays.linearCombination((-1017.849234843), (-3915.21317), 6.283185307179586, 6.283185307179586, (-597.54776891489), (-1017.849234843));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3915.21317);
      doubleArray0[1] = (-1017.849234843);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      double double0 = new Double(6.283185307179586);
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 4278.2660577617;
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2183.0F);
      floatArray0[1] = (-1.0F);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.distance(doubleArray1, doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray1);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = 4278.2660577617;
      doubleArray0[3] = 4278.2660577617;
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[2];
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      MathArrays.distance1(doubleArray0, doubleArray3);
      MathArrays.linearCombination(0.0, 0.3153223395347595, 0.0, 2.925681159240093E-8, 0.0, 0.3153223395347595, 0.0, 0.0);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equalsIncludingNaN(doubleArray3, doubleArray2);
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1332.014);
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 0.0;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.834E-20, (-1720.96498), 3.834E-20, (-1720.96498), (-1982.1836126115402), 3.834E-20, 3.834E-20, (-2778.532970646));
      assertEquals((-3.144894684684941E-16), double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1720.96498);
      doubleArray0[1] = (-1720.96498);
      doubleArray0[2] = (-2778.532970646);
      doubleArray0[3] = (-3.144894684684941E-16);
      doubleArray0[4] = (-3.144894684684941E-16);
      doubleArray0[5] = (-2778.532970646);
      doubleArray0[6] = (-1720.96498);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.scale((-2778.532970646), doubleArray1);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1785.0);
      doubleArray0[1] = 2164.5607368918086;
      doubleArray0[2] = 3.32;
      doubleArray0[3] = 468.4093;
      doubleArray0[4] = (-1744.46005824131);
      double double0 = 20.0;
      doubleArray0[5] = 20.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,785 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-2467.134);
      doubleArray2[1] = 0.0;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[8];
      longArray1[0] = 0L;
      longArray1[1] = (-2300L);
      longArray1[2] = (-2436L);
      longArray1[3] = (-1626L);
      longArray1[4] = 1849L;
      longArray1[5] = 1023L;
      longArray1[6] = 1775L;
      longArray1[7] = (-5315L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-5315L);
      doubleArray0[1] = (double) (-1626L);
      doubleArray0[2] = (double) (-5315L);
      doubleArray0[3] = (double) 1023L;
      doubleArray0[4] = (double) (-2436L);
      doubleArray0[5] = (double) (-5315L);
      doubleArray0[6] = (double) 1775L;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-5315.0), (-1626.0), (-5315.0), 1023.0, (-2436.0), (-5315.0), 1775.0}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-2436L);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (-2436L);
      floatArray0[3] = (float) (-1626L);
      floatArray0[4] = (float) 1775L;
      floatArray0[5] = 4078.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 751.5409617885741;
      doubleArray0[1] = 3.32;
      doubleArray0[2] = (-1379.19);
      doubleArray0[3] = (-1162.136596550889);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 20.0;
      double[] doubleArray1 = null;
      MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[7][3];
      doubleArray2[0] = null;
      doubleArray2[1] = null;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = null;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 100.0;
      double double0 = 20.0;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2719.2778F);
      floatArray0[1] = 807.2926F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 807.2926F;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 673.2428;
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.equals(floatArray0, floatArray0);
      double[][] doubleArray3 = new double[5][6];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray2;
      doubleArray3[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray3);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      MathArrays.copyOf(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2783.2);
      doubleArray0[1] = 2969.56101;
      doubleArray0[2] = 1296.2212;
      doubleArray0[3] = 6966015.644943468;
      doubleArray0[4] = 43.3955694189771;
      doubleArray0[5] = (-1130.7789829276);
      doubleArray0[6] = 1516.7892331331;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 9.219544613762692E-9;
      int int0 = (-2150);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-2150));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-251);
      intArray0[2] = 0;
      intArray0[3] = 2934;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 174;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, (-251), 0, 2934, 0, 0, 174}, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1726.0499491), (-1726.0499491), (-1726.0499491), (-1726.0499491));
      assertEquals(5958496.853576225, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (double) 2;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 2)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-2358.51685);
      doubleArray0[3] = 4702.8682;
      doubleArray0[4] = (-1426.1);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 912.2109;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly decreasing (-2,358.517 <= 4,702.868)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.copyOf(doubleArray0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray1, doubleArray0);
      long[][] longArray0 = new long[0][4];
      MathArrays.checkNonNegative(longArray0);
      try { 
        MathArrays.normalizeArray(doubleArray1, (-1218.94949569999));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1345.028;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 255.5069435672808;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 255.5069435672808;
      doubleArray1[1] = 1345.028;
      doubleArray1[2] = 1345.028;
      doubleArray1[3] = 3.141592653589793;
      doubleArray1[4] = 255.5069435672808;
      doubleArray1[5] = 3.141592653589793;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {343663.9932924126, 1809903.019520852, 1878609.6490787661, 352115.0534597577, 687337.8561892263, 5830.927557376875, 65293.66781549471, 802.6987368521512}, doubleArray2, 0.01);
      assertEquals(8, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, (-1), (-2099));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 134217729;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 134217729, (-365));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1091.4117F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 562.54266028441;
      doubleArray0[1] = (double) 1091.4117F;
      doubleArray0[2] = (double) 1091.4117F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {562.54266028441, 1091.4117431640625, 1091.4117431640625}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2249;
      intArray0[1] = 0;
      intArray0[2] = (-280);
      intArray0[3] = 112;
      intArray0[4] = (-2056);
      intArray0[5] = (-261);
      intArray0[6] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2672.8435814853);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 536.549493;
      doubleArray0[3] = 1456.531034873122;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = (-1087.829073121);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(536.549493, 1.34217729E8, Double.NaN, 536.549493);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<String, Object>>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 277;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 277);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2324.85123227;
      doubleArray0[2] = 3231.3171709;
      doubleArray0[3] = 2415.2218088;
      doubleArray0[4] = (-353.403942);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale(996.1, doubleArray0);
      MathArrays.scaleInPlace(2324.85123227, doubleArray1);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      MathArrays.ebeDivide(doubleArray1, doubleArray2);
      int[] intArray0 = new int[9];
      intArray0[0] = 15;
      intArray0[1] = 474;
      intArray0[2] = 0;
      intArray0[3] = 434;
      intArray0[4] = 2;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 61;
      intArray0[8] = (-1204);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1204));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 6379.077152;
      doubleArray1[1] = 6379.077152;
      MathArrays.checkPositive(doubleArray1);
      MathArrays.OrderDirection.values();
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1020.5344522717);
      doubleArray0[1] = (-1829.9066165);
      doubleArray0[2] = (-416.434995);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1280.39);
      doubleArray0[5] = (-652.902623971);
      doubleArray0[6] = 1714.2260616460196;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = Double.NaN;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-545.72574252);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 309.0;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-389);
      intArray0[1] = 307;
      intArray0[2] = (-389);
      intArray0[3] = 307;
      intArray0[4] = 307;
      intArray0[5] = (-389);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-389));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-545.72574252);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 309.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray1);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 132, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = 756.12256F;
      floatArray0[0] = 756.12256F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.scale(0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1017.849234843);
      doubleArray0[1] = (-128.1048714);
      doubleArray0[2] = (-333.5667);
      doubleArray0[3] = 4041.6578655888547;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 819.731239593;
      doubleArray0[1] = 1866.2818175376767;
      doubleArray0[2] = 3627.869354134502;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2134.03408;
      doubleArray0[6] = 16.34099277;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 5 and 6 are not strictly increasing (2,134.034 >= 16.341)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1604.76095795778;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-5612.4717675);
      doubleArray0[4] = 1247.9165603;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-2290.727762938765);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 56.476;
      doubleArray0[1] = 56.476;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[1] = "7uu~vr";
      stringArray0[2] = "f@h|2@";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Integer integer0 = new Integer(1277);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-549));
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[0];
      MathArrays.copyOf(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "array size cannot be greater than {0}";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 299;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      MathArrays.checkOrder(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][0];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      MathArrays.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 299, 5594);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = (-543);
      Integer integer0 = new Integer((-543));
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      MathArrays.copyOf(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "array size cannot be greater than {0}";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2706;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2706, 2706);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MathArrays.linearCombination((-1198.98348215363), (-1198.98348215363), (-1198.98348215363), (-1198.98348215363), (-1590.101024), (-1198.98348215363), 1.304E19, (-1198.98348215363));
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-740));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1179));
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("bY`y)j\"TU/J", integer2);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-543));
      integerArray0[4] = integer4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      long[][] longArray0 = new long[4][2];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = 3341L;
      longArray2[1] = (long) (int)integerArray0[3];
      longArray2[2] = (long) (-543);
      longArray2[3] = (long) (-1179);
      longArray2[4] = (long) (-740);
      longArray2[5] = (long) (-1179);
      longArray2[6] = (long) (int)integerArray0[4];
      longArray2[7] = (-1078L);
      longArray2[8] = (long) (-740);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = 3341L;
      longArray3[1] = (long) (int)integerArray0[3];
      longArray3[2] = (long) (int)integerArray0[3];
      longArray3[3] = (long) (int)integerArray0[2];
      longArray3[4] = (long) (-740);
      longArray3[5] = (long) (-543);
      longArray3[6] = 3341L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      longArray4[0] = (-1078L);
      longArray4[1] = (long) (-543);
      longArray4[2] = (long) (int)integerArray0[4];
      longArray4[3] = (long) (int)integerArray0[3];
      longArray4[4] = (long) (-543);
      longArray4[5] = 1L;
      longArray4[6] = (long) (int)integerArray0[2];
      longArray4[7] = (long) (int)integerArray0[3];
      longArray4[8] = (long) (-543);
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,179 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 2);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = (-389);
      intArray0[5] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0, 307);
      assertEquals(307, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2159.9;
      doubleArray0[3] = (-677.0);
      doubleArray0[4] = 2243.908;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1.01586299920684E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 180;
      intArray0[0] = 180;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 180;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 180;
      doubleArray0[3] = (double) 180;
      doubleArray0[4] = (double) 180;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.linearCombination(129600.0, (double) 0, (double) 180, 0.0, 0.0, 1859.94146101739);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("org.apache.commons.math3.util.MathArrays$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.org.apache.commons.math3.util.MathArrays$1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 825.0683742256285;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2448;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2032;
      intArray0[4] = 156;
      intArray0[5] = (-2755);
      intArray0[6] = 134217729;
      intArray0[7] = (-2235);
      intArray0[8] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1516.52;
      doubleArray1[1] = 3.32;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-850.6);
      doubleArray1[5] = (-103.7288575753);
      doubleArray1[6] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
