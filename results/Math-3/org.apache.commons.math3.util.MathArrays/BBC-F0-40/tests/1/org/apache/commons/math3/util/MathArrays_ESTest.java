/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:40:04 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.8109631538391113;
      MathArrays.scaleInPlace(3.834E-20, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.4699556E-39, 1.4699556E-39, 3.109232731819153E-20}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][1];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {1.4699556E-39, 1.4699556E-39, 3.109232731819153E-20}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2076020339);
      intArray0[1] = 10;
      intArray0[2] = 3967;
      intArray0[3] = 2;
      intArray0[4] = (-294);
      intArray0[5] = 8;
      intArray0[6] = 1815;
      int[] intArray1 = MathArrays.copyOf(intArray0, 10);
      assertEquals(10, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-2076020339), 10, 3967, 2, (-294), 8, 1815, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {(-2076020339), 10, 3967, 2, (-294), 8, 1815}, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.4699556E-39, 1.4699556E-39, 3.109232731819153E-20}, doubleArray0, 0.01);
      assertEquals(3.109232731819153E-20, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 3967);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {1.4699556E-39, 1.4699556E-39, 3.109232731819153E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.87548323595198E-16, 1.87548323595198E-16, 3967.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-856.1309F);
      floatArray0[2] = Float.POSITIVE_INFINITY;
      floatArray0[3] = (-1227.17F);
      floatArray0[4] = 3.4028235E38F;
      floatArray0[5] = (-3294.183F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-856.1309F), Float.POSITIVE_INFINITY, (-1227.17F), 3.4028235E38F, (-3294.183F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-856.1309F);
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = (double) (-1474.0F);
      doubleArray0[3] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[4] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[5] = (double) (-3294.183F);
      doubleArray0[6] = 2203.8706;
      doubleArray0[7] = (double) 3.4028235E38F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-856.1309204101562), Double.POSITIVE_INFINITY, (-1474.0), Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-3294.18310546875), 2203.8706, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {732960.1528823413, Double.POSITIVE_INFINITY, 2172676.0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0851642332355738E7, 4857045.621544361, 1.1579207543382391E77}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-856.1309204101562), Double.POSITIVE_INFINITY, (-1474.0), Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-3294.18310546875), 2203.8706, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.09090909090909091;
      doubleArray0[1] = 0.09090909090909091;
      doubleArray0[2] = 0.09090909090909091;
      doubleArray0[3] = 0.09090909090909091;
      doubleArray0[4] = 0.09090909090909091;
      doubleArray0[5] = 0.09090909090909091;
      doubleArray0[6] = 0.09090909090909091;
      MathArrays.scaleInPlace(0.09090909090909091, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.008264462809917356, 0.008264462809917356, 0.008264462809917356, 0.008264462809917356, 0.008264462809917356, 0.008264462809917356, 0.008264462809917356}, doubleArray0, 0.01);
      
      int int0 = 2150;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2150);
      assertEquals(7, doubleArray0.length);
      assertEquals(2150, doubleArray1.length);
      assertArrayEquals(new double[] {0.008264462809917356, 0.008264462809917356, 0.008264462809917356, 0.008264462809917356, 0.008264462809917356, 0.008264462809917356, 0.008264462809917356}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4.438921624363781E-8;
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = (-1367.052284380384);
      doubleArray1[3] = (-697.79);
      doubleArray1[4] = (-187.63322217);
      doubleArray1[5] = 1.304E19;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.438921624363781E-8, 3.834E-20, (-1367.052284380384), (-697.79), (-187.63322217), 1.304E19}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      try { 
        MathArrays.normalizeArray(doubleArray2, (-187.63322217));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = (-2644);
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<Object> fieldElement0 = (FieldElement<Object>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      FieldElement<Object> fieldElement1 = (FieldElement<Object>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2644), (-2644));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-4036);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1137);
      intArray0[4] = 1570;
      intArray0[5] = 0;
      intArray0[6] = 94;
      intArray0[7] = 0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.34217729E8;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 94;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (-3571.36);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[8][2];
      doubleArray3[0] = null;
      doubleArray3[1] = null;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (double) 0;
      doubleArray3[2] = doubleArray4;
      doubleArray3[3] = null;
      doubleArray3[4] = doubleArray0;
      doubleArray3[5] = null;
      doubleArray3[6] = doubleArray0;
      doubleArray3[7] = null;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3241);
      intArray0[1] = 4523;
      intArray0[2] = 1073741824;
      intArray0[3] = 73;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-3241);
      intArray1[1] = 1073741824;
      intArray1[2] = (-3241);
      intArray1[3] = 1073741824;
      intArray1[4] = 73;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-3241), 4523, 1073741824, 73}, intArray0);
      assertArrayEquals(new int[] {(-3241), 1073741824, (-3241), 1073741824, 73}, intArray1);
      assertEquals((-1073743179), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.26E18;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1111.821946;
      doubleArray0[3] = 330.2214126;
      doubleArray0[4] = (-1714.93945);
      doubleArray0[5] = (-2148.4634998992046);
      doubleArray0[6] = 1432.035;
      doubleArray0[7] = 2.925681159240093E-8;
      doubleArray0[8] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3.26E18, 1.0, 1111.821946, 330.2214126, (-1714.93945), (-2148.4634998992046), 1432.035, 2.925681159240093E-8, 1.304E19}, doubleArray0, 0.01);
      assertEquals(1.3441324339513573E19, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-871.9435F);
      floatArray0[2] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-871.9435F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2141092327;
      intArray0[1] = (-2042);
      intArray0[2] = (-1187);
      intArray0[3] = (-2201);
      intArray0[4] = 93;
      intArray0[5] = (-1431);
      intArray0[6] = 1387;
      intArray0[7] = 2;
      intArray0[8] = 1134;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {2141092327, (-2042), (-1187), (-2201), 93, (-1431), 1387, 2, 1134}, intArray0);
      assertArrayEquals(new int[] {2141092327, (-2042), (-1187), (-2201), 93, (-1431), 1387, 2, 1134}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 739.0;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = 739.0;
      doubleArray0[3] = 1.44888888888888883E18;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = 739.0;
      doubleArray0[6] = 739.0;
      doubleArray0[7] = (double) 6;
      doubleArray0[8] = 739.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2712.664));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {739.0, 6.0, 739.0, 1.44888888888888883E18, 6.0, 739.0, 739.0, 6.0, 739.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.3835834558282175E-12), (-1.123342453987727E-14), (-1.3835834558282175E-12), (-2712.663999999993), (-1.123342453987727E-14), (-1.3835834558282175E-12), (-1.3835834558282175E-12), (-1.123342453987727E-14), (-1.3835834558282175E-12)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {739.0, 6.0, 739.0, 1.44888888888888883E18, 6.0, 739.0, 739.0, 6.0, 739.0}, doubleArray0, 0.01);
      assertEquals(1.44888888888888883E18, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {739.0, 6.0, 739.0, 1.44888888888888883E18, 6.0, 739.0, 739.0, 6.0, 739.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.3835834558282175E-12), (-1.123342453987727E-14), (-1.3835834558282175E-12), (-2712.663999999993), (-1.123342453987727E-14), (-1.3835834558282175E-12), (-1.3835834558282175E-12), (-1.123342453987727E-14), (-1.3835834558282175E-12)}, doubleArray1, 0.01);
      assertEquals(1.44888888888889165E18, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = 1.304E19;
      double[] doubleArray1 = MathArrays.scale(1.304E19, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38}, doubleArray1, 0.01);
      assertEquals(5.101248E38, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38}, doubleArray1, 0.01);
      assertEquals(1.9956082176E58, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3727.0);
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 6.123233995736766E-17;
      doubleArray0[3] = 155.87;
      doubleArray0[4] = 61.7108602;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-3727.0), 3.834E-20, 6.123233995736766E-17, 155.87, 61.7108602}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-3727.0), 3.834E-20, 6.123233995736766E-17, 155.87, 61.7108602}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-3727.0), 3.834E-20, 6.123233995736766E-17, 155.87, 61.7108602}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(3731.7095982198593, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-3727.0), 3.834E-20, 6.123233995736766E-17, 155.87, 61.7108602}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals((-3509.4191398), double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,727 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 775.227F;
      floatArray0[3] = 1778.68F;
      floatArray0[4] = (-165.0F);
      floatArray0[5] = 3645.1F;
      floatArray0[6] = (-642.93F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[1] = 1778.68F;
      floatArray1[2] = 3645.1F;
      floatArray1[3] = 1778.68F;
      floatArray1[4] = 1778.68F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = (-642.93F);
      floatArray1[8] = 342.9004F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 1.0F, 775.227F, 1778.68F, (-165.0F), 3645.1F, (-642.93F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1778.68F, 3645.1F, 1778.68F, 1778.68F, 0.0F, 0.0F, (-642.93F), 342.9004F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 3.834E-20;
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1897.098568343);
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 3.834E-20, 0.0, (-1897.098568343), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 3982);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.7214844226837158;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = Double.NaN;
      double[][] doubleArray1 = new double[5][2];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = 0.7214844226837158;
      doubleArray2[3] = 0.7214844226837158;
      doubleArray2[4] = 0.7214844226837158;
      doubleArray2[5] = Double.NaN;
      doubleArray2[6] = 0.7214844226837158;
      doubleArray2[7] = Double.NaN;
      doubleArray2[8] = 1.304E19;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1897.098568343);
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 3.834E-20, 0.0, (-1897.098568343), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 3982);
      assertEquals(3982, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {2.0, 3.834E-20, 0.0, (-1897.098568343), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 1.5336E-19, 1.4699556E-39, (-7588.394273372), (-1.4546951822054123E-16), 0.0, 3598982.97800906, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, (-2118.910342121), (-1282.0));
      assertEquals(2716443.0585991223, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-219.66), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147483646, (-3826));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[2];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1717);
      int int0 = MathArrays.distance1(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1717)}, intArray1);
      assertEquals(1717, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2690.09891;
      doubleArray0[1] = 0.366272509098053;
      doubleArray0[2] = 2690.09891;
      doubleArray0[3] = 2690.09891;
      doubleArray0[4] = 2690.09891;
      double[] doubleArray1 = MathArrays.scale(2690.09891, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {2690.09891, 0.366272509098053, 2690.09891, 2690.09891, 2690.09891}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7236632.145583189, 985.3092774876375, 7236632.145583189, 7236632.145583189, 7236632.145583189}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.scaleInPlace(7236632.145583189, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.94672562469043E10, 2650579.413382381, 1.94672562469043E10, 1.94672562469043E10, 1.94672562469043E10}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2073);
      int int0 = 12;
      intArray0[1] = 12;
      intArray0[2] = 136;
      intArray0[3] = 499;
      intArray0[4] = 1844;
      int int1 = 557;
      intArray0[5] = 557;
      intArray0[6] = (-2144990704);
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 12;
      intArray1[1] = 136;
      intArray1[2] = (-204);
      intArray1[3] = (-2073);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = (-1496.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 3.4028235E38F, (-1496.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 3.4028235E38F, (-1496.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[][] doubleArray3 = new double[6][4];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray1;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (double) 3.4028235E38F;
      doubleArray3[2] = doubleArray4;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray0;
      doubleArray3[5] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "H|ZnX~lw";
      stringArray0[1] = "1znn5cc7Gw85";
      stringArray0[2] = "tNQnj=-o+o8";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {Float.NaN, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-32);
      intArray0[1] = 2441;
      intArray0[2] = 134217729;
      intArray0[3] = 2680;
      intArray0[4] = (-1822);
      intArray0[5] = 2;
      intArray0[6] = (-2544);
      intArray0[7] = 2;
      intArray0[8] = 402;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-32), 2441, 134217729, 2680, (-1822), 2, (-2544), 2, 402}, intArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-806.0954F);
      floatArray0[1] = (-670.57135F);
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 1426.1257F;
      floatArray0[4] = (-1389.638F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-806.0954F), (-670.57135F), Float.NaN, 1426.1257F, (-1389.638F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1389.638F);
      doubleArray2[1] = (double) (-1389.638F);
      doubleArray2[2] = (double) 1426.1257F;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (double) (-1389.638F);
      doubleArray2[5] = (double) Float.NaN;
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      float[] floatArray0 = new float[3];
      floatArray0[2] = (-942.3F);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-942.3F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-942.3F);
      floatArray1[1] = (-942.3F);
      floatArray1[3] = (-942.3F);
      floatArray1[4] = (-942.3F);
      floatArray1[5] = (-942.3F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-942.3F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-942.3F), (-942.3F), 0.0F, (-942.3F), (-942.3F), (-942.3F)}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[][] doubleArray3 = new double[1][3];
      doubleArray3[0] = doubleArray2;
      MathArrays.sortInPlace(doubleArray0, doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      double[] doubleArray5 = MathArrays.copyOf(doubleArray4);
      assertEquals(0, doubleArray4.length);
      assertEquals(0, doubleArray5.length);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {}, doubleArray5, 0.01);
      assertNotNull(doubleArray5);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray4);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      
      double[] doubleArray6 = MathArrays.ebeAdd(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray6.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray6, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray6);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray6);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-718.7949121713038);
      doubleArray0[2] = 3.6853984812350184E7;
      doubleArray0[3] = (-4.9E-324);
      doubleArray0[4] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-718.7949121713038), 3.6853984812350184E7, (-4.9E-324), 0.0}, doubleArray0, 0.01);
      assertEquals(3.6853984819359824E7, double0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = (-10);
      float float0 = (-1935.6465F);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-10);
      doubleArray0[1] = (double) (-1935.6465F);
      doubleArray0[2] = (double) (-1935.6465F);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-10.0), (-1935.646484375), (-1935.646484375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-10.0), (-1935.646484375), (-1935.646484375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-10.0), (-1935.646484375), (-1935.646484375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {(-10.0), (-1935.646484375), (-1935.646484375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 238;
      intArray0[1] = 0;
      intArray0[2] = (-2905);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {238, 0, (-2905)}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      float[] floatArray0 = new float[3];
      floatArray0[2] = (-942.3F);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-942.3F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-942.3F);
      floatArray1[1] = (-942.3F);
      floatArray1[2] = 618.9168F;
      floatArray1[3] = (-942.3F);
      floatArray1[4] = (-942.3F);
      floatArray1[5] = (-942.3F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-942.3F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-942.3F), (-942.3F), 618.9168F, (-942.3F), (-942.3F), (-942.3F)}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[][] doubleArray3 = new double[1][3];
      doubleArray3[0] = doubleArray2;
      MathArrays.sortInPlace(doubleArray0, doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray2, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 1095.567318928;
      doubleArray0[0] = 1095.567318928;
      double double1 = Double.NaN;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1718.706914391;
      int[] intArray0 = new int[9];
      intArray0[0] = (-170);
      intArray0[1] = (-873);
      int int0 = 285;
      intArray0[2] = 285;
      intArray0[3] = 280;
      intArray0[4] = 0;
      intArray0[5] = 15;
      intArray0[6] = 1931;
      intArray0[7] = 3516;
      intArray0[8] = (-236);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3516;
      intArray1[1] = 285;
      intArray1[2] = (-236);
      intArray1[3] = 229;
      intArray1[4] = 280;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(13, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 13
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      long long0 = 954L;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 2150.59;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 364.963809;
      boolean boolean3 = MathArrays.equals(doubleArray2, doubleArray1);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 2150.59, 0.0, 0.0, 0.0, 364.963809}, doubleArray2, 0.01);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("org.apache.commons.math3.util.MathArrays$OrderDirection");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.org.apache.commons.math3.util.MathArrays$OrderDirection
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 568.8F;
      floatArray0[3] = 0.0F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-1.0F);
      floatArray1[3] = 568.8F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 568.8F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 568.8F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = null;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-3275.16515553), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[5][8];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      double double0 = MathArrays.distance(intArray1, intArray1);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1883.998F;
      floatArray0[1] = (-320.0F);
      floatArray0[2] = 559.475F;
      floatArray0[3] = 1374.5F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1883.998F, (-320.0F), 559.475F, 1374.5F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 1883.998F;
      doubleArray0[2] = (double) 1883.998F;
      doubleArray0[3] = (-1763.5171799);
      doubleArray0[4] = (double) 559.475F;
      doubleArray0[5] = (double) 559.475F;
      doubleArray0[6] = (double) 1374.5F;
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 1883.998046875, 1883.998046875, (-1763.5171799), 559.4749755859375, 559.4749755859375, 1374.5, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      double double1 = MathArrays.linearCombination(0.0, 3064.980660188131, (-2883.66651545925), 0.0, 0.0, 48250.5156, 0.0, (-1469.27605891711));
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-219.66);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Double double1 = new Double(2069.20577721);
      assertEquals(2069.20577721, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = double1;
      doubleArray1[1] = double1;
      doubleArray1[2] = double1;
      doubleArray1[3] = (Double) (-219.66);
      doubleArray1[4] = (Double) (-219.66);
      doubleArray1[5] = (Double) (-219.66);
      doubleArray1[6] = (Double) (-219.66);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(7, doubleArray1.length);
      assertTrue(boolean0);
      
      double double2 = MathArrays.linearCombination((-3619.1868831993074), (double) doubleArray1[0], 1537.0951996323265, 3294198.0, (-1068.0), (double) doubleArray1[1]);
      assertEquals(7, doubleArray1.length);
      assertEquals(5.053797178260832E9, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1252.0245;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      double double1 = MathArrays.distance1(doubleArray1, doubleArray2);
      assertEquals(1, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1252.0245, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double2 = MathArrays.linearCombination(doubleArray2, doubleArray2);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1252.0245, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(1567565.34860025, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 1252.0245);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-219.66);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 871.05);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {871.05}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[2] = (-219.66);
      doubleArray2[1] = (-18.58349235450283);
      doubleArray2[2] = 871.05;
      doubleArray2[3] = 1151.4402;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-18.58349235450283), 871.05, 1151.4402}, doubleArray2, 0.01);
      assertEquals(219.66, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-219.66);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 871.05);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {871.05}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale((-219.66), doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {871.05}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-191334.843)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {871.05}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {871.05}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-191334.843)}, doubleArray2, 0.01);
      assertEquals(191334.843, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {871.05}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-191334.843)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-191334.843)}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      
      double[] doubleArray4 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray4.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {871.05}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {758728.1024999999}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      
      double double2 = MathArrays.distance(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {871.05}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-191334.843)}, doubleArray2, 0.01);
      assertEquals(192205.89299999998, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-219.66);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Double[] doubleArray1 = new Double[0];
      double double1 = MathArrays.linearCombination(0.0, Double.NaN, 3.834E-20, 3.834E-20, 2458.0, 871.05);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      MathArrays.checkOrder(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(490.840052177, (-3033.157), 1.0, 1.0, 203.6354784267, 490.840052177);
      assertEquals((-1388841.4912849832), double0, 0.01);
      
      double double1 = MathArrays.linearCombination(Double.POSITIVE_INFINITY, (double) 154, 0.0, Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-10);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-10);
      intArray0[1] = 0;
      intArray0[2] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-10), 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-10), 0, 0}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale((-4.503599627370496E15), doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray0, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-4.503599627370496E15);
      try { 
        MathArrays.linearCombination(doubleArray3, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 3;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 3.141592653589793;
      doubleArray0[0] = 3.141592653589793;
      double double1 = 1900.1;
      doubleArray0[1] = 1900.1;
      double double2 = 1845.220694787;
      doubleArray0[2] = 1845.220694787;
      doubleArray0[3] = 808.7000122070312;
      double double3 = (-330.2214126);
      doubleArray0[4] = (-330.2214126);
      double double4 = 1362.30605711173;
      doubleArray0[5] = 1362.30605711173;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {3.141592653589793, 1900.1, 1845.220694787, 808.7000122070312, (-330.2214126), 1362.30605711173}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {3.141592653589793, 1900.1, 1845.220694787, 808.7000122070312, (-330.2214126), 1362.30605711173}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1362.30605711173;
      doubleArray1[1] = 3.141592653589793;
      doubleArray1[2] = 3.141592653589793;
      doubleArray1[3] = 808.7000122070312;
      doubleArray1[4] = 1845.220694787;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale((-470.2721314957441), doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 118;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 118}, intArray0);
      assertEquals(0, int0);
      
      long[][] longArray0 = new long[0][0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2708));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 154;
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0E-5;
      doubleArray1[1] = 1.0E-5;
      doubleArray1[2] = 1.0E-5;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = 1.0E-5;
      doubleArray1[5] = 1.0E-5;
      doubleArray1[6] = 1.0E-5;
      doubleArray1[7] = Double.POSITIVE_INFINITY;
      doubleArray1[8] = (double) 154;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {1.0E-5, 1.0E-5, 1.0E-5, Double.POSITIVE_INFINITY, 1.0E-5, 1.0E-5, 1.0E-5, Double.POSITIVE_INFINITY, 154.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      Double[] doubleArray2 = new Double[4];
      doubleArray2[0] = (Double) 1.0E-5;
      doubleArray2[1] = (Double) 154.0;
      doubleArray2[2] = (Double) 1.0E-5;
      doubleArray2[3] = (Double) 1.0E-5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertEquals(4, doubleArray2.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray3 = null;
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean3 = MathArrays.equals(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0E-5, 1.0E-5, 1.0E-5, Double.POSITIVE_INFINITY, 1.0E-5, 1.0E-5, 1.0E-5, Double.POSITIVE_INFINITY, 154.0}, doubleArray1, 0.01);
      assertFalse(boolean3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not increasing (\u221E > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-10);
      intArray0[0] = (-10);
      float float0 = (-3532.69F);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-10);
      doubleArray2[1] = (double) (-10);
      doubleArray2[2] = (double) (-10);
      doubleArray2[3] = (double) (-10);
      doubleArray2[4] = (double) (-1935.6465F);
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-10.0), (-10.0), (-10.0), (-10.0), (-1935.646484375)}, doubleArray2, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {(-10.0), (-10.0), (-10.0), (-10.0), (-1935.646484375)}, doubleArray2, 0.01);
      assertEquals(1935.74980626973, double1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 118;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {118.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, integerArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-10);
      intArray0[1] = 0;
      intArray0[2] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-10), 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-10), 0, 0}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      double double1 = MathArrays.linearCombination((double) 0, (double) 0, (-2251.0), 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, (-4181.63683539904), 2935.8925764304, 0.0, 0.0, (-4181.63683539904), (-4181.63683539904), (-4181.63683539904));
      assertEquals(1.74860866231661E7, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2126221433;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {2126221433}, intArray0);
      assertArrayEquals(new int[] {2126221433}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1805.6986);
      doubleArray0[1] = (-3328.9277);
      doubleArray0[2] = (-1610.37100856);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-822.649839);
      doubleArray0[5] = (-1767.38056);
      doubleArray0[6] = 1105.0;
      doubleArray0[7] = (-1672.154);
      doubleArray0[8] = 629.6379638;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.8307188599677033E-8);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {(-1805.6986), (-3328.9277), (-1610.37100856), Double.NaN, (-822.649839), (-1767.38056), 1105.0, (-1672.154), 629.6379638}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.5650697087968783E-9, 6.57244753141242E-9, 3.1794259033827324E-9, Double.NaN, 1.624193551440716E-9, 3.489416726785115E-9, (-2.181649821415684E-9), 3.301406765139839E-9, (-1.2431217658649818E-9)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1912.551235);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {(-1805.6986), (-3328.9277), (-1610.37100856), Double.NaN, (-822.649839), (-1767.38056), 1105.0, (-1672.154), 629.6379638}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.5650697087968783E-9, 6.57244753141242E-9, 3.1794259033827324E-9, Double.NaN, 1.624193551440716E-9, 3.489416726785115E-9, (-2.181649821415684E-9), 3.301406765139839E-9, (-1.2431217658649818E-9)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {372.4426848664707, 686.6233214747828, 332.15449248241805, Double.NaN, 169.67943306935604, 364.5392209681099, (-227.91686651219098), 344.8978280595713, (-129.86887940851796)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale((-470.2721314957441), doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 118;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 118}, intArray0);
      assertEquals(0, int0);
      
      MathArrays.scaleInPlace((-2247.98455145803), doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      MathArrays.checkOrder(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 154;
      long long0 = (-1490L);
      longArray0[1] = (-1490L);
      longArray0[2] = (long) 154;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = 2.0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 154L;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 2.0;
      doubleArray1[3] = (double) (-1490L);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (\u221E > 2)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      long[] longArray0 = new long[4];
      longArray0[0] = 2147483647L;
      longArray0[1] = 2147483647L;
      longArray0[2] = 2147483647L;
      longArray0[3] = 2147483647L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {2147483647L, 2147483647L, 2147483647L, 2147483647L}, longArray0);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2147483647L;
      doubleArray1[1] = (double) 2147483647L;
      doubleArray1[2] = (double) 2147483647L;
      doubleArray1[3] = (double) 2147483647L;
      doubleArray1[4] = (double) 2147483647L;
      doubleArray1[5] = (double) 2147483647L;
      doubleArray1[6] = (double) 2147483647L;
      doubleArray1[7] = (double) 2147483647L;
      doubleArray1[8] = (double) 2147483647L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2147483647L;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 2147483647L;
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {2.14748365E9F, 0.0F, 2.14748365E9F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int int0 = 118;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 461.0;
      doubleArray0[3] = 461.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 461.0, 461.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 9;
      intArray0[1] = (-769);
      intArray0[2] = 984;
      intArray0[3] = 2137751554;
      intArray0[4] = (-3440);
      intArray0[5] = 1171;
      intArray0[6] = (-2592);
      intArray0[7] = 214;
      intArray0[8] = (-2443);
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {9, (-769), 984, 2137751554, (-3440), 1171, (-2592), 214, (-2443)}, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1718.706914391;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][4];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-219.66), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2147483646, (-3826));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 118;
      intArray0[1] = 118;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 118;
      intArray0[6] = 118;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {118, 118, 0, 0, 0, 118, 118}, intArray0);
      assertEquals(0, int0);
      
      long[][] longArray0 = new long[2][1];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 118;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 118;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) 0;
      longArray2[5] = (long) 118;
      longArray2[6] = (long) 118;
      longArray2[7] = (long) 118;
      longArray2[8] = (long) 0;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 108);
      assertEquals(7, intArray0.length);
      assertEquals(108, intArray1.length);
      assertArrayEquals(new int[] {118, 118, 0, 0, 0, 118, 118}, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[7][4];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<Object> fieldElement0 = (FieldElement<Object>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      FieldElement<Object> fieldElement1 = (FieldElement<Object>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0, fieldElement0, fieldElement1, fieldElement1, fieldElement1).when(field0).getZero();
      FieldElement<Object>[][] fieldElementArray0 = MathArrays.buildArray(field0, 6, 6);
      assertEquals(6, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
      
      long[][] longArray0 = new long[3][2];
      long[] longArray1 = new long[7];
      longArray1[0] = (long) 6;
      longArray1[1] = (long) 6;
      longArray1[2] = (long) 6;
      longArray1[3] = (long) 6;
      longArray1[4] = (long) 6;
      longArray1[5] = (long) 6;
      longArray1[6] = (long) 6;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 6;
      longArray2[1] = (long) 6;
      longArray2[2] = (-1490L);
      longArray2[3] = (long) 6;
      longArray2[4] = (long) 6;
      longArray2[5] = (long) 6;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,490 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 85.30740763855796;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0E-5;
      doubleArray1[1] = 85.30740763855796;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 85.30740763855796;
      doubleArray1[4] = 85.30740763855796;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {85.30740763855796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0E-5, 85.30740763855796, 0.0, 85.30740763855796, 85.30740763855796}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Double[] doubleArray2 = new Double[1];
      doubleArray2[0] = (Double) 85.30740763855796;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray2.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {85.30740763855796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0E-5, 85.30740763855796, 0.0, 85.30740763855796, 85.30740763855796}, doubleArray1, 0.01);
      assertFalse(boolean2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean3 = MathArrays.equals(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {1.0E-5, 85.30740763855796, 0.0, 85.30740763855796, 85.30740763855796}, doubleArray1, 0.01);
      assertTrue(boolean3);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean4 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {85.30740763855796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean4);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-219.66);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-219.66);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 871.05);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {871.05}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale((-219.66), doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {871.05}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-191334.843)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertEquals(219.66, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {871.05}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-191334.843)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3.660902214583465E10}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray3, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 3840;
      Double[] doubleArray2 = new Double[8];
      Double double2 = Double.valueOf((-1627.0));
      assertEquals((-1627.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray2[0] = double2;
      Double double3 = new Double(1073.4F);
      assertEquals(1073.4000244140625, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray2[1] = double3;
      Double double4 = new Double((-5376.908602741475));
      assertEquals((-5376.908602741475), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray2[2] = double4;
      Double double5 = new Double(1.34217729E8);
      assertEquals(1.34217729E8, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      
      doubleArray2[3] = doubleArray2[2];
      Double double6 = new Double((double) doubleArray2[3]);
      assertEquals(8, doubleArray2.length);
      assertEquals((-5376.908602741475), (double)double6, 0.01);
      assertNotNull(double6);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      
      doubleArray2[4] = double6;
      Double double7 = new Double(1.3721886E-16);
      assertEquals(1.3721886E-16, (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertEquals((double)double7, (double)double0, 0.01);
      assertEquals((double)double7, (double)double1, 0.01);
      
      doubleArray2[5] = double7;
      Double double8 = new Double(0.0);
      assertEquals(0.0, (double)double8, 0.01);
      assertNotNull(double8);
      assertEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertEquals((double)double8, (double)double1, 0.01);
      
      doubleArray2[6] = double8;
      Double double9 = new Double(1073.4F);
      assertEquals(1073.4000244140625, (double)double9, 0.01);
      assertNotNull(double9);
      assertNotEquals((double)double9, (double)double2, 0.01);
      assertNotEquals((double)double9, (double)double4, 0.01);
      assertNotEquals((double)double9, (double)double5, 0.01);
      assertNotEquals((double)double9, (double)double7, 0.01);
      assertNotEquals((double)double9, (double)double0, 0.01);
      assertNotEquals((double)double9, (double)double1, 0.01);
      assertEquals((double)double9, (double)double3, 0.01);
      assertNotEquals((double)double9, (double)double6, 0.01);
      assertNotEquals((double)double9, (double)double8, 0.01);
      
      doubleArray2[7] = double9;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray2.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1718.706914391;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      Double[] doubleArray2 = new Double[6];
      doubleArray2[0] = (Double) 1718.706914391;
      Double double0 = new Double(2069.20577721);
      assertEquals(2069.20577721, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[1] = double0;
      doubleArray2[2] = (Double) 1718.706914391;
      doubleArray2[3] = (Double) 1718.706914391;
      doubleArray2[4] = (Double) 1718.706914391;
      doubleArray2[5] = (Double) 1718.706914391;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[1][0];
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray1[3] = 0.0;
      double[] doubleArray2 = null;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int int0 = 118;
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.scale(1.0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Object>[][] fieldElementArray0 = MathArrays.buildArray(field0, 6, (-1406));
      assertEquals(6, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {3.834E-20, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {3.834E-20, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {3.834E-20, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {3.834E-20, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {3.834E-20, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      Double double3 = new Double(1.304E19);
      assertEquals(1.304E19, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      double double4 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {3.834E-20, 0.0}, doubleArray0, 0.01);
      assertEquals(3.834E-20, double4, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.linearCombination((-330.2214126), 4024.0, (-330.2214126), 1.1921056801463227E-8);
      assertEquals((-1328810.9643063366), double0, 0.01);
      
      int int0 = (-2908);
      int int1 = 3546;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3546);
      assertEquals(7, doubleArray0.length);
      assertEquals(3546, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      doubleArray0[0] = 0.0;
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      FieldElement<Object>[][] fieldElementArray0 = MathArrays.buildArray(field0, 6, 6);
      assertEquals(6, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 6;
      doubleArray1[1] = (-3242.79311827);
      doubleArray1[2] = (double) 6;
      doubleArray1[3] = (double) 6;
      doubleArray1[4] = (double) 6;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-808.7F);
      floatArray0[1] = 1902.1809F;
      floatArray0[3] = 1902.1809F;
      floatArray0[4] = (-1935.6465F);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      Double double3 = new Double((-3532.69F));
      assertEquals((-3532.68994140625), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      double double4 = MathArrays.linearCombination(1101.24422134928, 0.0, 3.834E-20, (double) 1902.1809F, 3.834E-20, 1204.0, (double) (-808.7F), (double) 1902.1809F);
      assertEquals((-1538293.723683849), double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray3 = new Double[7];
      doubleArray3[0] = double1;
      doubleArray3[1] = double1;
      doubleArray3[2] = double1;
      doubleArray3[3] = double1;
      doubleArray3[4] = double1;
      doubleArray3[5] = double1;
      Double double2 = new Double(3.834E-20);
      assertEquals(3.834E-20, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      
      doubleArray3[6] = double2;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, true);
      assertEquals(7, doubleArray3.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"eLzt";
      stringArray0[1] = "";
      stringArray0[2] = "MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS";
      stringArray0[3] = "";
      stringArray0[4] = "/q$\"Jo:yuF";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1243.64F;
      floatArray0[1] = 2570.5933F;
      floatArray0[2] = (-194.9718F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = Float.POSITIVE_INFINITY;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1243.64F, 2570.5933F, (-194.9718F), (-1.0F), Float.POSITIVE_INFINITY}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-219.66);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 154);
      assertEquals(1, doubleArray0.length);
      assertEquals(154, doubleArray1.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-219.66);
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      MathArrays.checkOrder(doubleArray2);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {(-219.66), Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(154, doubleArray1.length);
      assertEquals(154, doubleArray3.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      long[][] longArray0 = new long[7][9];
      long[] longArray1 = new long[3];
      longArray1[1] = (-1490L);
      longArray1[2] = (long) 154;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 154;
      longArray2[1] = (long) 154;
      longArray2[2] = (long) 154;
      longArray2[3] = (-1490L);
      longArray2[4] = (long) 154;
      longArray2[5] = (long) 154;
      longArray2[6] = (long) 154;
      longArray2[7] = (long) 154;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-1490L);
      longArray4[1] = (long) 154;
      longArray4[2] = (long) 154;
      longArray4[3] = (-1490L);
      longArray4[4] = (long) 154;
      longArray4[5] = (long) 154;
      longArray4[6] = (long) 154;
      longArray4[7] = (-1490L);
      longArray4[8] = (long) 154;
      longArray0[3] = longArray4;
      longArray0[4] = longArray1;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = (-581L);
      longArray0[5] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = (-581L);
      longArray6[1] = 0L;
      longArray6[2] = (-581L);
      longArray6[3] = (-581L);
      longArray6[4] = (-3818L);
      longArray6[5] = (long) 154;
      longArray6[6] = (-581L);
      longArray0[6] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,490 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1718.706914391;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      Double[] doubleArray2 = new Double[6];
      doubleArray2[0] = (Double) 1718.706914391;
      Double double0 = new Double(2069.20577721);
      assertEquals(2069.20577721, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[1] = double0;
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Object>>) null, 0, (-1747));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      int int0 = 990;
      intArray0[0] = 990;
      int int1 = 2147483049;
      intArray0[1] = 2147483049;
      int int2 = 1186;
      intArray0[2] = 1186;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {990, 2147483049, 1186}, intArray0);
      assertArrayEquals(new int[] {990, 2147483049, 1186}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 118);
      assertEquals(7, doubleArray0.length);
      assertEquals(118, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(118, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale(270.37, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 270.37;
      doubleArray3[1] = (double) 118;
      doubleArray3[2] = (double) 118;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-219.66);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 871.05);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {871.05}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale((-219.66), doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {871.05}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-191334.843)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertEquals(219.66, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray3 = MathArrays.scale((-219.66), doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {48250.5156}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {871.05}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-191334.843)}, doubleArray2, 0.01);
      assertEquals(191115.183, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-105.778769696);
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = (Double) (-105.778769696);
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) (-105.778769696);
      doubleArray1[4] = (Double) 0.0;
      doubleArray1[5] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertEquals(6, doubleArray1.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.linearCombination((double) doubleArray1[3], (double) doubleArray1[2], 1490.115272196658, (double) doubleArray1[3], (double) doubleArray1[5], 1108.0);
      assertEquals(6, doubleArray1.length);
      assertEquals((-157622.56019818265), double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 13;
      intArray0[1] = 171;
      intArray0[2] = 658;
      intArray0[3] = (-425);
      intArray0[4] = (-425);
      intArray0[5] = (-425);
      intArray0[6] = 171;
      intArray0[7] = 171;
      intArray0[8] = 861;
      int[] intArray1 = MathArrays.copyOf(intArray0, 171);
      assertEquals(171, intArray1.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {13, 171, 658, (-425), (-425), (-425), 171, 171, 861}, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      double[] doubleArray2 = MathArrays.scale((-425), doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, (-105.778769696), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 44955.9771208, -0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, (-105.778769696), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 44955.9771208, -0.0}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray2 = new Double[2];
      doubleArray2[0] = (Double) 0.0;
      doubleArray2[1] = (Double) 0.0;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertEquals(2, doubleArray2.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean4 = MathArrays.equals(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean5 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      MathArrays.checkOrder(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[7][9];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 154;
      longArray1[1] = (-1490L);
      longArray1[2] = (long) 154;
      longArray0[0] = longArray1;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.linearCombination((double) (-1490L), (double) (-1490L), 2.0, 3995.22408, 3.834E-20, (-228.47));
      assertEquals(2228090.44816, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1718.706914391;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray2 = new Double[6];
      doubleArray2[0] = (Double) 1718.706914391;
      Double double0 = new Double(2069.20577721);
      assertEquals(2069.20577721, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[1] = double0;
      doubleArray2[2] = (Double) 1718.706914391;
      doubleArray2[3] = (Double) 1718.706914391;
      doubleArray2[4] = (Double) 1718.706914391;
      doubleArray2[5] = (Double) 1718.706914391;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertEquals(6, doubleArray2.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double double1 = MathArrays.linearCombination(2458.0, 1.304E19, 1718.706914391, 1718.706914391, 1718.706914391, 2069.20577721);
      assertEquals(3.2052320000000005E22, double1, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 5.2240336371356666E-9;
      doubleArray0[1] = 5.2240336371356666E-9;
      doubleArray0[2] = 5.2240336371356666E-9;
      doubleArray0[3] = 5.2240336371356666E-9;
      doubleArray0[4] = 5.2240336371356666E-9;
      double[] doubleArray1 = MathArrays.scale(5.2240336371356666E-9, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {5.2240336371356666E-9, 5.2240336371356666E-9, 5.2240336371356666E-9, 5.2240336371356666E-9, 5.2240336371356666E-9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.72905274419249E-17, 2.72905274419249E-17, 2.72905274419249E-17, 2.72905274419249E-17, 2.72905274419249E-17}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 4651);
      assertEquals(0, doubleArray0.length);
      assertEquals(4651, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.scale(1.0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 6, (-1406));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2725.6267394);
      doubleArray1[1] = (-2725.6267394);
      doubleArray1[2] = (-2725.6267394);
      doubleArray1[3] = (-2725.6267394);
      doubleArray1[4] = (-2725.6267394);
      doubleArray1[5] = (-2725.6267394);
      doubleArray1[6] = (-2725.6267394);
      doubleArray1[7] = (-2725.6267394);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-3011.7585F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = 976.8F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-3011.7585F), 1.0F, 976.8F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 976.8F;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 976.8F;
      doubleArray0[3] = (double) (-3011.7585F);
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) 976.8F;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {976.7999877929688, 0.0, 976.7999877929688, (-3011.758544921875), 1.0, 976.7999877929688}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-3011.7585F), 1.0F, 976.8F}, floatArray0, 0.01F);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int[] intArray0 = new int[2];
      double double0 = MathArrays.linearCombination((double) 1.0F, 923.96622, 2063.129, 0.0, 2063.129, 976.7999877929688);
      assertEquals(2016188.3482353198, double0, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 658);
      assertEquals(658, intArray1.length);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {976.7999877929688, 0.0, 976.7999877929688, (-3011.758544921875), 1.0, 976.7999877929688}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-219.66);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 154);
      assertEquals(1, doubleArray0.length);
      assertEquals(154, doubleArray1.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-219.66);
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      MathArrays.checkOrder(doubleArray2);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {(-219.66), Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(154, doubleArray1.length);
      assertEquals(154, doubleArray3.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      long[][] longArray0 = new long[7][9];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 154;
      longArray1[1] = (-1490L);
      longArray1[2] = (long) 154;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 154;
      longArray2[1] = (long) 154;
      longArray2[2] = (long) 154;
      longArray2[3] = (-1490L);
      longArray2[4] = (long) 154;
      longArray2[5] = (long) 154;
      longArray2[6] = (long) 154;
      longArray2[7] = (long) 154;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-1490L);
      longArray4[1] = (long) 154;
      longArray4[2] = (long) 154;
      longArray4[3] = (-1490L);
      longArray4[4] = (long) 154;
      longArray4[5] = (long) 154;
      longArray4[6] = (long) 154;
      longArray4[7] = (-1490L);
      longArray4[8] = (long) 154;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = (-1490L);
      longArray5[1] = (-1490L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = (-581L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray7[0] = (-581L);
      longArray7[1] = 0L;
      longArray7[2] = (-581L);
      longArray7[3] = (-581L);
      longArray7[4] = (-3818L);
      longArray7[5] = (long) 154;
      longArray7[6] = (-581L);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,490 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 85.30740763855796;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {85.30740763855796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1902.1809F;
      doubleArray2[1] = (double) (-3532.69F);
      doubleArray2[2] = (double) (-808.7F);
      doubleArray2[3] = (double) 1902.1809F;
      doubleArray2[4] = (double) (-1935.6465F);
      doubleArray2[5] = (double) (-3532.69F);
      doubleArray2[6] = (double) (-808.7F);
      doubleArray2[7] = (double) (-1935.6465F);
      doubleArray2[8] = (double) (-1935.6465F);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {85.30740763855796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1902.180908203125, (-3532.68994140625), (-808.7000122070312), 1902.180908203125, (-1935.646484375), (-3532.68994140625), (-808.7000122070312), (-1935.646484375), (-1935.646484375)}, doubleArray2, 0.01);
      assertEquals(3532.68994140625, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {85.30740763855796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(85.30740763855796, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray3.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {85.30740763855796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      
      double double2 = 1.883511811213715E-8;
      double double3 = MathArrays.linearCombination((-2704.4056788), 85.30740763855796, 3.834E-20, 85.30740763855796, 1.883511811213715E-8, 3532.68994140625);
      assertEquals((-230705.837594884), double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      try { 
        MathArrays.linearCombination(doubleArray3, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 13 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 2147483647L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 2147483647L}, longArray0);
      
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      long[][] longArray1 = new long[6][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2725.6267394);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2725.6267394);
      doubleArray1[2] = 0.0;
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1718.706914391;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      Double[] doubleArray2 = new Double[6];
      doubleArray2[0] = (Double) 1718.706914391;
      Double double0 = new Double(2069.20577721);
      assertEquals(2069.20577721, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[1] = double0;
      doubleArray2[2] = (Double) 1718.706914391;
      doubleArray2[3] = (Double) 1718.706914391;
      doubleArray2[4] = (Double) 1718.706914391;
      doubleArray2[5] = (Double) 1718.706914391;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[1][0];
      doubleArray3[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.sortInPlace(doubleArray0, doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double double1 = MathArrays.linearCombination(267.7, (double) doubleArray2[0], (double) doubleArray2[1], 1.304E19, 5074.2, 3.26E18, (double) doubleArray2[4], (-286.3601855));
      assertEquals(6, doubleArray2.length);
      assertEquals(4.35243353348184E22, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale(1.34217729E8, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1718.706914391;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray2 = new Double[6];
      doubleArray2[0] = (Double) 1718.706914391;
      Double double0 = new Double(2069.20577721);
      assertEquals(2069.20577721, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[1] = double0;
      doubleArray2[2] = (Double) 1718.706914391;
      doubleArray2[3] = (Double) 1718.706914391;
      doubleArray2[4] = (Double) 1718.706914391;
      doubleArray2[5] = (Double) 1718.706914391;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertFalse(boolean1);
      assertEquals(6, doubleArray2.length);
      assertFalse(boolean1 == boolean0);
      
      double double1 = MathArrays.linearCombination(2458.0, 1.304E19, 1718.706914391, 1718.706914391, 1718.706914391, 2069.20577721);
      assertEquals(3.2052320000000005E22, double1, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 861;
      intArray0[1] = 658;
      intArray0[2] = (-2882);
      intArray0[3] = 171;
      intArray0[4] = (-425);
      int[] intArray1 = MathArrays.copyOf(intArray0, 861);
      assertEquals(861, intArray1.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {861, 658, (-2882), 171, (-425)}, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 85.30740763855796;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0E-5;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {85.30740763855796, 0.0, 1.0E-5, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {85.30740763855796, 0.0, 1.0E-5, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = null;
      boolean boolean1 = MathArrays.equals(doubleArray1, (double[]) null);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray1 = new Double[6];
      Double double0 = new Double(2007.2015194);
      assertEquals(2007.2015194, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double((-1715.051539817193));
      assertEquals((-1715.051539817193), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[1] = double1;
      Double double2 = new Double(1288.12819697533);
      assertEquals(1288.12819697533, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray1[2] = double2;
      Double double3 = new Double(5.2240336371356666E-9);
      assertEquals(5.2240336371356666E-9, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray1[3] = double3;
      Double double4 = new Double((-203.2661566));
      assertEquals((-203.2661566), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      
      doubleArray1[4] = double4;
      Double double5 = new Double((-498.24));
      assertEquals((-498.24), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      
      doubleArray1[5] = double5;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertEquals(6, doubleArray1.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection1, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int int0 = 118;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 118);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2725.6267394);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-2725.6267394)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 107.797F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {107.797F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 3840;
      floatArray0[1] = 1073.4F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {3840.0F, 1073.4F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 261;
      intArray0[1] = 1583;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {261, 1583, 0}, intArray0);
      assertEquals(0, int0);
      
      double[][] doubleArray4 = new double[5][5];
      doubleArray4[0] = doubleArray3;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (double) 1;
      doubleArray5[1] = (double) 1583;
      doubleArray5[2] = (double) 261;
      doubleArray5[3] = 0.0;
      doubleArray4[1] = doubleArray5;
      doubleArray4[2] = doubleArray3;
      doubleArray4[3] = doubleArray3;
      doubleArray4[4] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray3, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 2147483647L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 2147483647L}, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2147483647L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 2147483647L;
      doubleArray0[5] = (double) 2147483647L;
      doubleArray0[6] = (double) 2147483647L;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 0.0, 0.0, 2.147483647E9, 2.147483647E9, 2.147483647E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.294967294E9, 0.0, 0.0, 0.0, 4.294967294E9, 4.294967294E9, 4.294967294E9}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 0.0, 0.0, 2.147483647E9, 2.147483647E9, 2.147483647E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.294967294E9, 0.0, 0.0, 0.0, 4.294967294E9, 4.294967294E9, 4.294967294E9}, doubleArray1, 0.01);
      assertEquals(3.6893488113059365E19, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 0.0, 0.0, 2.147483647E9, 2.147483647E9, 2.147483647E9}, doubleArray0, 0.01);
      assertEquals(4.294967294E9, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      double double0 = MathArrays.linearCombination(0.8333333333333334, 0.0, 0.0, 0.902267575263977);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double double0 = 1.34217729E8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray2 = MathArrays.scale((-1682.7834551944), doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      int int0 = (-152);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray2, (-152));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.9166666666666666;
      doubleArray0[3] = 3948.2778;
      doubleArray0[4] = 2123.94;
      doubleArray0[5] = 219.66;
      doubleArray0[6] = 1.986821492305628E-8;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, Double.NaN, 0.9166666666666666, 3948.2778, 2123.94, 219.66, 1.986821492305628E-8}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(3547.6506516, 2123.94, 3.834E-20, 3948.2778);
      assertEquals(7534997.124959304, double0, 0.01);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 219.66;
      doubleArray2[1] = 1.986821492305628E-8;
      doubleArray2[2] = 1.5874010519681994;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 13 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-3011.7585F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 976.8F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-3011.7585F), (-1.0F), 976.8F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1296.865798189;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 976.8F;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) 976.8F;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1296.865798189, 0.0, 976.7999877929688, (-1.0), (-1.0), 976.7999877929688}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-3011.7585F), (-1.0F), 976.8F}, floatArray0, 0.01F);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1296.865798189, 0.0, 976.7999877929688, (-1.0), (-1.0), 976.7999877929688}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {7.710898085186945E-4, Double.NaN, 0.0010237510365448002, (-1.0), (-1.0), 0.0010237510365448002}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1296.865798189, 0.0, 976.7999877929688, (-1.0), (-1.0), 976.7999877929688}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[1] = "L";
      stringArray0[2] = "";
      stringArray0[3] = "MAX_ITERATIONS_EXCEEDED";
      stringArray0[4] = "";
      stringArray0[5] = "-hB0ckY#";
      stringArray0[6] = "";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[8] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1701.0F);
      floatArray0[2] = 1544.468F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2476.5923F);
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1701.0F), 1544.468F, 0.0F, (-2476.5923F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1701.0F);
      floatArray1[1] = (-2476.5923F);
      floatArray1[2] = (-1701.0F);
      floatArray1[3] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-1701.0F), 1544.468F, 0.0F, (-2476.5923F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1701.0F), (-2476.5923F), (-1701.0F), 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1544.468F;
      doubleArray0[2] = (double) (-1701.0F);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1544.468017578125, (-1701.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-1701.0F), 1544.468F, 0.0F, (-2476.5923F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1701.0F), (-2476.5923F), (-1701.0F), 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[][] longArray0 = new long[8][0];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = 4095L;
      longArray1[2] = (-1L);
      longArray1[3] = (-1428L);
      longArray1[4] = 1989L;
      longArray1[5] = 4032L;
      longArray1[6] = (-1467L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray3[1] = 1989L;
      longArray3[2] = (-1L);
      longArray3[3] = 0L;
      longArray3[4] = (-1467L);
      longArray3[5] = (-1428L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-1L);
      longArray4[1] = 1989L;
      longArray4[2] = 4032L;
      longArray4[3] = 1989L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 2147483647L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[9];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = (-1467L);
      longArray6[1] = 1989L;
      longArray6[2] = (-1428L);
      longArray6[3] = (-1428L);
      longArray6[4] = 0L;
      longArray6[5] = 1989L;
      longArray6[6] = (-1L);
      longArray6[7] = 1989L;
      longArray6[8] = 4095L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[6];
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray7[0] = (-1467L);
      longArray7[1] = 2147483647L;
      longArray7[2] = 0L;
      longArray7[3] = 0L;
      longArray7[4] = (-1467L);
      longArray7[5] = 2147483647L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[2];
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray2));
      
      longArray8[0] = 2147483647L;
      longArray8[1] = 4032L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-105.778769696);
      doubleArray0[2] = 1135.0120725799;
      int[] intArray0 = new int[7];
      intArray0[0] = 134217729;
      intArray0[1] = 1;
      intArray0[2] = 1189;
      intArray0[3] = 1190;
      intArray0[4] = 2043;
      intArray0[5] = 1000000000;
      intArray0[6] = 1202;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 134217729;
      intArray1[1] = 1000000000;
      intArray1[2] = 134217729;
      intArray1[3] = 134217729;
      intArray1[4] = 1202;
      intArray1[5] = 2043;
      intArray1[6] = 1202;
      intArray1[7] = 1000000000;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {134217729, 1, 1189, 1190, 2043, 1000000000, 1202}, intArray0);
      assertArrayEquals(new int[] {134217729, 1000000000, 134217729, 134217729, 1202, 2043, 1202, 1000000000}, intArray1);
      assertEquals(1.4268931533074195E9, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 134217729;
      floatArray0[1] = (float) 2043;
      floatArray0[2] = (float) 1202;
      floatArray0[3] = (float) 1202;
      floatArray0[4] = (float) 134217729;
      floatArray0[5] = (float) 134217729;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {1.34217728E8F, 2043.0F, 1202.0F, 1202.0F, 1.34217728E8F, 1.34217728E8F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-5.7618793749770706E-8);
      doubleArray0[1] = 1400.37270849243;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-5.7618793749770706E-8), 1400.37270849243, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 885L;
      longArray0[1] = 154L;
      longArray0[2] = 2512L;
      longArray0[3] = 3285L;
      longArray0[4] = (-502L);
      longArray0[5] = 450L;
      longArray0[6] = 397L;
      longArray0[7] = 0L;
      longArray0[8] = 1L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -502 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-105.778769696);
      int int0 = (-510);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1467);
      longArray0[1] = (long) (-1467);
      longArray0[2] = (long) (-1467);
      longArray0[3] = (long) (-510);
      longArray0[4] = (long) (-1467);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,467 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-219.66);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-808.7F);
      floatArray0[1] = 1902.1809F;
      floatArray0[2] = (-3532.69F);
      floatArray0[3] = 1902.1809F;
      floatArray0[4] = (-1935.6465F);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-808.7F), 1902.1809F, (-3532.69F), 1902.1809F, (-1935.6465F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(219.66, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertEquals(219.66, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {(-219.66)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double3 = MathArrays.linearCombination(2.893485277253286E-8, (-2704.4056788), 3.834E-20, 624.884735345, 590.48159832216, (double) (-1935.6465F));
      assertEquals((-1142963.6299586715), double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-3011.7585F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 976.8F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-3011.7585F), (-1.0F), 976.8F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1296.865798189;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 976.8F;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) 976.8F;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1296.865798189, 0.0, 976.7999877929688, (-1.0), (-1.0), 976.7999877929688}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-3011.7585F), (-1.0F), 976.8F}, floatArray0, 0.01F);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1214;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 1214}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1296.865798189, 0.0, 976.7999877929688, (-1.0), (-1.0), 976.7999877929688}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {7.710898085186945E-4, Double.NaN, 0.0010237510365448002, (-1.0), (-1.0), 0.0010237510365448002}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1296.865798189, 0.0, 976.7999877929688, (-1.0), (-1.0), 976.7999877929688}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 1214}, intArray0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "UNABLE_TO_SOLVE_SINGULAR_PROBLEM";
      stringArray0[1] = "L";
      stringArray0[2] = "";
      stringArray0[3] = "MAX_ITERATIONS_EXCEEDED";
      stringArray0[4] = "";
      stringArray0[5] = "-hB0ckY#";
      stringArray0[6] = "";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[8] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean3 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1718.706914391;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][4];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1718.706914391}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = 3.834E-20;
      double[] doubleArray1 = MathArrays.scale(3579.0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-3.141592653589793), 3.834E-20, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-11243.76010719787), 1.3721886E-16, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-3.141592653589793), 3.834E-20, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-11243.76010719787), 1.3721886E-16, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(11243.76010719787, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-414);
      intArray0[1] = (-1);
      intArray0[2] = (-499);
      intArray0[3] = (-414);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = (-499);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-414), (-1), (-499), (-414), 0, 0, 0, 0, (-499)}, intArray0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-781.3272035789207);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-383.22072);
      doubleArray1[1] = (-105.778769696);
      doubleArray1[2] = 1135.0120725799;
      doubleArray1[3] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (1,135.012 >= 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 2424;
      intArray0[1] = 2424;
      int int2 = 2256;
      intArray0[2] = 2256;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 2424, 2256}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      int int3 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 2424, 2256}, intArray0);
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[8];
      int int0 = (-945);
      intArray0[0] = (-945);
      int int1 = 2146374780;
      intArray0[1] = 2146374780;
      intArray0[2] = 2331;
      intArray0[3] = 1903;
      int int2 = (-416);
      intArray0[4] = (-416);
      intArray0[5] = 128;
      intArray0[6] = (-422);
      int int3 = 1601;
      intArray0[7] = 1601;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {(-945), 2146374780, 2331, 1903, (-416), 128, (-422), 1601}, intArray0);
      assertArrayEquals(new int[] {(-945), 2146374780, 2331, 1903, (-416), 128, (-422), 1601}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int int4 = MathArrays.distanceInf(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {(-945), 2146374780, 2331, 1903, (-416), 128, (-422), 1601}, intArray0);
      assertArrayEquals(new int[] {(-945), 2146374780, 2331, 1903, (-416), 128, (-422), 1601}, intArray1);
      assertEquals(0, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Object>>) null, 2146374780, (-416));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 1815.9;
      MathArrays.scaleInPlace(1815.9, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1815.9;
      double double1 = (-1403.37);
      doubleArray1[1] = (-1403.37);
      doubleArray1[2] = 1815.9;
      doubleArray1[3] = 1815.9;
      doubleArray1[4] = 1815.9;
      double double2 = (-20.0);
      doubleArray1[5] = (-20.0);
      doubleArray1[6] = 1815.9;
      doubleArray1[7] = 1815.9;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {1815.9, (-1403.37), 1815.9, 1815.9, 1815.9, (-20.0), 1815.9, 1815.9}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-20.0);
      doubleArray2[1] = (-20.0);
      doubleArray2[2] = (-1403.37);
      doubleArray2[3] = 1815.9;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 1842.2203149396123;
      doubleArray0[4] = (-1712.5263);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 2.0, 1842.2203149396123, (-1712.5263)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 107.797F;
      floatArray0[1] = 529.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 529.0F;
      floatArray1[1] = (-1.0F);
      floatArray1[2] = 529.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {107.797F, 529.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {529.0F, (-1.0F), 529.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 408;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 2.0, 1842.2203149396123, (-1712.5263)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[1][0];
      long[] longArray1 = new long[17];
      longArray1[0] = 954L;
      longArray1[1] = 0L;
      longArray1[2] = 954L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, (-996), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-3011.7585F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 976.8F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-3011.7585F), (-1.0F), 976.8F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1296.865798189;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1296.865798189, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {1296.865798189, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2593.731596378, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean2 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {1296.865798189, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1, 2954);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(2954, doubleArray3.length);
      assertArrayEquals(new double[] {1296.865798189, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2593.731596378, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-3011.7585F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 976.8F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-3011.7585F), (-1.0F), 976.8F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1296.865798189;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 976.8F;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) 976.8F;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1296.865798189, 0.0, 976.7999877929688, (-1.0), (-1.0), 976.7999877929688}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-3011.7585F), (-1.0F), 976.8F}, floatArray0, 0.01F);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1214;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 1214}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1296.865798189, 0.0, 976.7999877929688, (-1.0), (-1.0), 976.7999877929688}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {7.710898085186945E-4, Double.NaN, 0.0010237510365448002, (-1.0), (-1.0), 0.0010237510365448002}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1296.865798189, 0.0, 976.7999877929688, (-1.0), (-1.0), 976.7999877929688}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean3 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, false);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {7.710898085186945E-4, Double.NaN, 0.0010237510365448002, (-1.0), (-1.0), 0.0010237510365448002}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1296.865798189, 0.0, 976.7999877929688, (-1.0), (-1.0), 976.7999877929688}, doubleArray0, 0.01);
      assertFalse(boolean3);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      
      boolean boolean4 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1296.865798189, 0.0, 976.7999877929688, (-1.0), (-1.0), 976.7999877929688}, doubleArray0, 0.01);
      assertTrue(boolean4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1214, 1214);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 85.30740763855796;
      doubleArray0[1] = 0.0;
      double double0 = 1.0E-5;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[3] = (-1687.868383);
      double double1 = 2069.94;
      doubleArray0[4] = 2069.94;
      double double2 = Double.POSITIVE_INFINITY;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 291.7;
      int int0 = 154;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 154);
      assertEquals(7, doubleArray0.length);
      assertEquals(154, doubleArray1.length);
      assertArrayEquals(new double[] {85.30740763855796, 0.0, 1.0E-5, (-1687.868383), 2069.94, Double.POSITIVE_INFINITY, 291.7}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (85.307 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-573.1173598315), (-573.1173598315), (-573.1173598315), (-573.1173598315));
      assertEquals(656927.0162804582, double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1237;
      int int0 = 1204;
      intArray0[1] = 1204;
      int int1 = (-4024);
      intArray0[2] = (-4024);
      intArray0[3] = (-1108);
      int int2 = (-213);
      intArray0[4] = (-213);
      intArray0[5] = 2;
      int int3 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1237, 1204, (-4024), (-1108), (-213), 2}, intArray0);
      assertEquals(0, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      int int4 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1237, 1204, (-4024), (-1108), (-213), 2}, intArray0);
      assertEquals(0, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1204;
      doubleArray0[1] = (double) (-1108);
      doubleArray0[2] = (double) (-4024);
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1204.0, (-1108.0), (-4024.0)}, doubleArray0, 0.01);
      assertEquals(4343.944751029875, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination((-4024.0), (-3251.440143), 11243.76010719787, (double) (-213), 1204.0, (double) (-213), 656927.0162804582, 11243.76010719787);
      assertEquals(7.39676220122734E9, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int int5 = (-1611);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1611));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 100.0;
      doubleArray0[3] = 1.304E19;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 100.0, 1.304E19}, doubleArray0, 0.01);
      assertEquals(1.700416E38, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(-0.0, (-1.0), Double.NaN, 1.0, 0.0, 1.0, 0.0, (-3.141592653589793));
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[1];
      int int0 = 301;
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 100.0, 1.304E19}, doubleArray0, 0.01);
      assertEquals(1.700416E38, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 100.0;
      doubleArray0[3] = 1.304E19;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 100.0, 1.304E19}, doubleArray0, 0.01);
      assertEquals(1.700416E38, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(-0.0, (-1.0), Double.NaN, 1.0, 0.0, 1.0, 0.0, (-3.141592653589793));
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 301;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {301}, intArray0);
      assertArrayEquals(new int[] {301}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
      assertArrayEquals(new int[] {301}, intArray0);
      assertArrayEquals(new int[] {301}, intArray1);
      assertArrayEquals(new int[] {301}, intArray2);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 100.0, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 100.0, 1.304E19}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 100.0, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 100.0, 1.304E19}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 200.0, 2.608E19}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 301);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = (-330.2214126);
      doubleArray0[3] = (-335.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 4497.13540469;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, (-20.0), (-330.2214126), (-335.0), 0.0, 0.0, 0.0, 4497.13540469}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 261;
      intArray0[1] = 1583;
      intArray0[2] = 1;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {261, 1583, 1}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-2725.6267394);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-2725.6267394);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = (-2725.6267394);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-1.0), (-2725.6267394)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-2725.6267394), 0.0, (-1.0), 0.0, 0.0, (-1.0), (-2725.6267394)}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[5][0];
      long[] longArray1 = new long[1];
      longArray1[0] = 954L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 954L;
      longArray2[1] = 954L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 954L;
      longArray3[1] = 954L;
      longArray3[2] = 954L;
      longArray3[3] = 0L;
      longArray3[4] = 954L;
      longArray3[5] = 954L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 0L;
      longArray4[1] = 954L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = 954L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 3.4028235E38F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {3.4028235E38F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((double) 3.4028235E38F, (double) 3.4028235E38F, (-3540.93532568466), 1176.52073, (-1119.806173452759), 465.57601659183007);
      assertEquals(1.1579207543382391E77, double0, 0.01);
      
      long[][] longArray0 = new long[8][6];
      long[] longArray1 = new long[2];
      longArray1[0] = 7L;
      longArray1[1] = 1802L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 7L;
      longArray2[1] = 7L;
      longArray2[2] = 7L;
      longArray2[3] = 1802L;
      longArray2[4] = 7L;
      longArray2[5] = 7L;
      longArray2[6] = 7L;
      longArray2[7] = 7L;
      longArray2[8] = 1802L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1L;
      longArray3[1] = 1802L;
      longArray3[2] = 7L;
      longArray3[3] = 1802L;
      longArray3[4] = 1802L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 7L;
      longArray4[1] = 1802L;
      longArray4[2] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 7L;
      longArray5[1] = 0L;
      longArray5[2] = 7L;
      longArray5[3] = 7L;
      longArray5[4] = 1L;
      longArray5[5] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[4];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = 7L;
      longArray6[1] = 0L;
      longArray6[2] = 1L;
      longArray6[3] = 1L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[3];
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray4));
      
      longArray7[0] = 0L;
      longArray7[1] = 0L;
      longArray7[2] = 13L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[7];
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray5));
      
      longArray8[0] = 1802L;
      longArray8[1] = 7L;
      longArray8[2] = (-1L);
      longArray8[3] = 0L;
      longArray8[4] = 0L;
      longArray8[5] = 13L;
      longArray8[6] = 13L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 1;
      intArray0[0] = 1;
      int int1 = 3579;
      intArray0[1] = 3579;
      int int2 = 0;
      intArray0[2] = 0;
      int int3 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1, 3579, 0}, intArray0);
      assertEquals(0, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 3579;
      doubleArray0[3] = (double) 1;
      MathArrays.checkPositive(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0, 3579.0, 1.0}, doubleArray0, 0.01);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-105.778769696);
      doubleArray0[2] = 1135.0120725799;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (0 > -105.779)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1212.674995067219;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1427.85;
      doubleArray0[3] = (-1288.955157);
      doubleArray0[4] = (-2831.721281876);
      doubleArray0[5] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,288.955 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 2172.98158045077;
      doubleArray0[3] = (-1144.5866282559437);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][0];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2172.98158045077;
      doubleArray2[1] = (-1144.5866282559437);
      doubleArray2[2] = (-1144.5866282559437);
      doubleArray2[3] = (-1144.5866282559437);
      doubleArray2[4] = (-1144.5866282559437);
      doubleArray2[5] = 2172.98158045077;
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray2);
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 3.834E-20;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 3.834E-20;
      doubleArray3[3] = (-1144.5866282559437);
      doubleArray3[4] = Double.NaN;
      doubleArray3[5] = 3.834E-20;
      try { 
        MathArrays.checkPositive(doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1019.1860216055666;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 53.3953;
      doubleArray0[4] = (-1727.0);
      doubleArray0[5] = (-1.0);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 53.3953;
      doubleArray2[1] = (-1727.0);
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = Double.NaN;
      doubleArray2[5] = 1019.1860216055666;
      doubleArray2[6] = 53.3953;
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {0.0, 1019.1860216055666, Double.NaN, 53.3953, (-1727.0), (-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[][] doubleArray0 = new double[9][7];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      doubleArray0[7] = null;
      doubleArray0[8] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1508.134553028781;
      doubleArray0[1] = (-3102.9379609383);
      doubleArray0[2] = (-395.0468859749948);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1002.7618752711661);
      doubleArray0[5] = (-457.5650007);
      doubleArray0[6] = (-4775.604);
      doubleArray0[7] = 100.0;
      doubleArray0[8] = (-357.8);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 2147483647L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2147483647L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 2147483647L;
      doubleArray0[5] = (double) 2147483647L;
      doubleArray0[6] = (double) 2147483647L;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray1, doubleArray0);
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 1842.2203149396123;
      doubleArray0[4] = (-1712.5263);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 107.797F;
      floatArray0[1] = 529.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      float[] floatArray1 = new float[3];
      floatArray1[0] = 529.0F;
      floatArray1[1] = (-1.0F);
      floatArray1[2] = 529.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 408;
      intArray0[1] = 61;
      intArray0[2] = (-1467);
      intArray0[3] = (-510);
      intArray0[4] = (-689);
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double double0 = (-1815.2028810163);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale((-1815.2028810163), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-1402);
      intArray0[2] = (-3356);
      intArray0[3] = 32768;
      intArray0[4] = 69;
      intArray0[5] = 0;
      intArray0[6] = (-570);
      intArray0[7] = 4213;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, (-1402), (-3356), 32768, 69, 0, (-570), 4213}, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[3][9];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3603;
      intArray0[1] = 539;
      intArray0[2] = 31;
      int int0 = (-723);
      intArray0[3] = (-723);
      intArray0[4] = 47;
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MathArrays.linearCombination((-1.0), (-211.8000979848), (-3509.0), (-211.8000979848));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-211.8000979848);
      int int0 = (-2908);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-2908));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean1);
      
      MathArrays.checkPositive(doubleArray0);
      double double0 = MathArrays.linearCombination((-968.538586457603), 1.34217729E8, 1.34217729E8, (-3571.36));
      assertEquals((-6.093348781646497E11), double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-4036);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1137);
      intArray0[4] = 1570;
      intArray0[5] = 0;
      intArray0[6] = 94;
      intArray0[7] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[0] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 3982);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 3.834E-20;
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1897.098568343);
      doubleArray0[4] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 3982);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-781.3272035789207);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-781.3272035789207);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-781.3272035789207);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(781.3272035789207, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      
      Double[] doubleArray2 = new Double[1];
      doubleArray2[0] = (Double) (-781.3272035789207);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-219.66);
      doubleArray0[0] = (-219.66);
      MathArrays.distance(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-808.7F);
      float float0 = 1902.1809F;
      floatArray0[1] = 1902.1809F;
      floatArray0[2] = (-3532.69F);
      floatArray0[3] = 0.0F;
      float float1 = (-1935.6465F);
      floatArray0[4] = (-1935.6465F);
      floatArray0[5] = 3523.22F;
      float float2 = (-1857.9F);
      floatArray0[6] = (-1857.9F);
      floatArray0[7] = (-1850.9F);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.scaleInPlace(364.0319939030377, doubleArray1);
      MathArrays.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1304.2491;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 1,304.249)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1718.706914391;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.scale((-463.21809137125507), doubleArray1);
      MathArrays.safeNorm(doubleArray1);
      int[] intArray0 = new int[4];
      intArray0[0] = (-414);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-499);
      int[] intArray1 = new int[9];
      intArray1[0] = (-414);
      intArray1[1] = (-1);
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = (-414);
      intArray1[5] = 0;
      intArray1[6] = (-414);
      intArray1[7] = (-499);
      intArray1[8] = (-499);
      MathArrays.distanceInf(intArray0, intArray1);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(0, int0);
  }
}
