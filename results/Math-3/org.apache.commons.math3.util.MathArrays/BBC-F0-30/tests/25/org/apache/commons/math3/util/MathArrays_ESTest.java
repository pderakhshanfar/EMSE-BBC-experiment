/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 17:20:37 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = new Double(0.041666666666621166);
      assertEquals(0.041666666666621166, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4.9E-324;
      doubleArray0[1] = 9.755392680573412E-9;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {4.9E-324, 9.755392680573412E-9, 3.834E-20, 1.304E19}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-86.7F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 195.43155F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-86.7F);
      floatArray1[1] = (-86.7F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = 195.43155F;
      floatArray1[4] = 195.43155F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (-86.7F);
      floatArray1[7] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-86.7F), 0.0F, 0.0F, 195.43155F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-86.7F), (-86.7F), 0.0F, 195.43155F, 195.43155F, 0.0F, (-86.7F), 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 639.0820904963;
      doubleArray0[1] = 2815.3;
      doubleArray0[2] = (-616.8);
      doubleArray0[3] = 1688.977561282;
      doubleArray0[4] = (-1809.322);
      doubleArray0[5] = 2.0217439756338078E-10;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1218.1));
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {639.0820904963, 2815.3, (-616.8), 1688.977561282, (-1809.322), 2.0217439756338078E-10}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-286.49164857700873), (-1262.059992343851), 276.50289605998904, (-757.145244933221), 811.0939897941821, (-9.06319818992516E-11)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-6653047.693543734), double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {639.0820904963, 2815.3, (-616.8), 1688.977561282, (-1809.322), 2.0217439756338078E-10}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-286.49164857700873), (-1262.059992343851), 276.50289605998904, (-757.145244933221), 811.0939897941821, (-9.06319818992516E-11)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[2][9];
      doubleArray2[0] = null;
      doubleArray2[1] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-2832.7722);
      doubleArray0[3] = (-1147.368999846);
      doubleArray0[4] = 567.678853565287;
      doubleArray0[5] = 1047.72163976;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.8441344853345161E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, (-2832.7722), (-1147.368999846), 567.678853565287, 1047.72163976}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,832.772 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 662);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(662, doubleArray1.length);
      
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2130574326);
      intArray0[1] = 333;
      intArray0[2] = (-4142);
      intArray0[3] = 1095;
      intArray0[4] = 134217729;
      intArray0[6] = 8;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1095;
      intArray1[1] = 333;
      intArray1[2] = 333;
      intArray1[3] = 1095;
      intArray1[4] = (-4142);
      intArray1[2] = 726;
      intArray1[6] = 726;
      intArray1[7] = 8;
      intArray1[8] = 1095;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-2030164410), int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2130574326), 333, (-4142), 1095, 134217729, 0, 8, 0}, intArray0);
      assertArrayEquals(new int[] {1095, 333, 726, 1095, (-4142), 0, 726, 8, 1095}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<Object> fieldElement0 = (FieldElement<Object>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      FieldElement<Object>[][] fieldElementArray0 = MathArrays.buildArray(field0, 0, 0);
      assertNotNull(fieldElementArray0);
      assertEquals(0, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 3635.4900513);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-902.52185F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 136.8F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-902.52185F), 1.0F, 136.8F, 0.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-902.52185F), 1.0F, 136.8F, 0.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 79;
      intArray0[1] = 4;
      intArray0[2] = 124;
      intArray0[3] = (-1);
      intArray0[4] = 2150;
      intArray0[5] = 473;
      intArray0[6] = (-1617);
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1270;
      intArray1[1] = 79;
      intArray1[2] = 473;
      intArray1[3] = (-1617);
      intArray1[4] = 473;
      intArray1[5] = 4;
      intArray1[6] = 27;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1677, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {79, 4, 124, (-1), 2150, 473, (-1617)}, intArray0);
      assertArrayEquals(new int[] {1270, 79, 473, (-1617), 473, 4, 27}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 92, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1135);
      intArray0[1] = 5608;
      intArray0[2] = 41;
      intArray0[3] = 2144855149;
      intArray0[4] = 149;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-423);
      intArray0[2] = 652;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 652;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 652;
      intArray1[1] = 652;
      intArray1[2] = 652;
      intArray1[3] = (-423);
      intArray1[4] = 652;
      intArray1[5] = 652;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1257.2704561867347, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-423), 0, 652}, intArray0);
      assertArrayEquals(new int[] {652, 652, 652, (-423), 652, 652}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2147483561, 652);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long[][] longArray0 = new long[2][3];
      long[] longArray1 = new long[2];
      longArray0[0] = longArray1;
      double double0 = MathArrays.linearCombination(1120.7119278671164, 198.18982753612605, (double) 0L, (double) 0L, Double.NEGATIVE_INFINITY, (double) 0L, (-1408.02), (double) 0L);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) 0L;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NaN, Double.NaN, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NaN, Double.NaN, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1780.73F);
      floatArray0[3] = (-209.15398F);
      floatArray0[4] = 246.2F;
      floatArray0[5] = (-1143.8F);
      floatArray0[6] = 2763.3167F;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 246.2F;
      floatArray1[1] = 2763.3167F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 2763.3167F;
      floatArray1[5] = (-1780.73F);
      floatArray1[6] = (-209.15398F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F, (-1780.73F), (-209.15398F), 246.2F, (-1143.8F), 2763.3167F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {246.2F, 2763.3167F, 1.0F, 0.0F, 2763.3167F, (-1780.73F), (-209.15398F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 1.0F);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][2];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1784.7087F;
      floatArray0[1] = (-1812.3778F);
      floatArray0[2] = (-2873.1348F);
      floatArray0[3] = (-951.5F);
      floatArray0[4] = (-205.1F);
      floatArray0[5] = (-796.84F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1784.7087F, (-1812.3778F), (-2873.1348F), (-951.5F), (-205.1F), (-796.84F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[4][0];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1925.79758660803);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1925.79758660803), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 11);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1925.79758660803), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(mathArrays_OrderDirection0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 261);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DECREASING";
      stringArray0[1] = "DECREASING";
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2000;
      intArray0[2] = (-2429);
      intArray0[3] = 2;
      intArray0[4] = 343;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2429);
      intArray1[1] = (-2429);
      intArray1[2] = 2000;
      intArray1[3] = 2;
      intArray1[4] = 2569;
      intArray1[5] = 343;
      intArray1[6] = 2000;
      intArray1[7] = 2;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(13515, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 2000, (-2429), 2, 343}, intArray0);
      assertArrayEquals(new int[] {(-2429), (-2429), 2000, 2, 2569, 343, 2000, 2}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.9489846229553223;
      doubleArray0[1] = (-3204.1760478508);
      doubleArray0[2] = 603.7206075;
      doubleArray0[3] = (-1903.43501);
      doubleArray0[4] = (-449.717);
      doubleArray0[5] = (-0.2499999997677497);
      doubleArray0[6] = 1.34217729E8;
      doubleArray0[7] = 814.453;
      doubleArray0[8] = 978.0364335294117;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,204.176 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DECREASING";
      stringArray0[1] = "";
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-3256.552999);
      doubleArray0[2] = (-2783.815805303426);
      doubleArray0[3] = 3.26E18;
      doubleArray0[4] = 1542.728;
      doubleArray0[5] = 0.058823529411764705;
      doubleArray0[6] = (-425.13346794599676);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.3441324339513573E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, (-3256.552999), (-2783.815805303426), 3.26E18, 1542.728, 0.058823529411764705, (-425.13346794599676)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = 3.26E18;
      doubleArray1[2] = (-2783.815805303426);
      doubleArray1[3] = 835.12;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 3419);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {1.304E19, 3.26E18, (-2783.815805303426), 835.12}, doubleArray1, 0.01);
      assertEquals(3419, doubleArray2.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(1.34217729E8, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-423);
      intArray0[2] = 652;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 652;
      double[] doubleArray1 = MathArrays.scale(652, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {652.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {425104.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {652.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray2);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {652.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray3, 2339.0);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertArrayEquals(new double[] {652.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {2339.0, Double.NaN}, doubleArray4, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertEquals(2, doubleArray4.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 105);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(105, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long[][] longArray0 = new long[0][0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1265.0);
      doubleArray0[1] = 218.5953298;
      doubleArray0[2] = (-501.7123593087253);
      doubleArray0[3] = 0.11113807559013367;
      doubleArray0[4] = 0.1246747374534607;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 1.0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 3.834E-20;
      doubleArray1[3] = 0.1246747374534607;
      doubleArray1[4] = 3.834E-20;
      doubleArray1[5] = 3.834E-20;
      doubleArray1[6] = (-501.7123593087253);
      doubleArray1[7] = (-1.0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-1265.0), 218.5953298, (-501.7123593087253), 0.11113807559013367, 0.1246747374534607, (-1.0), 3.834E-20, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1266.0), 217.5953298, (-501.7123593087253), (-0.013536661863327026), 0.1246747374534607, (-1.0), 501.7123593087253, 2.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 3.834E-20, 0.1246747374534607, 3.834E-20, 3.834E-20, (-501.7123593087253), (-1.0)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(1378.305567568005, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-1265.0), 218.5953298, (-501.7123593087253), 0.11113807559013367, 0.1246747374534607, (-1.0), 3.834E-20, 1.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 49;
      intArray0[1] = (-591);
      intArray0[2] = 1846;
      intArray0[3] = 2089;
      intArray0[4] = (-2692);
      int[] intArray1 = MathArrays.copyOf(intArray0, 49);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {49, (-591), 1846, 2089, (-2692)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(49, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1477.0;
      doubleArray0[4] = 2372.6192;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2794.790308450464, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 1477.0, 2372.6192}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-477.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-329.882F);
      floatArray0[3] = (-1.0F);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-477.0F), 0.0F, (-329.882F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 744);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 1477.0, 2372.6192}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(744, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 744;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {744}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-423);
      intArray0[2] = 652;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-423), 0, 652}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 652;
      double[] doubleArray1 = MathArrays.scale(652, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {652.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {425104.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {652.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {425104.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 652;
      doubleArray3[1] = (double) 652;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) (-423);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1777;
      floatArray0[1] = (float) 652;
      floatArray0[2] = (float) (-423);
      floatArray0[3] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1777.0F, 652.0F, (-423.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 5);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "GeJd4Gjzl2CVkV)F*Xw";
      int[] intArray0 = new int[7];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = 2229;
      intArray0[4] = 5;
      intArray0[5] = 5;
      intArray0[6] = 5;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2096.537F;
      floatArray0[1] = 3273.552F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-782.26F);
      floatArray0[5] = (-2286.935F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2096.537F, 3273.552F, 0.0F, (-1.0F), (-782.26F), (-2286.935F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 5702, (-2465));
      assertNotNull(objectArray0);
      assertEquals(5702, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 65;
      doubleArray0[1] = (double) 65;
      doubleArray0[2] = (double) 65;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3145.9697;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {65.0, 65.0, 65.0, 0.0, 3145.9697, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {65.0, 65.0, 65.0, 0.0, 3145.9697, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 2368.0, 952.49437301, 0.0, 0.0, 816.0, 543.365033573, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long[][] longArray0 = new long[2][3];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = 0L;
      longArray2[6] = 0L;
      longArray2[7] = 0L;
      double double0 = MathArrays.linearCombination(1120.7119278671164, 198.498, 1.073741824E9, (double) 0L, Double.NEGATIVE_INFINITY, (double) 0L, (-1408.02), (double) 0L);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3419);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3419, doubleArray1.length);
      
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 3,419
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NEGATIVE_INFINITY, 1.304E19, 1.304E19, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2517.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1957.3385F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-2517.0F), 0.0F, (-1957.3385F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1957.3385F);
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, (-1957.3385009765625)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = 1.86285714286020275E18;
      doubleArray1[2] = (double) (-1957.3385F);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, (-1957.3385009765625)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 1.86285714286020275E18, (-1957.3385009765625)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 1.86285714286020275E18, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[5][6];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray1;
      doubleArray3[3] = doubleArray0;
      doubleArray3[4] = doubleArray2;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, (-1957.3385009765625), 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray3.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = 0L;
      long[][] longArray0 = new long[2][3];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray0[0] = longArray1;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      Double double0 = new Double((-2189.95973));
      assertNotNull(double0);
      assertEquals((-2189.95973), (double)double0, 0.01);
      
      Pair<Object, String> pair0 = new Pair<Object, String>(double0, "NAN_VALUE_CONVERSION");
      assertNotNull(pair0);
      
      Pair<Object, String> pair1 = new Pair<Object, String>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      Pair<Object, Object> pair2 = new Pair<Object, Object>(double0, pair1);
      assertNotNull(pair2);
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      
      double[] doubleArray2 = MathArrays.scale((-1.0), doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.scaleInPlace(2067.98262, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-2465), 3415);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-423);
      intArray0[0] = (-423);
      int int1 = 1777;
      intArray0[1] = 1777;
      int int2 = 652;
      intArray0[2] = 652;
      int int3 = MathArrays.distance1(intArray0, intArray0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      assertArrayEquals(new int[] {(-423), 1777, 652}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1137);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1137)}, intArray0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MathArrays.scaleInPlace(3.4439717236742845E-8, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(1.0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.math3.util.Decimal64Field";
      stringArray0[1] = "";
      stringArray0[2] = "Tn<Hc%\rx_VJ$J";
      stringArray0[3] = "";
      stringArray0[4] = "Ba7P[,j_";
      stringArray0[5] = "NO_SUCH_MATRIX_ENTRY";
      stringArray0[6] = "";
      stringArray0[7] = "";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 105);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertEquals(105, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertEquals(105, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 105
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1298.76F);
      floatArray0[1] = 1175.2F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1298.76F), 1175.2F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.scaleInPlace((-693.477454), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2465), (-577));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.NaN;
      doubleArray0[0] = Double.NaN;
      float float0 = 1.0F;
      float float1 = 1.0F;
      double double1 = 2.0;
      double double2 = MathArrays.linearCombination(2.0, 0.0, (-1892.9470481695), (-1892.9470481695));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(3583248.5271736234, double2, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 4.23719669792332E-8);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 65);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(65, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray1, 816);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(65, intArray1.length);
      assertEquals(816, intArray2.length);
      
      int int0 = MathArrays.distanceInf(intArray2, intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(0, int0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(65, intArray1.length);
      assertEquals(816, intArray2.length);
      
      double double0 = MathArrays.linearCombination((double) 65, 0.0, (double) 65, (double) 816, (-1821.69048645885), (double) 65);
      assertEquals((-65369.88161982525), double0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) 816, (-978.32281425), (double) 816, 0.0, 0.0, (-978.32281425), (double) 65, (-4479.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1089446.416428), double1, 0.01);
      
      double double2 = MathArrays.linearCombination((-277.6453523188581), 9.0, 3.1415926535898, 0.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-2498.8081708697227), double2, 0.01);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 3.1415926535898);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      MathArrays.checkNonNegative(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(8, intArray1.length);
      
      double double2 = MathArrays.linearCombination(0.0, 0.3333333134651184, 0.0, 0.0, 0.0, (-1879.36716660007));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 3.141592653589793;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 3.141592653589793;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = null;
      int int0 = (-2161);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, (-2161));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-1925.79758660803);
      int int0 = 816;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 816);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 65);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(65, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray1, 816);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(65, intArray1.length);
      assertEquals(816, intArray2.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1291.0);
      doubleArray0[1] = (double) 65;
      doubleArray0[2] = (double) 65;
      doubleArray0[3] = (double) 816;
      doubleArray0[4] = (double) 65;
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = (double) 65;
      doubleArray0[7] = (double) 65;
      doubleArray0[8] = (double) 65;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1291.0), 65.0, 65.0, 816.0, 65.0, 1.34217729E8, 65.0, 65.0, 65.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1291.0), 65.0, 65.0, 816.0, 65.0, 1.34217729E8, 65.0, 65.0, 65.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1925.79758660803);
      Integer integer0 = new Integer((-2802));
      assertNotNull(integer0);
      assertEquals((-2802), (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1925.79758660803), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3708696.344585313, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1925.79758660803);
      doubleArray2[1] = (-1925.79758660803);
      doubleArray2[2] = (-1925.79758660803);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[3] = (-246.24711143579);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-3287.3);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3.141592653589793, 0.0, 0.0, (-246.24711143579), 0.0, 0.0, 0.0, (-3287.3)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1925.79758660803);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1925.79758660803), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 11);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1925.79758660803), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 261);
      assertNotNull(objectArray0);
      assertEquals(261, objectArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,925.798 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 2141222762;
      int int1 = 1;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2141222762, 1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-423);
      intArray0[1] = 1777;
      intArray0[2] = 652;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-423), 1777, 652}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 652;
      doubleArray0[1] = (double) 1777;
      double[] doubleArray1 = MathArrays.scale(652, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {652.0, 1777.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {425104.0, 1158604.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {652.0, 1777.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {425104.0, 1158604.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 652;
      doubleArray3[1] = (double) 652;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-656.8283042406715);
      doubleArray0[1] = (-2173.0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-656.8283042406715), (-2173.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-656.8283042406715), (-2173.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {(-656.8283042406715), (-2173.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1160));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "pAX+$x,2n81Xg5>Gp3";
      stringArray0[1] = "";
      stringArray0[2] = "illegal state";
      stringArray0[3] = "_nteGv!QUCUQkh|Wl";
      stringArray0[4] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 517.472248613;
      doubleArray0[3] = (-246.24711143579);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-3287.3);
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {517.472248613, 0.0, 0.0, 3.141592653589793, 3.141592653589793, (-3287.3), (-246.24711143579), 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      assertEquals(MathArrays.OrderDirection.INCREASING, mathArrays_OrderDirection0);
      
      double double0 = MathArrays.linearCombination((-1.0), 3.141592653589793, 517.472248613, 3.141592653589793);
      assertEquals(1622.5454220256022, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 3.141592653589793);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {517.472248613, 0.0, 0.0, 3.141592653589793, 3.141592653589793, (-3287.3), (-246.24711143579), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5401327363696786), -0.0, -0.0, (-0.0032791652906808758), (-0.0032791652906808758), 3.431253268222968, 0.25703045231786564, -0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(boolean0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {517.472248613, 0.0, 0.0, 3.141592653589793, 3.141592653589793, (-3287.3), (-246.24711143579), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray3.length);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long[][] longArray0 = new long[2][3];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray0[0] = longArray1;
      double double0 = MathArrays.linearCombination(1120.7119278671164, 198.498, (double) 0L, (double) 0L, Double.NEGATIVE_INFINITY, (double) 0L, (-1408.02), (double) 0L);
      assertEquals(Double.NaN, double0, 0.01);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[2] = "} MM2Tc=J]ryh";
      stringArray0[3] = " HV![%waA{H&,v~ZBm";
      stringArray0[4] = "DECREASING";
      stringArray0[5] = "";
      stringArray0[6] = "{sDB((+*RKLN_";
      stringArray0[7] = "hC2W7_'8";
      stringArray0[8] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2151.0777323430384);
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Integer integer0 = new Integer(3023);
      assertNotNull(integer0);
      assertEquals(3023, (int)integer0);
      
      Integer integer1 = new Integer((-2802));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-2802), (int)integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integer1;
      integerArray0[6] = integer1;
      Integer integer2 = new Integer((int) integerArray0[5]);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals((-2802), (int)integer2);
      assertEquals(8, integerArray0.length);
      
      integerArray0[7] = integer2;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, integerArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[1] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray1[6] = 1.0F;
      floatArray1[4] = 1.0F;
      floatArray1[5] = 1.0F;
      floatArray1[6] = 1.0F;
      floatArray1[7] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1.0F;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      int int0 = 116;
      int int1 = 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 116;
      intArray0[2] = 116;
      intArray0[3] = 116;
      intArray0[4] = 355;
      intArray0[5] = 0;
      intArray0[6] = 116;
      intArray0[7] = 116;
      intArray0[8] = 355;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int2 = 1890;
      intArray1[0] = 1890;
      intArray1[1] = 116;
      intArray1[2] = 116;
      intArray1[3] = 0;
      intArray1[4] = 355;
      intArray1[5] = 355;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-0.05417713522911072);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 5441.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {1.0, (-0.05417713522911072), Double.NaN, 5441.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2151.0777323430384);
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      int[] intArray0 = new int[1];
      intArray0[0] = 1565;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1565}, intArray0);
      assertArrayEquals(new int[] {1565}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-2151.0777323430384)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1565;
      floatArray0[1] = (float) 1565;
      floatArray0[2] = (float) 1565;
      floatArray0[3] = (float) 1565;
      floatArray0[4] = (float) 1565;
      floatArray0[5] = (float) 1565;
      floatArray0[6] = (float) 1565;
      floatArray0[7] = (float) 1565;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1375.5F);
      floatArray1[1] = (float) 1565;
      floatArray1[2] = (float) 1565;
      floatArray1[3] = (float) 1565;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1375.5F), 1565.0F, 1565.0F, 1565.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1565.0F, 1565.0F, 1565.0F, 1565.0F, 1565.0F, 1565.0F, 1565.0F, 1565.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.3333333333333333, 0.3333333333333333, (-4479.0), 0.3333333333333333, 0.3333333333333333);
      assertEquals((-1492.888888888889), double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2151.0777323430384);
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      Integer integer0 = new Integer(104);
      assertNotNull(integer0);
      assertEquals(104, (int)integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-656.8283042406715);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 216);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-656.8283042406715), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(216, doubleArray1.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "79y)++Ei}}T%Zqd";
      stringArray0[1] = "INCREASING";
      stringArray0[2] = "";
      stringArray0[3] = "yYH;7W";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1095;
      intArray0[1] = (-708);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1095;
      floatArray0[1] = (float) 1095;
      floatArray0[2] = (float) 1095;
      floatArray0[3] = (-1.4E-45F);
      floatArray0[4] = (float) 1095;
      floatArray0[5] = (float) (-708);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {1095.0F, 1095.0F, 1095.0F, (-1.4E-45F), 1095.0F, (-708.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2151.0777323430384);
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2151.0777323430384, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2151.0777323430384)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {1095.0F, 1095.0F, 1095.0F, (-1.4E-45F), 1095.0F, (-708.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1095;
      boolean boolean3 = MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean3);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1095.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1095.0F, 1095.0F, 1095.0F, (-1.4E-45F), 1095.0F, (-708.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray1.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 1893);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1893, doubleArray2.length);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 778;
      double[] doubleArray4 = MathArrays.ebeMultiply(doubleArray3, doubleArray3);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertArrayEquals(new double[] {778.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {605284.0}, doubleArray4, 0.01);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1893;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1893}, intArray0);
      assertArrayEquals(new int[] {1893}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray4, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertEquals(605284.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {778.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {605284.0}, doubleArray4, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
      
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1893, doubleArray2.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 778;
      floatArray0[1] = (float) 1893;
      floatArray0[2] = (float) 1893;
      floatArray0[3] = (float) 1893;
      floatArray0[4] = (float) 778;
      floatArray0[5] = (float) 778;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {778.0F, 1893.0F, 1893.0F, 1893.0F, 778.0F, 778.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double double2 = MathArrays.distance(doubleArray4, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertEquals(605284.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {778.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {605284.0}, doubleArray4, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1893, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
      
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-3072.722F);
      floatArray0[1] = 2481.365F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1061.9741F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-3072.722F), 2481.365F, (-1.0F), 1061.9741F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-656.8283042406715);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-656.8283042406715), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 261);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-656.8283042406715), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(261, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-2151.0777323430384);
      doubleArray0[0] = (-2151.0777323430384);
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2151.0777323430384);
      doubleArray2[1] = (-2151.0777323430384);
      doubleArray2[2] = 3.141592653589793;
      doubleArray2[3] = (-2151.0777323430384);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-423);
      intArray0[0] = (-423);
      intArray0[1] = 1777;
      intArray0[2] = 652;
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {(-423), 1777, 652}, intArray0);
      assertEquals(3, intArray0.length);
      
      double double0 = (-2173.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2173.0);
      doubleArray0[2] = (double) (-423);
      doubleArray0[3] = (double) 652;
      doubleArray0[4] = (double) 652;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 652;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-423);
      doubleArray1[1] = (-2173.0);
      doubleArray1[2] = (double) 1777;
      doubleArray1[3] = (double) 1777;
      doubleArray1[4] = (double) 1777;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 517.472248613;
      doubleArray0[3] = (-246.24711143579);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-3287.3);
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {517.472248613, 0.0, 0.0, 3.141592653589793, 3.141592653589793, (-3287.3), (-246.24711143579), 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      assertEquals(MathArrays.OrderDirection.INCREASING, mathArrays_OrderDirection0);
      
      double double0 = MathArrays.linearCombination((-1.0), 3.141592653589793, 517.472248613, 3.141592653589793);
      assertEquals(1622.5454220256022, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 3.141592653589793);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {517.472248613, 0.0, 0.0, 3.141592653589793, 3.141592653589793, (-3287.3), (-246.24711143579), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5401327363696786), -0.0, -0.0, (-0.0032791652906808758), (-0.0032791652906808758), 3.431253268222968, 0.25703045231786564, -0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0, 306);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertArrayEquals(new double[] {517.472248613, 0.0, 0.0, 3.141592653589793, 3.141592653589793, (-3287.3), (-246.24711143579), 0.0}, doubleArray0, 0.01);
      assertEquals(306, doubleArray3.length);
      assertEquals(8, doubleArray0.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "NON_REAL_FINITE_ORDINATE";
      stringArray0[1] = "NON_REAL_FINITE_ORDINATE";
      stringArray0[2] = "NON_REAL_FINITE_ORDINATE";
      stringArray0[3] = "NON_REAL_FINITE_ORDINATE";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertArrayEquals(new double[] {517.472248613, 0.0, 0.0, 3.141592653589793, 3.141592653589793, (-3287.3), (-246.24711143579), 0.0}, doubleArray0, 0.01);
      assertEquals(306, doubleArray3.length);
      assertEquals(8, doubleArray0.length);
      
      long[][] longArray0 = new long[3][2];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-611L);
      longArray2[1] = (long) 306;
      longArray2[2] = (long) 306;
      longArray2[3] = (long) 306;
      longArray2[4] = 0L;
      longArray2[5] = (long) 306;
      longArray2[6] = (long) 306;
      longArray2[7] = (long) 306;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-2151.0777323430384);
      doubleArray0[0] = (-2151.0777323430384);
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      double double1 = 1458.8624310264;
      Integer integer0 = new Integer(93);
      assertNotNull(integer0);
      assertEquals(93, (int)integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2151.0777323430384)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 29;
      Integer integer0 = new Integer(29);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(29, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(29, (int)integer1);
      
      integerArray0[1] = integer1;
      int int1 = 53;
      Integer integer2 = new Integer(53);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(53, (int)integer2);
      
      integerArray0[2] = integer2;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 708.0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) 53;
      doubleArray0[3] = (double) 53;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) (-2802);
      doubleArray0[6] = (double) 53;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) 53;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, int0);
      assertNotNull(doubleArray1);
      assertFalse(int0 == int1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-11.438440111420613), (-0.46852367688022284), (-0.8562674094707521), (-0.8562674094707521), (-0.46852367688022284), 45.26908077994429, (-0.8562674094707521), (-0.46852367688022284), (-0.8562674094707521)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {708.0, 29.0, 53.0, 53.0, 29.0, (-2802.0), 53.0, 29.0, 53.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(int0 == int1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-11.438440111420613), (-0.46852367688022284), (-0.8562674094707521), (-0.8562674094707521), (-0.46852367688022284), 45.26908077994429, (-0.8562674094707521), (-0.46852367688022284), (-0.8562674094707521)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {708.0, 29.0, 53.0, 53.0, 29.0, (-2802.0), 53.0, 29.0, 53.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertFalse(int0 == int1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(3.0, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-11.438440111420613), (-0.46852367688022284), (-0.8562674094707521), (-0.8562674094707521), (-0.46852367688022284), 45.26908077994429, (-0.8562674094707521), (-0.46852367688022284), (-0.8562674094707521)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {708.0, 29.0, 53.0, 53.0, 29.0, (-2802.0), 53.0, 29.0, 53.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray3 = MathArrays.scale(1.3899202974405054, doubleArray2);
      assertNotNull(doubleArray3);
      assertFalse(int0 == int1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-11.438440111420613), (-0.46852367688022284), (-0.8562674094707521), (-0.8562674094707521), (-0.46852367688022284), 45.26908077994429, (-0.8562674094707521), (-0.46852367688022284), (-0.8562674094707521)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.3899202974405054, 1.3899202974405054, 1.3899202974405054, 1.3899202974405054, 1.3899202974405054, 1.3899202974405054, 1.3899202974405054, 1.3899202974405054, 1.3899202974405054}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {708.0, 29.0, 53.0, 53.0, 29.0, (-2802.0), 53.0, 29.0, 53.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray3.length);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(1.3899202974405054, (-2803.58), 708.0, (double) int1, 1.304E19, 1.3899202974405054);
      assertFalse(int1 == int0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.8124560678624223E19, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[5][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = (-34);
      long long0 = (-2739L);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = null;
      try { 
        MathArrays.sortInPlace((double[]) null, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = (-34);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) (-34);
      doubleArray0[3] = (double) 0;
      double[][] doubleArray1 = new double[2][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-34.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, (-34.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-34.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray2.length);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 0L;
      try { 
        MathArrays.ebeDivide(doubleArray3, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2151.0777323430384);
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-656.8283042406715);
      doubleArray0[1] = (-2173.0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-656.8283042406715), (-2173.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3287.3;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3287.3}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3287.3;
      doubleArray3[7] = 3287.3;
      doubleArray0[1] = 3287.3;
      doubleArray3[3] = 3287.3;
      doubleArray3[4] = Double.NaN;
      doubleArray3[5] = 3287.3;
      doubleArray3[6] = 3287.3;
      doubleArray3[7] = 3287.3;
      double double0 = MathArrays.distance1(doubleArray2, doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {3287.3}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3287.3, 0.0, 0.0, 3287.3, Double.NaN, 3287.3, 3287.3, 3287.3}, doubleArray3, 0.01);
      assertEquals(1, doubleArray2.length);
      assertEquals(8, doubleArray3.length);
      
      MathArrays.scaleInPlace(3287.3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3287.3, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      int int0 = (-2550);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Integer>>) null, (-2550), (-2550));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2151.0777323430384);
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-2151.0777323430384)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4627135.410582068}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0, 778);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {(-2151.0777323430384)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(778, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.ebeMultiply(doubleArray2, doubleArray0);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {(-2151.0777323430384)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4627135.410582068}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-9.95332794623905E9)}, doubleArray4, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray4.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(9.953325795161318E9, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {(-2151.0777323430384)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4627135.410582068}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-9.95332794623905E9)}, doubleArray4, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray4.length);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 3370, (-4008));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      double double1 = MathArrays.linearCombination(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -\u221E is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1825.22867373208;
      doubleArray0[2] = 1825.22867373208;
      doubleArray0[3] = 1825.22867373208;
      doubleArray0[4] = 3570.186343036;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 260.65352474;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = ",S:>";
      stringArray0[2] = "";
      stringArray0[3] = "INVALID_MAX_ITERATIONS";
      stringArray0[4] = "";
      stringArray0[5] = "$VALUES";
      stringArray0[6] = "[}xW}uk'uo+,j";
      stringArray0[7] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2151.0777323430384);
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 1458.8624310264);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-2151.0777323430384)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1458.8624310264}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray2);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-2151.0777323430384)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1458.8624310264}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.474489771341649)}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1458.8624310264, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-2151.0777323430384)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1458.8624310264}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray4 = MathArrays.scale(4727.35947702195, doubleArray3);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertArrayEquals(new double[] {(-2151.0777323430384)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1458.8624310264}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.474489771341649)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-6970.4431943238715)}, doubleArray4, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
      
      double double1 = MathArrays.linearCombination(465.4983, (-2803.58), 390.75259332, (-2151.0777323430384), 1.3899202974405054, 4727.35947702195);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2139030.2733695363), double1, 0.01);
      
      double[] doubleArray5 = MathArrays.ebeAdd(doubleArray3, doubleArray3);
      assertNotNull(doubleArray5);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertArrayEquals(new double[] {(-2151.0777323430384)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1458.8624310264}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.474489771341649)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-2.948979542683298)}, doubleArray5, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray5.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 4196.938F;
      floatArray1[1] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {4196.938F, 0.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      MathArrays.scaleInPlace((-773.2350000000001), doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-423);
      intArray0[1] = 1777;
      intArray0[2] = 652;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-423), 1777, 652}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 652;
      doubleArray0[1] = (double) (-423);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) (-423);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {652.0, (-423.0), Double.NEGATIVE_INFINITY, (-423.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1.0F);
      double[] doubleArray1 = MathArrays.scale(2243.8, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2243.8)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2243.8)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2243.8)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2243.8)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2243.8)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2243.8}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      
      int int0 = 9;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2151.0777323430384);
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2151.0777323430384)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2151.0777323430384)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 517.472248613;
      doubleArray0[3] = (-246.24711143579);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-3287.3);
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {517.472248613, 0.0, 0.0, 3.141592653589793, 3.141592653589793, (-3287.3), (-246.24711143579), 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      assertEquals(MathArrays.OrderDirection.INCREASING, mathArrays_OrderDirection0);
      
      double double0 = MathArrays.linearCombination((-1.0), 3.141592653589793, 517.472248613, 3.141592653589793);
      assertEquals(1622.5454220256022, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 3.141592653589793);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {517.472248613, 0.0, 0.0, 3.141592653589793, 3.141592653589793, (-3287.3), (-246.24711143579), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5401327363696786), -0.0, -0.0, (-0.0032791652906808758), (-0.0032791652906808758), 3.431253268222968, 0.25703045231786564, -0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0, 306);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {517.472248613, 0.0, 0.0, 3.141592653589793, 3.141592653589793, (-3287.3), (-246.24711143579), 0.0}, doubleArray0, 0.01);
      assertEquals(306, doubleArray3.length);
      assertEquals(8, doubleArray0.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "NON_REAL_FINITE_ORDINATE";
      stringArray0[1] = "NON_REAL_FINITE_ORDINATE";
      stringArray0[2] = "NON_REAL_FINITE_ORDINATE";
      stringArray0[3] = "NON_REAL_FINITE_ORDINATE";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(4, stringArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 306
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 517.472248613;
      doubleArray0[3] = (-246.24711143579);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-3287.3);
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {517.472248613, 0.0, 0.0, 3.141592653589793, 3.141592653589793, (-3287.3), (-246.24711143579), 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      assertEquals(MathArrays.OrderDirection.INCREASING, mathArrays_OrderDirection0);
      
      double double0 = MathArrays.linearCombination((-1.0), 3.141592653589793, 517.472248613, 3.141592653589793);
      assertEquals(1622.5454220256022, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 3.141592653589793);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {517.472248613, 0.0, 0.0, 3.141592653589793, 3.141592653589793, (-3287.3), (-246.24711143579), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5401327363696786), -0.0, -0.0, (-0.0032791652906808758), (-0.0032791652906808758), 3.431253268222968, 0.25703045231786564, -0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0, 306);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {517.472248613, 0.0, 0.0, 3.141592653589793, 3.141592653589793, (-3287.3), (-246.24711143579), 0.0}, doubleArray0, 0.01);
      assertEquals(306, doubleArray3.length);
      assertEquals(8, doubleArray0.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "NON_REAL_FINITE_ORDINATE";
      stringArray0[1] = "NON_REAL_FINITE_ORDINATE";
      stringArray0[2] = "NON_REAL_FINITE_ORDINATE";
      stringArray0[3] = "NON_REAL_FINITE_ORDINATE";
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {517.472248613, 0.0, 0.0, 3.141592653589793, 3.141592653589793, (-3287.3), (-246.24711143579), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5401327363696786), -0.0, -0.0, (-0.0032791652906808758), (-0.0032791652906808758), 3.431253268222968, 0.25703045231786564, -0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      doubleArray0[1] = 1825.22867373208;
      doubleArray0[2] = 1825.22867373208;
      doubleArray0[3] = 1825.22867373208;
      double[][] doubleArray1 = new double[6][4];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1095;
      intArray0[1] = (-708);
      intArray0[2] = 5;
      intArray0[3] = 1118;
      intArray0[4] = 59;
      intArray0[5] = 6;
      intArray0[6] = 1;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1095, (-708), 5, 1118, 59, 6, 1}, intArray0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-708);
      doubleArray1[1] = (double) (-708);
      doubleArray1[2] = (double) (-708);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1226.2919717587652, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-708.0), (-708.0), (-708.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1925.79758660803);
      doubleArray0[1] = (-2129.65707661667);
      double double0 = MathArrays.linearCombination(1813.82017, 1.7976931348623157E308, 1.7976931348623157E308, 7.217374801515965E-4, (-2530.856007), (-2575.06354658));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, (-4125.9296272), (-853.1723376152448), (-472.93366505), (-1669.0), 67.61596708114564, 67.61596708114564, 2549.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(462995.9715790619, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.scale((-1925.79758660803), doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1925.79758660803), (-2129.65707661667), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3708696.344585313, 4101288.458451096, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double double2 = MathArrays.linearCombination(0.0, (-724.15538612241), 815.44183771086, 67.61596708114564);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(55136.888455246415, double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (-1,925.798 > -2,129.657)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      int int0 = 2;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2, 2);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1925.79758660803);
      doubleArray0[1] = (-2129.65707661667);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 5441.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1925.79758660803));
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1925.79758660803), (-2129.65707661667), 0.0, 5441.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2676.705154388441, 2960.0535973773194, -0.0, (-7562.556338373791)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1925.79758660803), (-2129.65707661667), 0.0, 5441.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2676.705154388441, 2960.0535973773194, -0.0, (-7562.556338373791)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.3899202974405056), (-1.3899202974405054), Double.NaN, (-1.3899202974405056)}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1925.79758660803), (-2129.65707661667), 0.0, 5441.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2676.705154388441, 2960.0535973773194, -0.0, (-7562.556338373791)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.3899202974405056), (-1.3899202974405054), Double.NaN, (-1.3899202974405056)}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale(1.0, doubleArray1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {(-1925.79758660803), (-2129.65707661667), 0.0, 5441.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2676.705154388441, 2960.0535973773194, -0.0, (-7562.556338373791)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2676.705154388441, 2960.0535973773194, -0.0, (-7562.556338373791)}, doubleArray3, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray3.length);
      
      double double1 = (-2803.58);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,925.798 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3009.7916775156104);
      doubleArray0[1] = (-392.0160016325);
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-3009.7916775156104), (-392.0160016325)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-3009.7916775156104), (-392.0160016325)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-8.0E298), (-392.0160016325), (-8.0E298), 3.834E-20);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3.1361280130599997E301, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3009.7916775156104), (-392.0160016325)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double2 = MathArrays.distance(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3009.7916775156104), (-392.0160016325)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      int int1 = 139;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 139);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 557.39900997;
      doubleArray0[1] = 2691.0;
      doubleArray0[2] = (-989.83394669);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {557.39900997, 2691.0, (-989.83394669), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {557.39900997, 2691.0, (-989.83394669), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 29;
      Integer integer0 = new Integer(29);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(29, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(29, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(53);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(53, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2802));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-2802), (int)integer3);
      
      integerArray0[3] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, integerArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 29;
      doubleArray0[1] = (double) 29;
      doubleArray0[2] = (double) 29;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2523.0, double0, 0.01);
      assertArrayEquals(new double[] {29.0, 29.0, 29.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {29.0, 29.0, 29.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2751);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 29;
      Integer integer0 = new Integer(29);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(29, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(29, (int)integer1);
      
      integerArray0[1] = integer1;
      int int1 = 53;
      Integer integer2 = new Integer(53);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int1));
      assertEquals(53, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2802));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-2802), (int)integer3);
      
      integerArray0[3] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, integerArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 29;
      doubleArray0[1] = (double) 29;
      doubleArray0[2] = (double) 29;
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {29.0, 29.0, 29.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 517.472248613;
      doubleArray1[1] = (double) (-2802);
      doubleArray1[2] = (double) 29;
      doubleArray1[3] = (double) 29;
      doubleArray1[4] = (double) int1;
      doubleArray1[5] = (double) 29;
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {517.472248613, (-2802.0), 29.0, 29.0, 53.0, 29.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {29.0, 29.0, 29.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null).when(field0).getZero();
      int int0 = 2;
      int int1 = 2;
      Object[][] objectArray0 = MathArrays.buildArray(field0, 2, 2);
      assertNotNull(objectArray0);
      assertEquals(2, objectArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 1653);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1653, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray0, 1653);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1653, intArray2.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(0, int0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1653, intArray2.length);
      
      double double0 = MathArrays.linearCombination((-1821.69048645885), 1.0708593250394448E-7, 2375.103, (-549.1263160621086), 1522.851560116, (double) 65);
      assertEquals((-1205246.2094455997), double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1.0708593250394448E-7, (double) 0, (-0.2499999701976776), (double) 65, 0.0, (-2334.5), (-1205246.2094455997), 1.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1205262.4594436625), double1, 0.01);
      
      double double2 = MathArrays.linearCombination(1.883618138726776E7, 2375.103, 1.3418100094790865E7, 1.0708593250394448E-7);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(4.4737870922880714E10, double2, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 1522.851560116);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.scale(2310.0029084, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(0.0, (-724.15538612241), 2.0, (-724.15538612241));
      assertEquals((-1448.31077224482), double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = 1.7976931348623157E308;
      double double1 = MathArrays.linearCombination(1.7976931348623157E308, 0.0, 1.7976931348623157E308, (double) 816, (-1821.69048645885), (double) 65);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      double double2 = MathArrays.linearCombination((double) 816, (-978.32281425), (double) 816, 0.0, 0.0, (-978.32281425), (double) 65, (-4479.0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-1089446.416428), double2, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-978.32281425);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-978.32281425);
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-423);
      intArray0[1] = 1777;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-423), 1777, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 652;
      doubleArray0[1] = (double) 1777;
      double[] doubleArray1 = MathArrays.scale(652, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {652.0, 1777.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {425104.0, 1158604.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {652.0, 1777.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {425104.0, 1158604.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 1777;
      doubleArray3[4] = (double) (-423);
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (double) 0;
      doubleArray3[7] = (double) (-423);
      double[] doubleArray4 = MathArrays.copyOf(doubleArray0, 778);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {652.0, 1777.0}, doubleArray0, 0.01);
      assertEquals(778, doubleArray4.length);
      assertEquals(2, doubleArray0.length);
      
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "|MPp/imLw*9k*";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      int[] intArray0 = new int[9];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      double double0 = MathArrays.linearCombination((-958.51606297692), 1.7976931348623157E308, 0.0, 0.0, (-1821.69048645885), 1.7976931348623157E308);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, Double.NEGATIVE_INFINITY, (-1821.69048645885), 1.7976931348623157E308, Double.NEGATIVE_INFINITY, 0.0, (-4125.9296272));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-1472.602152), doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double2 = MathArrays.linearCombination((-4055.4546632247), (-877.8329), 1.304E19, (-724.15538612241));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-9.442986235036224E21), double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[0];
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) (-34);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-2739L);
      doubleArray0[5] = (double) 816;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-34.0), 0.0, (-2739.0), 816.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1.0, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 816;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {816.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-34.0), 0.0, (-2739.0), 816.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1.0, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.scaleInPlace(816, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-27744.0), 0.0, (-2235024.0), 665856.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2173.0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2173.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(640.355, (-1324.962394), (-2173.0), (-2173.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3873482.70619013, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.3040000000000002E19);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2173.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 1.3040000000000002E19}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2173.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      double double2 = MathArrays.safeNorm(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2173.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-304.03893893);
      doubleArray3[2] = 3873482.70619013;
      doubleArray3[3] = 2462.8;
      doubleArray3[4] = 374.705;
      double[] doubleArray4 = MathArrays.scale(374.705, doubleArray3);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertArrayEquals(new double[] {1.0, (-304.03893893), 3873482.70619013, 2462.8, 374.705}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {374.705, (-113924.91061176563), 1.4514133374229727E9, 922823.474, 140403.837025}, doubleArray4, 0.01);
      assertEquals(5, doubleArray3.length);
      assertEquals(5, doubleArray4.length);
      
      double double3 = MathArrays.linearCombination(640.355, 2137.56, 861.135, Double.NaN, 861.135, 2462.8);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "AJIz+Se.Wws%#";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[3] = "crossover rate ({0})";
      stringArray0[4] = "ae&Hl ]zj*B5+sWX";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(5, stringArray0.length);
      
      int int0 = 0;
      int int1 = 2890;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 3238.2565791;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-1.0F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 3238.2565791, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = (-1299.0);
      doubleArray0[6] = 1803.67092;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3.6028797560775512E16, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.34217729E8, 1.34217729E8, (-1299.0), 1803.67092}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = (-9223372036854775808L);
      longArray0[2] = 470L;
      longArray0[3] = (-1041L);
      longArray0[4] = 1073741824L;
      longArray0[5] = 1364L;
      longArray0[6] = (-1339L);
      longArray0[7] = 2736L;
      longArray0[8] = (-310L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -9,223,372,036,854,775,808 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3238.2565791;
      doubleArray0[3] = (-1712.248353103728);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3663.0724937940913, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 3238.2565791, (-1712.248353103728), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3419);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 3238.2565791, (-1712.248353103728), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(3419, doubleArray1.length);
      
      long[][] longArray0 = new long[0][8];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 65);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(65, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray1, 816);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(65, intArray1.length);
      assertEquals(816, intArray2.length);
      
      int int0 = MathArrays.distanceInf(intArray2, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(0, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(65, intArray1.length);
      assertEquals(816, intArray2.length);
      
      double double0 = MathArrays.linearCombination((double) 65, 0.0, (double) 65, (double) 816, (-1821.69048645885), (double) 65);
      assertEquals((-65369.88161982525), double0, 0.01);
      
      double double1 = MathArrays.distance(intArray1, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(65, intArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (-65369.88161982525);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-4479.0);
      doubleArray0[2] = 0.0;
      doubleArray0[5] = (double) 65;
      doubleArray0[6] = (-4479.0);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1821.69048645885);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 1.0, Double.NaN, 1.0, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4479.0), 0.0, 65.0, (-4479.0), 0.0, (-1821.69048645885)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 65);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(65, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray1, 816);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(65, intArray1.length);
      assertEquals(816, intArray2.length);
      
      int int0 = MathArrays.distanceInf(intArray2, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(0, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(65, intArray1.length);
      assertEquals(816, intArray2.length);
      
      double double0 = MathArrays.linearCombination((double) 65, 0.0, (double) 65, (double) 816, (-1821.69048645885), (double) 65);
      assertEquals((-65369.88161982525), double0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) 816, (-978.32281425), (double) 816, 0.0, 0.0, (-978.32281425), (double) 65, (-4479.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1089446.416428), double1, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, (-4479.0), (double) 0, 2.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1089446.416428);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1089446.416428));
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1089446.416428)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1089446.416428)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1089446.416428)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1089446.416428)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.186893494267811E12}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(1.883618138726776E7, 1.883618138726776E7, 3129.6806298337183, 3129.6806298337183, 3129.6806298337183, 3.834E-20);
      assertEquals(3.5480173904895325E14, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1925.79758660803);
      doubleArray0[1] = (-2129.65707661667);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 5441.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1925.79758660803), (-2129.65707661667), 0.0, 5441.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.3899202974405056, 1.537053332064331, -0.0, (-3.9269736295048365)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1925.79758660803), (-2129.65707661667), 0.0, 5441.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.3899202974405056, 1.537053332064331, -0.0, (-3.9269736295048365)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-7.217374801515965E-4), (-7.217374801515965E-4), Double.NaN, (-7.217374801515965E-4)}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1925.79758660803), (-2129.65707661667), 0.0, 5441.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.3899202974405056, 1.537053332064331, -0.0, (-3.9269736295048365)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-7.217374801515965E-4), (-7.217374801515965E-4), Double.NaN, (-7.217374801515965E-4)}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale(1.0, doubleArray1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-1925.79758660803), (-2129.65707661667), 0.0, 5441.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.3899202974405056, 1.537053332064331, -0.0, (-3.9269736295048365)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.3899202974405056, 1.537053332064331, -0.0, (-3.9269736295048365)}, doubleArray3, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray3.length);
      
      double double1 = MathArrays.linearCombination(390.75259332, 5441.0, (-2803.58), (-2129.65707661667), 246.45, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(8096748.847115084, double1, 0.01);
      
      MathArrays.scaleInPlace((-1079.5068), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2078911.5901669576, 2298979.2958758166, -0.0, (-5873596.4988)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2078911.5901669576, 2298979.2958758166, -0.0, (-5873596.4988)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.3899202974405056, 1.537053332064331, -0.0, (-3.9269736295048365)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 557.39900997;
      doubleArray0[1] = 2691.0;
      doubleArray0[2] = (-989.83394669);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1341.6233);
      long[][] longArray0 = new long[2][3];
      long[] longArray1 = new long[1];
      longArray1[0] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 15;
      intArray0[1] = 15;
      intArray0[2] = 1502;
      intArray0[3] = (-2653);
      intArray0[4] = (-2146866090);
      intArray0[5] = (-1537);
      intArray0[6] = 1033;
      intArray0[7] = 811;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {15, 15, 1502, (-2653), (-2146866090), (-1537), 1033, 811}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "|MPp/imLw*9k*";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      int[] intArray0 = new int[9];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-34);
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 2890;
      intArray0[8] = 1861;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, (-34), 1, 0, 0, 2890, 1861}, intArray0);
      assertEquals(9, intArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-34);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      long long0 = (-2739L);
      longArray0[3] = (-2739L);
      longArray0[4] = (long) 1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -34 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-656.8283042406715);
      doubleArray0[1] = (-2173.0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-656.8283042406715), (-2173.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(640.355, (-1324.962394), (-2173.0), (-2173.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3873482.70619013, double1, 0.01);
      
      double double2 = MathArrays.linearCombination((-1538.973025959019), 640.355, 0.0, (-1324.962394), 1611.277679, (-1324.962394));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-3120371.403004591), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 557.39900997;
      double double0 = 2691.0;
      doubleArray0[1] = 2691.0;
      double double1 = (-989.83394669);
      doubleArray0[2] = (-989.83394669);
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3238.2565791;
      doubleArray0[3] = (-1712.248353103728);
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 3.141592653589793;
      doubleArray0[6] = 640.355;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 3238.2565791, (-1712.248353103728), 1.304E19, 3.141592653589793, 640.355}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3419);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 3238.2565791, (-1712.248353103728), 1.304E19, 3.141592653589793, 640.355}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(3419, doubleArray1.length);
      
      long[][] longArray0 = new long[2][1];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 3419;
      longArray1[1] = (long) 3419;
      longArray1[2] = (long) 3419;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 3419;
      longArray2[1] = (long) 3419;
      longArray2[2] = (long) 3419;
      longArray0[1] = longArray2;
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2549.0);
      doubleArray0[1] = 172.241;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2549.0), 172.241}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "W<{^cW";
      stringArray0[3] = "d%";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      double[][] doubleArray2 = new double[1][3];
      doubleArray2[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2549.0), 172.241}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-2549.0), 172.241}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      
      double double0 = MathArrays.linearCombination((-2549.0), Double.NaN, 0.0, 1686.6617544179383, 0.0, 1686.6617544179383, (-2549.0), 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray2.length);
      
      int int0 = MathArrays.distanceInf(intArray1, intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertEquals(0, int0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      double[] doubleArray4 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertArrayEquals(new double[] {(-2549.0), 172.241}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray4.length);
      
      try { 
        MathArrays.ebeSubtract(doubleArray4, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2946.8822447626;
      doubleArray0[1] = -0.0;
      doubleArray0[2] = (-958.51606297692);
      doubleArray0[3] = 2402.071916;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2946.8822447626, -0.0, (-958.51606297692), 2402.071916}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      double[][] doubleArray1 = new double[0][2];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[][] longArray0 = new long[1][8];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = 2271L;
      longArray1[2] = 0L;
      longArray1[3] = 548L;
      longArray1[4] = (-2664L);
      longArray1[5] = (-420L);
      longArray1[6] = 1568L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 557.39900997;
      doubleArray0[1] = 2691.0;
      doubleArray0[2] = (-989.83394669);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1341.6233);
      doubleArray0[5] = (-1743.3509274451164);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {557.39900997, 2691.0, (-989.83394669), 0.0, (-1341.6233), (-1743.3509274451164)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3334.9453519);
      doubleArray0[1] = 2034.7811088;
      doubleArray0[2] = 1492.4000438219;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1160.4864650565205);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3334.9453519), 2034.7811088, 1492.4000438219, 0.0, (-1160.4864650565205), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1121860500159414E7, 4140334.160729358, 2227257.890799609, 0.0, 1346728.8355793788, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-3334.9453519), 2034.7811088, 1492.4000438219, 0.0, (-1160.4864650565205), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(4340.066979583122, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-3334.9453519), 2034.7811088, 1492.4000438219, 0.0, (-1160.4864650565205), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      long[][] longArray0 = new long[5][8];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 0;
      longArray3[1] = (long) 0;
      longArray3[2] = 1422L;
      longArray3[3] = 349L;
      longArray3[4] = (long) 0;
      longArray3[5] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) 0;
      longArray4[1] = 1422L;
      longArray4[2] = 1422L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 349L;
      longArray5[1] = (long) 0;
      longArray5[2] = 1422L;
      longArray5[3] = (long) 0;
      longArray5[4] = (long) 0;
      longArray5[5] = 349L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (-823.969);
      doubleArray0[4] = 2375.103;
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, Double.NEGATIVE_INFINITY, (-823.969), 2375.103, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = 2946.8822447626;
      doubleArray2[2] = 2375.103;
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = (-2197.7263871);
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray2[6] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-176.22704F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, (-176.22704F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-176.22704F);
      double double0 = MathArrays.distance1(doubleArray2, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-176.22703552246094)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 272.0;
      doubleArray0[2] = 452.11216953153;
      doubleArray0[3] = (-3024.27248);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-537.9510362504);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (452.112 >= -3,024.272)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1825.22867373208;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2470.816871096322);
      doubleArray0[4] = 3570.186343036;
      doubleArray0[5] = (-425.174940820084);
      doubleArray0[6] = 260.65352474;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (-823.969);
      doubleArray0[4] = 2375.103;
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NEGATIVE_INFINITY, (-823.969), 2375.103, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2632.697838612);
      double double0 = 457.26659507860336;
      doubleArray0[2] = 457.26659507860336;
      doubleArray0[3] = 3390.6727395;
      doubleArray0[4] = (-894.4);
      doubleArray0[5] = 664.2883582;
      doubleArray0[6] = (-2269.3201);
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2632.697838612), 457.26659507860336, 3390.6727395, (-894.4), 664.2883582, (-2269.3201)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int int0 = (-471);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-471));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3238.2565791;
      doubleArray0[3] = (-1712.248353103728);
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 3.141592653589793;
      doubleArray0[6] = 640.355;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 3238.2565791, (-1712.248353103728), 1.304E19, 3.141592653589793, 640.355}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3419);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 3238.2565791, (-1712.248353103728), 1.304E19, 3.141592653589793, 640.355}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(3419, doubleArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 3419;
      intArray0[1] = 3419;
      intArray0[2] = 3419;
      intArray0[3] = 3419;
      intArray0[4] = 3419;
      intArray0[5] = 3419;
      intArray0[6] = 3419;
      intArray0[7] = 3419;
      intArray0[8] = 83;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 83}, intArray1);
      assertArrayEquals(new int[] {3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 83}, intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NEGATIVE_INFINITY, 1.304E19, 1.304E19, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 1754;
      int int1 = 3342;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Pair<Object, Object>>>) null, 1754, 3342);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2;
      int int1 = 2;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int int0 = (-423);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale((-88.14), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double double0 = (-1210.2398425746294);
      double double1 = MathArrays.linearCombination((-1210.2398425746294), (-1210.2398425746294), (-1210.2398425746294), (-1210.2398425746294), (-1210.2398425746294), (-1210.2398425746294));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4394041.429665191, double1, 0.01);
      
      double double2 = 605.2141588390679;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale(605.2141588390679, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 65);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(65, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray1, 816);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(65, intArray1.length);
      assertEquals(816, intArray2.length);
      
      int int0 = MathArrays.distanceInf(intArray2, intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(0, int0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(65, intArray1.length);
      assertEquals(816, intArray2.length);
      
      double double0 = MathArrays.linearCombination(1.7976931348623157E308, 0.0, 1.7976931348623157E308, (double) 816, (-1821.69048645885), (double) 65);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) 816, (-978.32281425), (double) 816, 0.0, 0.0, (-978.32281425), (double) 65, (-4479.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1089446.416428), double1, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-978.32281425);
      doubleArray0[1] = (double) 816;
      doubleArray0[2] = (-1821.69048645885);
      doubleArray0[3] = (-724.15538612241);
      doubleArray0[4] = (double) 65;
      doubleArray0[5] = (-1821.69048645885);
      doubleArray0[6] = (-4479.0);
      double[] doubleArray1 = MathArrays.scale(Double.POSITIVE_INFINITY, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-978.32281425), 816.0, (-1821.69048645885), (-724.15538612241), 65.0, (-1821.69048645885), (-4479.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double2 = MathArrays.linearCombination(0.0, 816.0, (-1821.69048645885), 2.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-3643.3809729177), double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (\u221E > -\u221E)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2904.629465);
      doubleArray0[2] = (-2813.0);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-2813.0), Double.NaN, 0.0, 0.0, Double.NaN, (-2904.629465)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1368);
      assertNotNull(integer0);
      assertEquals(1368, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger((String) null, integer0);
      assertNotNull(integer1);
      assertEquals(1368, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      try { 
        Integer.valueOf((String) null, 4374);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "|MPp/imLw*9k*";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-34);
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 2890;
      intArray0[8] = 1861;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, (-34), 1, 0, 0, 2890, 1861}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2202.1);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.141592653589793;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {3.141592653589793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3.141592653589793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {3.141592653589793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, (-1160));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-861.135);
      doubleArray0[2] = 0.0;
      double double0 = 125.5432803489;
      doubleArray0[3] = 125.5432803489;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 862);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-861.135), 0.0, 125.5432803489}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(862, doubleArray1.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 214);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-516.11026884);
      doubleArray0[2] = (-3619.7839);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1099.4;
      doubleArray0[5] = 304.8131346237299;
      doubleArray0[6] = 27.58;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = (-1574.622861);
      int int0 = (-3856);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-3856));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[8];
      double double0 = 3.141592653589793;
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 2163.99;
      double double1 = 517.472248613;
      doubleArray0[2] = 517.472248613;
      doubleArray0[3] = (-246.24711143579);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-3287.3);
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2163.99, 0.0, 0.0, 3.141592653589793, 517.472248613, (-3287.3), 0.0, (-246.24711143579)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      String string0 = "NON_REAL_FINITE_ORDINATE";
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("NON_REAL_FINITE_ORDINATE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.NON_REAL_FINITE_ORDINATE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1898.736;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 684.6721376463104;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 868.40938048236;
      doubleArray0[7] = 2371.4515586;
      doubleArray0[8] = Double.NaN;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308, 1898.736, 0.0, 684.6721376463104, 0.0, 868.40938048236, 2371.4515586, Double.NaN}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      long[][] longArray0 = new long[3][0];
      long[] longArray1 = new long[2];
      longArray1[0] = 2408L;
      longArray1[1] = (-1888L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 1534L;
      longArray3[1] = 2408L;
      longArray3[2] = (-1888L);
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 820.0F;
      floatArray0[2] = (-1446.052F);
      floatArray0[3] = 371.61F;
      floatArray0[4] = 2614.1726F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 820.0F, (-1446.052F), 371.61F, 2614.1726F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      long[][] longArray0 = new long[7][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 9007199254740990L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 9007199254740990L;
      longArray3[1] = 9007199254740990L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 9007199254740990L;
      longArray4[1] = 9007199254740990L;
      longArray4[2] = 9007199254740990L;
      longArray4[3] = 0L;
      longArray4[4] = 9007199254740990L;
      longArray4[5] = 9007199254740990L;
      longArray4[6] = 9007199254740990L;
      longArray4[7] = 9007199254740990L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray0[4] = longArray5;
      long[] longArray6 = new long[9];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = 9007199254740990L;
      longArray6[1] = 0L;
      longArray6[2] = 0L;
      longArray6[3] = 1023L;
      longArray6[4] = 9007199254740990L;
      longArray6[5] = 0L;
      longArray6[6] = 9007199254740990L;
      longArray6[7] = 0L;
      longArray6[8] = 9007199254740990L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[6];
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      
      longArray7[0] = 9007199254740990L;
      longArray7[1] = 0L;
      longArray7[2] = 0L;
      longArray7[3] = 0L;
      longArray7[4] = 1023L;
      longArray7[5] = (-1L);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 3869;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2918;
      intArray0[5] = 12;
      intArray0[6] = 2149;
      intArray0[7] = 2384;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 3869, 0, 0, 2918, 12, 2149, 2384}, intArray0);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-423);
      intArray0[1] = 1777;
      intArray0[2] = 652;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-423), 1777, 652}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 652;
      doubleArray0[1] = (double) 1777;
      double[] doubleArray1 = MathArrays.scale(652, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {652.0, 1777.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {425104.0, 1158604.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {652.0, 1777.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {425104.0, 1158604.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 652;
      double double0 = 1411.31232;
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray1, 1411.31232);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertArrayEquals(new double[] {652.0, 1777.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {425104.0, 1158604.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {378.8289965582544, 1032.4833234417456}, doubleArray4, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray4.length);
      
      try { 
        MathArrays.ebeDivide(doubleArray3, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3450);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(3450, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3450;
      intArray0[1] = 3450;
      intArray0[2] = 3450;
      intArray0[3] = 3450;
      intArray0[4] = 3450;
      intArray0[5] = 3450;
      intArray0[6] = 3450;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-423);
      intArray0[1] = 1777;
      intArray0[2] = 652;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 652;
      doubleArray0[1] = (double) 1777;
      double[] doubleArray1 = MathArrays.scale(652, doubleArray0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 0);
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 652;
      doubleArray3[1] = (double) 652;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 1777;
      doubleArray3[4] = (double) (-423);
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (double) 0;
      doubleArray3[7] = (double) (-423);
      try { 
        MathArrays.convolve(doubleArray3, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2243.0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      MathArrays.equals(doubleArray0, doubleArray2);
      double double0 = 1.34217729E8;
      MathArrays.scale(1.34217729E8, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 2127.67528;
      doubleArray0[2] = (-721.9);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 20.0;
      doubleArray0[5] = 1996.75106572125;
      doubleArray0[6] = (-394.3);
      doubleArray0[7] = 0.0;
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[3][9];
      long[] longArray1 = new long[7];
      longArray1[0] = 10000L;
      longArray1[1] = (-858L);
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = (-2484L);
      longArray1[5] = 721L;
      longArray1[6] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = 10000L;
      longArray2[1] = 81L;
      longArray2[2] = 10000L;
      longArray2[3] = 721L;
      longArray2[4] = 10000L;
      longArray2[5] = 10000L;
      longArray2[6] = 0L;
      longArray2[7] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = 10000L;
      longArray3[1] = 0L;
      longArray3[2] = (-6416L);
      longArray3[3] = 0L;
      longArray3[4] = 1L;
      longArray3[5] = (-2484L);
      longArray3[6] = 1L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = 1.0E-5;
      MathArrays.distance1(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[8];
      longArray1[0] = 1L;
      longArray1[1] = 150L;
      longArray1[2] = (-2417L);
      longArray1[3] = 1L;
      longArray1[4] = 9007199254740990L;
      longArray1[5] = 4123L;
      longArray1[6] = 0L;
      longArray1[7] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = 1L;
      longArray2[1] = 0L;
      longArray2[2] = 1L;
      longArray2[3] = 1L;
      longArray2[4] = 1L;
      longArray2[5] = 1689L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = 1L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,417 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-994.582);
      doubleArray0[3] = (-1381.734782064);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-994.582);
      doubleArray1[1] = (-994.582);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      MathArrays.distance1(doubleArray0, doubleArray1);
      MathArrays.equals(doubleArray1, doubleArray0);
      MathArrays.OrderDirection.values();
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2034.0096F;
      floatArray0[2] = (-1404.34F);
      float float0 = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2135.1062F;
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1072.6584919854943);
      doubleArray0[2] = 685.594683959;
      doubleArray0[3] = (-506.37724857243);
      doubleArray0[4] = (-1733.7814002);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 3.141592653589793;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1332.2949512578002;
      doubleArray1[1] = (-1733.7814002);
      doubleArray1[2] = (-506.37724857243);
      doubleArray1[3] = 3.141592653589793;
      doubleArray1[4] = (-1072.6584919854943);
      doubleArray1[5] = (-1733.7814002);
      doubleArray1[6] = (-1072.6584919854943);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(1733.7814002, double0, 0.01);
  }
}
