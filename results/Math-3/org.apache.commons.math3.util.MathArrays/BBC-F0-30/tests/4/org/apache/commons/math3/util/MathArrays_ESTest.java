/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:41:25 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[5];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      int int0 = (-1847);
      Integer integer0 = new Integer((-1847));
      assertNotNull(integer0);
      assertEquals((-1847), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = 220;
      int int2 = (-6);
      Class<FieldElement> class1 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-6));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1267.49117711992);
      doubleArray0[1] = 1805.94473;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 300.703411448;
      double[][] doubleArray1 = new double[23][7];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 3796.37779045;
      doubleArray0[0] = 3796.37779045;
      doubleArray0[1] = 1009.58705477;
      double double1 = (-5150.393355562701);
      doubleArray0[2] = (-5150.393355562701);
      double double2 = (-2.6033824355191673E-8);
      doubleArray0[3] = (-2.6033824355191673E-8);
      double double3 = 6.123233995736766E-17;
      doubleArray0[4] = 6.123233995736766E-17;
      doubleArray0[5] = 3245.9;
      doubleArray0[6] = 759.360426028;
      double double4 = (-1.0);
      doubleArray0[7] = (-1.0);
      int int0 = 2242;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2242);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3796.37779045, 1009.58705477, (-5150.393355562701), (-2.6033824355191673E-8), 6.123233995736766E-17, 3245.9, 759.360426028, (-1.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(2242, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3796.37779045, 1009.58705477, (-5150.393355562701), (-2.6033824355191673E-8), 6.123233995736766E-17, 3245.9, 759.360426028, (-1.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(2242, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(2242, doubleArray1.length);
      
      double double5 = 1.304E19;
      double[] doubleArray3 = MathArrays.scale(1.304E19, doubleArray1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {3796.37779045, 1009.58705477, (-5150.393355562701), (-2.6033824355191673E-8), 6.123233995736766E-17, 3245.9, 759.360426028, (-1.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(2242, doubleArray3.length);
      assertEquals(2242, doubleArray1.length);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1598.365234;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "t)V:$I99n#";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[4] = "";
      stringArray0[5] = "jG";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-4.9E-324);
      doubleArray0[1] = 719.0;
      doubleArray0[2] = 2888.3734478309925;
      doubleArray0[3] = 693.10791324672;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3917.11;
      doubleArray0[6] = 4.9E-324;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4968.28053813795, double0, 0.01);
      assertArrayEquals(new double[] {(-4.9E-324), 719.0, 2888.3734478309925, 693.10791324672, 0.0, 3917.11, 4.9E-324}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2244;
      intArray0[1] = 2812;
      intArray0[2] = (-2146343188);
      intArray0[3] = (-3745);
      intArray0[4] = (-1006);
      intArray0[5] = (-2617);
      intArray0[6] = 1526;
      intArray0[7] = 2230;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 242;
      intArray1[1] = (-1006);
      intArray1[2] = (-1006);
      intArray1[3] = 2812;
      intArray1[4] = (-3745);
      intArray1[5] = (-2617);
      intArray1[6] = (-2146343188);
      intArray1[7] = 2244;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals((-2265270), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2244, 2812, (-2146343188), (-3745), (-1006), (-2617), 1526, 2230}, intArray0);
      assertArrayEquals(new int[] {242, (-1006), (-1006), 2812, (-3745), (-2617), (-2146343188), 2244}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.304E19;
      doubleArray2[1] = 1.304E19;
      doubleArray2[2] = 1.304E19;
      doubleArray2[3] = 1.304E19;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 6;
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      Object[][] objectArray0 = MathArrays.buildArray(field0, 6, (-1298));
      assertNotNull(objectArray0);
      assertEquals(6, objectArray0.length);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1437.6418;
      doubleArray0[1] = 248.4392559003;
      doubleArray0[2] = 0.1111111111111111;
      doubleArray0[3] = (-2070.52160473);
      doubleArray0[4] = 1718.5;
      doubleArray0[5] = 2489.0;
      doubleArray0[6] = 4.3466666666666665E18;
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = (-2146.1);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.3745366896198556E19, double0, 0.01);
      assertArrayEquals(new double[] {1437.6418, 248.4392559003, 0.1111111111111111, (-2070.52160473), 1718.5, 2489.0, 4.3466666666666665E18, 1.304E19, (-2146.1)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.scaleInPlace(1.700416E38, doubleArray0);
      assertArrayEquals(new double[] {2.4445891189888003E41, 4.224500857609645E40, 1.889351111111111E37, (-3.520748065028567E41), 2.9221648959999998E41, 4.2323354239999996E41, 7.391141546666666E56, 2.217342464E57, (-3.6492627776E41)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1374.67778);
      doubleArray0[1] = (-6.032174644509064E-23);
      doubleArray0[2] = 314.982960432667;
      doubleArray0[3] = (-346.14256);
      doubleArray0[4] = (-1176.36177054);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2034.30881;
      doubleArray0[7] = (-231.95064786683);
      doubleArray0[8] = (-1971.4734745);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3401.6931151070307, double0, 0.01);
      assertArrayEquals(new double[] {(-1374.67778), (-6.032174644509064E-23), 314.982960432667, (-346.14256), (-1176.36177054), 0.0, 2034.30881, (-231.95064786683), (-1971.4734745)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.scaleInPlace(1.1974215507507324, doubleArray0);
      assertArrayEquals(new double[] {(-1646.0687991101743), (-7.223055917227291E-23), 377.16738494134074, (-414.47856097602846), (-1408.600935523884), 0.0, 2435.925209976077, (-277.74270446633665), (-2360.6848250997245)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1646.0687991101743), (-7.223055917227291E-23), 377.16738494134074, (-414.47856097602846), (-1408.600935523884), 0.0, 2435.925209976077, (-277.74270446633665), (-2360.6848250997245)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 200);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1646.0687991101743), (-7.223055917227291E-23), 377.16738494134074, (-414.47856097602846), (-1408.600935523884), 0.0, 2435.925209976077, (-277.74270446633665), (-2360.6848250997245)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(200, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, (-1432.446018), 0.0, (-2468.18));
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1025);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1025, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 1025);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2278.9F);
      floatArray0[1] = (-1.4E-45F);
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.4E-45F);
      floatArray1[1] = 86.9112F;
      floatArray1[2] = (-2278.9F);
      floatArray1[3] = (-2278.9F);
      floatArray1[4] = (-1.4E-45F);
      floatArray1[5] = (-2278.9F);
      floatArray1[6] = (-2278.9F);
      floatArray1[7] = (-2278.9F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-2278.9F), (-1.4E-45F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.4E-45F), 86.9112F, (-2278.9F), (-2278.9F), (-1.4E-45F), (-2278.9F), (-2278.9F), (-2278.9F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer((-1847));
      assertNotNull(integer0);
      assertEquals((-1847), (int)integer0);
      
      Class<FieldElement> class1 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = (-174.48274F);
      floatArray0[2] = (-2140.122F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, (-174.48274F), (-2140.122F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 692;
      intArray0[1] = (-721);
      intArray0[2] = 3;
      intArray0[3] = 98;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 98;
      intArray1[1] = 3;
      intArray1[2] = 98;
      intArray1[3] = 3;
      intArray1[4] = 3;
      intArray1[5] = 692;
      intArray1[6] = 3;
      intArray1[7] = 692;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(1508, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {692, (-721), 3, 98}, intArray0);
      assertArrayEquals(new int[] {98, 3, 98, 3, 3, 692, 3, 692}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = 1.375;
      doubleArray0[2] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) (-174.48274F);
      doubleArray0[4] = (double) (-2140.122F);
      doubleArray0[5] = (double) 98;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {3.0, 1.375, Double.NEGATIVE_INFINITY, (-174.4827423095703), (-2140.1220703125), 98.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1498.62083;
      doubleArray0[1] = 0.2499999701976776;
      doubleArray0[2] = 100.0;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1498.62083, 0.2499999701976776, 100.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1609);
      assertNotNull(integer3);
      assertEquals(1609, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray0 = new double[3];
      double double0 = 3.834E-20;
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1432.616391;
      double double1 = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 1432.616391, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double2 = 628.33;
      try { 
        MathArrays.normalizeArray(doubleArray0, 628.33);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1855.0;
      doubleArray0[1] = (-1565.363019413);
      doubleArray0[2] = 2953.140274241;
      doubleArray0[3] = 379.328414050917;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-0.3058015757857271);
      doubleArray0[6] = 2.3912006059850912E11;
      doubleArray0[7] = 1.34217729E8;
      doubleArray0[8] = 2951.2307176;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {1855.0, (-1565.363019413), 2953.140274241, 379.328414050917, Double.NaN, (-0.3058015757857271), 2.3912006059850912E11, 1.34217729E8, 2951.2307176}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Integer integer0 = new Integer((-1847));
      assertNotNull(integer0);
      assertEquals((-1847), (int)integer0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 1);
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1434);
      intArray0[1] = 172;
      intArray0[2] = 1025;
      intArray0[3] = (-1);
      intArray0[4] = (-1882);
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1434);
      intArray1[1] = (-1);
      intArray1[2] = (-1);
      intArray1[3] = (-1882);
      intArray1[4] = (-1);
      intArray1[5] = 172;
      intArray1[6] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(1881, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1434), 172, 1025, (-1), (-1882)}, intArray0);
      assertArrayEquals(new int[] {(-1434), (-1), (-1), (-1882), (-1), 172, (-1)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1935.53167646821;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1935.53167646821;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1935.53167646821;
      doubleArray0[5] = (-1213.5892);
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.608E19, double0, 0.01);
      assertArrayEquals(new double[] {1935.53167646821, 1.304E19, 1935.53167646821, 1.304E19, 1935.53167646821, (-1213.5892), 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(1.304E19, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1935.53167646821, 1.304E19, 1935.53167646821, 1.304E19, 1935.53167646821, (-1213.5892), 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.523933306114546E22, 1.700416E38, 2.523933306114546E22, 1.700416E38, 2.523933306114546E22, (-1.5825203167999998E22), 1.700416E38, 1.700416E38}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(3.400832E38, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1935.53167646821, 1.304E19, 1935.53167646821, 1.304E19, 1935.53167646821, (-1213.5892), 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.523933306114546E22, 1.700416E38, 2.523933306114546E22, 1.700416E38, 2.523933306114546E22, (-1.5825203167999998E22), 1.700416E38, 1.700416E38}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3.400832E38, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {1935.53167646821, 1.304E19, 1935.53167646821, 1.304E19, 1935.53167646821, (-1213.5892), 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.523933306114546E22, 1.700416E38, 2.523933306114546E22, 1.700416E38, 2.523933306114546E22, (-1.5825203167999998E22), 1.700416E38, 1.700416E38}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Field<Pair<Integer, Object>> field0 = (Field<Pair<Integer, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1431, 3007);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2519.669328496155;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2519.669328496155}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5039.33865699231}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2519.669328496155;
      doubleArray2[1] = 2519.669328496155;
      doubleArray2[2] = 2519.669328496155;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 316.17607;
      doubleArray0[1] = 1935.53167646821;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.2860509143963117E-8;
      doubleArray1[2] = 2.2860509143963117E-8;
      doubleArray1[3] = 316.17607;
      doubleArray1[4] = 1.304E19;
      doubleArray1[5] = 1935.53167646821;
      doubleArray1[6] = 316.17607;
      doubleArray1[7] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1.8441344853345161E19, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.2860509143963117E-8, 0.0, 2.2860509143963117E-8, 316.17607, 1.304E19, 1935.53167646821, 316.17607, 1.304E19}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.scale(Double.POSITIVE_INFINITY, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2.2860509143963117E-8, 0.0, 2.2860509143963117E-8, 316.17607, 1.304E19, 1935.53167646821, 316.17607, 1.304E19}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NaN, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {2.2860509143963117E-8, 0.0, 2.2860509143963117E-8, 316.17607, 1.304E19, 1935.53167646821, 316.17607, 1.304E19}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(8, doubleArray1.length);
      
      double double2 = MathArrays.safeNorm(doubleArray2);
      assertEquals(Double.NaN, double2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {2.2860509143963117E-8, 0.0, 2.2860509143963117E-8, 316.17607, 1.304E19, 1935.53167646821, 316.17607, 1.304E19}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NaN, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      assertNotNull(pair0);
      
      Pair<Integer, Object> pair1 = new Pair<Integer, Object>(pair0);
      assertNotNull(pair1);
      
      Field<Pair<Integer, Object>> field0 = (Field<Pair<Integer, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 3007, 88);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 316.17607;
      doubleArray0[1] = 1935.53167646821;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.2860509143963117E-8;
      doubleArray1[1] = 1.304E19;
      doubleArray1[2] = 2.2860509143963117E-8;
      doubleArray1[3] = 316.17607;
      doubleArray1[4] = 1.304E19;
      doubleArray1[5] = 1935.53167646821;
      doubleArray1[6] = 316.17607;
      doubleArray1[7] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(2.258594253069816E19, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.2860509143963117E-8, 1.304E19, 2.2860509143963117E-8, 316.17607, 1.304E19, 1935.53167646821, 316.17607, 1.304E19}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.scale(Double.POSITIVE_INFINITY, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2.2860509143963117E-8, 1.304E19, 2.2860509143963117E-8, 316.17607, 1.304E19, 1935.53167646821, 316.17607, 1.304E19}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {2.2860509143963117E-8, 1.304E19, 2.2860509143963117E-8, 316.17607, 1.304E19, 1935.53167646821, 316.17607, 1.304E19}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(8, doubleArray1.length);
      
      double double2 = MathArrays.safeNorm(doubleArray2);
      assertEquals(Double.NaN, double2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {2.2860509143963117E-8, 1.304E19, 2.2860509143963117E-8, 316.17607, 1.304E19, 1935.53167646821, 316.17607, 1.304E19}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Object>> field0 = (Field<Pair<Integer, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Pair<Integer, Object>[][] pairArray0 = MathArrays.buildArray(field0, 3007, 88);
      assertNotNull(pairArray0);
      assertEquals(3007, pairArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[][] longArray0 = new long[4][6];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 0;
      longArray3[1] = (long) 0;
      longArray3[2] = (-2343L);
      longArray3[3] = (long) 0;
      longArray3[4] = (long) 0;
      longArray3[5] = (long) 0;
      longArray3[6] = (long) 0;
      longArray3[7] = 2194L;
      longArray3[8] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (long) 0;
      longArray4[1] = 3952090531849364496L;
      longArray4[2] = (long) 0;
      longArray4[3] = 0L;
      longArray4[4] = (-2343L);
      longArray4[5] = (long) 0;
      longArray4[6] = (-2343L);
      longArray4[7] = (long) 0;
      longArray4[8] = (-2343L);
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays1";
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1326.177F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-359.87F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1958.92F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1326.177F, 0.0F, (-359.87F), 0.0F, 1958.92F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1554;
      intArray0[1] = 1641;
      intArray0[2] = 2315;
      intArray0[3] = 163;
      intArray0[4] = 8388608;
      intArray0[5] = 1;
      intArray0[6] = 2140713012;
      intArray0[7] = 1025;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1554, 1641, 2315, 163, 8388608, 1, 2140713012, 1025}, intArray1);
      assertArrayEquals(new int[] {1554, 1641, 2315, 163, 8388608, 1, 2140713012, 1025}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 316.17607;
      doubleArray0[1] = 1935.53167646821;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.2860509143963117E-8;
      doubleArray1[1] = 1.304E19;
      doubleArray1[2] = 2.2860509143963117E-8;
      doubleArray1[3] = 316.17607;
      doubleArray1[4] = 1.304E19;
      doubleArray1[5] = 1935.53167646821;
      doubleArray1[6] = 316.17607;
      doubleArray1[7] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(2.258594253069816E19, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.2860509143963117E-8, 1.304E19, 2.2860509143963117E-8, 316.17607, 1.304E19, 1935.53167646821, 316.17607, 1.304E19}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.scale(Double.POSITIVE_INFINITY, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.2860509143963117E-8, 1.304E19, 2.2860509143963117E-8, 316.17607, 1.304E19, 1935.53167646821, 316.17607, 1.304E19}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {2.2860509143963117E-8, 1.304E19, 2.2860509143963117E-8, 316.17607, 1.304E19, 1935.53167646821, 316.17607, 1.304E19}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(8, doubleArray1.length);
      
      double double2 = MathArrays.safeNorm(doubleArray2);
      assertEquals(Double.NaN, double2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {2.2860509143963117E-8, 1.304E19, 2.2860509143963117E-8, 316.17607, 1.304E19, 1935.53167646821, 316.17607, 1.304E19}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Field<Pair<Integer, Object>> field0 = (Field<Pair<Integer, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 3007, 88);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 316.17607;
      doubleArray0[1] = 1935.53167646821;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.2860509143963117E-8;
      doubleArray1[1] = 1935.53167646821;
      doubleArray1[3] = 316.17607;
      doubleArray1[4] = 316.17607;
      doubleArray1[5] = 1935.53167646821;
      doubleArray1[5] = 316.17607;
      doubleArray1[7] = 1935.53167646821;
      double double0 = new Double(1935.53167646821);
      assertEquals(1935.53167646821, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(Double.POSITIVE_INFINITY, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.2860509143963117E-8, 1935.53167646821, 0.0, 316.17607, 316.17607, 316.17607, 0.0, 1935.53167646821}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NaN, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NaN, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {2.2860509143963117E-8, 1935.53167646821, 0.0, 316.17607, 316.17607, 316.17607, 0.0, 1935.53167646821}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray1.length);
      
      double double2 = MathArrays.safeNorm(doubleArray2);
      assertEquals(Double.NaN, double2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {2.2860509143963117E-8, 1935.53167646821, 0.0, 316.17607, 316.17607, 316.17607, 0.0, 1935.53167646821}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NaN, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NaN, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {316.17607, 1935.53167646821, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.scaleInPlace((-1357.498018), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      MathArrays.scaleInPlace((-593.433510017), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 138.42915416;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {138.42915416}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {19162.630721453042}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {138.42915416}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {19162.630721453042}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {138.42915416}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {19162.630721453042}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1258L);
      longArray0[1] = 0L;
      longArray0[2] = (-1354L);
      longArray0[3] = (-1258L);
      longArray0[4] = (-1805L);
      longArray0[5] = 1L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,258 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-3855.0505F);
      floatArray0[0] = (-1.0F);
      floatArray0[3] = (-3062.95F);
      floatArray0[4] = 0.5F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-3855.0505F), 0.0F, (-3062.95F), 0.5F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(-0.0, -0.0, (double) 0.5F, 3249.94814, (double) (-1.0F), (double) 0.5F);
      assertEquals(1624.47407, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 452;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 452);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 0.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 354.32F;
      floatArray1[1] = 354.32F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 354.32F;
      floatArray1[4] = 354.32F;
      floatArray1[5] = 354.32F;
      floatArray1[6] = 354.32F;
      floatArray1[7] = 354.32F;
      floatArray1[8] = 354.32F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {354.32F, 354.32F, 0.0F, 354.32F, 354.32F, 354.32F, 354.32F, 354.32F, 354.32F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 316.17607;
      doubleArray0[1] = 1935.53167646821;
      doubleArray0[2] = 316.17607;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {316.17607, 1935.53167646821, 316.17607}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.12312709320114765, 0.7537458135977048, 0.12312709320114765}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 6619557.943753746);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {316.17607, 1935.53167646821, 316.17607}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {815046.9278909648, 4989464.087971818, 815046.9278909648}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-12);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-12), (-12));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3979.6265;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3979.6265, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7959.253, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3979.6265, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7959.253, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.5, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination(doubleArray2, doubleArray2);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3979.6265, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7959.253, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.5, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 3979.6265;
      doubleArray3[1] = 3979.6265;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = 3979.6265;
      doubleArray4[1] = 3979.6265;
      doubleArray4[2] = Double.NaN;
      doubleArray4[3] = Double.NaN;
      doubleArray4[4] = 3979.6265;
      doubleArray4[5] = Double.NaN;
      try { 
        MathArrays.ebeDivide(doubleArray3, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-576.602F);
      floatArray0[1] = (-576.602F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-576.602F), (-576.602F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-576.602F);
      floatArray0[1] = (-576.602F);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-576.602F);
      doubleArray0[1] = (double) (-576.602F);
      doubleArray0[2] = (double) (-576.602F);
      doubleArray0[3] = (double) (-576.602F);
      doubleArray0[4] = (double) (-576.602F);
      doubleArray0[5] = (double) (-576.602F);
      doubleArray0[6] = (double) (-576.602F);
      doubleArray0[7] = (double) (-576.602F);
      doubleArray0[8] = 2594.59843842;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-576.6019897460938), (-576.6019897460938), (-576.6019897460938), (-576.6019897460938), (-576.6019897460938), (-576.6019897460938), (-576.6019897460938), (-576.6019897460938), 2594.59843842}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals((-2018.21747954875), double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-576.6019897460938), (-576.6019897460938), (-576.6019897460938), (-576.6019897460938), (-576.6019897460938), (-576.6019897460938), (-576.6019897460938), (-576.6019897460938), 2594.59843842}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-576.602F);
      floatArray0[1] = (-576.602F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-576.602F), (-576.602F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 2429.3934;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2429.3934, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 2429.3934}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.scaleInPlace(3383.321, doubleArray0);
      assertArrayEquals(new double[] {1.2971652714E-16, 8219417.707481399}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2429.3934;
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = 3.834E-20;
      doubleArray1[3] = 3.834E-20;
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,429.393 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-9.7153186927302);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(94.38741730131285, double0, 0.01);
      assertArrayEquals(new double[] {(-9.7153186927302), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-9.7153186927302), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "population size must be positive ({0})";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays1";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays1";
      stringArray0[3] = "1@.lJ1@dA7GJU6+";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays1";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays1";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays1";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2787.56F;
      doubleArray0[1] = (double) 2787.56F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 2787.56F;
      doubleArray0[6] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2787.56005859375, 2787.56005859375, 0.0, 0.0, 0.0, 2787.56005859375, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(13, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.checkOrder(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(1282.93965244498, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(0.0, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[][] longArray0 = new long[0][8];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays1";
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.5F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1200.049F;
      floatArray0[3] = (-32.44922F);
      floatArray0[4] = 677.8854F;
      floatArray0[5] = (-823.8028F);
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1200.049F;
      floatArray1[1] = 0.5F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.5F, 0.0F, 1200.049F, (-32.44922F), 677.8854F, (-823.8028F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1200.049F, 0.5F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 677.8854F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.5F;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {677.8853759765625, 0.0, 0.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {459528.5829628855, 0.0, 0.25}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.scale(71.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (-234.913F);
      floatArray0[2] = 1200.077F;
      floatArray0[3] = (-17.6524F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {Float.NaN, (-234.913F), 1200.077F, (-17.6524F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = new float[17];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-1633.88F);
      floatArray1[4] = 3.4028235E38F;
      floatArray1[2] = 3.4028235E38F;
      floatArray1[6] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(17, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 354.32F;
      floatArray0[1] = 354.32F;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray1, (float[]) null);
      assertFalse(boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3361.0;
      doubleArray0[5] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.3421772904208207E8, double0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, 0.0, 0.0, 3361.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.34217729E8, 0.0, 0.0, 0.0, 3361.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-2200.70549986482);
      doubleArray0[0] = (-2200.70549986482);
      doubleArray0[1] = (-1374.67778);
      double double1 = 1.304E19;
      doubleArray0[2] = 1.304E19;
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {(-2200.70549986482), (-1374.67778), 1.304E19}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.scaleInPlace((-1357.498018), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      long[] longArray0 = new long[14];
      longArray0[0] = 831L;
      longArray0[1] = 831L;
      longArray0[2] = 831L;
      longArray0[3] = 831L;
      longArray0[4] = 831L;
      longArray0[5] = 831L;
      longArray0[6] = 831L;
      longArray0[7] = 831L;
      longArray0[8] = 831L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(14, longArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2988.491101512077);
      int[] intArray0 = new int[5];
      intArray0[0] = 12;
      intArray0[1] = 134217729;
      intArray0[2] = 1;
      intArray0[3] = 2146780246;
      intArray0[4] = 1;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1;
      intArray1[1] = 2146780246;
      intArray1[2] = 2405;
      intArray1[3] = 2405;
      intArray1[4] = 12;
      intArray1[5] = 1;
      intArray1[6] = (-209);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(2.942628584012562E9, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {12, 134217729, 1, 2146780246, 1}, intArray0);
      assertArrayEquals(new int[] {1, 2146780246, 2405, 2405, 12, 1, (-209)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray1.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2988.491101512077), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-2988.491101512077), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      double double0 = 0.0;
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      int[] intArray0 = new int[8];
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double2 = 436.01946;
      // Undeclared exception!
      try { 
        MathArrays.scale(436.01946, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((-783.2435886206572), 0.0, (-2082.413583764), Double.NaN, (-783.2435886206572), (-101.6931401));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      int[] intArray0 = new int[8];
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = (-2128.8593);
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.1921056801463227E-8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-136.3);
      doubleArray1[1] = (-136.3);
      doubleArray1[2] = 1.1921056801463227E-8;
      doubleArray1[3] = 1.1921056801463227E-8;
      doubleArray1[4] = (-136.3);
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-136.3), (-136.3), 1.1921056801463227E-8, 1.1921056801463227E-8, (-136.3)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray1.length);
      
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.5463024377822876, 0.0, (-1497.47182867293), (-4.4659709233229985E15), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[1][7];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = (-2128.8593);
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[9][7];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = null;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = null;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray1;
      doubleArray2[8] = doubleArray1;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-9.7153186927302);
      double[] doubleArray1 = MathArrays.scale(14.101419448852539, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-9.7153186927302), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-136.99978396546626), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray0[0] = (-9.7153186927302);
      doubleArray2[1] = 14.101419448852539;
      doubleArray2[2] = (-9.7153186927302);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (14.101 >= -9.715)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[8] = "";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, stringArray0.length);
      
      long[][] longArray0 = new long[1][0];
      long[] longArray1 = new long[7];
      longArray1[0] = 419L;
      longArray1[1] = (-1347L);
      longArray1[2] = 1884L;
      longArray1[3] = (-608L);
      longArray1[4] = (-200L);
      longArray1[5] = (-702L);
      longArray1[6] = 49L;
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,347 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays1";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays1";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays1";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays1";
      stringArray0[4] = "YL!KWLN*";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays1";
      stringArray0[6] = "W^w<.7YlozJ";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3209.75257931);
      doubleArray0[1] = 1.304E19;
      long[][] longArray0 = new long[0][4];
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3402.7);
      double double0 = MathArrays.linearCombination((-3402.7), 0.087, (-3402.7), (-3402.7));
      assertEquals(1.1578071255099999E7, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-325.293480948253), (-280.29225), (-1.0), (-1617.64608488), 1680.2898113469, 3618.0);
      assertEquals(6172083.425223283, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-3402.7), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      double double2 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(3401.7, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {(-3402.7), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 76;
      intArray0[0] = 76;
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {76}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 4.3466666666666665E18;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 4.3466666666666665E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 4.3466666666666665E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[][] doubleArray3 = new double[1][9];
      doubleArray3[0] = doubleArray2;
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 4.3466666666666665E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray2, (double[]) null);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 4.3466666666666665E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray0, doubleArray2);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 4.3466666666666665E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 4.3466666666666665E18}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray4.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Double double1 = new Double(1.184154459111628E-8);
      assertNotNull(double1);
      assertEquals(1.184154459111628E-8, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-3158.5445));
      assertNotNull(double2);
      assertEquals((-3158.5445), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double((-3402.7));
      assertNotNull(double3);
      assertEquals((-3402.7), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[3][5];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = null;
      doubleArray2[2] = null;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3979.6265;
      doubleArray0[2] = 2058.871634;
      doubleArray0[4] = 3.834E-20;
      double[][] doubleArray1 = new double[1][6];
      doubleArray1[0] = doubleArray0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {3979.6265, 0.0, 2058.871634, 0.0, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3979.6265, 0.0, 2058.871634, 0.0, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3979.6265, 0.0, 2058.871634, 0.0, 3.834E-20}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 3979.6265;
      doubleArray3[1] = 394.0;
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray3, doubleArray3);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {3979.6265, 394.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertEquals(2, doubleArray3.length);
      assertEquals(2, doubleArray4.length);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 316.17607;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 316.17607;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 71;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {71}, intArray0);
      assertEquals(1, intArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 71, (double) 71, (-4271.9959), 0.0, 0.0, 0.0, 0.0, (double) 71);
      assertEquals(5041.0, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 71;
      doubleArray0[4] = 5041.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 71.0, 5041.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 71.0, 5041.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 71.0, 5041.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3209.75257931);
      doubleArray0[2] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-3,209.753 < 13,040,000,000,000,000,000)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 71;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {71}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 71;
      doubleArray3[1] = (-4271.9959);
      doubleArray3[2] = 0.49999999999999994;
      double double0 = MathArrays.distanceInf(doubleArray3, doubleArray3);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {71.0, (-4271.9959), 0.49999999999999994}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(3, doubleArray3.length);
      
      double double1 = MathArrays.distance1(doubleArray2, doubleArray2);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 3869.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 4.3466666666666665E18;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 4.3466666666666665E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray2 = new Double[7];
      doubleArray2[0] = (Double) 4.3466666666666665E18;
      doubleArray2[1] = (Double) 4.3466666666666665E18;
      doubleArray2[2] = (Double) 4.3466666666666665E18;
      doubleArray2[3] = (Double) 4.3466666666666665E18;
      doubleArray2[4] = (Double) 4.3466666666666665E18;
      Double double0 = new Double((double) doubleArray2[2]);
      assertNotNull(double0);
      assertEquals(4.3466666666666665E18, (double)double0, 0.01);
      assertEquals(7, doubleArray2.length);
      
      doubleArray2[5] = double0;
      doubleArray2[6] = (Double) 4.3466666666666665E18;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection1, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(7, doubleArray2.length);
      
      MathArrays.scaleInPlace((-1357.498018), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {-0.0, (-5.900591384906666E21)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 831L;
      longArray0[1] = 831L;
      longArray0[2] = 831L;
      longArray0[3] = 831L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {831L, 831L, 831L, 831L}, longArray0);
      assertEquals(4, longArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(5.900591384906666E21, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0, (-5.900591384906666E21)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0, (-5.900591384906666E21)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1837;
      intArray0[1] = (-2265);
      intArray0[2] = 23;
      intArray0[3] = 2146484753;
      intArray0[4] = (-2858);
      intArray0[5] = (-4);
      intArray0[6] = 596;
      intArray0[7] = 913;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-4);
      intArray1[1] = (-2858);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 71;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {71}, intArray0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 71;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-3.4028235E38F);
      floatArray0[6] = (float) 71;
      floatArray0[7] = (-576.602F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {71.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-3.4028235E38F), 71.0F, (-576.602F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {71}, intArray0);
      assertArrayEquals(new int[] {71}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 71;
      doubleArray0[2] = 986.338563489305;
      doubleArray0[3] = (double) 71;
      doubleArray0[4] = (double) 71.0F;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 3761.2155653;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3890.337940395557, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 71.0, 986.338563489305, 71.0, 71.0, 0.0, 3761.2155653, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(71.0, (double) 0.0F, 71.0, 1.34217729E8, 8931079.063816868, (double) 71);
      assertEquals(1.0163565372530998E10, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1049.5193, 1286.4250798, 1286.4250798, 5.650007086920087E-9, (double) 0.0F, 5.650007086920087E-9, 8931079.063816868, 2008.4454784696734);
      assertEquals(1.7938935491527412E10, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.7938935491527412E10;
      doubleArray0[2] = 2251.7077464910703;
      doubleArray0[3] = 4.3466666666666665E18;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 1.7938935491527412E10, 2251.7077464910703, 4.3466666666666665E18}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[6];
      intArray0[0] = (-2098);
      intArray0[1] = 449;
      intArray0[2] = (-1121);
      intArray0[3] = 588;
      intArray0[4] = 0;
      intArray0[5] = 2158;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-2098), 449, (-1121), 588, 0, 2158}, intArray0);
      assertEquals(6, intArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 588, (double) 588, (double) 449, (double) 0, (-356.7), (-2071.843571885), (-356.7), 0.0);
      assertEquals(1084770.6020913795, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".2a6m7";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-2142.460075);
      doubleArray0[2] = (-2036.58);
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[1];
      longArray1[0] = 1164L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2036.58);
      doubleArray1[1] = (-3042.0);
      doubleArray1[2] = (-2078.2896180823);
      doubleArray1[3] = (-2351.83);
      doubleArray1[4] = (-2036.58);
      doubleArray1[5] = 1245.35820654;
      doubleArray1[6] = (double) 1164L;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(9775.5977496223, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2142.460075), (-2036.58), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2036.58), (-3042.0), (-2078.2896180823), (-2351.83), (-2036.58), 1245.35820654, 1164.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3209.75257931);
      doubleArray0[2] = 1.304E19;
      long[][] longArray0 = new long[0][4];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, false);
      assertFalse(boolean1);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, (-3209.75257931), 1.304E19}, doubleArray0, 0.01);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long[][] longArray0 = new long[0][8];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(0.0, 3.834E-20, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = (-325.293480948253);
      double double2 = (-1.0);
      double double3 = 309.762334526402;
      double double4 = MathArrays.linearCombination(309.762334526402, 1680.2898113469, 3.834E-20, 1680.2898113469, 1680.2898113469, 0.0);
      assertEquals(520490.4946437434, double4, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 309.762334526402;
      doubleArray2[1] = 520490.4946437434;
      doubleArray2[2] = 309.762334526402;
      doubleArray2[3] = (-280.29225);
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (-325.293480948253);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray2);
      assertTrue(boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {309.762334526402, 520490.4946437434, 309.762334526402, (-280.29225), (-1.0), (-325.293480948253)}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray2.length);
      
      double double5 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double5, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("org.apache.commons.math3.util.MathArrays$2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.org.apache.commons.math3.util.MathArrays$2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 276.047101;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2934.0637);
      doubleArray0[5] = (-1850.33414);
      doubleArray0[6] = 1970.1201510292;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 276.047101, 0.0, 0.0, (-2934.0637), (-1850.33414), 1970.1201510292}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 276.047101, 0.0, 0.0, (-2934.0637), (-1850.33414), 1970.1201510292}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(25, doubleArray2.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 0L;
      doubleArray3[1] = (-1850.33414);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, (-1850.33414)}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(2, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long[][] longArray0 = new long[0][8];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {3.4028235E38F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[][] doubleArray2 = new double[7][4];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 0.0F;
      doubleArray3[1] = (double) 0.0F;
      doubleArray3[2] = (double) 0.0F;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (double) 0.0F;
      doubleArray3[5] = (double) 0.0F;
      doubleArray3[6] = (double) 3.4028235E38F;
      doubleArray3[7] = (double) 3.4028235E38F;
      doubleArray3[8] = (double) 0.0F;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 0.0F;
      doubleArray4[1] = (double) 0.0F;
      doubleArray4[2] = (double) 0.0F;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray3, doubleArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-9.7153186927302);
      double double0 = 276.047101;
      doubleArray0[1] = 276.047101;
      doubleArray0[2] = (-2082.413583764);
      double double1 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2934.0637);
      doubleArray0[5] = (-1850.33414);
      doubleArray0[6] = 1970.1201510292;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-9.7153186927302), 276.047101, (-2082.413583764), 0.0, (-2934.0637), (-1850.33414), 1970.1201510292}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-9.7153186927302), 276.047101, (-2082.413583764), 0.0, (-2934.0637), (-1850.33414), 1970.1201510292}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(25, doubleArray2.length);
      
      MathArrays.scaleInPlace((-9.7153186927302), doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-9.7153186927302), 276.047101, (-2082.413583764), 0.0, (-2934.0637), (-1850.33414), 1970.1201510292}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(25, doubleArray2.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      long[][] longArray1 = new long[9][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      longArray1[8] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(9, longArray1.length);
      
      MathArrays.checkNonNegative(longArray1);
      assertEquals(9, longArray1.length);
      
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 13
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2128.8593);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2128.8593), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2128.8593), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3.4028235E38F;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 3.4028235E38F;
      floatArray1[1] = (-3058.925F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {3.4028235E38F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3.4028235E38F, (-3058.925F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 823.0F;
      floatArray0[1] = (-1.4E-45F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 4151.0F;
      floatArray0[4] = 6146.9634F;
      floatArray0[5] = 0.5F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = 1158.2407F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = Float.NEGATIVE_INFINITY;
      floatArray1[1] = 1158.2407F;
      floatArray1[2] = 1158.2407F;
      floatArray1[3] = 1.0F;
      floatArray1[4] = 1158.2407F;
      floatArray1[5] = 0.5F;
      floatArray1[6] = 1158.2407F;
      floatArray1[7] = (-1.4E-45F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {823.0F, (-1.4E-45F), (-1.0F), 4151.0F, 6146.9634F, 0.5F, 1.0F, 1158.2407F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, 1158.2407F, 1158.2407F, 1.0F, 1158.2407F, 0.5F, 1158.2407F, (-1.4E-45F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[3][9];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-3455.0F);
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-3455.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-3455.0F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-3455.0F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-3455.0F);
      floatArray1[5] = (-3455.0F);
      floatArray1[6] = (-3455.0F);
      floatArray1[7] = (-3455.0F);
      floatArray1[8] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray1, floatArray1);
      assertTrue(boolean1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-3455.0F), 0.0F, (-3455.0F), 0.0F, (-3455.0F), (-3455.0F), (-3455.0F), (-3455.0F), 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3455.0F);
      doubleArray0[1] = (double) (-3455.0F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-3455.0F);
      doubleArray0[4] = (double) (-3455.0F);
      doubleArray0[5] = (double) (-3455.0F);
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) (-3455.0F);
      doubleArray0[8] = (double) (-3455.0F);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3455.0), (-3455.0), 0.0, (-3455.0), (-3455.0), (-3455.0), 0.0, (-3455.0), (-3455.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(17, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3455.0), (-3455.0), 0.0, (-3455.0), (-3455.0), (-3455.0), 0.0, (-3455.0), (-3455.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      assertFalse(boolean2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new float[] {(-3455.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3455.0F), 0.0F, (-3455.0F), 0.0F, (-3455.0F), (-3455.0F), (-3455.0F), (-3455.0F), 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      double double1 = MathArrays.linearCombination(3198.960718822, (double) (-3455.0F), (-3455.0), (double) (-3455.0F), (double) (-3455.0F), (double) (-3455.0F));
      assertEquals(1.282164071646999E7, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean3 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean3);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3455.0), (-3455.0), 0.0, (-3455.0), (-3455.0), (-3455.0), 0.0, (-3455.0), (-3455.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(17, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3455.0), (-3455.0), 0.0, (-3455.0), (-3455.0), (-3455.0), 0.0, (-3455.0), (-3455.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(17, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0.0F;
      doubleArray3[1] = (double) (-3455.0F);
      doubleArray3[2] = (double) (-3455.0F);
      doubleArray3[3] = (double) (-3455.0F);
      doubleArray3[4] = (double) (-3455.0F);
      doubleArray3[5] = (double) (-3455.0F);
      doubleArray3[6] = 3361.0;
      doubleArray3[7] = (double) (-3455.0F);
      double double2 = MathArrays.safeNorm(doubleArray3);
      assertEquals(9105.957994631866, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, (-3455.0), (-3455.0), (-3455.0), (-3455.0), (-3455.0), 3361.0, (-3455.0)}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(8, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays1";
      int[] intArray0 = new int[7];
      intArray0[0] = 35;
      intArray0[1] = 35;
      intArray0[2] = 2124970367;
      intArray0[3] = 10;
      intArray0[4] = 1;
      intArray0[5] = 4144;
      intArray0[6] = (-3559);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {35, 35, 2124970367, 10, 1, 4144, (-3559)}, intArray0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-3559);
      doubleArray0[1] = (double) (-3559);
      doubleArray0[2] = (-802.6461569942473);
      doubleArray0[3] = (double) 35;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 4144;
      doubleArray1[2] = (double) 10;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-2142.460075);
      doubleArray0[2] = (-2036.58);
      doubleArray0[3] = Double.NaN;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (-2036.58);
      doubleArray1[2] = (-1937.24968);
      doubleArray1[3] = (-2036.58);
      doubleArray1[4] = (-2036.58);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      int int1 = 1210;
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, (-2807.6035573));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3402.7);
      double double0 = MathArrays.linearCombination((-3402.7), 0.087, (-3402.7), (-3402.7));
      assertEquals(1.1578071255099999E7, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-325.293480948253), (-280.29225), (-1.0), (-1617.64608488), 1680.2898113469, 3618.0);
      assertEquals(6172083.425223283, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-3402.7), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Double double2 = new Double(0.087);
      assertNotNull(double2);
      assertEquals(0.087, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double((-3402.7));
      assertNotNull(double3);
      assertEquals((-3402.7), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Double double4 = new Double((-515.6993220510593));
      assertNotNull(double4);
      assertEquals((-515.6993220510593), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      Double double5 = new Double((-163.7316624081187));
      assertNotNull(double5);
      assertEquals((-163.7316624081187), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = double2;
      doubleArray1[1] = double3;
      doubleArray1[2] = double4;
      doubleArray1[3] = double2;
      doubleArray1[4] = double4;
      doubleArray1[5] = double5;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.scaleInPlace((-20.0), doubleArray0);
      assertArrayEquals(new double[] {68054.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 831L;
      longArray0[1] = (-1258L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,258 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2128.8593);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2128.8593), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2128.8593), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = (-3058.925F);
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = 3.4028235E38F;
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {3.4028235E38F, 3.4028235E38F, (-3058.925F), 3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4532041.91919649, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2128.8593), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      
      int int0 = 18;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 32, 18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 4.3466666666666665E18;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 4.3466666666666665E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, true);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 4.3466666666666665E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long[][] longArray0 = new long[0][8];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays1";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays1";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays1";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays1";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long[][] longArray0 = new long[0][8];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      Double double0 = new Double(3.4028235E38F);
      assertNotNull(double0);
      assertEquals(3.4028234663852886E38, (double)double0, 0.01);
      
      Double double1 = new Double(0.0F);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(227.44899);
      assertNotNull(double2);
      assertEquals(227.44899, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(1.0);
      assertNotNull(double3);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray2 = new Double[8];
      doubleArray2[0] = double1;
      doubleArray2[1] = double1;
      doubleArray2[2] = (Double) 0.0;
      Double double4 = new Double(3.4028235E38F);
      assertNotNull(double4);
      assertEquals(3.4028234663852886E38, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      
      doubleArray2[3] = double4;
      doubleArray2[4] = double0;
      doubleArray2[5] = double1;
      doubleArray2[7] = (Double) 0.0;
      doubleArray2[7] = double3;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, doubleArray2.length);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new float[] {3.4028235E38F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1741.238);
      doubleArray0[1] = (-2351.83);
      doubleArray0[2] = 156.0;
      doubleArray0[3] = (-2078.2896180823);
      doubleArray0[4] = 4448.16156;
      doubleArray0[5] = 0.0;
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) 4448.16156;
      doubleArray1[1] = (Double) (-2351.83);
      doubleArray1[2] = (Double) (-1741.238);
      doubleArray1[3] = (Double) (-1741.238);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, doubleArray1.length);
      
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-3402.7), 0.087, (-3402.7), (-3402.7));
      assertEquals(1.1578071255099999E7, double0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1226L);
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-675L);
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 2147483647L;
      longArray0[7] = (-4588L);
      longArray0[8] = (-675L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,226 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2881.863);
      doubleArray0[1] = 2.091011268332817E7;
      doubleArray0[2] = 3361.0;
      doubleArray0[3] = 3402.7;
      doubleArray0[4] = 1.801439878921376E16;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 6.283185307179586;
      doubleArray1[1] = 3402.7;
      doubleArray1[2] = (-2881.863);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2881.863), 2.091011268332817E7, 3361.0, 3402.7, 1.801439878921376E16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.283185307179586, 3402.7, (-2881.863)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.801439878921376E16;
      doubleArray2[1] = 6.283185307179586;
      doubleArray2[2] = (-2881.863);
      doubleArray2[3] = 6.283185307179586;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2881.863), 2.091011268332817E7, 3361.0, 3402.7, 1.801439878921376E16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.801439878921376E16, 6.283185307179586, (-2881.863), 6.283185307179586}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-2142.460075);
      doubleArray0[2] = (-2036.58);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1937.24968);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2142.460075), (-2036.58), Double.NaN, 0.0, 0.0, (-1937.24968)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2142.460075), (-2036.58), Double.NaN, 0.0, 0.0, (-1937.24968)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3.4028235E38F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 3.4028235E38F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2142.460075), (-2036.58), Double.NaN, 0.0, 0.0, (-1937.24968)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      int int0 = (-1018);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-1018), (-1018));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {3.4028235E38F, 0.0F, 0.0F, 3.4028235E38F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(324.5724, (-2128.8593), (double) 3.4028235E38F, 0.0);
      assertEquals((-690968.9722633201), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new float[] {3.4028235E38F, 0.0F, 0.0F, 3.4028235E38F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3.4028235E38F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 3.4028235E38F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3402.7);
      double double0 = MathArrays.linearCombination((-3402.7), 0.087, (-3402.7), (-3402.7));
      assertEquals(1.1578071255099999E7, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-3402.7), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,402.7 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1741.238);
      doubleArray0[1] = (-2351.83);
      doubleArray0[2] = 156.0;
      doubleArray0[3] = (-2078.2896180823);
      Double double0 = new Double((-1864.0));
      assertNotNull(double0);
      assertEquals((-1864.0), (double)double0, 0.01);
      
      Double double1 = new Double(156.0);
      assertNotNull(double1);
      assertEquals(156.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-2351.83));
      assertNotNull(double2);
      assertEquals((-2351.83), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(693.87357128309);
      assertNotNull(double3);
      assertEquals(693.87357128309, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      Double double4 = new Double((-2351.83));
      assertNotNull(double4);
      assertEquals((-2351.83), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      Double double5 = new Double(Double.NaN);
      assertNotNull(double5);
      assertEquals(Double.NaN, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3979.6265;
      doubleArray0[1] = 2058.871634;
      doubleArray0[2] = 250.7659196325;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-576.602F);
      floatArray0[1] = (-576.602F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-3.4028235E38F);
      floatArray0[4] = (-576.602F);
      floatArray0[5] = (-3.4028235E38F);
      floatArray0[6] = (-3.4028235E38F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-576.602F), (-576.602F), 0.0F, (-3.4028235E38F), (-576.602F), (-3.4028235E38F), (-3.4028235E38F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-4588L);
      longArray0[1] = 589L;
      longArray0[2] = (-1L);
      longArray0[3] = 2147483647L;
      longArray0[4] = (-1226L);
      longArray0[5] = 0L;
      longArray0[6] = (-675L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,588 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long[][] longArray0 = new long[0][8];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {3.4028235E38F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[7][4];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2787.56F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2787.56F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 2787.56F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2787.56005859375, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 2787.56005859375, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 2787.56005859375, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 7770491.080267191, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,787.56 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3402.7);
      double double0 = MathArrays.linearCombination((-3402.7), 0.087, (-3402.7), (-3402.7));
      assertEquals(1.1578071255099999E7, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-325.293480948253), (-280.29225), (-1.0), (-1617.64608488), 1680.2898113469, 3618.0);
      assertEquals(6172083.425223283, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-3402.7), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3979.6265;
      doubleArray0[1] = 2058.871634;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 8931079.063816868);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3979.6265, 2058.871634, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5885960.072727052, 3045118.991089818, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3979.6265, 2058.871634, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5885960.072727052, 3045118.991089818, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3.43338934259355E-8);
      doubleArray0[1] = 1406.7580684;
      doubleArray0[2] = 2672.202447140821;
      doubleArray0[3] = 1725.930759;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3.43338934259355E-8), 1406.7580684, 2672.202447140821, 1725.930759}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3.43338934259355E-8), 1406.7580684, 2672.202447140821, 1725.930759}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3.43338934259355E-8), 1406.7580684, 2672.202447140821, 1725.930759}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3.43338934259355E-8), 1406.7580684, 2672.202447140821, 1725.930759}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 2672.202447140821;
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray2);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 2672.202447140821}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray3, 1.801439878921376E16);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 2672.202447140821}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.801439878921376E16}, doubleArray4, 0.01);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertEquals(2, doubleArray4.length);
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = 4.3466666666666665E18;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 4.3466666666666665E18;
      doubleArray0[1] = 4.3466666666666665E18;
      doubleArray0[2] = 4.3466666666666665E18;
      doubleArray0[3] = 4.3466666666666665E18;
      doubleArray0[4] = 4.3466666666666665E18;
      double double1 = (-687.0);
      doubleArray0[5] = (-687.0);
      doubleArray0[6] = 4.3466666666666665E18;
      double double2 = 268.6;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 268.6);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4.3466666666666665E18, 4.3466666666666665E18, 4.3466666666666665E18, 4.3466666666666665E18, 4.3466666666666665E18, (-687.0), 4.3466666666666665E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {44.76666666666667, 44.76666666666667, 44.76666666666667, 44.76666666666667, 44.76666666666667, (-7.0754677914110436E-15), 44.76666666666667}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertArrayEquals(new double[] {4.3466666666666665E18, 4.3466666666666665E18, 4.3466666666666665E18, 4.3466666666666665E18, 4.3466666666666665E18, (-687.0), 4.3466666666666665E18}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(7, doubleArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -687 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1864);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1864)}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) (-1864);
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = 3.834E-20;
      doubleArray3[3] = (double) 0;
      doubleArray1[4] = doubleArray3;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-1864);
      Integer integer0 = new Integer((-1864));
      assertNotNull(integer0);
      assertEquals((-1864), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (int)integer0;
      doubleArray0[2] = (double) (int)integer0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1864.0));
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-1864.0), (-1864.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-932.0), (-932.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, (-1864.0), (-1864.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, (-1864.0), (-1864.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-932.0), (-932.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-1864.0), (-1864.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-932.0), (-932.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("(u<hbQ%Op{C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.(u<hbQ%Op{C
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1741.238);
      doubleArray0[1] = (-2351.83);
      doubleArray0[2] = 156.0;
      doubleArray0[3] = (-2078.2896180823);
      doubleArray0[4] = 4448.16156;
      doubleArray0[5] = 0.0;
      long[][] longArray0 = new long[0][7];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1741.238), (-2351.83), 156.0, (-2078.2896180823), 4448.16156, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3979.6265;
      doubleArray0[1] = 2058.871634;
      doubleArray0[2] = 250.7659196325;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][6];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {3979.6265, 2058.871634, 250.7659196325, 0.0, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2058.871634;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 0.6409968137741089;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 2058.871634;
      doubleArray2[5] = 3.834E-20;
      doubleArray2[6] = 3979.6265;
      doubleArray2[7] = 3979.6265;
      doubleArray2[8] = 3.834E-20;
      MathArrays.scaleInPlace(1.0, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2058.871634, 1.0, 0.6409968137741089, 1.0, 2058.871634, 3.834E-20, 3979.6265, 3979.6265, 3.834E-20}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(9, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(286);
      assertNotNull(integer0);
      assertEquals(286, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(286);
      assertNotNull(integer1);
      assertEquals(286, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertNotNull(integer2);
      assertEquals(286, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(8, integerArray0.length);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2303));
      assertNotNull(integer3);
      assertEquals((-2303), (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      assertNotNull(integer4);
      assertEquals((-2303), (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(8, integerArray0.length);
      
      integerArray0[4] = integer1;
      Integer integer5 = new Integer(14);
      assertNotNull(integer5);
      assertEquals(14, (int)integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(47);
      assertNotNull(integer6);
      assertEquals(47, (int)integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(2224);
      assertNotNull(integer7);
      assertEquals(2224, (int)integer7);
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      
      integerArray0[7] = integer7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, integerArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      MathArrays.scaleInPlace(0.9921976327896118, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 286);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2022.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2022.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, (-2022.0F), 0.0F, 0.0F, (-2022.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-1018), (-1018));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 3979.6265;
      doubleArray0[0] = 3979.6265;
      double double1 = 2058.871634;
      doubleArray0[1] = 2058.871634;
      double double2 = 250.7659196325;
      doubleArray0[2] = 250.7659196325;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][6];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {3979.6265, 2058.871634, 250.7659196325, 0.0, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 9;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-3209.75257931);
      doubleArray0[2] = 1.304E19;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-3209.75257931), 1.304E19}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-9.7153186927302);
      doubleArray0[1] = 276.047101;
      doubleArray0[2] = (-2082.413583764);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2934.0637);
      doubleArray0[5] = (-1850.33414);
      doubleArray0[6] = 1970.1201510292;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-9.7153186927302), 276.047101, (-2082.413583764), 0.0, (-2934.0637), (-1850.33414), 1970.1201510292}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-9.7153186927302), 276.047101, (-2082.413583764), 0.0, (-2934.0637), (-1850.33414), 1970.1201510292}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(25, doubleArray2.length);
      
      MathArrays.scaleInPlace((-9.7153186927302), doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-9.7153186927302), 276.047101, (-2082.413583764), 0.0, (-2934.0637), (-1850.33414), 1970.1201510292}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(25, doubleArray2.length);
      
      Double double0 = new Double((-276.431));
      assertNotNull(double0);
      assertEquals((-276.431), (double)double0, 0.01);
      
      Double double1 = new Double((-2934.0637));
      assertNotNull(double1);
      assertEquals((-2934.0637), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double((-9.7153186927302));
      assertNotNull(double3);
      assertEquals((-9.7153186927302), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      Double double4 = new Double(276.047101);
      assertNotNull(double4);
      assertEquals(276.047101, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray3 = new Double[8];
      doubleArray3[0] = (Double) 1970.1201510292;
      doubleArray3[1] = double0;
      doubleArray3[2] = (Double) 276.047101;
      doubleArray3[3] = double2;
      doubleArray3[4] = (Double) (-9.7153186927302);
      doubleArray3[5] = (Double) 0.0;
      doubleArray3[6] = (Double) (-1850.33414);
      doubleArray3[7] = double0;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-9.7153186927302);
      doubleArray0[1] = 276.047101;
      doubleArray0[2] = (-2082.413583764);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2934.0637);
      doubleArray0[5] = (-1850.33414);
      doubleArray0[6] = 1970.1201510292;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-9.7153186927302), 276.047101, (-2082.413583764), 0.0, (-2934.0637), (-1850.33414), 1970.1201510292}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 1722);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-9.7153186927302), 276.047101, (-2082.413583764), 0.0, (-2934.0637), (-1850.33414), 1970.1201510292}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(1722, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale(0.0, doubleArray1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-9.7153186927302), 276.047101, (-2082.413583764), 0.0, (-2934.0637), (-1850.33414), 1970.1201510292}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(13, doubleArray3.length);
      
      double double0 = MathArrays.linearCombination((-1575.675407443254), 1.304E19, (-2082.413583764), 1762.8905951, 1535.2, (-1141.691832734));
      assertEquals((-2.0546807313060036E22), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-9.7153186927302);
      doubleArray0[1] = 276.047101;
      doubleArray0[2] = (-2082.413583764);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2934.0637);
      doubleArray0[5] = (-1850.33414);
      doubleArray0[6] = 1970.1201510292;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-9.7153186927302), 276.047101, (-2082.413583764), 0.0, (-2934.0637), (-1850.33414), 1970.1201510292}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-9.7153186927302), 276.047101, (-2082.413583764), 0.0, (-2934.0637), (-1850.33414), 1970.1201510292}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(25, doubleArray2.length);
      
      MathArrays.scaleInPlace((-9.7153186927302), doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-9.7153186927302), 276.047101, (-2082.413583764), 0.0, (-2934.0637), (-1850.33414), 1970.1201510292}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(25, doubleArray2.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      long[][] longArray1 = new long[9][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      longArray1[8] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(9, longArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-9.7153186927302), 276.047101, (-2082.413583764), 0.0, (-2934.0637), (-1850.33414), 1970.1201510292}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(25, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1668.25674883383);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.608E18;
      doubleArray0[3] = 1359.494333314317;
      doubleArray0[4] = (-1445.3);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.608E18;
      doubleArray1[1] = (-1668.25674883383);
      doubleArray1[2] = 1359.494333314317;
      doubleArray1[3] = (-276.431);
      doubleArray1[4] = 1359.494333314317;
      doubleArray1[5] = 1359.494333314317;
      doubleArray1[6] = (-1445.3);
      doubleArray1[7] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1668.25674883383), 0.0, 2.608E18, 1359.494333314317, (-1445.3)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.608E18, (-1668.25674883383), 1359.494333314317, (-276.431), 1359.494333314317, 1359.494333314317, (-1445.3), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1892.9624F);
      floatArray0[1] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1892.9624F), 1.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1.0F;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1892.9624F), 1.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[5][8];
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 1.0F;
      doubleArray3[2] = (double) 1.0F;
      doubleArray3[3] = (double) (-1892.9624F);
      doubleArray3[4] = (double) 1.0F;
      doubleArray3[5] = (double) (-1892.9624F);
      doubleArray3[6] = (double) 1.0F;
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1864);
      int int0 = new Integer((-1864));
      assertEquals((-1864), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1864);
      doubleArray0[1] = (double) (-1864);
      doubleArray0[2] = (double) (-1864);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1864.0));
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1864.0), (-1864.0), (-1864.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-621.3333333333334), (-621.3333333333334), (-621.3333333333334)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1864.0), (-1864.0), (-1864.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -621.333 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 3.834E-20;
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      double double1 = 0.0;
      doubleArray0[2] = 0.0;
      double double2 = (-3039.662537361);
      doubleArray0[3] = (-3039.662537361);
      doubleArray0[4] = 107.0;
      double double3 = 1133.333;
      doubleArray0[5] = 1133.333;
      doubleArray0[6] = 130.2206324515;
      doubleArray0[7] = (-2.356194490192345);
      double double4 = 1.0;
      doubleArray0[8] = 1.0;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3979.6265;
      doubleArray0[1] = 2058.871634;
      doubleArray0[2] = 250.7659196325;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3979.6265, 2058.871634, 250.7659196325, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 0;
      intArray0[2] = 3213;
      intArray0[3] = (-5030);
      intArray0[4] = 0;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[6][7];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 3.834E-20;
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = 3.834E-20;
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = 3.834E-20;
      doubleArray1[5] = 3.834E-20;
      doubleArray0[2] = doubleArray1;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long[][] longArray0 = new long[7][9];
      long[] longArray1 = new long[8];
      longArray1[0] = 0L;
      longArray1[1] = 1L;
      longArray1[2] = 100L;
      longArray1[3] = 0L;
      longArray1[4] = 0L;
      longArray1[5] = 589L;
      longArray1[6] = 10000L;
      longArray1[7] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 10000L;
      longArray2[1] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 100L;
      longArray3[1] = 0L;
      longArray3[2] = 100L;
      longArray3[3] = 0L;
      longArray3[4] = 1L;
      longArray3[5] = 1L;
      longArray3[6] = 1L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3402.7);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[6][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 250.7659196325;
      doubleArray2[3] = 3.834E-20;
      doubleArray2[4] = 3.834E-20;
      doubleArray2[5] = 3.834E-20;
      doubleArray1[5] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(706.533980632577, (-896.03), (-210.65744542321528), (-896.03));
      assertEquals((-444320.2518436444), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-3209.75257931);
      doubleArray0[2] = 1.304E19;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-3209.75257931), 1.304E19}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      double double0 = MathArrays.linearCombination(1.0, 3361.0, (-986.668778397), (-986.668778397), 3361.0, 2.17333333333333325E18, (-986.668778397), 3361.0);
      assertEquals(7.304573333333331E21, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.17333333333333325E18;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2.17333333333333325E18}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-1741.238);
      doubleArray0[0] = (-1741.238);
      doubleArray0[1] = (-2351.83);
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-878);
      intArray0[1] = 0;
      int int0 = 1;
      intArray0[2] = 1;
      int int1 = (-1173);
      intArray0[3] = (-1173);
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 1;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 295;
      intArray0[1] = 0;
      intArray0[2] = (-645);
      intArray0[3] = 2813;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {295, 0, (-645), 2813}, intArray0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-3820.830468008836);
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 1.0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      doubleArray0[7] = null;
      doubleArray0[8] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-184.18551611322), 1169.08608554, (-1175.05665480344), (-379.54444573838066), (-3.141592653589793), (-379.54444573838066), (-3.141592653589793));
      assertEquals((-1371357.636766996), double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3291);
      intArray0[1] = 815;
      intArray0[2] = 1;
      intArray0[3] = 2616;
      intArray0[4] = 467;
      intArray0[5] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-3291), 815, 1, 2616, 467, 1}, intArray0);
      assertArrayEquals(new int[] {(-3291), 815, 1, 2616, 467, 1}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-379.54444573838066);
      doubleArray0[2] = (-379.54444573838066);
      doubleArray0[3] = (double) 815;
      doubleArray0[4] = (double) 467;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 815;
      doubleArray0[7] = (double) 2616;
      doubleArray0[8] = (double) 467;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, Double.NaN, 0.0, 3.32, Double.NaN, (-530.169), (-250.035595));
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3.32;
      doubleArray0[2] = (-250.035595);
      doubleArray0[3] = (-581.759960035);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 3.32;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, 3.32, (-250.035595), (-581.759960035), Double.NaN, 3.32, Double.NaN, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, Double.NaN, 0.0, Double.NaN, 0.0, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2078.2896180823);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2078.2896180823)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, (-2078.2896180823)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, (-2078.2896180823)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, true, false);
      assertTrue(boolean2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, (-2078.2896180823)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2988.491101512077);
      doubleArray0[1] = (-2988.491101512077);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2988.491101512077), (-2988.491101512077), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,988.491 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2787.56F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2787.56F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 2787.56F;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 2787.56F;
      doubleArray0[4] = (double) 2787.56F;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 2787.56005859375, 0.0, 2787.56005859375, 2787.56005859375}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2988.491101512077);
      doubleArray0[1] = (-2988.491101512077);
      double double0 = 2963.667936;
      doubleArray0[2] = 2963.667936;
      double[] doubleArray1 = MathArrays.scale((-2988.491101512077), doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2988.491101512077), (-2988.491101512077), 2963.667936}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8931079.063816868, 8931079.063816868, (-8856895.254572663)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2988.491101512077), (-2988.491101512077), 2963.667936}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8931079.063816868, 8931079.063816868, (-8856895.254572663)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("NUMBER_TOO_LARGE_BOUND_EXCLUDED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.NUMBER_TOO_LARGE_BOUND_EXCLUDED
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2128.8593);
      double double0 = 20.0;
      doubleArray0[1] = 20.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-2,128.859 <= 20)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2988.491101512077);
      doubleArray0[1] = (-2988.491101512077);
      doubleArray0[2] = 2963.667936;
      double[] doubleArray1 = MathArrays.scale((-2988.491101512077), doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2988.491101512077), (-2988.491101512077), 2963.667936}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8931079.063816868, 8931079.063816868, (-8856895.254572663)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2988.491101512077), (-2988.491101512077), 2963.667936}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8931079.063816868, 8931079.063816868, (-8856895.254572663)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.scale(2963.667936, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2988.491101512077), (-2988.491101512077), 2963.667936}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8931079.063816868, 8931079.063816868, (-8856895.254572663)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.646875265531495E10, 2.646875265531495E10, (-2.624889647848756E10)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1267.49117711992);
      doubleArray0[1] = 1805.94473;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 300.703411448;
      double[][] doubleArray1 = new double[6][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1267.49117711992), 1.304E19, 1805.94473, 300.703411448, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-3402.7);
      doubleArray0[0] = (-3402.7);
      double double1 = 2392.108737;
      doubleArray0[1] = 2392.108737;
      doubleArray0[2] = 1899.8845185159114;
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4572.757667242839, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {(-3402.7), 2392.108737, 1899.8845185159114}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3402.7), 2392.108737, 1899.8845185159114}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.157836729E7, (-1.6279256798779799E7), (-7207289.892676447), 9089460.7120659, 3609561.1836964367}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3361.0;
      doubleArray0[5] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.3421772904208207E8, double0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, 0.0, 0.0, 3361.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.34217729E8, 0.0, 0.0, 0.0, 3361.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("permutation k ({0}) must be positive");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.permutation k ({0}) must be positive
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-276.431));
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-276.431);
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = (-931.04557041237);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-276.431);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-276.431);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -276.431 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 999.621;
      doubleArray0[1] = 1286.0;
      doubleArray0[2] = 3392.2246912862;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1383.0);
      doubleArray0[6] = 1779.9548;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 2770.58;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 206);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {999.621, 1286.0, 3392.2246912862, 3.834E-20, 0.0, (-1383.0), 1779.9548, 0.0, 2770.58}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(206, doubleArray1.length);
      
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 206 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      long[][] longArray0 = new long[7][9];
      long[] longArray1 = new long[8];
      longArray1[0] = 0L;
      longArray1[1] = 1L;
      longArray1[2] = 100L;
      longArray1[3] = 0L;
      longArray1[4] = 0L;
      longArray1[5] = 589L;
      longArray1[6] = 10000L;
      longArray1[7] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 10000L;
      longArray2[1] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 100L;
      longArray3[1] = 0L;
      longArray3[2] = 100L;
      longArray3[3] = 0L;
      longArray3[4] = 1L;
      longArray3[5] = 1L;
      longArray3[6] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 1L;
      longArray4[1] = 589L;
      longArray4[2] = 100L;
      longArray4[3] = 0L;
      longArray4[4] = 1L;
      longArray4[5] = 0L;
      longArray4[6] = (-608L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 0L;
      longArray5[1] = 10000L;
      longArray5[2] = 1L;
      longArray5[3] = 0L;
      longArray5[4] = 100L;
      longArray5[5] = (-608L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = 10000L;
      longArray6[1] = 0L;
      longArray6[2] = 10000L;
      longArray6[3] = 0L;
      longArray6[4] = 1L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[6];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = 1463L;
      longArray7[1] = 0L;
      longArray7[2] = 2625L;
      longArray7[3] = 0L;
      longArray7[4] = 0L;
      longArray7[5] = (-1910L);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -608 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2787.56F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2787.56F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 2787.56F;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 2787.56F;
      doubleArray0[4] = (double) 2787.56F;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,787.56 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2279.51528025457), 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-280.29225), 1457.5575803, 0.0, 1680.2898113469, (-4426.9446), 0.0);
      assertEquals((-408542.0936868427), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = (-408542.0936868427);
      doubleArray0[2] = (-408542.0936868427);
      doubleArray0[3] = (-408542.0936868427);
      doubleArray0[4] = (-4426.9446);
      doubleArray0[5] = 1457.5575803;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.0E-5, (-408542.0936868427), (-408542.0936868427), (-408542.0936868427), (-4426.9446), 1457.5575803}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {1.0E-5, (-408542.0936868427), (-408542.0936868427), (-408542.0936868427), (-4426.9446), 1457.5575803}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("(u<hbQ%Op{C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.(u<hbQ%Op{C
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.141592653589793, 3.141592653589793, 729.785697662, 0.0, 654.925130108, 0.0, 3.141592653589793, 3.141592653589793);
      assertEquals(19.739208802178716, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 19.739208802178716;
      doubleArray0[2] = 729.785697662;
      doubleArray0[3] = 3.141592653589793;
      doubleArray0[4] = 19.739208802178716;
      doubleArray0[5] = 3.141592653589793;
      doubleArray0[6] = 729.785697662;
      doubleArray0[7] = 19.739208802178716;
      doubleArray0[8] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3.141592653589793, 19.739208802178716, 729.785697662, 3.141592653589793, 19.739208802178716, 3.141592653589793, 729.785697662, 19.739208802178716, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-345));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[][] longArray0 = new long[0][8];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3243.6410802;
      doubleArray0[2] = 98.716;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (-2848.18941315596);
      doubleArray0[5] = 2769.071358943312;
      doubleArray0[6] = -0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 3243.6410802, 98.716, Double.POSITIVE_INFINITY, (-2848.18941315596), 2769.071358943312, -0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-4900);
      intArray0[2] = 38;
      intArray0[3] = (-1123);
      intArray0[4] = 1;
      intArray0[5] = (-2682);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, (-4900), 38, (-1123), 1, (-2682)}, intArray0);
      assertEquals(6, intArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1123);
      floatArray0[1] = (float) (-2682);
      floatArray0[2] = (float) 38;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 38;
      floatArray0[6] = 2143.3F;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) (-4900);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1123.0F), (-2682.0F), 38.0F, 0.0F, 0.0F, 38.0F, 2143.3F, 0.0F, (-4900.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 991.0F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = (-1988.93F);
      floatArray0[3] = (-1764.47F);
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {991.0F, 3.4028235E38F, (-1988.93F), (-1764.47F), 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("gHv1d4hKIkNp.}Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.gHv1d4hKIkNp.}Z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double double0 = MathArrays.linearCombination(611.810390516544, Double.NaN, (-1139.8666542449116), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 71;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.linearCombination((double) 71, (double) 71, (-4271.9959), 0.0, 0.0, 0.0, 0.0, (double) 71);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 71;
      doubleArray0[4] = 5041.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      Double double0 = new Double(0.0);
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = 12;
      intArray0[2] = 2146912845;
      intArray0[3] = 134217729;
      intArray0[4] = 1;
      intArray0[5] = 2;
      intArray0[6] = 2405;
      intArray0[7] = 2146780246;
      MathArrays.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 3535;
      intArray0[0] = 3535;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 3535;
      intArray0[0] = 3535;
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2128.8593);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3.4028235E38F;
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-3058.925F);
      floatArray1[1] = (-3058.925F);
      floatArray1[2] = (-3058.925F);
      floatArray1[3] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray1, floatArray1);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 1553, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      int int1 = 1210;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 1210);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1864);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1864);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      long[][] longArray0 = new long[7][3];
      long[] longArray1 = new long[8];
      longArray1[0] = 0L;
      longArray1[1] = (-2343L);
      longArray1[2] = (-1569L);
      longArray1[3] = 1L;
      longArray1[4] = 1426L;
      longArray1[5] = 6018L;
      longArray1[6] = 4503599627370496L;
      longArray1[7] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (-2343L);
      longArray2[1] = 6018L;
      longArray2[2] = 1L;
      longArray2[3] = 1L;
      longArray2[4] = (-1569L);
      longArray2[5] = 1426L;
      longArray2[6] = 1L;
      longArray2[7] = 1426L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      longArray4[0] = 1L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      longArray5[0] = (-1569L);
      longArray5[1] = 6018L;
      longArray5[2] = 1L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      longArray0[5] = longArray6;
      long[] longArray7 = new long[8];
      longArray7[0] = 0L;
      longArray7[1] = 1L;
      longArray7[2] = 1426L;
      longArray7[3] = (-2343L);
      longArray7[4] = 0L;
      longArray7[5] = 6018L;
      longArray7[6] = 863L;
      longArray7[7] = 1L;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,343 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double double0 = (-1673.56124960882);
      MathArrays.linearCombination((-2589.3787), (-2589.3787), 0.0, (-1673.56124960882), 827.2581, (-1930.0788), 0.0, (-1673.56124960882));
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 626.7405187259751;
      doubleArray0[1] = 626.7405187259751;
      doubleArray0[2] = 626.7405187259751;
      doubleArray0[3] = 626.7405187259751;
      doubleArray0[4] = 626.7405187259751;
      doubleArray0[5] = 626.7405187259751;
      MathArrays.scaleInPlace(626.7405187259751, doubleArray0);
      MathArrays.scaleInPlace(1.5429472930334396E11, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 134217729;
      intArray0[1] = 106;
      intArray0[2] = 1357;
      int int0 = (-118);
      intArray0[3] = (-118);
      int[] intArray1 = MathArrays.copyOf(intArray0, 1357);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2128.8593);
      doubleArray0[1] = 20.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection.values();
      long[][] longArray0 = new long[8][3];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = (-2898L);
      longArray3[1] = (-3135L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = (-2898L);
      longArray4[1] = (-2898L);
      longArray4[2] = (-3135L);
      longArray4[3] = (-3135L);
      longArray4[4] = (-2898L);
      longArray4[5] = (-3135L);
      longArray4[6] = (-3135L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      longArray5[0] = (-2898L);
      longArray5[1] = (-2898L);
      longArray5[2] = (-3135L);
      longArray5[3] = (-2898L);
      longArray5[4] = (-2898L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      longArray6[0] = (-2898L);
      longArray6[1] = (-2898L);
      longArray6[2] = (-3135L);
      longArray6[3] = (-2898L);
      longArray6[4] = (-3135L);
      longArray6[5] = (-2898L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[6];
      longArray7[0] = (-3135L);
      longArray7[1] = (-3135L);
      longArray7[2] = (-3135L);
      longArray7[3] = (-2898L);
      longArray7[4] = (-2898L);
      longArray7[5] = (-3135L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[1];
      longArray8[0] = (-2898L);
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-3209.75257931);
      double double0 = 1.304E19;
      doubleArray0[2] = 1.304E19;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-661.521502061438);
      doubleArray0[1] = 2016.089989947;
      doubleArray0[2] = 1788.47038;
      doubleArray0[3] = (-626.2893626063219);
      doubleArray0[4] = 1.0E-5;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1.0E-5, 0.0, (-1.0), (-626.2893626063219), (-661.521502061438), 0.0, 2016.089989947, 0.0, 1788.47038}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2954.8;
      doubleArray0[1] = (-2142.460075);
      doubleArray0[2] = (-2036.58);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1937.24968);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3.4028235E38F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MathArrays.OrderDirection.values();
      int[] intArray0 = new int[2];
      intArray0[0] = 2654;
      int int0 = 107;
      intArray0[1] = 107;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 107;
      doubleArray0[2] = (double) 107;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (107 >= 107)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1741.238);
      double double0 = (-2351.83);
      doubleArray0[1] = (-2351.83);
      double double1 = 156.0;
      doubleArray0[2] = 156.0;
      double double2 = (-2078.2896180823);
      doubleArray0[3] = (-2078.2896180823);
      double double3 = 4448.16156;
      doubleArray0[4] = 4448.16156;
      double double4 = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      MathArrays.scaleInPlace((-2078.2896180823), doubleArray1);
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
