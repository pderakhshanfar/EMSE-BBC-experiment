/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 17:17:39 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3149.796);
      doubleArray1[1] = (-4270.551168);
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = 6.283185307179586;
      doubleArray1[4] = 1.3040000000134207E19;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = (-378.13);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(1.8441344853440057E19, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3149.796), (-4270.551168), 1.304E19, 6.283185307179586, 1.3040000000134207E19, 1.0, (-378.13)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3149.796), (-4270.551168), 1.304E19, 6.283185307179586, 1.3040000000134207E19, 1.0, (-378.13)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1852.6776549555;
      doubleArray0[1] = 2550.494346096852;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (-2435.81779389708);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-531.56142416);
      doubleArray0[2] = 2036.0;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 920.0;
      doubleArray0[5] = (-2255.665);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, (-531.56142416), 2036.0, Double.POSITIVE_INFINITY, 920.0, (-2255.665)}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.304E19, (-531.56142416), 2036.0, Double.POSITIVE_INFINITY, 920.0, (-2255.665)}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {1.304E19, (-531.56142416), 2036.0, Double.POSITIVE_INFINITY, 920.0, (-2255.665)}, doubleArray0, 0.01);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertArrayEquals(new double[] {1.304E19, (-531.56142416), 2036.0, Double.POSITIVE_INFINITY, 920.0, (-2255.665)}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.625;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.625}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1240);
      assertEquals(1, doubleArray0.length);
      assertEquals(1240, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.625}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1547.4442F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-547.88F);
      floatArray0[4] = 1259.08F;
      floatArray0[5] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1547.4442F), 0.0F, 0.0F, (-547.88F), 1259.08F, Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-1547.4442F);
      doubleArray0[2] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) (-1547.4442F);
      doubleArray0[4] = (double) (-547.88F);
      doubleArray0[5] = 1417.69;
      doubleArray0[6] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[7] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[8] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 2394583.595031038, Double.POSITIVE_INFINITY, 2394583.595031038, 300172.49975039065, 2009844.9361, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1547.4442138671875), Double.NEGATIVE_INFINITY, (-1547.4442138671875), (-547.8800048828125), 1417.69, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 2394583.595031038, Double.POSITIVE_INFINITY, 2394583.595031038, 300172.49975039065, 2009844.9361, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2396131.039244905), Double.NEGATIVE_INFINITY, (-2396131.039244905), (-300720.37975527346), (-2008427.2461), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, (-1547.4442138671875), Double.NEGATIVE_INFINITY, (-1547.4442138671875), (-547.8800048828125), 1417.69, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, (-1547.4442138671875), Double.NEGATIVE_INFINITY, (-1547.4442138671875), (-547.8800048828125), 1417.69, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[6][3];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray1;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (double) 0.0F;
      doubleArray4[1] = (double) (-547.88F);
      doubleArray4[2] = 1417.69;
      doubleArray3[3] = doubleArray4;
      doubleArray3[4] = doubleArray0;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (double) 1259.08F;
      doubleArray5[1] = (double) (-1547.4442F);
      doubleArray5[2] = (double) (-1547.4442F);
      doubleArray5[3] = (double) 0.0F;
      doubleArray5[4] = (double) Float.NEGATIVE_INFINITY;
      doubleArray5[5] = (double) (-1547.4442F);
      doubleArray5[6] = 2.17333333333333325E18;
      doubleArray5[7] = (-365.34780180452);
      doubleArray3[5] = doubleArray5;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = null;
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 169);
      assertEquals(0, doubleArray0.length);
      assertEquals(169, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.8845443586225003E7;
      doubleArray1[1] = 3.26000181689184E18;
      doubleArray1[2] = (-3826.9008);
      doubleArray1[3] = 6.283185307179586;
      doubleArray1[4] = (-3826.9008);
      doubleArray1[5] = 2.608E18;
      doubleArray1[6] = 2.8845443586225003E7;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(4.1748384215605396E18, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.8845443586225003E7, 3.26000181689184E18, (-3826.9008), 6.283185307179586, (-3826.9008), 2.608E18, 2.8845443586225003E7}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[7][5];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1307);
      assertEquals(0, doubleArray0.length);
      assertEquals(1307, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1307, doubleArray1.length);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1232.0F);
      floatArray0[1] = 32.92973F;
      floatArray0[2] = 361.79947F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1232.0F), 32.92973F, 361.79947F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 144, 144);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1587.554673423759);
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1587.554673423759), Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-3175.109346847518), Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.normalizeArray(doubleArray1, (-200.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-2156.057));
      assertEquals((-2156.057), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1.34217729E8);
      assertEquals(1.34217729E8, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2156.057));
      assertEquals((-2156.057), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 1488.63582409, 0.0, 1488.63582409, 0.0, 1488.63582409, (-140.97959415053), 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "roots of unity have not been computed yet";
      stringArray0[1] = "9zbmZE[Z)1";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1488.63582409;
      doubleArray0[1] = 1488.63582409;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-140.97959415053);
      doubleArray0[4] = 1488.63582409;
      double[] doubleArray1 = MathArrays.scale((-1.0), doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1488.63582409, 1488.63582409, 0.0, (-140.97959415053), 1488.63582409}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1488.63582409), (-1488.63582409), -0.0, 140.97959415053, (-1488.63582409)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 488.0085F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {488.0085F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 21);
      assertEquals(21, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1488.63582409, 1488.63582409, 0.0, (-140.97959415053), 1488.63582409}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1488.63582409), (-1488.63582409), -0.0, 140.97959415053, (-1488.63582409)}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean2);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 38.7389599916155;
      doubleArray0[1] = 4167.23;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 679.22641909;
      doubleArray0[4] = 0.4794255495071411;
      doubleArray0[5] = (-946.6);
      doubleArray0[6] = 0.167;
      doubleArray0[7] = 583.1078995173;
      doubleArray0[8] = 0.9689123630523682;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4167.23;
      doubleArray1[1] = 0.167;
      doubleArray1[2] = (-946.6);
      doubleArray1[3] = (-946.6);
      doubleArray1[4] = (-946.6);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {38.7389599916155, 4167.23, 1.34217729E8, 679.22641909, 0.4794255495071411, (-946.6), 0.167, 583.1078995173, 0.9689123630523682}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4167.23, 0.167, (-946.6), (-946.6), (-946.6)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 2968);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1253.2830360495907;
      doubleArray0[1] = (-3673.6747561913);
      doubleArray0[2] = (-182.84106125695217);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-366.2391344);
      doubleArray0[5] = (-1842.639);
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {1253.2830360495907, (-3673.6747561913), (-182.84106125695217), Double.NaN, (-366.2391344), (-1842.639)}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {1253.2830360495907, (-3673.6747561913), (-182.84106125695217), Double.NaN, (-366.2391344), (-1842.639)}, doubleArray0, 0.01);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.4E-45F);
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.4E-45F);
      floatArray1[1] = (-1.0F);
      floatArray1[2] = (-1.4E-45F);
      floatArray1[3] = (-1.4E-45F);
      floatArray1[4] = (-1.4E-45F);
      floatArray1[5] = (-1.4E-45F);
      floatArray1[6] = (-1.4E-45F);
      floatArray1[7] = (-1.4E-45F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.4E-45F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.4E-45F), (-1.0F), (-1.4E-45F), (-1.4E-45F), (-1.4E-45F), (-1.4E-45F), (-1.4E-45F), (-1.4E-45F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1.4E-45F);
      doubleArray0[1] = 159.67042176736;
      doubleArray0[2] = (double) (-1.4E-45F);
      doubleArray0[3] = (double) (-1.4E-45F);
      doubleArray0[4] = (double) (-1.4E-45F);
      doubleArray0[5] = (double) (-1.4E-45F);
      doubleArray0[6] = (double) (-1.4E-45F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(159.67042176736, double0, 0.01);
      assertArrayEquals(new double[] {(-1.401298464324817E-45), 159.67042176736, (-1.401298464324817E-45), (-1.401298464324817E-45), (-1.401298464324817E-45), (-1.401298464324817E-45), (-1.401298464324817E-45)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 5.669184079525E-24;
      doubleArray0[1] = (-467.05890122824076);
      doubleArray0[2] = 0.19999999999923582;
      doubleArray0[3] = (-491.71383);
      doubleArray0[4] = (-1645.92892631557);
      doubleArray0[5] = 349.8308638;
      doubleArray0[6] = 704.1;
      doubleArray0[7] = (-1493.0256959);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {5.669184079525E-24, (-467.05890122824076), 0.19999999999923582, (-491.71383), (-1645.92892631557), 349.8308638, 704.1, (-1493.0256959)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-491.71383));
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {5.669184079525E-24, (-467.05890122824076), 0.19999999999923582, (-491.71383), (-1645.92892631557), 349.8308638, 704.1, (-1493.0256959)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertEquals(7781582.660786461, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {5.669184079525E-24, (-467.05890122824076), 0.19999999999923582, (-491.71383), (-1645.92892631557), 349.8308638, 704.1, (-1493.0256959)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "DECREASING";
      stringArray0[1] = "WE%~,.V";
      stringArray0[2] = "WE%~,.V";
      stringArray0[3] = "DECREASING";
      stringArray0[4] = "WE%~,.V";
      stringArray0[5] = "DECREASING";
      stringArray0[6] = "WE%~,.V";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1425);
      intArray0[1] = 39;
      intArray0[2] = 1746;
      intArray0[3] = 4367;
      intArray0[4] = 3336;
      intArray0[5] = (-18);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1425), 39, 1746, 4367, 3336, (-18)}, intArray0);
      assertArrayEquals(new int[] {(-1425), 39, 1746, 4367, 3336, (-18)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-18);
      doubleArray1[1] = (double) 1746;
      doubleArray1[2] = (double) 39;
      doubleArray1[3] = (double) (-18);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) 3336;
      doubleArray1[7] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = (-123.5F);
      floatArray0[3] = 1994.712F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.4E-45F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1.4E-45F;
      floatArray0[8] = Float.NEGATIVE_INFINITY;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1994.712F;
      floatArray1[1] = 1.4E-45F;
      floatArray1[2] = 1994.712F;
      floatArray1[3] = 1994.712F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[8] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 3.4028235E38F, (-123.5F), 1994.712F, 0.0F, 1.4E-45F, 0.0F, 1.4E-45F, Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1994.712F, 1.4E-45F, 1994.712F, 1994.712F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NEGATIVE_INFINITY}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long[][] longArray0 = new long[9][5];
      long[] longArray1 = new long[1];
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(9, longArray0.length);
      
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(2293.979, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long[] longArray0 = new long[7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[0][1];
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1980.427);
      doubleArray0[1] = (-1799.0);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 6.5200000000120351E18;
      doubleArray0[4] = 631.5429395;
      doubleArray0[5] = 6279174.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 3.4614874413109764E7;
      doubleArray0[8] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1980.427));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1980.427), (-1799.0), Double.NaN, 6.5200000000120351E18, 631.5429395, 6279174.0, 0.0, 3.4614874413109764E7, 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.015477150638686E-13, 5.464399038186713E-13, Double.NaN, (-1980.426999946811), (-1.9182894003209613E-13), (-1.907276951984826E-9), -0.0, (-1.0514145994994488E-8), (-4.07681617151309E-8)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 3506;
      intArray0[1] = 1293;
      intArray0[2] = 837;
      intArray0[3] = (-2702);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {3506, 1293, 837, (-2702)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1749.4484680495;
      doubleArray0[2] = 1.494140625;
      doubleArray0[3] = 3272.9688519749;
      doubleArray0[4] = 2705.82165;
      doubleArray0[5] = 2293.979;
      doubleArray0[6] = 3.834E-20;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1749.4484680495, 1.494140625, 3272.9688519749, 2705.82165, 2293.979, 3.834E-20}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NaN, 1749.4484680495, 1.494140625, 3272.9688519749, 2705.82165, 2293.979, 3.834E-20}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1749.4484680495, 1.494140625, 3272.9688519749, 2705.82165, 2293.979, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.925681159240093E-8;
      doubleArray0[1] = 2.925681159240093E-8;
      doubleArray0[3] = 2.925681159240093E-8;
      doubleArray0[4] = 2.925681159240093E-8;
      doubleArray0[5] = 2.925681159240093E-8;
      double[] doubleArray1 = MathArrays.scale(2.925681159240093E-8, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.925681159240093E-8, 2.925681159240093E-8, 0.0, 2.925681159240093E-8, 2.925681159240093E-8, 2.925681159240093E-8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.559610245532455E-16, 8.559610245532455E-16, 0.0, 8.559610245532455E-16, 8.559610245532455E-16, 8.559610245532455E-16}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.925681159240093E-8, 2.925681159240093E-8, 0.0, 2.925681159240093E-8, 2.925681159240093E-8, 2.925681159240093E-8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.559610245532455E-16, 8.559610245532455E-16, 0.0, 8.559610245532455E-16, 8.559610245532455E-16, 8.559610245532455E-16}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-4017);
      intArray0[1] = (-2675);
      intArray0[2] = (-554);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-4017), (-2675), (-554)}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-4017), (-2675), (-554)}, intArray0);
      assertArrayEquals(new int[] {(-4017), (-2675), (-554)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-554);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-554.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, (double[]) null);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-554.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[7];
      longArray0[0] = 1023L;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(30);
      assertEquals(30, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(144);
      assertEquals(144, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer1);
      assertNotNull(pair0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(pair0);
      assertNotNull(pair1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(pair1.equals((Object)pair0));
      
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 144, 144);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1541.0475F;
      floatArray0[1] = (-102.5F);
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray1, floatArray2);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertTrue(boolean0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[8][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1079);
      intArray0[1] = 96;
      intArray0[2] = (-2147483647);
      intArray0[3] = (-1903);
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1079);
      intArray1[1] = (-1079);
      intArray1[2] = 215;
      intArray1[3] = (-2147483647);
      intArray1[4] = (-1903);
      intArray1[5] = (-1079);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(4, intArray0.length);
      assertEquals((-943), int0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1079), (-1079), 215, (-2147483647), (-1903), (-1079)}, intArray1);
      assertArrayEquals(new int[] {(-1079), 96, (-2147483647), (-1903)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1852628642;
      intArray0[1] = 134217729;
      intArray0[2] = 253;
      intArray0[3] = (-613);
      intArray0[4] = 2;
      intArray0[5] = (-1275);
      intArray0[6] = (-3059);
      intArray0[7] = (-817);
      intArray0[8] = 132;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-613);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.1428571343421936;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.1428571343421936, double0, 0.01);
      assertArrayEquals(new double[] {0.1428571343421936}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Pair<Integer, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 144, 144);
      assertEquals(144, pairArray0.length);
      assertNotNull(pairArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<Integer, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 144, (-583));
      assertEquals(144, pairArray0.length);
      assertNotNull(pairArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.8845443586225003E7;
      doubleArray0[3] = (-3826.9008);
      doubleArray0[4] = Double.NaN;
      doubleArray0[3] = (-242.76);
      doubleArray0[6] = 3254.801092609536;
      doubleArray0[7] = 2.608E18;
      doubleArray0[8] = 2.608E18;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {6.283185307179586, 0.0, 2.8845443586225003E7, (-242.76), Double.NaN, 0.0, 3254.801092609536, 2.608E18, 2.608E18}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 744L;
      longArray0[1] = 744L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {744L, 744L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[1] = "Wx\"9Qo*or8 (JiH^f~";
      stringArray0[2] = "z ";
      stringArray0[3] = "j%jiG<DC1";
      stringArray0[4] = "\"5__7a!nZ#dL2";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1182.182421563696;
      doubleArray0[1] = (-900.833940809257);
      doubleArray0[2] = 2201.057188;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 436.0943733403682;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 472.0;
      doubleArray0[7] = 0.9489846229553223;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2);
      assertEquals(2, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1182.182421563696, (-900.833940809257)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1182.182421563696, (-900.833940809257), 2201.057188, 1.304E19, 436.0943733403682, (-1.0), 472.0, 0.9489846229553223}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.304E19, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1182.182421563696, (-900.833940809257), 2201.057188, 1.304E19, 436.0943733403682, (-1.0), 472.0, 0.9489846229553223}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[0][7];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2035.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-5098.0F);
      floatArray0[5] = 25.29F;
      floatArray0[6] = -0.0F;
      floatArray0[7] = (-1058.024F);
      floatArray0[8] = (-546.02F);
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-5098.0F);
      floatArray1[1] = (-546.02F);
      floatArray1[2] = 25.29F;
      floatArray1[3] = (-959.01F);
      floatArray1[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-2035.0F), (-1.0F), 0.0F, 0.0F, (-5098.0F), 25.29F, -0.0F, (-1058.024F), (-546.02F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-5098.0F), (-546.02F), 25.29F, (-959.01F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (-1.0F);
      doubleArray3[1] = 1688.1460004412256;
      doubleArray3[2] = (double) 25.29F;
      doubleArray3[3] = (double) (-2035.0F);
      try { 
        MathArrays.ebeAdd(doubleArray3, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.0, 1.0, 0.0, 0.0);
      assertEquals(1.0, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2218.24387433622);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[][] doubleArray1 = new double[0][0];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-2218.24387433622), 0.0, 0.0, 0.0, 1.0, 1.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {(-2218.24387433622), 0.0, 0.0, 0.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-2218.24387433622);
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (-2218.24387433622);
      doubleArray2[5] = 1.0;
      doubleArray2[6] = (-2218.24387433622);
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 0.0;
      double[] doubleArray3 = MathArrays.scale((-3299.15392), doubleArray2);
      assertEquals(9, doubleArray3.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, 7318327.973532328, (-3299.15392), 7318327.973532328, (-3299.15392), 7318327.973532328, -0.0, -0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2218.24387433622), 1.0, (-2218.24387433622), 1.0, (-2218.24387433622), 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-730);
      intArray0[1] = 0;
      intArray0[2] = 303;
      intArray0[3] = (-2397);
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {(-730), 0, 303, (-2397)}, intArray0);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-730), 0, 303, (-2397)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2218.2443251432346, double3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-2218.24387433622), 0.0, 0.0, 0.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double double4 = MathArrays.linearCombination(doubleArray3, doubleArray2);
      assertEquals(9, doubleArray3.length);
      assertEquals(9, doubleArray2.length);
      assertEquals((-4.870151519132231E10), double4, 0.01);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, 7318327.973532328, (-3299.15392), 7318327.973532328, (-3299.15392), 7318327.973532328, -0.0, -0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2218.24387433622), 1.0, (-2218.24387433622), 1.0, (-2218.24387433622), 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 341.8964209235;
      doubleArray1[1] = 5.2240336371356666E-9;
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = 3.834E-20;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {341.8964209235, 5.2240336371356666E-9, 1.304E19, 3.834E-20}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 3399.791F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {3399.791F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "EXP_FRAC_TABLE_B";
      stringArray0[2] = "h&";
      stringArray0[3] = "h&";
      stringArray0[4] = "h&";
      stringArray0[5] = "h&";
      stringArray0[6] = "";
      stringArray0[7] = "h&";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 3216.3804F;
      floatArray0[1] = (-3005.0F);
      floatArray0[2] = (-1044.1174F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1971.66F);
      floatArray0[5] = Float.NEGATIVE_INFINITY;
      floatArray0[6] = 3.268945F;
      floatArray0[7] = Float.NaN;
      floatArray0[8] = 3.4028235E38F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {3216.3804F, (-3005.0F), (-1044.1174F), 0.0F, (-1971.66F), Float.NEGATIVE_INFINITY, 3.268945F, Float.NaN, 3.4028235E38F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.1428571343421936;
      double[] doubleArray1 = MathArrays.scale(0.1428571343421936, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.1428571343421936}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.02040816083246355}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.1428571343421936);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[9][6];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray1;
      doubleArray2[7] = doubleArray1;
      doubleArray2[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2416.821166984559), (-2416.821166984559), (-2416.821166984559), (-2416.821166984559), (-2416.821166984559), (-2416.821166984559), (-2416.821166984559), 0.0);
      assertEquals(1.752307365955382E7, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2416.821166984559);
      doubleArray0[2] = (-2416.821166984559);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= -2,416.821)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.834E-20;
      double double0 = Double.NaN;
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = (-1360.27838);
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(1360.27838, double1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, (-1360.27838)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.1428571343421936;
      long[][] longArray0 = new long[4][4];
      long[] longArray1 = new long[1];
      longArray1[0] = 1023L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1023L;
      longArray2[1] = 1023L;
      longArray2[2] = 1023L;
      longArray2[3] = 1023L;
      longArray2[4] = 1023L;
      longArray2[5] = 988L;
      longArray2[6] = 1023L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1023L;
      longArray3[1] = 1023L;
      longArray3[2] = 988L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray0[3] = longArray4;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.1428571343421936}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.1428571343421936}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0.1428571343421936, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.1428571343421936}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.1428571343421936}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1023L;
      doubleArray2[1] = 0.1428571343421936;
      doubleArray2[2] = (double) 1023L;
      doubleArray2[3] = (double) 988L;
      doubleArray2[4] = (double) 1023L;
      doubleArray2[5] = (double) 988L;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.1428571343421936}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1023.0, 0.1428571343421936, 1023.0, 988.0, 1023.0, 988.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-980.0526193137);
      doubleArray0[1] = (-980.0526193137);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-980.0526193137), (-980.0526193137)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {960503.1366236442, 960503.1366236442}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-980.0526193137), (-980.0526193137)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][8];
      doubleArray2[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection1, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {(-980.0526193137), (-980.0526193137)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {960503.1366236442, 960503.1366236442}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, (-980.0526193137), 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.scaleInPlace((-980.0526193137), doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {960503.1366236442, 960503.1366236442}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {960503.1366236442, 960503.1366236442}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {960503.1366236442, 960503.1366236442}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1706);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-1706)}, intArray0);
      assertEquals(double1, double0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (960,503.137 >= 960,503.137)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double0 = MathArrays.linearCombination(6.283185307179586, 6.283185307179586, 6.283185307179586, 57.2957763671875);
      assertEquals(399.4783978381173, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 57.2957763671875;
      doubleArray0[2] = 57.2957763671875;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 57.2957763671875;
      doubleArray0[7] = 57.2957763671875;
      double[][] doubleArray1 = new double[0][5];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 6.283185307179586, 57.2957763671875, 57.2957763671875, 57.2957763671875, 57.2957763671875}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-543.3F);
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) 0;
      floatArray1[3] = (float) 0;
      floatArray1[4] = (float) 0;
      floatArray1[5] = (float) 0;
      floatArray1[6] = (float) 0;
      floatArray1[7] = (float) 0;
      floatArray1[8] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-543.3F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0.0F;
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = (double) 0.0F;
      doubleArray2[3] = (double) 0.0F;
      doubleArray2[4] = (double) 0.0F;
      doubleArray2[5] = (double) 0.0F;
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = 6.283185307179586;
      doubleArray0[5] = 6.283185307179586;
      doubleArray0[6] = 6.283185307179586;
      doubleArray0[7] = 6.283185307179586;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(17.771531752633464, double0, 0.01);
      assertArrayEquals(new double[] {6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(42.26548245743669, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1634L);
      longArray0[2] = 4294967295L;
      longArray0[3] = (-987L);
      longArray0[4] = 1L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      double double0 = MathArrays.linearCombination(6.283185307179586, 1207.9168536, 1207.9168536, 6.283185307179586);
      assertEquals(15179.13085366823, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1207.9168536;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 15179.13085366823;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[8] = 0.3153223395347595;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.3153223395347595, 6.283185307179586, 1207.9168536, 15179.13085366823, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1469);
      intArray0[1] = 390;
      intArray0[2] = 42949668;
      intArray0[3] = 56;
      intArray0[4] = 1789;
      int int0 = 268435442;
      intArray0[5] = 268435442;
      int int1 = (-2565);
      intArray0[6] = (-2565);
      intArray0[7] = 11;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1870.0724F;
      floatArray0[1] = 1870.0724F;
      floatArray0[2] = 157.0F;
      floatArray0[3] = 1870.0724F;
      floatArray0[4] = (-1440.18F);
      floatArray0[5] = (-1440.18F);
      floatArray0[6] = (-502.95844F);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1440.18F);
      floatArray1[1] = 1870.0724F;
      floatArray1[2] = 1870.0724F;
      floatArray1[3] = 1870.0724F;
      floatArray1[4] = 1870.0724F;
      floatArray1[5] = 157.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1870.0724F, 1870.0724F, 157.0F, 1870.0724F, (-1440.18F), (-1440.18F), (-502.95844F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1440.18F), 1870.0724F, 1870.0724F, 1870.0724F, 1870.0724F, 157.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[9];
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double double0 = MathArrays.distance(intArray1, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-1593.106759672822);
      doubleArray0[2] = (-1593.106759672822);
      doubleArray0[4] = (-1593.106759672822);
      doubleArray0[4] = (-1593.106759672822);
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1593.106759672822), (-1593.106759672822), 0.0, (-1593.106759672822), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(7613967.443145715, double1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1593.106759672822), (-1593.106759672822), 0.0, (-1593.106759672822), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1593.106759672822);
      doubleArray2[1] = 623889.0720249201;
      doubleArray2[2] = 7613967.443145715;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(0.0, Double.NaN, Double.NaN, 6.283185307179586);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "*nHP2w?Ej{/9a ";
      stringArray0[1] = "`u<pln";
      stringArray0[2] = "INCREASING";
      stringArray0[3] = "INCREASING";
      stringArray0[4] = "jc4U%/t1";
      stringArray0[5] = "";
      stringArray0[6] = "w xhB)w,gq6`({Y?";
      stringArray0[7] = "cannot compute beta density at 1 when beta = %.3g";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      double double2 = MathArrays.linearCombination(Double.NaN, Double.NaN, (-1868.5329), Double.NaN, Double.NaN, 6708.0, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 446.3956543859357;
      doubleArray0[1] = 39.47841760435743;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 446.3956543859357;
      doubleArray1[1] = 39.47841760435743;
      doubleArray1[2] = 446.3956543859357;
      doubleArray1[3] = 39.47841760435743;
      doubleArray1[4] = 1744.08747055926;
      doubleArray1[5] = 446.3956543859357;
      doubleArray1[6] = 446.3956543859357;
      doubleArray1[7] = 446.3956543859357;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {446.3956543859357, 39.47841760435743}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {446.3956543859357, 39.47841760435743, 446.3956543859357, 39.47841760435743, 1744.08747055926, 446.3956543859357, 446.3956543859357, 446.3956543859357}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 39.47841760435743;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[5];
      intArray0[0] = 1537;
      intArray0[1] = 1537;
      intArray0[2] = 1537;
      intArray0[3] = 1537;
      intArray0[4] = 1537;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 854.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 854.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[0][7];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-95);
      intArray0[1] = 2289;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-95), 2289}, intArray0);
      assertEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 1537;
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 22;
      doubleArray1[1] = (double) 1537;
      doubleArray1[2] = (double) 22;
      doubleArray1[3] = (double) 22;
      doubleArray1[4] = (double) 1537;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double1 = MathArrays.linearCombination(1628.86187, 0.0, 0.0, 1.34217729E8, (-479.0), 1628.86187, 7613967.443145715, 7613967.443145715);
      assertEquals(5.7972499445058055E13, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Double[] doubleArray0 = new Double[8];
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[0] = double2;
      Double double3 = new Double(5.7972499445058055E13);
      assertEquals(5.7972499445058055E13, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[1] = double3;
      Double double4 = new Double(6873633.073391577);
      assertEquals(6873633.073391577, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[2] = double4;
      Double double5 = new Double(1628.86187);
      assertEquals(1628.86187, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      
      doubleArray0[3] = double5;
      Double double6 = new Double(829.75888409495);
      assertEquals(829.75888409495, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      
      doubleArray0[4] = double6;
      Double double7 = new Double(829.75888409495);
      assertEquals(829.75888409495, (double)double7, 0.01);
      assertNotNull(double7);
      assertEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      
      doubleArray0[5] = double7;
      Double double8 = new Double(829.75888409495);
      assertEquals(829.75888409495, (double)double8, 0.01);
      assertNotNull(double8);
      assertEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      
      doubleArray0[6] = double8;
      Double double9 = new Double(1.34217729E8);
      assertEquals(1.34217729E8, (double)double9, 0.01);
      assertNotNull(double9);
      assertNotEquals((double)double9, (double)double7, 0.01);
      assertNotEquals((double)double9, (double)double0, 0.01);
      assertNotEquals((double)double9, (double)double4, 0.01);
      assertNotEquals((double)double9, (double)double8, 0.01);
      assertNotEquals((double)double9, (double)double1, 0.01);
      assertNotEquals((double)double9, (double)double2, 0.01);
      assertNotEquals((double)double9, (double)double3, 0.01);
      assertNotEquals((double)double9, (double)double5, 0.01);
      assertNotEquals((double)double9, (double)double6, 0.01);
      
      doubleArray0[7] = double9;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(0.0, Double.NaN, Double.NaN, 6.283185307179586);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 1013);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1537;
      intArray0[1] = 22;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1537;
      doubleArray0[2] = (double) 1537;
      doubleArray0[3] = (double) 1537;
      doubleArray0[4] = (double) 22;
      doubleArray0[5] = (double) 1;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1537, 22, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1537, 22, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1537;
      intArray2[1] = 1;
      intArray2[2] = 1537;
      intArray2[3] = 1543;
      double[] doubleArray1 = MathArrays.scale(4887.0387012, doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {7511378.483744401, 0.0, 7511378.483744401, 7511378.483744401, 107514.8514264, 4887.0387012}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1537.0, 0.0, 1537.0, 1537.0, 22.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1537;
      intArray0[1] = 18;
      double[] doubleArray0 = new double[6];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 1537;
      integerArray0[1] = (Integer) 18;
      integerArray0[2] = (Integer) 1537;
      integerArray0[3] = (Integer) 18;
      integerArray0[4] = (Integer) 1537;
      integerArray0[5] = (Integer) 1537;
      integerArray0[6] = (Integer) 18;
      integerArray0[7] = (Integer) 1537;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, integerArray0.length);
      assertFalse(boolean0);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, (double) integerArray0[5]);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-1593.106759672822);
      doubleArray0[2] = (-1593.106759672822);
      doubleArray0[4] = (-1593.106759672822);
      doubleArray0[4] = (-1340.766488976026);
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1593.106759672822), (-1593.106759672822), 0.0, (-1340.766488976026), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(6873633.073391577, double1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1593.106759672822), (-1593.106759672822), 0.0, (-1340.766488976026), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1593.106759672822), (-1340.766488976026), 0.0, (-1593.106759672822), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(2621.7614447908063, double2, 0.01);
      assertArrayEquals(new double[] {(-1593.106759672822), (-1340.766488976026), 0.0, (-1593.106759672822), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-176));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      double double0 = (-1684.85);
      doubleArray1[1] = (-1684.85);
      double double1 = 290.774;
      doubleArray1[2] = 290.774;
      doubleArray1[3] = 12.566370614359172;
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(1709.8031919628695, double2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1684.85), 290.774, 12.566370614359172}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      long[][] longArray0 = new long[4][4];
      long[] longArray1 = new long[1];
      longArray1[0] = 1023L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1023L;
      longArray2[1] = 1023L;
      longArray2[2] = 1023L;
      longArray2[3] = 1023L;
      longArray2[4] = 1023L;
      longArray2[5] = 988L;
      longArray2[6] = 1023L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1023L;
      longArray3[1] = 1023L;
      longArray3[2] = 988L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray0[3] = longArray4;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2416.821166984559), (-2416.821166984559), (-2416.821166984559), (-2416.821166984559), (-2416.821166984559), (-2416.821166984559), (-2416.821166984559), 0.0);
      assertEquals(1.752307365955382E7, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      double double1 = MathArrays.linearCombination((-2416.821166984559), 6.283185307179586, 0.0, 6.283185307179586);
      assertEquals((-15185.335246478004), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2645;
      intArray0[1] = 1826;
      intArray0[2] = 261;
      intArray0[3] = (-6537);
      intArray0[4] = 1852628642;
      intArray0[5] = 392;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2645, 1826, 261, (-6537), 1852628642, 392}, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1537;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1537.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-364.2780682044);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.5625;
      doubleArray0[3] = 2824.3420105;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-1502.7031394);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-364.2780682044), 0.0, 0.5625, 2824.3420105, Double.NaN, (-1502.7031394)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {132698.5109747295, 0.0, 0.31640625, 7976907.792275182, Double.NaN, 2258116.725162616}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[6];
      intArray0[0] = 1462;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1462;
      doubleArray0[1] = (double) 1462;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1462, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1462, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1462.0, 1462.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {1462, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 1462.0, 1462.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-1593.106759672822);
      doubleArray0[2] = 0.0;
      int[] intArray0 = new int[2];
      intArray0[0] = (-46);
      intArray0[1] = 1073741824;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-46), 1073741824}, intArray0);
      assertArrayEquals(new int[] {(-46), 1073741824}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[][] doubleArray1 = new double[0][3];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-1593.106759672822), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-46), 1073741824}, intArray0);
      assertArrayEquals(new int[] {(-46), 1073741824}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.8402777777777777;
      doubleArray2[1] = (double) (-46);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) (-46);
      doubleArray2[4] = (double) 1073741824;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertEquals(7, doubleArray2.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.8402777777777777, (-46.0), 0.0, (-46.0), 1.073741824E9, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1537;
      intArray0[1] = 1869;
      intArray0[2] = 1;
      intArray0[3] = (-2526);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-2526);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, (-2526.0)}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(3498.0290164605553, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1537, 1869, 1, (-2526), 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2526.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer integer0 = new Integer(196);
      assertEquals(196, (int)integer0);
      assertNotNull(integer0);
      
      try { 
        Integer.valueOf("INSUFFICIENT_DATA_FOR_T_STATISTIC", 2117657486);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 2117657486 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(0.7715602326708225, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-3785.9684), 0.7715602326708225, (-3785.9684), (-3785.9684), 0.7214844226837158, 0.7715602326708225, 0.0);
      assertEquals((-5652.619884961173), double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.27032577515991274;
      doubleArray0[1] = 0.7715602326708225;
      doubleArray0[2] = 0.7214844226837158;
      MathArrays.checkPositive(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.27032577515991274, 0.7715602326708225, 0.7214844226837158}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(0.0, Double.NaN, Double.NaN, 6.283185307179586);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 808;
      intArray0[2] = 0;
      MathArrays.checkPositive(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3924);
      doubleArray0[1] = -0.0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[1] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[2] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[3] = "2JHOY{^JtRC21YC";
      stringArray0[4] = "C]&.)i*";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3924.0), -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 808;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 808;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (double) 808;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) 808;
      doubleArray0[6] = (double) 808;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (double) 808;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 6.283185307179586;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = 1627.6;
      doubleArray1[6] = (double) 808;
      doubleArray1[7] = (double) 808;
      doubleArray1[8] = (double) 808;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2158.35986);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 8.013569846390252E13;
      doubleArray0[4] = 2176.5682438;
      double double0 = 94.751;
      doubleArray0[5] = 94.751;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2158.35986), Double.NaN, 1.0, 8.013569846390252E13, 2176.5682438, 94.751}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 673);
      assertEquals(6, doubleArray0.length);
      assertEquals(673, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2158.35986), Double.NaN, 1.0, 8.013569846390252E13, 2176.5682438, 94.751}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 673;
      intArray0[1] = 673;
      int int0 = (-2832);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2832));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1340.766488976026);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1340.766488976026);
      doubleArray1[1] = (double) 0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(0.0, Double.NaN, Double.NaN, 6.283185307179586);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[9];
      double[][] doubleArray2 = new double[5][2];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 6.283185307179586;
      doubleArray3[1] = Double.NaN;
      doubleArray3[2] = (-1617.4775298205873);
      doubleArray3[3] = Double.NaN;
      doubleArray3[4] = Double.NaN;
      doubleArray3[5] = 6.283185307179586;
      doubleArray3[6] = Double.NaN;
      doubleArray3[7] = 6.283185307179586;
      doubleArray3[8] = Double.NaN;
      double double2 = MathArrays.distance1(doubleArray1, doubleArray3);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray3.length);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.283185307179586, Double.NaN, (-1617.4775298205873), Double.NaN, Double.NaN, 6.283185307179586, Double.NaN, 6.283185307179586, Double.NaN}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      double[] doubleArray4 = MathArrays.scale(1593.106759672822, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      double double3 = MathArrays.distance(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      double[] doubleArray5 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray5.length);
      assertNotNull(doubleArray5);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray5, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3924);
      doubleArray0[1] = -0.0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[1] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[2] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[3] = "2JHOY{^JtRC21YC";
      stringArray0[4] = "C]&.)i*";
      stringArray0[5] = "2JHOY{^JtRC21YC";
      stringArray0[6] = "C]&.)i*";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-3924));
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-3924.0), -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3924.0), -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-3816);
      intArray0[1] = 21;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-3816), 21}, intArray0);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1537;
      intArray0[1] = 22;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1537;
      doubleArray0[1] = (double) 22;
      doubleArray0[2] = (double) 1537;
      doubleArray0[3] = (double) 1537;
      doubleArray0[4] = (double) 22;
      doubleArray0[5] = (double) 1;
      double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1537.0, 22.0, 1537.0, 1537.0, 22.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1537, 22, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1537, 22, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1537;
      intArray2[2] = 1537;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 22;
      doubleArray2[1] = (double) 22;
      doubleArray2[2] = (double) 1537;
      doubleArray2[3] = (double) 0;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 1537;
      intArray0[0] = 1537;
      intArray0[1] = 22;
      int int1 = 1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1537;
      doubleArray0[1] = (double) 22;
      doubleArray0[2] = (double) 1537;
      doubleArray0[3] = (double) 1537;
      doubleArray0[4] = (double) 22;
      doubleArray0[5] = (double) 1;
      // Undeclared exception!
      try { 
        MathArrays.scale(1537, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[22];
      floatArray0[0] = 2792.7068F;
      floatArray0[1] = 2792.7068F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 808;
      floatArray0[4] = 2792.7068F;
      floatArray0[5] = 2792.7068F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(22, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 808;
      intArray0[1] = 808;
      int[] intArray1 = MathArrays.copyOf(intArray0, 808);
      assertEquals(2, intArray0.length);
      assertEquals(808, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {808, 808}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1537;
      intArray0[1] = 22;
      intArray0[2] = 1;
      intArray0[3] = (-2530);
      intArray0[4] = 93;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1537, 22, 1, (-2530), 93}, intArray0);
      assertArrayEquals(new int[] {1537, 22, 1, (-2530), 93}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 93;
      doubleArray0[1] = (double) 1537;
      doubleArray0[2] = (double) 22;
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {22.0, 93.0, 1537.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {1537, 22, 1, (-2530), 93}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "OVERFLOW_IN_ADDITION";
      stringArray0[1] = "<FE~rk#rNzO";
      stringArray0[2] = "}#x?yX";
      MathArrays.checkPositive(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {22.0, 93.0, 1537.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1537;
      intArray0[1] = 22;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 1537;
      doubleArray0[2] = (double) 1537;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 1537;
      doubleArray0[5] = 1.304E19;
      doubleArray0[7] = (double) 1537;
      doubleArray0[8] = (double) 1537;
      double[][] doubleArray1 = new double[9][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {1537.0, 1537.0, 1537.0, Double.NaN, 0.0, 1537.0, Double.NaN, 1.304E19, 1537.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {1537.0, 1537.0, 1537.0, Double.NaN, 0.0, 1537.0, Double.NaN, 1.304E19, 1537.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(1537.0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1537.0, 1537.0, 1537.0, Double.NaN, 0.0, 1537.0, Double.NaN, 1.304E19, 1537.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2362369.0, 2362369.0, 2362369.0, Double.NaN, 0.0, 2362369.0, Double.NaN, 2.004248E22, 2362369.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {1537, 22, 0, 0, 0}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {1537.0, 1537.0, 1537.0, Double.NaN, 0.0, 1537.0, Double.NaN, 1.304E19, 1537.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1537.0, 1537.0, 1537.0, Double.NaN, 0.0, 1537.0, Double.NaN, 1.304E19, 1537.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertArrayEquals(new double[] {1537.0, 1537.0, 1537.0, Double.NaN, 0.0, 1537.0, Double.NaN, 1.304E19, 1537.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1537.0, 1537.0, 1537.0, Double.NaN, 0.0, 1537.0, Double.NaN, 1.304E19, 1537.0}, doubleArray4, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1629.0129004;
      doubleArray0[1] = 1629.0129004;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1629.0129004;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1629.0129004, 1629.0129004, 0.0, 0.0, 1629.0129004}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.3333333333333333}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-2661.1040821011), 1059.04337444, 1059.04337444, 0.0, 1059.04337444, 1059.04337444);
      assertEquals((-1696651.7778991458), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = (-1);
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1), 1476);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 91;
      intArray0[1] = 290;
      intArray0[2] = 1485;
      intArray0[3] = 10;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {91, 290, 1485, 10}, intArray0);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 91;
      doubleArray2[1] = (double) 1485;
      doubleArray2[2] = (double) 290;
      doubleArray2[3] = (double) 91;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (double) 1485;
      doubleArray2[6] = (double) 290;
      doubleArray2[7] = (double) 10;
      doubleArray2[8] = (-1.0);
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (double) 290;
      doubleArray3[2] = (double) 10;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (double) 91;
      doubleArray3[5] = (double) 290;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = (double) 10;
      doubleArray3[8] = (double) 91;
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray2, doubleArray3);
      assertEquals(9, doubleArray3.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 290.0, 10.0, 0.0, 91.0, 290.0, 0.0, 10.0, 91.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {91.0, 1485.0, 290.0, 91.0, (-1.0), 1485.0, 290.0, 10.0, (-1.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-91.0), 5.120689655172414, 29.0, Double.POSITIVE_INFINITY, (-0.01098901098901099), 5.120689655172414, Double.POSITIVE_INFINITY, 1.0, (-0.01098901098901099)}, doubleArray4, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1543);
      intArray0[1] = (-2835);
      intArray0[2] = (-1);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1543), (-2835), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1543), (-2835), (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1543);
      floatArray0[1] = (float) (-1543);
      floatArray0[2] = (float) (-2835);
      floatArray0[3] = (float) (-2835);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1543.0F), (-1543.0F), (-2835.0F), (-2835.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1593.106759672822);
      long[][] longArray0 = new long[2][7];
      long[] longArray1 = new long[1];
      longArray1[0] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-303L);
      longArray2[1] = 1L;
      longArray2[2] = 1L;
      longArray2[3] = 0L;
      longArray2[4] = 18L;
      longArray2[5] = 0L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -303 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[8];
      longArray1[0] = (-850L);
      long long0 = (-913L);
      longArray1[1] = (-913L);
      longArray1[2] = (-423L);
      longArray1[3] = 1954L;
      long long1 = 0L;
      longArray1[4] = 0L;
      longArray1[6] = 474L;
      longArray1[7] = (-1229L);
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      double double0 = (-3223.5083);
      doubleArray0[0] = (-3223.5083);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      float[] floatArray0 = new float[9];
      floatArray0[6] = 828.0F;
      long[][] longArray0 = new long[0][8];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = Float.NEGATIVE_INFINITY;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = Float.NEGATIVE_INFINITY;
      floatArray1[4] = 0.0F;
      floatArray1[5] = Float.NEGATIVE_INFINITY;
      floatArray1[6] = Float.NEGATIVE_INFINITY;
      floatArray1[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, 0.0F, 0.0F, Float.NEGATIVE_INFINITY, 0.0F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double double0 = MathArrays.linearCombination(1.34217729E8, (double) 0.0F, (double) Float.NEGATIVE_INFINITY, 12.566370614359172, (double) 0.0F, 3071.731);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-531.56142416);
      doubleArray0[2] = 2036.0;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "2JHOY{^JtRC21YC";
      stringArray0[1] = "C]&.)i*";
      stringArray0[2] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[3] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[4] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[5] = "";
      stringArray0[6] = "2JHOY{^JtRC21YC";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "INFINITE_VALUE_CONVERSION";
      stringArray0[1] = "NUMBER_TOO_LARGE_BOUND_EXCLUDED";
      stringArray0[2] = "";
      stringArray0[3] = "Cbx}M2[5c";
      stringArray0[4] = "c<?/{P:y";
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2255.665);
      doubleArray0[1] = (-2255.665);
      doubleArray0[2] = (-2255.665);
      doubleArray0[3] = 573.262;
      doubleArray0[4] = 920.0;
      doubleArray0[5] = 920.0;
      doubleArray0[6] = 920.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-2255.665), (-2255.665), (-2255.665), 573.262, 920.0, 920.0, 920.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2255.665), (-2255.665), (-2255.665), 573.262, 920.0, 920.0, 920.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-2255.665), (-2255.665), (-2255.665), 573.262, 920.0, 920.0, 920.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3924);
      doubleArray0[1] = -0.0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[1] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[2] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[3] = "2JHOY{^JtRC21YC";
      stringArray0[4] = "C]&.)i*";
      stringArray0[5] = "2JHOY{^JtRC21YC";
      stringArray0[6] = "C]&.)i*";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|xug";
      stringArray0[1] = "standard deviation must be positive ({0})";
      stringArray0[2] = "|xug";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3924);
      doubleArray0[1] = -0.0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[1] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[2] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[3] = "2JHOY{^JtRC21YC";
      stringArray0[4] = "C]&.)i*";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = (-2416.821166984559);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1629.0129004;
      doubleArray0[1] = 1629.0129004;
      doubleArray0[2] = 1629.0129004;
      doubleArray0[3] = 1629.0129004;
      doubleArray0[4] = (-2416.821166984559);
      doubleArray0[5] = (-2416.821166984559);
      doubleArray0[6] = (-2416.821166984559);
      doubleArray0[7] = 1629.0129004;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1593.106759672822);
      double[][] doubleArray1 = new double[4][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.sortInPlace(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1537;
      intArray0[1] = 22;
      intArray0[2] = 1;
      intArray0[3] = (-2530);
      intArray0[4] = 93;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1537, 22, 1, (-2530), 93}, intArray0);
      assertArrayEquals(new int[] {1537, 22, 1, (-2530), 93}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 93;
      doubleArray0[1] = (double) 1537;
      doubleArray0[2] = (double) 22;
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {22.0, 93.0, 1537.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {22.0, 93.0, 1537.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(1, doubleArray0);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {22.0, 93.0, 1537.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {22.0, 93.0, 1537.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1;
      double double1 = MathArrays.distance(intArray2, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(1, intArray2.length);
      assertEquals(1536.0, double1, 0.01);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {1537, 22, 1, (-2530), 93}, intArray0);
      assertArrayEquals(new int[] {1}, intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1536.0;
      doubleArray3[1] = (double) 93;
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = (double) 93;
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray3);
      assertEquals(4, doubleArray3.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(1536.0, double2, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertArrayEquals(new double[] {1536.0, 93.0, 1.0, 93.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {22.0, 93.0, 1537.0}, doubleArray0, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray2, 1537);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {22.0, 93.0, 1537.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {22.0, 93.0, 1537.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {20.468523002421307, 86.52602905569007, 1430.0054479418886}, doubleArray4, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1537;
      intArray0[1] = 22;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1537;
      doubleArray0[1] = (double) 22;
      doubleArray0[2] = (double) 1537;
      doubleArray0[3] = (double) 1537;
      doubleArray0[4] = (double) 22;
      doubleArray0[5] = (double) 1;
      double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1537.0, 22.0, 1537.0, 1537.0, 22.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1537, 22, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1537, 22, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1537;
      intArray2[1] = 1;
      intArray2[2] = 1537;
      intArray2[3] = 1543;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[1];
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-531.56142416);
      doubleArray0[2] = 2036.0;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1356.3500148;
      doubleArray1[1] = 2036.0;
      doubleArray1[2] = 2036.0;
      doubleArray1[3] = 2036.0;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, (-531.56142416), 2036.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1356.3500148, 2036.0, 2036.0, 2036.0, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1356.3500148, 2036.0, 2036.0, 2036.0, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1593.106759672822);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1972.1475726098497;
      doubleArray0[4] = (-1341.7582020673);
      double double0 = MathArrays.linearCombination(1972.1475726098497, 196.074655599, 18.84955592153876, (-1341.7582020673), 222.7, 0.0);
      assertEquals(361396.6098268293, double0, 0.01);
      
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 222.7;
      doubleArray2[1] = 0.5;
      doubleArray2[2] = (-1593.106759672822);
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(11, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {222.7, 0.5, (-1593.106759672822)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      double[] doubleArray4 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(17, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray4);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(17, doubleArray4.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {222.7, 0.5, (-1593.106759672822)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "INFINITE_VALUE_CONVERSION";
      stringArray0[1] = "NUMBER_TOO_LARGE_BOUND_EXCLUDED";
      stringArray0[2] = "";
      stringArray0[3] = "Cbx}M2[5c";
      stringArray0[4] = "c<?/{P:y";
      stringArray0[5] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[6] = "";
      stringArray0[7] = "C]&.)i*";
      stringArray0[8] = "2JHOY{^JtRC21YC";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-665);
      doubleArray0[1] = (double) (-665);
      doubleArray0[2] = (double) (-665);
      doubleArray0[3] = (double) (-665);
      doubleArray0[4] = (double) (-665);
      doubleArray0[5] = (double) (-665);
      doubleArray0[6] = (double) (-665);
      doubleArray0[7] = (double) (-665);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-665.0), (-665.0), (-665.0), (-665.0), (-665.0), (-665.0), (-665.0), (-665.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-665));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1537;
      intArray0[1] = 22;
      intArray0[2] = 22;
      intArray0[3] = (-2530);
      intArray0[4] = 93;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1537, 22, 22, (-2530), 93}, intArray0);
      assertArrayEquals(new int[] {1537, 22, 22, (-2530), 93}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "c<?/{P:y";
      stringArray0[3] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, (-665));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "INFINITE_VALUE_CONVERSION";
      stringArray0[1] = "INFINITE_VALUE_CONVERSION";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1073.0;
      doubleArray0[2] = 1972.1475726098497;
      doubleArray0[3] = (-1341.7582020673);
      doubleArray0[4] = 39.4527642333;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][8];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {1972.1475726098497, 1073.0, 39.4527642333, 0.0, (-1341.7582020673)}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {(-1341.7582020673), 0.0, 39.4527642333, 1073.0, 1972.1475726098497}, doubleArray0, 0.01);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1136.4927F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3916.867F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-3049.089F);
      floatArray0[5] = 887.5426F;
      floatArray0[6] = (-3522.433F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1136.4927F), 0.0F, 3916.867F, 0.0F, (-3049.089F), 887.5426F, (-3522.433F)}, floatArray0, 0.01F);
      
      double double0 = MathArrays.linearCombination(9.219544613762692E-9, 1972.1475726098497, 1629.0129004, (double) (-3049.089F));
      assertEquals((-4967005.496804506), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 527.6996F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 828.0F;
      floatArray0[3] = 2264.082F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-238.0175F);
      floatArray0[6] = 2861.19F;
      floatArray0[7] = 1669.6069F;
      floatArray0[8] = 2151.0608F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {527.6996F, 0.0F, 828.0F, 2264.082F, 0.0F, (-238.0175F), 2861.19F, 1669.6069F, 2151.0608F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2151.0608F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 2264.082F;
      doubleArray0[5] = (double) 1669.6069F;
      doubleArray0[6] = (-1479.121331601463);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-238.0175F);
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) (-238.0175F);
      doubleArray1[3] = (double) 0.0F;
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = (double) 527.6996F;
      doubleArray1[6] = 1242.5906816667;
      doubleArray1[7] = (double) 2151.0608F;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1593.106759672822);
      doubleArray0[2] = 0.0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1593.106759672822), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1593.106759672822), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1593.106759672822), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-563.6F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray1);
      assertEquals(0, floatArray1.length);
      assertFalse(boolean0);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-563.6F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (-1341.7582020673);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (-1341.7582020673);
      doubleArray0[7] = (double) 1.0F;
      doubleArray0[8] = (double) 0.0F;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-563.5999755859375), 0.0, (-1341.7582020673), 0.0, 1.0, 0.0, (-1341.7582020673), 1.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(3918277.0781102167, double1, 0.01);
      assertArrayEquals(new double[] {(-563.5999755859375), 0.0, (-1341.7582020673), 0.0, 1.0, 0.0, (-1341.7582020673), 1.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][4];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-477.70191);
      doubleArray0[1] = 3211.85658;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2946.783568);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (3,211.857 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1593.106759672822);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1972.1475726098497;
      doubleArray0[4] = (-1340.766488976026);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1593.106759672822), 0.0, 1972.1475726098497, (-1340.766488976026), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8225010.973827261, double1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1593.106759672822), 0.0, 1972.1475726098497, (-1340.766488976026), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1340.766488976026), 0.0, (-1593.106759672822), (-1.0), 0.0, 0.0, 0.0, 1972.1475726098497, 0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(2867.9279931384717, double2, 0.01);
      assertArrayEquals(new double[] {(-1340.766488976026), 0.0, (-1593.106759672822), (-1.0), 0.0, 0.0, 0.0, 1972.1475726098497, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1593.106759672822);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1972.1475726098497;
      doubleArray0[4] = (-1342.2191773108827);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8228908.515807264, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1593.106759672822), 0.0, 1972.1475726098497, (-1342.2191773108827), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.5F;
      floatArray0[1] = 2868.403F;
      floatArray0[2] = (-1593.1752F);
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.5F, 2868.403F, (-1593.1752F), 0.0F}, floatArray0, 0.01F);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1593.106759672822), 0.0, 1972.1475726098497, (-1342.2191773108827), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8228908.515807264, double2, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1593.106759672822), 0.0, 1972.1475726098497, (-1342.2191773108827), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1972.1475726098497, 0.0, 0.0, 0.0, (-1.0), (-1593.106759672822), (-1342.2191773108827), 0.0, 0.0}, doubleArray0, 0.01);
      
      double double3 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8228908.515807264, double3, 0.01);
      assertArrayEquals(new double[] {1972.1475726098497, 0.0, 0.0, 0.0, (-1.0), (-1593.106759672822), (-1342.2191773108827), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      
      double double4 = MathArrays.linearCombination(0.041666666666666664, 1629.0129004, 1983.1, (double) (-1593.1752F), 0.8775825500488281, 1629.0129004);
      assertEquals((-3157928.212575979), double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1629.0129004;
      doubleArray0[1] = 1629.0129004;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1629.0129004;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1529);
      intArray0[1] = (-2835);
      intArray0[2] = (-1);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1529), (-2835), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1529), (-2835), (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[][] longArray0 = new long[5][7];
      long[] longArray1 = new long[2];
      longArray1[0] = 18L;
      longArray1[1] = (long) (-2835);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (-1);
      longArray2[1] = (long) (-1529);
      longArray2[2] = (long) (-1);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) (-1529);
      longArray3[1] = 0L;
      longArray3[2] = (long) (-1);
      longArray3[3] = 18L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,835 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1146.58;
      doubleArray0[1] = (-2027.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2027.0);
      doubleArray0[4] = (-348.91885629437);
      doubleArray0[5] = (-2324.363828499);
      doubleArray0[6] = 6.283185307179586;
      doubleArray0[7] = (double) 4188;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1146.58, (-2027.0), 0.0, (-2027.0), (-348.91885629437), (-2324.363828499), 6.283185307179586, 4188.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1146.58, (-2027.0), 0.0, (-2027.0), (-348.91885629437), (-2324.363828499), 6.283185307179586, 4188.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1314645.6963999998, 4108729.0, 0.0, 4108729.0, 121744.36827777124, 5402667.20723453, 39.47841760435743, 1.7539344E7}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(140.72966, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {161357.81356279997, (-285259.02082), 0.0, (-285259.02082), (-49103.23201389555), (-327106.9313009626), 884.2305319963787, 589375.81608}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 4188;
      intArray0[1] = 4188;
      intArray0[2] = 573;
      intArray0[3] = 573;
      intArray0[4] = 4188;
      intArray0[5] = 573;
      intArray0[6] = 573;
      intArray0[7] = 573;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {4188, 4188, 573, 573, 4188, 573, 573, 573}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1537;
      intArray0[1] = 22;
      intArray0[2] = 1;
      intArray0[3] = (-2530);
      intArray0[4] = 93;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1537, 22, 1, (-2530), 93}, intArray0);
      assertArrayEquals(new int[] {1537, 22, 1, (-2530), 93}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 93;
      doubleArray0[1] = (double) 1537;
      doubleArray0[2] = (double) 22;
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {22.0, 93.0, 1537.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {1537, 22, 1, (-2530), 93}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "OVERFLOW_IN_ADDITION";
      stringArray0[1] = "<FE~rk#rNzO";
      stringArray0[2] = "}#x?yX";
      stringArray0[3] = "LyINEU-x.z|ojF>";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {22.0, 93.0, 1537.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(0.0, Double.NaN, Double.NaN, 6.283185307179586);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 808;
      intArray0[1] = (-1799);
      intArray0[2] = 0;
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1593.106759672822);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1972.1475726098497;
      doubleArray0[4] = (-1342.2191773108827);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8228908.515807264, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1593.106759672822), 0.0, 1972.1475726098497, (-1342.2191773108827), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.5F;
      floatArray0[1] = 2868.403F;
      floatArray0[2] = (-1593.1752F);
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.5F, 2868.403F, (-1593.1752F), 0.0F}, floatArray0, 0.01F);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1593.106759672822), 0.0, 1972.1475726098497, (-1342.2191773108827), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8228908.515807264, double2, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1593.106759672822), 0.0, 1972.1475726098497, (-1342.2191773108827), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1972.1475726098497, (-1593.106759672822), 0.0, 0.0, (-1342.2191773108827), 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "INFINITE_VALUE_CONVERSION";
      stringArray0[1] = "INFINITE_VALUE_CONVERSION";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1073.0;
      doubleArray0[2] = 1972.1475726098497;
      doubleArray0[3] = (-1341.7582020673);
      doubleArray0[4] = 39.4527642333;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 39.4527642333;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-5404.677114364944);
      doubleArray1[4] = (-5404.677114364944);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1073.0, 1972.1475726098497, (-1341.7582020673), 39.4527642333}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 39.4527642333, 0.0, (-5404.677114364944), (-5404.677114364944)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(7148.6674394368, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1073.0, 1972.1475726098497, (-1341.7582020673), 39.4527642333}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 39.4527642333, 0.0, (-5404.677114364944), (-5404.677114364944)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1529);
      intArray0[1] = (-2835);
      intArray0[2] = (-1);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1529), (-2835), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1529), (-2835), (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = 18L;
      longArray0[1] = (long) (-2835);
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1529);
      longArray1[1] = 0L;
      longArray1[2] = (long) (-1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      long[][] longArray0 = new long[8][3];
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[3] = (-1L);
      longArray1[4] = 0L;
      longArray1[5] = (-1004L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = (-1004L);
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-1004L);
      longArray4[1] = (-1L);
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      MathArrays.checkNonNegative(longArray3);
      assertEquals(3, longArray3.length);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray4);
      assertNotSame(longArray3, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray3);
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray4));
      assertFalse(longArray3.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-980.0526193137);
      doubleArray0[1] = (-980.0526193137);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-980.0526193137), (-980.0526193137)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {960503.1366236442, 960503.1366236442}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-980.0526193137), (-980.0526193137)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][8];
      doubleArray2[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection1, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {(-980.0526193137), (-980.0526193137)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {960503.1366236442, 960503.1366236442}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, 3969.284835548, (-81.0), 0.0, 0.0);
      assertEquals((-321512.071679388), double0, 0.01);
      
      MathArrays.scaleInPlace(3969.284835548, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-3890107.9998809663), (-3890107.9998809663)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {(-3890107.9998809663), (-3890107.9998809663)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {960503.1366236442, 960503.1366236442}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-0.2469091183723009), (-0.2469091183723009)}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1706);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-1706)}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-3,890,108 >= -3,890,108)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1593.106759672822);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1972.1475726098497;
      doubleArray0[4] = (-1341.7582020673);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1593.106759672822), 0.0, 1972.1475726098497, (-1341.7582020673), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8227671.268681034, double1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1593.106759672822), 0.0, 1972.1475726098497, (-1341.7582020673), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1341.7582020673), (-1593.106759672822), 0.0, 0.0, 1972.1475726098497, 0.0, (-1.0)}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8227671.268681034, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1341.7582020673), (-1593.106759672822), 0.0, 0.0, 1972.1475726098497, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1593.106759672822);
      double[][] doubleArray1 = new double[4][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1593.106759672822), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1593.106759672822), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1593.106759672822), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-1593.106759672822), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray3, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-3924);
      doubleArray0[1] = -0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 105.96572889175;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3924.0), -0.0, 0.0, 105.96572889175}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-7848.0), -0.0, 0.0, 211.9314577835}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-20.0), (-20.0), (-20.0), (-20.0));
      assertEquals(800.0, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 800.0;
      doubleArray0[3] = 800.0;
      doubleArray0[4] = 800.0;
      doubleArray0[5] = 800.0;
      doubleArray0[6] = 800.0;
      doubleArray0[7] = (-20.0);
      doubleArray0[8] = (-20.0);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-20.0), (-20.0), 800.0, 800.0, 800.0, 800.0, 800.0, (-20.0), (-20.0)}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-20 >= -20)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1593.106759672822);
      double[][] doubleArray1 = new double[4][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1593.106759672822), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1593.106759672822), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1593.106759672822), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-1593.106759672822), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1593.106759672822), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-193);
      int int0 = (-2096);
      intArray0[3] = (-2096);
      int int1 = 31;
      intArray0[4] = 31;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 0, (-193), (-2096), 31}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 31;
      intArray1[1] = (-193);
      intArray1[2] = 21;
      intArray1[3] = 0;
      int int2 = MathArrays.distance1(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(2534, int2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, (-193), (-2096), 31}, intArray0);
      assertArrayEquals(new int[] {31, (-193), 21, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 31, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long[][] longArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4519.8795857;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {4519.8795857}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(4519.8795857, 4519.8795857, 1.0, 863.1556903);
      assertEquals(2.04301746249179E7, double0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.04301746249179E7;
      doubleArray1[1] = 4519.8795857;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 2.04301746249179E7;
      doubleArray1[4] = 4519.8795857;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {4519.8795857}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.04301746249179E7, 4519.8795857, 1.0, 2.04301746249179E7, 4519.8795857}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 4188;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 4188, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1813;
      intArray0[2] = 0;
      intArray0[3] = 3303;
      intArray0[4] = (-1717);
      intArray0[5] = 1907;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 1813, 0, 3303, (-1717), 1907}, intArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2852.727F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-2852.727F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2852.727F);
      doubleArray0[1] = (double) (-2852.727F);
      doubleArray0[2] = 987.5;
      doubleArray0[3] = (double) (-2852.727F);
      doubleArray0[4] = (-1537.962392716885);
      doubleArray0[5] = (double) (-2852.727F);
      doubleArray0[6] = (double) (-2852.727F);
      doubleArray0[7] = (double) (-2852.727F);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-2852.727F);
      doubleArray1[1] = 987.5;
      doubleArray1[2] = 987.5;
      doubleArray1[3] = (double) (-2852.727F);
      doubleArray1[4] = (double) (-2852.727F);
      doubleArray1[5] = (double) (-2852.727F);
      doubleArray1[6] = (double) (-2852.727F);
      doubleArray1[7] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(3840.22705078125, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2852.72705078125), (-2852.72705078125), 987.5, (-2852.72705078125), (-1537.962392716885), (-2852.72705078125), (-2852.72705078125), (-2852.72705078125)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2852.72705078125), 987.5, 987.5, (-2852.72705078125), (-2852.72705078125), (-2852.72705078125), (-2852.72705078125), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3840.22705078125;
      doubleArray2[1] = (-1537.962392716885);
      doubleArray2[2] = (double) (-2852.727F);
      doubleArray2[3] = (double) (-2852.727F);
      doubleArray2[4] = 987.5;
      doubleArray2[5] = (-1537.962392716885);
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (double) (-2852.727F);
      double[] doubleArray3 = MathArrays.convolve(doubleArray0, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(15, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {(-2852.72705078125), (-2852.72705078125), 987.5, (-2852.72705078125), (-1537.962392716885), (-2852.72705078125), (-2852.72705078125), (-2852.72705078125)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3840.22705078125, (-1537.962392716885), (-2852.72705078125), (-2852.72705078125), 987.5, (-1537.962392716885), 0.0, (-2852.72705078125)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 862;
      intArray0[1] = 0;
      intArray0[2] = 358;
      intArray0[3] = 1493;
      intArray0[4] = 575;
      intArray0[5] = (-1930);
      intArray0[6] = (-1665);
      intArray0[7] = 0;
      intArray0[8] = (-1444);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {862, 0, 358, 1493, 575, (-1930), (-1665), 0, (-1444)}, intArray0);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-2357.92);
      double double2 = MathArrays.linearCombination(0.0, 0.0, (-2357.92), 0.0);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(0.0, Double.NaN, Double.NaN, 6.283185307179586);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 808;
      intArray0[1] = (-1799);
      intArray0[2] = 0;
      intArray0[3] = (-354);
      intArray0[4] = (-777);
      intArray0[5] = 665;
      intArray0[6] = (-3315);
      intArray0[7] = 3721;
      intArray0[8] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {808, (-1799), 0, (-354), (-777), 665, (-3315), 3721, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = MathArrays.linearCombination(606.7, 0.0, (-689.6389044), (-3631.02707), (-689.6389044), 3.834E-20, (-689.6389044), 20.0);
      assertEquals(2490304.752313542, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-3498);
      intArray0[1] = 2379;
      intArray0[2] = 0;
      intArray0[3] = (-740);
      intArray0[4] = 47;
      intArray0[5] = 0;
      intArray0[6] = 493;
      intArray0[7] = (-3860);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3498), 2379, 0, (-740), 47, 0, 493, (-3860)}, intArray0);
      assertArrayEquals(new int[] {(-3498), 2379, 0, (-740), 47, 0, 493, (-3860)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "MY[vb}wSrR2:<+";
      stringArray0[4] = "oa5{h!_:2";
      stringArray0[5] = "MY[vb}wSrR2:<+";
      stringArray0[6] = "#r@;7=sr@9i";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("ce)u(Yp-NqY ^;xd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.ce)u(Yp-NqY ^;xd
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-477.70191);
      doubleArray0[1] = 3211.85658;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[2] = "c<?/{P:y";
      stringArray0[3] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[4] = "c<?/{P:y";
      stringArray0[5] = "C]&.)i*";
      stringArray0[6] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 1477);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "INFINITE_VALUE_CONVERSION";
      stringArray0[1] = "NUMBER_TOO_LARGE_BOUND_EXCLUDED";
      stringArray0[2] = "";
      stringArray0[3] = "Cbx}M2[5c";
      stringArray0[4] = "c<?/{P:y";
      stringArray0[5] = "TOO_LARGE_CUTOFF_SINGULAR_VALUE";
      stringArray0[6] = "";
      stringArray0[7] = "C]&.)i*";
      stringArray0[8] = "2JHOY{^JtRC21YC";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-665));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-477.70191);
      doubleArray0[1] = 3211.85658;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3211.85658;
      doubleArray0[5] = (-2946.783568);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_oN,!RnGM04P";
      stringArray0[1] = "SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE";
      stringArray0[2] = "zM-(Dc`]V(i";
      stringArray0[3] = "V&B2nbb";
      stringArray0[4] = "REAL_FORMAT";
      stringArray0[5] = "";
      stringArray0[6] = ",6oR~}uD@=A0Y^";
      stringArray0[7] = "sample size must be positive ({0})";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1710.27F;
      floatArray0[2] = (-1.4E-45F);
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {1.0F, 1710.27F, (-1.4E-45F), Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4033.221);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-4033.221)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 2425L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 2117L;
      longArray0[4] = (-967L);
      longArray0[5] = 0L;
      longArray0[6] = 1187L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -967 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2021.174912789898);
      doubleArray0[1] = 5081.7839469509;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(2.9909676111579116E7, double0, 0.01);
      assertArrayEquals(new double[] {(-2021.174912789898), 5081.7839469509, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[8][1];
      long[] longArray1 = new long[8];
      longArray1[0] = 1L;
      longArray1[1] = 3178L;
      longArray1[2] = 2630L;
      longArray1[3] = (-1L);
      longArray1[4] = 100L;
      longArray1[5] = 2278L;
      longArray1[6] = 4003L;
      longArray1[7] = 908L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 2278L;
      longArray2[1] = 3178L;
      longArray2[2] = 2278L;
      longArray2[3] = 4003L;
      longArray2[4] = 3178L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 2630L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 3178L;
      longArray4[1] = 0L;
      longArray4[2] = 1L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 3178L;
      longArray5[1] = 2630L;
      longArray5[2] = 2278L;
      longArray5[3] = 1L;
      longArray5[4] = 908L;
      longArray5[5] = 2630L;
      longArray5[6] = 908L;
      longArray5[7] = 4003L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = (-99L);
      longArray6[1] = 4003L;
      longArray6[2] = 3178L;
      longArray6[3] = 0L;
      longArray6[4] = (-1L);
      longArray6[5] = 3178L;
      longArray6[6] = 4003L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray4));
      
      longArray0[6] = longArray7;
      long[] longArray8 = new long[2];
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray3));
      
      longArray8[0] = 2630L;
      longArray8[1] = (-1L);
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2670.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2182.414012619);
      doubleArray0[3] = 272.8137902657;
      doubleArray0[4] = 2224.521494234709;
      doubleArray0[5] = (-490.125452967367);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2670.0, 0.0, (-2182.414012619), 272.8137902657, 2224.521494234709, (-490.125452967367)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[7][7];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray1;
      doubleArray3[3] = doubleArray2;
      doubleArray3[4] = doubleArray0;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-2182.414012619);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-490.125452967367);
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = 2224.521494234709;
      doubleArray3[5] = doubleArray4;
      doubleArray3[6] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1529);
      intArray0[1] = (-2835);
      intArray0[2] = (-1);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1529), (-2835), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1529), (-2835), (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[][] longArray0 = new long[5][7];
      long[] longArray1 = new long[2];
      longArray1[0] = 18L;
      longArray1[1] = (long) (-2835);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (-1);
      longArray2[1] = (long) (-1529);
      longArray2[2] = (long) (-1);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) (-1529);
      longArray3[1] = 0L;
      longArray3[2] = (long) (-1);
      longArray3[3] = 18L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) (-1529);
      longArray4[1] = (long) (-2835);
      longArray4[2] = (long) (-1);
      longArray4[3] = (long) (-1529);
      longArray4[4] = 0L;
      longArray4[5] = (long) (-2835);
      longArray4[6] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = (long) (-1);
      longArray5[1] = 0L;
      longArray5[2] = (long) (-2835);
      longArray5[3] = (long) (-1529);
      longArray5[4] = 0L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 3 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-477.70191);
      doubleArray0[1] = 3211.85658;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2946.783568);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-477.70191), 3211.85658, 0.0, 0.0, 0.0, (-2946.783568), 0.0, 3.834E-20}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1537;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = (-2530);
      intArray0[4] = 93;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1537, 0, 1, (-2530), 93}, intArray0);
      assertArrayEquals(new int[] {1537, 0, 1, (-2530), 93}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 93;
      doubleArray0[1] = (double) 1537;
      doubleArray0[2] = (double) 0;
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 93.0, 1537.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {1537, 0, 1, (-2530), 93}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "OVERFLOW_IN_ADDITION";
      stringArray0[1] = "<FE~rk#rNzO";
      stringArray0[2] = "}#x?yX";
      stringArray0[3] = "LyINEU-x.z|ojF>";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 209;
      intArray0[1] = (-3924);
      intArray0[2] = 238;
      intArray0[3] = 1023;
      intArray0[4] = 2031;
      int[] intArray1 = new int[6];
      intArray1[0] = 1023;
      intArray1[1] = 1023;
      intArray1[2] = 238;
      intArray1[3] = 2031;
      intArray1[4] = (-3924);
      intArray1[5] = (-3924);
      MathArrays.distanceInf(intArray0, intArray1);
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-3924);
      doubleArray0[1] = (double) 1023;
      doubleArray0[2] = (double) 1023;
      doubleArray0[3] = (double) 238;
      doubleArray0[4] = (double) 1023;
      doubleArray0[5] = (double) 5955;
      doubleArray0[6] = (double) 1023;
      doubleArray0[7] = -0.0;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("4D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.4D
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2324.363828499);
      doubleArray0[3] = 1146.58;
      doubleArray0[4] = (-2027.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-348.91885629437);
      doubleArray0[7] = 6.283185307179586;
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2027.0);
      doubleArray1[2] = 6.283185307179586;
      doubleArray1[3] = (-2027.0);
      doubleArray1[4] = 0.0;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double double0 = (-2416.821166984559);
      double double1 = 0.0;
      MathArrays.linearCombination((-2416.821166984559), (-2416.821166984559), (-2416.821166984559), (-2416.821166984559), (-2416.821166984559), (-2416.821166984559), 1629.0129004, 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1629.0129004;
      doubleArray0[1] = 1629.0129004;
      doubleArray0[2] = (-2416.821166984559);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1629.0129004;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,416.821 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-1593.106759672822);
      doubleArray0[2] = (-1593.106759672822);
      doubleArray0[4] = (-1593.106759672822);
      doubleArray0[4] = (-1593.106759672822);
      int int0 = (-243);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, (-243), (-243));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-980.0526193137);
      doubleArray0[1] = 1073.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][8];
      doubleArray2[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection1, doubleArray2);
      MathArrays.linearCombination(0.0, 0.0, 3969.284835548, (-81.0), 0.0, 0.0);
      MathArrays.scaleInPlace(3969.284835548, doubleArray0);
      MathArrays.ebeDivide(doubleArray1, doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1706);
      MathArrays.distance(intArray0, intArray0);
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (4,259,042.629 >= -3,890,108)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 436.09;
      doubleArray0[1] = (-450.11716);
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 1804.376;
      MathArrays.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<Integer, Integer>>) null, 144, 144);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      int int0 = 55;
      intArray0[0] = 55;
      int int1 = 0;
      intArray0[1] = 0;
      MathArrays.distance(intArray0, intArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2589, 1422);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1593.106759672822);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1972.1475726098497;
      doubleArray0[4] = (-1341.7582020673);
      doubleArray0[5] = 39.4527642333;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = (-5404.677114364944);
      doubleArray0[8] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-563.6F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-3674.998F);
      floatArray0[6] = (-2067.6492F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-1.0F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) (-563.6F);
      doubleArray2[2] = (double) 0.0F;
      doubleArray2[3] = (double) 0.0F;
      doubleArray2[4] = (double) 0.0F;
      doubleArray2[5] = (double) 0.0F;
      doubleArray2[6] = (double) 1.0F;
      doubleArray2[7] = (double) 0.0F;
      doubleArray2[8] = (double) (-2067.6492F);
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 6.283185307179586;
      MathArrays.scale(6.283185307179586, doubleArray0);
      MathArrays.normalizeArray(doubleArray0, 6.283185307179586);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MathArrays.linearCombination(1635.691451608, 1635.691451608, (-20.0), 1635.691451608);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2642772.6958313263;
      doubleArray0[1] = 1635.691451608;
      doubleArray0[2] = 1635.691451608;
      doubleArray0[3] = 1635.691451608;
      doubleArray0[4] = (-20.0);
      doubleArray0[5] = 1635.691451608;
      doubleArray0[6] = (-20.0);
      MathArrays.equals(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,642,772.696 >= 1,635.691)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, Double.NaN, Double.NaN, 6.283185307179586);
      int[] intArray0 = new int[9];
      intArray0[0] = 808;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 808;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-349L);
      longArray0[1] = 4503599627370496L;
      longArray0[2] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -349 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3415.06261);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 493.19;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-563.682084305);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][3];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-3415.06261);
      doubleArray2[2] = (-563.682084305);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 493.19;
      doubleArray2[6] = 0.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-3415.06261), 0.0, 493.19, 0.0, (-563.682084305)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      long[][] longArray0 = new long[8][3];
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (-1L);
      longArray1[4] = 0L;
      longArray1[5] = (-1004L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = 0L;
      longArray2[1] = (-1004L);
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = (-1004L);
      longArray4[1] = (-1L);
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      longArray5[0] = (-1004L);
      longArray5[1] = 1L;
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray5[4] = (-2063L);
      longArray5[5] = 0L;
      longArray5[6] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      longArray6[0] = 1L;
      longArray6[1] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      longArray7[0] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[4];
      longArray8[0] = 0L;
      longArray8[1] = 1L;
      longArray8[2] = 792L;
      longArray8[3] = (-3146L);
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1458.47F);
      floatArray0[2] = 1027.1908F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }
}
