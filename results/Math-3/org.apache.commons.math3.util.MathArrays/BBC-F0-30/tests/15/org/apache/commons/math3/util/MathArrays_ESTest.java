/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 17:03:58 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 4.9079F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-82.444244F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 4.9079F, 0.0F, (-82.444244F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 0.0F, (double) 0.0F, (double) 0.0F, (double) (-82.444244F), (double) 0.0F, (double) 4.9079F, 993.28377, (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.097;
      doubleArray0[1] = 864.553477305178;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 51.4992269663968;
      doubleArray0[4] = 2790.65;
      doubleArray0[5] = 9.2061600169244119E18;
      doubleArray0[6] = (-188.959883);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.5962298777344623E19, double0, 0.01);
      assertArrayEquals(new double[] {0.097, 864.553477305178, 1.304E19, 51.4992269663968, 2790.65, 9.2061600169244119E18, (-188.959883)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.097, 864.553477305178, 1.304E19, 51.4992269663968, 2790.65, 9.2061600169244119E18, (-188.959883)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.097, 864.553477305178, 1.304E19, 51.4992269663968, 2790.65, 9.2061600169244119E18, (-188.959883)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(13, doubleArray2.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2859);
      intArray0[1] = 2146798441;
      intArray0[2] = (-1116);
      intArray0[3] = 2188;
      intArray0[4] = 19;
      intArray0[5] = 1594;
      intArray0[6] = (-1033);
      intArray0[7] = (-4713);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2859));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 0.3333333134651184;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-2298.0);
      doubleArray0[3] = (-1964.31);
      doubleArray0[4] = 659.7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
      doubleArray1[5] = null;
      doubleArray1[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = Float.POSITIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, Float.POSITIVE_INFINITY}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[3] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[4] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[5] = (double) Float.POSITIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, Float.POSITIVE_INFINITY}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Integer integer0 = new Integer((-2147483647));
      assertNotNull(integer0);
      assertEquals((-2147483647), (int)integer0);
      
      Integer integer1 = new Integer(1808);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1808, (int)integer1);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-2147483647);
      floatArray0[1] = (float) (-2147483647);
      floatArray0[2] = (float) 1808;
      floatArray0[3] = (float) (-2147483647);
      floatArray0[4] = (float) 1808;
      floatArray0[5] = (float) 1808;
      floatArray0[6] = (float) (-2999);
      floatArray0[7] = (float) (-2147483647);
      floatArray0[8] = (float) (-2999);
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-2999);
      floatArray1[1] = (float) 1808;
      floatArray1[2] = (float) (-2999);
      floatArray1[3] = (float) (-2147483647);
      floatArray1[4] = 521.82385F;
      floatArray1[5] = (float) (-2999);
      floatArray1[6] = (float) (-2147483647);
      floatArray1[7] = (float) 1808;
      floatArray1[8] = (float) (-2999);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-2999.0F), 1808.0F, (-2999.0F), (-2.14748365E9F), 521.82385F, (-2999.0F), (-2.14748365E9F), 1808.0F, (-2999.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2.14748365E9F), (-2.14748365E9F), 1808.0F, (-2.14748365E9F), 1808.0F, 1808.0F, (-2999.0F), (-2.14748365E9F), (-2999.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2999));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2005.497681003027);
      doubleArray0[1] = 1581.8519287109375;
      doubleArray0[2] = 889.48469;
      doubleArray0[3] = 441.6441632872683;
      doubleArray0[4] = 4068.18;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2.406059756598514E7, double0, 0.01);
      assertArrayEquals(new double[] {(-2005.497681003027), 1581.8519287109375, 889.48469, 441.6441632872683, 4068.18}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1340.0F);
      floatArray0[1] = 0.5F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 4518.0894F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = Float.POSITIVE_INFINITY;
      floatArray0[6] = (-2381.7278F);
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1340.0F);
      floatArray1[1] = (-2381.7278F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.5F;
      floatArray1[4] = (-1340.0F);
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1340.0F), 0.5F, 0.0F, 4518.0894F, 1.0F, Float.POSITIVE_INFINITY, (-2381.7278F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1340.0F), (-2381.7278F), 0.0F, 0.5F, (-1340.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,005.498 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (-99.282);
      doubleArray0[2] = 1.5707963267948966;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = (-2752.465676597622);
      doubleArray0[6] = Double.NaN;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1014.3545416082799));
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.34217729E8, (-99.282), 1.5707963267948966, 0.0, 1.34217729E8, (-2752.465676597622), Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-507.18265593578684), 3.751673405725468E-4, (-5.935733370648924E-6), -0.0, (-507.18265593578684), 0.01040103168657305, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[0][3];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {Double.NaN, 1.34217729E8, 1.34217729E8, 1.5707963267948966, 0.0, (-99.282), (-2752.465676597622)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 252);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.19454771280288696;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 735.25579;
      doubleArray0[5] = (-431.09153901307);
      doubleArray0[6] = (-0.12502530217170715);
      doubleArray0[7] = (-2138.6010474176614);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-571.1706227));
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.834E-20, 0.19454771280288696, Double.NaN, 3.834E-20, 735.25579, (-431.09153901307), (-0.12502530217170715), (-2138.6010474176614)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1938002811359597E-20, 0.06057671211227032, Double.NaN, 1.1938002811359597E-20, 228.93807219844606, (-134.2298384113554), (-0.03892937946836002), (-665.9005038197346)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-6.663542893624021E-14);
      doubleArray0[1] = (-117.735);
      doubleArray0[2] = (-3567.554827684);
      doubleArray0[3] = (-4061.0);
      doubleArray0[4] = 2847.588920854817;
      doubleArray0[5] = 1009.4422207150357;
      doubleArray0[6] = 1192.008382;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-6.663542893624021E-14), (-117.735), (-3567.554827684), (-4061.0), 2847.588920854817, 1009.4422207150357, 1192.008382}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-2697.2503041141476), double0, 0.01);
      assertArrayEquals(new double[] {(-6.663542893624021E-14), (-117.735), (-3567.554827684), (-4061.0), 2847.588920854817, 1009.4422207150357, 1192.008382}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("Cumulative probability function returned NaN for argument {0} p = {1}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.Cumulative probability function returned NaN for argument {0} p = {1}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2051.3F);
      floatArray0[1] = 422.637F;
      floatArray0[2] = (-187.5F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-2051.3F), 422.637F, (-187.5F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 422.637F;
      doubleArray0[1] = (double) (-2051.3F);
      doubleArray0[2] = (double) (-2051.3F);
      doubleArray0[3] = (double) 422.637F;
      doubleArray0[4] = (double) 422.637F;
      doubleArray0[5] = (double) (-2051.3F);
      doubleArray0[6] = (double) (-187.5F);
      doubleArray0[7] = (double) (-187.5F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3637.261917371112, double0, 0.01);
      assertArrayEquals(new double[] {422.6369934082031, (-2051.300048828125), (-2051.300048828125), 422.6369934082031, 422.6369934082031, (-2051.300048828125), (-187.5), (-187.5)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-2051.3F), 422.637F, (-187.5F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 746);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Double double0 = new Double(1.304E19);
      assertNotNull(double0);
      assertEquals(1.304E19, (double)double0, 0.01);
      
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1.304E19;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.608E19, double1, 0.01);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 0.0, 0.0, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-798);
      intArray0[1] = (-851);
      intArray0[2] = 2146679045;
      intArray0[3] = (-1565);
      intArray0[4] = 105;
      intArray0[5] = (-2413);
      intArray0[6] = 2128983386;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2146679045;
      intArray1[1] = 2146679045;
      intArray1[2] = (-2413);
      intArray1[3] = (-2413);
      intArray1[4] = 105;
      intArray1[5] = (-2413);
      intArray1[6] = 105;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals((-20909266), int0);
      assertArrayEquals(new int[] {2146679045, 2146679045, (-2413), (-2413), 105, (-2413), 105}, intArray1);
      assertArrayEquals(new int[] {(-798), (-851), 2146679045, (-1565), 105, (-2413), 2128983386}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 0.0, 0.0, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1595.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3454.3F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 1595.0F;
      floatArray1[4] = 1595.0F;
      floatArray1[5] = 3454.3F;
      floatArray1[6] = 1595.0F;
      floatArray1[7] = 1595.0F;
      floatArray1[8] = 1595.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {1595.0F, 0.0F, 3454.3F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1595.0F, 1595.0F, 3454.3F, 1595.0F, 1595.0F, 1595.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1687.043280698237;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 1.3421908882368523E8;
      doubleArray0[5] = 358.1131040804714;
      doubleArray0[6] = (-3482.064537532322);
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-662);
      intArray0[1] = 36;
      intArray0[2] = 2;
      intArray0[3] = (-412);
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-412);
      intArray1[1] = (-662);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(1493.6336598649, 0.0, 0.0, 0.0, 0.7675435543060303, 1.2246467991473532E-16);
      assertEquals(double1, double0, 0.01);
      assertEquals(9.399697569870626E-17, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1559);
      intArray0[1] = (-2060);
      intArray0[2] = 764;
      intArray0[3] = 1794;
      intArray0[4] = 2552;
      intArray0[5] = 2747;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2060);
      intArray1[1] = (-1559);
      intArray1[2] = (-1559);
      intArray1[3] = 2552;
      intArray1[4] = (-1559);
      intArray1[5] = 764;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(10177, int0);
      assertArrayEquals(new int[] {(-1559), (-2060), 764, 1794, 2552, 2747}, intArray0);
      assertArrayEquals(new int[] {(-2060), (-1559), (-1559), 2552, (-1559), 764}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 764;
      doubleArray0[1] = (double) 2747;
      doubleArray0[2] = (double) 764;
      doubleArray0[3] = 447.7394877551;
      doubleArray0[4] = (double) (-1559);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {447.7394877551, 764.0, 2747.0, (-1559.0), 764.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      int int1 = MathArrays.distanceInf(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      assertEquals(4111, int1);
      assertArrayEquals(new int[] {(-1559), (-2060), 764, 1794, 2552, 2747}, intArray0);
      assertArrayEquals(new int[] {(-2060), (-1559), (-1559), 2552, (-1559), 764}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(492.634088999508, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 280, 55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-225.6);
      doubleArray2[1] = 1290.8;
      doubleArray2[2] = 3.834E-20;
      doubleArray2[3] = (-4944.104901425917);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1921.61065930652);
      doubleArray2[6] = (-1733.9);
      doubleArray2[7] = (-263.6);
      doubleArray2[8] = 0.0;
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, 0.8192316229362437);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-225.6), 1290.8, 3.834E-20, (-4944.104901425917), 0.0, (-1921.61065930652), (-1733.9), (-263.6), 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.02370072907588008, (-0.13560683107777485), (-4.027863265821109E-24), 0.5194099769123512, -0.0, 0.2018775426664323, 0.18215733220154465, 0.027692873157810237, -0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray3.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray3, (double[]) null);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-225.6), 1290.8, 3.834E-20, (-4944.104901425917), 0.0, (-1921.61065930652), (-1733.9), (-263.6), 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.02370072907588008, (-0.13560683107777485), (-4.027863265821109E-24), 0.5194099769123512, -0.0, 0.2018775426664323, 0.18215733220154465, 0.027692873157810237, -0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.5574076175689697;
      doubleArray2[2] = 1870.20396747;
      doubleArray2[3] = 788.606;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 1.5574076175689697, 1870.20396747, 788.606}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray2.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(16, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 1493.6336598649, 1493.6336598649, 0.0, 1493.6336598649, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 653.9606648176648;
      doubleArray0[1] = 714.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 259.0107546;
      doubleArray0[4] = 4168959.776119438;
      doubleArray0[5] = 1517.938531;
      doubleArray0[6] = 1889.43677;
      doubleArray0[7] = 2.0992790123456787E36;
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {653.9606648176648, 714.0, 0.0, 259.0107546, 4168959.776119438, 1517.938531, 1889.43677, 2.0992790123456787E36}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 4168959.776119438);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long[][] longArray0 = new long[1][3];
      long[] longArray1 = new long[11];
      longArray0[0] = longArray1;
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-0.0013888888689039883);
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (-2243.7);
      MathArrays.scaleInPlace((-2243.7), doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.116249955159878, -0.0, 5034189.6899999995}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer integer0 = new Integer(197);
      assertNotNull(integer0);
      assertEquals(197, (int)integer0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 197;
      doubleArray0[1] = (double) 197;
      doubleArray0[2] = (double) 197;
      doubleArray0[3] = (double) 197;
      doubleArray0[4] = 0.8109631538391113;
      doubleArray0[5] = (double) 197;
      doubleArray0[6] = (-3362.07554424);
      doubleArray0[7] = (-712.6109196);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-712.6109196);
      doubleArray1[1] = (double) 197;
      doubleArray1[2] = (double) 197;
      doubleArray1[3] = (double) 197;
      doubleArray1[4] = (-3362.07554424);
      doubleArray1[5] = 0.8109631538391113;
      doubleArray1[6] = 0.8109631538391113;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {197.0, 197.0, 197.0, 197.0, 0.8109631538391113, 197.0, (-3362.07554424), (-712.6109196)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-712.6109196), 197.0, 197.0, 197.0, (-3362.07554424), 0.8109631538391113, 0.8109631538391113}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1.63E18);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.335825015383472E17, (-9.2218279281970176E16), (-9.2218279281970176E16), (-9.2218279281970176E16), 1.57383158124774707E18, (-3.796224700919925E14), (-3.796224700919925E14)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-712.6109196), 197.0, 197.0, 197.0, (-3362.07554424), 0.8109631538391113, 0.8109631538391113}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 296.3727138580932;
      doubleArray0[1] = (-108.9762801946);
      doubleArray0[3] = 1.986821492305628E-8;
      doubleArray0[4] = 1207.88992903;
      doubleArray0[5] = 1.44888888888888883E18;
      doubleArray0[6] = (-648.019240619);
      doubleArray0[7] = (-3387.30595);
      doubleArray0[8] = (-1517.938531);
      double double0 = MathArrays.linearCombination(1186.91, (-1.0), 296.3727138580932, 40.19140625, (-1.0), 1250.97401634897);
      assertEquals(9473.75212773666, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.44888888888888883E18, double1, 0.01);
      assertArrayEquals(new double[] {296.3727138580932, (-108.9762801946), 0.0, 1.986821492305628E-8, 1207.88992903, 1.44888888888888883E18, (-648.019240619), (-3387.30595), (-1517.938531)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 4066.147697579969;
      doubleArray0[1] = 4066.147697579969;
      doubleArray0[3] = 1305.3513363653942;
      doubleArray0[4] = 0.0;
      doubleArray0[2] = 1938.0936508;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = 3.834E-20;
      Double double0 = new Double(1305.3513363653942);
      assertNotNull(double0);
      assertEquals(1305.3513363653942, (double)double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.8441344853345161E19, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 4066.147697579969, 1938.0936508, 1305.3513363653942, 0.0, 0.0, 1.304E19, 1.304E19, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 4066.147697579969, 1938.0936508, 1305.3513363653942, 0.0, 0.0, 1.304E19, 1.304E19, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 8132.295395159938, 3876.1873016, 2610.7026727307884, 0.0, 0.0, 2.608E19, 2.608E19, 7.668E-20}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, (double[]) null);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 4066.147697579969, 1938.0936508, 1305.3513363653942, 0.0, 0.0, 1.304E19, 1.304E19, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 8132.295395159938, 3876.1873016, 2610.7026727307884, 0.0, 0.0, 2.608E19, 2.608E19, 7.668E-20}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Integer integer0 = new Integer((-2147483647));
      assertNotNull(integer0);
      assertEquals((-2147483647), (int)integer0);
      
      Integer integer1 = new Integer(1808);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1808, (int)integer1);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2999));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1119;
      intArray0[1] = 1119;
      intArray0[2] = 1119;
      intArray0[3] = 1119;
      intArray0[4] = 1119;
      intArray0[5] = 1119;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1119;
      intArray1[1] = 1119;
      intArray1[2] = 1119;
      intArray1[3] = 1119;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double(2.7553817452272217E-6);
      assertNotNull(double0);
      assertEquals(2.7553817452272217E-6, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1938.0936508;
      doubleArray0[1] = 1305.3513363653942;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 2.7553817452272217E-6;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 1938.0936508;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 3.834E-20;
      doubleArray0[8] = 2.7553817452272217E-6;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double1, 0.01);
      assertArrayEquals(new double[] {1938.0936508, 1305.3513363653942, 3.834E-20, 2.7553817452272217E-6, 3.834E-20, 1938.0936508, 1.304E19, 3.834E-20, 2.7553817452272217E-6}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2149.0F;
      floatArray0[1] = (-1066.851F);
      floatArray0[2] = 3754.3494F;
      floatArray0[3] = -0.0F;
      floatArray0[4] = (-1.0F);
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {2149.0F, (-1066.851F), 3754.3494F, -0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1592.79);
      doubleArray0[1] = 1.304E19;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {(-1592.79), 1.304E19}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Double double1 = new Double(1.304E19);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.304E19, (double)double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 9007199254740990L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {9007199254740990L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 9007199254740990L;
      doubleArray0[1] = (double) 9007199254740990L;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 9007199254740990L;
      doubleArray1[1] = (double) 9007199254740990L;
      doubleArray1[2] = (double) 9007199254740990L;
      doubleArray1[3] = (double) 9007199254740990L;
      doubleArray1[4] = (double) 9007199254740990L;
      doubleArray1[5] = (double) 9007199254740990L;
      doubleArray1[6] = (double) 9007199254740990L;
      doubleArray1[7] = (double) 9007199254740990L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {9.00719925474099E15, 9.00719925474099E15}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.00719925474099E15, 9.00719925474099E15, 9.00719925474099E15, 9.00719925474099E15, 9.00719925474099E15, 9.00719925474099E15, 9.00719925474099E15, 9.00719925474099E15}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(1.86285714285714278E18, 2618.66741, 18.99, 0.15, 9.00719925474099E15, 2111.86907986623, 1298.9315226152, 9.00719925474099E15);
      assertEquals(4.908925050130455E21, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2147483647);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2147483647)}, intArray0);
      assertArrayEquals(new int[] {(-2147483647)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long[][] longArray0 = new long[1][3];
      long[] longArray1 = new long[11];
      longArray0[0] = longArray1;
      int[] intArray0 = new int[0];
      double double0 = MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NaN, (-1.0));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (-2014.0);
      doubleArray0[8] = 0.0;
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1.0), Double.NaN, Double.NaN, (-2014.0), 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 53.52705052;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = 0.0;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-1074));
      assertNotNull(integer0);
      assertEquals((-1074), (int)integer0);
      
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      assertNotNull(pair0);
      
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      Pair<String, Object> pair2 = (Pair<String, Object>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair2).getKey();
      doReturn((Object) null).when(pair2).getValue();
      Pair<String, Object> pair3 = new Pair<String, Object>(pair2);
      assertNotNull(pair3);
      assertTrue(pair3.equals((Object)pair2));
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 102, (-2581));
      assertNotNull(objectArray0);
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertTrue(pair3.equals((Object)pair2));
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertEquals(102, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1119.0;
      double[] doubleArray1 = MathArrays.scale(1119.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1119.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1252161.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[][] doubleArray2 = new double[6][9];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1119.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 2444.94;
      doubleArray3[1] = 1119.0;
      doubleArray3[2] = 1119.0;
      doubleArray3[3] = 1119.0;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1119.0;
      doubleArray4[1] = 2444.94;
      doubleArray4[2] = 2444.94;
      doubleArray4[3] = 2444.94;
      doubleArray4[4] = 1119.0;
      doubleArray4[5] = 1119.0;
      doubleArray4[6] = 1119.0;
      doubleArray4[7] = 1119.0;
      try { 
        MathArrays.ebeMultiply(doubleArray3, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2680;
      intArray0[1] = 3945;
      intArray0[2] = (-2556);
      intArray0[3] = (-3517);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1723));
      assertNotNull(integer0);
      assertEquals((-1723), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1723));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1723), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals((-1723), (int)integer2);
      assertEquals(4, integerArray0.length);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(1, (int)integer3);
      
      integerArray0[3] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(4, integerArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.scale((-1723), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[][] longArray0 = new long[0][7];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(696.0, 7513590.550081, (-0.49999999999999994), (-470.5236016), 3940.1143004903843, 3.834E-20, 1.0, 7513590.550081);
      assertEquals(5.236972848668258E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 4180.2261204898;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1938.663);
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = 4180.2261204898;
      doubleArray1[4] = (double) 0L;
      doubleArray1[5] = (double) 0L;
      doubleArray1[6] = (double) 0L;
      doubleArray1[7] = 4180.2261204898;
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(6221.494600529636, double0, 0.01);
      assertArrayEquals(new double[] {(-1938.663), 0.0, 0.0, 4180.2261204898, 0.0, 0.0, 0.0, 4180.2261204898}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4180.2261204898, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      double double0 = 25.303289224993904;
      doubleArray0[0] = 25.303289224993904;
      double double1 = (-785.1893778);
      doubleArray0[1] = (-785.1893778);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 10.20802259;
      double double2 = 678.0;
      doubleArray0[4] = 678.0;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-723.7251596621874);
      doubleArray1[1] = 3360.9439619029;
      doubleArray1[2] = 3360.9439619029;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-723.7251596621874);
      doubleArray1[5] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1119;
      doubleArray0[1] = 24.991;
      doubleArray0[2] = (double) 1119;
      doubleArray0[3] = (double) 1119;
      doubleArray0[4] = (double) 1119;
      doubleArray0[5] = (double) 1119;
      doubleArray0[6] = (double) 1119;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1119.0, 24.991, 1119.0, 1119.0, 1119.0, 1119.0, 1119.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(8.112963841460665E31, 3596.9807891, 1.8021067132683696E16, 0.0, (-302.49), (double) 1119, 0.19454771280288696, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.9182175080396947E35, double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2741.0929480922387, double2, 0.01);
      assertArrayEquals(new double[] {1119.0, 24.991, 1119.0, 1119.0, 1119.0, 1119.0, 1119.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.19454771280288696;
      doubleArray1[1] = 2442.4873;
      doubleArray1[2] = 3596.9807891;
      doubleArray1[3] = 24.991;
      doubleArray1[4] = 0.19454771280288696;
      doubleArray1[5] = 2741.0929480922387;
      doubleArray1[6] = (double) 1119;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 24.991);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4.89871106104439E-4, 6.150182585334869, 9.057196984773226, 0.0629273335382762, 4.89871106104439E-4, 6.902071553920096, 2.817641800221323}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.19454771280288696, 2442.4873, 3596.9807891, 24.991, 0.19454771280288696, 2741.0929480922387, 1119.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {1119.0, 24.991, 1119.0, 1119.0, 1119.0, 1119.0, 1119.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1119;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1119}, intArray0);
      assertArrayEquals(new int[] {1119}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      double double0 = (-37.5651361253);
      Double double1 = new Double((-37.5651361253));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-37.5651361253), (double)double1, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(object0).when(field0).getZero();
      int int0 = 102;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 102, 102);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[2];
      long[][] longArray0 = new long[1][7];
      long[] longArray1 = new long[1];
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 835;
      intArray0[1] = 2176;
      intArray0[2] = (-568);
      intArray0[3] = 1644;
      intArray0[4] = 1013;
      intArray0[5] = (-3082);
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.8021067132683696E16;
      doubleArray1[1] = 3726.775;
      doubleArray1[2] = (-999.15314);
      doubleArray1[3] = (-1011.2794);
      double double0 = 3358.55;
      doubleArray1[4] = 3358.55;
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long[][] longArray0 = new long[1][3];
      long[] longArray1 = new long[11];
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (-758.556411285);
      doubleArray0[2] = 2527.72677;
      doubleArray0[3] = 3.616748353567656E7;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = (-3672.407250537);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1244.3272829);
      doubleArray0[8] = 1.5830993332061267E-10;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -758.556 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long[][] longArray0 = new long[1][3];
      long[] longArray1 = new long[11];
      longArray0[0] = longArray1;
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1126);
      assertNotNull(integer0);
      assertEquals(1126, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-5388));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-5388), (int)integer1);
      
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (int)integerArray0[1];
      doubleArray0[1] = (double) (int)integerArray0[0];
      doubleArray0[2] = (double) (int)integerArray0[1];
      doubleArray0[3] = (double) (int)integerArray0[1];
      doubleArray0[4] = (double) 1126;
      doubleArray0[5] = (double) (int)integerArray0[0];
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer integer0 = new Integer(1126);
      assertNotNull(integer0);
      assertEquals(1126, (int)integer0);
      
      int int0 = (-5388);
      Integer integer1 = new Integer(1126);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1126, (int)integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[8];
      int int1 = 2;
      Integer integer2 = new Integer(2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int1));
      assertEquals(2, (int)integer2);
      
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      int int2 = 387;
      Integer integer3 = new Integer(387);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(387, (int)integer3);
      
      integerArray0[6] = integer3;
      integerArray0[7] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, integerArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Integer integer0 = new Integer((-2147483647));
      assertNotNull(integer0);
      assertEquals((-2147483647), (int)integer0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double0 = new Double((-2147483647));
      assertEquals((-2.147483647E9), double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2.147483647E9);
      doubleArray1[1] = (double) 1855;
      MathArrays.scaleInPlace(1855, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3.983582165185E12), 3441025.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {(-3.983582165185E12), 3441025.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray1.length);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long[][] longArray0 = new long[1][3];
      long[] longArray1 = new long[11];
      longArray0[0] = longArray1;
      Integer[] integerArray0 = new Integer[2];
      int int0 = 1126;
      Integer integer0 = new Integer(1126);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1126, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-5388));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-5388), (int)integer1);
      
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (int)integerArray0[1];
      doubleArray0[1] = (double) (int)integerArray0[0];
      doubleArray0[2] = (double) (int)integerArray0[1];
      doubleArray0[3] = (double) (int)integerArray0[1];
      doubleArray0[4] = (double) 1126;
      doubleArray0[5] = (double) (int)integerArray0[0];
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -5,388 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3809.3792155;
      double double0 = 496.319297;
      doubleArray3[1] = 496.319297;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Integer integer0 = new Integer((-2147483647));
      assertNotNull(integer0);
      assertEquals((-2147483647), (int)integer0);
      
      Integer integer1 = new Integer(1808);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1808, (int)integer1);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4213.991213;
      Integer integer0 = new Integer(134217729);
      assertNotNull(integer0);
      assertEquals(134217729, (int)integer0);
      
      Integer integer1 = new Integer(2111);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2111, (int)integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer1;
      integerArray0[6] = integer1;
      integerArray0[7] = integer0;
      integerArray0[8] = integer1;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, integerArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {8427.982426, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4213.991213, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 3360.9439619029;
      doubleArray0[2] = 2516.76206656298;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 3360.9439619029, 2516.76206656298, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(3360.9439619029, 3360.9439619029, 3360.9439619029, 1.1628113031727338);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.1299852458679792E7, double1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 33;
      intArray0[1] = 906;
      int int0 = 675;
      intArray0[2] = 675;
      intArray0[3] = (-1045);
      intArray0[4] = 6;
      intArray0[5] = (-655);
      intArray0[6] = 297;
      intArray0[7] = 17;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = (-4521);
      intArray1[0] = (-4521);
      intArray1[1] = 1417;
      intArray1[2] = 297;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = MathArrays.scale(1.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      
      int int0 = (-2181);
      double[] doubleArray4 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray4.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-398.685881328);
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 0.9305076599121094;
      doubleArray0[3] = 826.159652612;
      doubleArray0[4] = 1603.5;
      doubleArray0[5] = 1520.3861;
      doubleArray0[6] = 406.0;
      doubleArray0[7] = 242.7501894138;
      doubleArray0[8] = 3367.400737881;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1.8014398795204868E16, double0, 0.01);
      assertArrayEquals(new double[] {(-398.685881328), 1.34217729E8, 0.9305076599121094, 826.159652612, 1603.5, 1520.3861, 406.0, 242.7501894138, 3367.400737881}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-398.685881328), 1.34217729E8, 0.9305076599121094, 826.159652612, 1603.5, 1520.3861, 406.0, 242.7501894138, 3367.400737881}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-797.371762656), 2.68435458E8, 1.8610153198242188, 1652.319305224, 3207.0, 3040.7722, 812.0, 485.5003788276, 6734.801475762}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2.1654F;
      floatArray0[1] = 1618.902F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = Float.NaN;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = Float.NaN;
      floatArray1[1] = Float.NaN;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.1654F, 1618.902F, 0.0F, (-1.0F), Float.NaN}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, 875.40044656, 875.40044656, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[2];
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = Double.NaN;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(1938.0936508, 1.34217729E8, (double) 0.0F, (-1492.3201824), 0.0, 1.304E19, (-1074.567507190296), 1.304E19);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-1.4012360293501335E22), double2, 0.01);
      
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 3360.9439619029;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 3360.9439619029, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[2][2];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3360.9439619029, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3360.9439619029, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      try { 
        MathArrays.ebeAdd(doubleArray3, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 3360.9439619029;
      doubleArray0[2] = 2516.76206656298;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 3360.9439619029, 2516.76206656298, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2516.76206656298;
      doubleArray1[1] = 3360.9439619029;
      doubleArray1[2] = 2516.76206656298;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-693.53489);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, 875.40044656, 875.40044656, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1508.803F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1014.0587F);
      floatArray0[3] = 1888.953F;
      floatArray0[4] = 2497.638F;
      floatArray0[5] = 1698.81F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1508.803F, 0.0F, (-1014.0587F), 1888.953F, 2497.638F, 1698.81F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1119;
      intArray0[1] = 1119;
      intArray0[2] = 1119;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1119, 1119, 1119}, intArray0);
      assertEquals(3, intArray0.length);
      
      double double1 = MathArrays.linearCombination(210.0, Double.NaN, (double) 2497.638F, (double) 1508.803F);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 1119;
      intArray1[2] = 1119;
      intArray1[3] = 1119;
      intArray1[4] = 0;
      intArray1[5] = 0;
      double double2 = MathArrays.distance(intArray0, intArray1);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1119.0, double2, 0.01);
      assertArrayEquals(new int[] {1119, 1119, 1119}, intArray0);
      assertArrayEquals(new int[] {0, 1119, 1119, 1119, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, 875.40044656, 875.40044656, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = Double.NaN;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 1938.0936508;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 1938.0936508;
      doubleArray1[4] = 875.40044656;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = 3.834E-20;
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1938.0936508, Double.NaN, 1938.0936508, 875.40044656, Double.NaN, 3.834E-20}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 875.40044656);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2413.433725286749;
      doubleArray0[0] = 1.1628113031727338;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.1628113031727338, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.1628113031727338, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[20];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2413.433725286749;
      doubleArray1[1] = 1.1628113031727338;
      doubleArray1[2] = 1.1628113031727338;
      int[] intArray0 = new int[3];
      intArray0[0] = 1923;
      intArray0[2] = 1104;
      intArray0[2] = 1720;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {1923, 0, 1720}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1119;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1119}, intArray0);
      assertEquals(1, intArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 0, (double) 1119, (double) 0, (double) 0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {1119}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 4066.147697579969;
      doubleArray0[2] = 225.7172999707;
      doubleArray0[3] = 1321.348;
      doubleArray0[4] = 0.0;
      doubleArray0[2] = 1938.0936508;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = 3.834E-20;
      Double double0 = new Double(1321.348);
      assertNotNull(double0);
      assertEquals(1321.348, (double)double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.8441344853345161E19, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 4066.147697579969, 1938.0936508, 1321.348, 0.0, 0.0, 1.304E19, 1.304E19, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("%MMHF$Q^9?E^tZ-e![H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.%MMHF$Q^9?E^tZ-e![H
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double double0 = new Double(6.2095238095238093E17);
      assertNotNull(double0);
      assertEquals(6.2095238095238093E17, (double)double0, 0.01);
      
      double double1 = MathArrays.linearCombination(4066.147697579969, 1.304E19, 225.7172999707, 1321.348, (-515.0), (-878.07497), 958.6, 3.834E-20);
      assertEquals(5.30225659764428E22, double1, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 958.6;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 958.6;
      doubleArray0[3] = 4066.147697579969;
      doubleArray0[4] = 1938.0936508;
      doubleArray0[5] = 5.30225659764428E22;
      doubleArray0[6] = 225.7172999707;
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(5.302256757992609E22, double2, 0.01);
      assertArrayEquals(new double[] {958.6, 1.304E19, 958.6, 4066.147697579969, 1938.0936508, 5.30225659764428E22, 225.7172999707}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-205);
      intArray0[1] = (-205);
      intArray0[2] = (-205);
      intArray0[3] = (-205);
      intArray0[4] = (-205);
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-205);
      intArray1[1] = (-205);
      intArray1[2] = (-205);
      intArray1[3] = 143;
      intArray1[4] = 1115;
      intArray1[5] = (-205);
      intArray1[6] = (-205);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1668, int0);
      assertArrayEquals(new int[] {(-205), (-205), (-205), (-205), (-205)}, intArray0);
      assertArrayEquals(new int[] {(-205), (-205), (-205), 143, 1115, (-205), (-205)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      doubleArray0[1] = (-1270.0);
      doubleArray0[2] = (-1270.0);
      doubleArray0[3] = (-1270.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 624;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {624}, intArray0);
      assertArrayEquals(new int[] {624, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-1,270 <= -1,270)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3072.1099;
      doubleArray0[1] = 3211.03;
      MathArrays.scaleInPlace(3072.1099, doubleArray0);
      assertArrayEquals(new double[] {9437859.23767801, 9864637.052197}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3072.1099;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 3072.1099;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[2][9];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {9437859.23767801, 9864637.052197}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {9437859.23767801, 9864637.052197}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray0, (-2480.34179922199));
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {9437859.23767801, 9864637.052197}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1212.7507453357339), (-1267.5910538862563)}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(9864637.052197, double1, 0.01);
      assertArrayEquals(new double[] {9437859.23767801, 9864637.052197}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3072.1099, 0.0, 3072.1099, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (-2480.34179922199);
      doubleArray4[1] = 9864637.052197;
      doubleArray4[2] = 0.0;
      try { 
        MathArrays.ebeMultiply(doubleArray4, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long[][] longArray0 = new long[1][3];
      long[] longArray1 = new long[1];
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2011.0;
      doubleArray0[1] = 1437.28774562502;
      doubleArray0[2] = 2413.433725;
      doubleArray0[3] = (-818.846134);
      doubleArray0[4] = 575.42131076;
      doubleArray0[5] = (-818.846134);
      doubleArray0[6] = 1876.711;
      doubleArray0[7] = 1480.8359594746967;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = MathArrays.linearCombination(1.0, (-1270.0), 2077.483, 2.356194490192345, (-1270.0), (-1684.50842), 1.44888888888888883E18, 1609.70148101);
      assertEquals(2.33227859026338E21, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.33227859026338E21;
      doubleArray0[1] = 2.33227859026338E21;
      doubleArray0[2] = 1.44888888888888883E18;
      doubleArray0[3] = (-1684.50842);
      doubleArray0[4] = (-1684.50842);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.33227859026338E21, 2.33227859026338E21, 1.44888888888888883E18, (-1684.50842), (-1684.50842)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.4395234226009383E42, 5.4395234226009383E42, 2.0992790123456787E36, 2837568.617050896, 2837568.617050896}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.33227859026338E21, 2.33227859026338E21, 1.44888888888888883E18, (-1684.50842), (-1684.50842)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      double double1 = MathArrays.linearCombination(752.8710910317, 1609.70148101, (-1821.0888), 2.0, 1.0, (-1270.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1206985.532643342, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 4066.147697579969;
      doubleArray0[2] = 225.7172999707;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (4,066.148 >= 225.717)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, 875.40044656, 875.40044656, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 308.549F;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 308.549F;
      doubleArray0[2] = Double.NaN;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {308.54901123046875, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(1938.0936508, 1.34217729E8, (double) 308.549F, (-1492.3201824), 0.0, 1.304E19, (-1074.567507190296), 1.304E19);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-1.4012360293501335E22), double2, 0.01);
      
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertArrayEquals(new double[] {308.54901123046875, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.34217729E8;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (-1074.567507190296);
      doubleArray1[3] = (-1184.5074);
      doubleArray1[4] = 4.9E-324;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = 1.304E19;
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4.141274757254901E10, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {308.54901123046875, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, Double.NaN, (-1074.567507190296), (-1184.5074), 4.9E-324, Double.NaN, 1.304E19}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("org.apache.commons.math3.util.MathArrays$2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.org.apache.commons.math3.util.MathArrays$2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 3211.03;
      doubleArray0[1] = 3211.03;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = 0.0;
      doubleArray1[1] = 0.0;
      double[][] doubleArray2 = new double[2][9];
      doubleArray2[0] = doubleArray0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 3,211.03)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1145;
      intArray0[1] = 1119;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1145, 1119}, intArray0);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1109.0747F;
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 9007199254740990L;
      longArray3[1] = 9007199254740990L;
      longArray3[2] = 9007199254740990L;
      Integer integer0 = new Integer((-931));
      assertNotNull(integer0);
      assertEquals((-931), (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-931), (int)integer1);
      assertEquals(4, integerArray0.length);
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1145;
      intArray0[1] = 1119;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1145, 1119}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1145;
      longArray0[1] = (long) 1119;
      longArray0[2] = (long) 1119;
      longArray0[3] = (long) 1119;
      longArray0[4] = (long) 1119;
      longArray0[5] = (long) 1119;
      longArray0[6] = (long) 1119;
      longArray0[7] = (long) 1119;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1145L, 1119L, 1119L, 1119L, 1119L, 1119L, 1119L, 1119L}, longArray0);
      assertEquals(8, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1145L, 1119L, 1119L, 1119L, 1119L, 1119L, 1119L, 1119L}, longArray0);
      assertEquals(8, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = 3072.1099;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3072.1099;
      doubleArray0[1] = 3211.03;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {3072.1099, 3211.03}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(3.834E-20, (-768.397), 0.0, 1.0, 3072.1099, (-768.397), (-1.0), 1.44888888888888883E18);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-1.44888888889124941E18), double2, 0.01);
      
      double double3 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-768.397);
      doubleArray2[1] = 208.2637003359468;
      doubleArray2[2] = (-1.44888888889124941E18);
      doubleArray2[3] = 3072.1099;
      doubleArray2[4] = (-571.686065793954);
      doubleArray2[5] = 3.834E-20;
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3072.1099, 3211.03}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-768.397), 208.2637003359468, (-1.44888888889124941E18), 3072.1099, (-571.686065793954), 3.834E-20}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2360600.0308303), (-1827536.843297305), (-4.451145899562807E21), (-4.652425688896459E21), 8108354.629779343, (-1835701.1078463602), 1.231108902E-16}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("%MMHF$Q^9?E^tZ-e![H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.%MMHF$Q^9?E^tZ-e![H
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-541);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-541)}, intArray0);
      assertArrayEquals(new int[] {(-541)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.15;
      doubleArray0[1] = 0.15;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.15;
      double[] doubleArray1 = MathArrays.scale(0.15, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.15, 0.15, 0.0, 0.15}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0225, 0.0225, 0.0, 0.0225}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.06749999999999999, double0, 0.01);
      assertArrayEquals(new double[] {0.15, 0.15, 0.0, 0.15}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-541);
      doubleArray2[1] = (double) (-541);
      doubleArray2[2] = (double) (-541);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.06749999999999999;
      doubleArray2[5] = 0.15;
      doubleArray2[6] = (double) (-541);
      doubleArray2[7] = 0.06749999999999999;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 4066.147697579969;
      doubleArray0[2] = 225.7172999707;
      doubleArray0[3] = 1321.348;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1938.0936508;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = (-878.07497);
      doubleArray0[8] = 3.834E-20;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 4066.147697579969, 225.7172999707, 1321.348, 0.0, 1938.0936508, 1.304E19, (-878.07497), 3.834E-20}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(225.7172999707, 1.304E19, 3.834E-20, 1321.348, 0.0, 4066.147697579969, 3.834E-20, 1894.218);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.943353591617928E21, double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.304E19, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 4066.147697579969, 225.7172999707, 1321.348, 0.0, 1938.0936508, 1.304E19, (-878.07497), 3.834E-20}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 4066.147697579969, 225.7172999707, 1321.348, 0.0, 1938.0936508, 1.304E19, (-878.07497), 3.834E-20}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("%MMHF$Q^9?E^tZ-e![H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.%MMHF$Q^9?E^tZ-e![H
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 4066.147697579969;
      doubleArray0[2] = 225.7172999707;
      doubleArray0[3] = 1321.348;
      doubleArray0[4] = 0.0;
      doubleArray0[2] = 1938.0936508;
      doubleArray0[6] = 1.304E19;
      Integer integer0 = new Integer(129);
      assertNotNull(integer0);
      assertEquals(129, (int)integer0);
      
      Integer integer1 = new Integer((-3298));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-3298), (int)integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      Integer integer2 = new Integer(2094);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(2094, (int)integer2);
      
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4213.991213;
      doubleArray0[1] = 1378.7468460878338;
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {4213.991213, 1378.7468460878338, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(1808);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1808, (int)integer1);
      
      Integer[] integerArray0 = new Integer[21];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer2 = new Integer(1808);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(1808, (int)integer2);
      
      integerArray0[2] = integer2;
      double double0 = MathArrays.linearCombination((double) 1808, (-818.846134), (double) int0, 1745960.5371039999, (-0.7853981633974483), (-3036.619195195789));
      assertEquals(267871.68197084405, double0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-982);
      intArray0[1] = (-982);
      intArray0[2] = (-982);
      intArray0[3] = (-982);
      intArray0[4] = (-982);
      intArray0[5] = (-982);
      intArray0[6] = (-982);
      intArray0[7] = (-982);
      intArray0[8] = 1;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-982));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      int int0 = (-2808);
      intArray0[4] = (-2808);
      intArray0[5] = 1;
      intArray0[6] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 1, 1, 0, (-2808), 1, 1}, intArray0);
      assertArrayEquals(new int[] {1}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1, intArray1.length);
      
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, (-2893.1911892866));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 1854);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1109.0747F;
      long[][] longArray0 = new long[5][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 9007199254740990L;
      longArray3[1] = 9007199254740990L;
      longArray3[2] = 9007199254740990L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 9007199254740990L;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 9007199254740990L;
      doubleArray0[1] = (double) 9007199254740990L;
      doubleArray0[2] = (double) 1109.0747F;
      doubleArray0[3] = (double) (-1285L);
      doubleArray0[4] = (double) 1109.0747F;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {9.00719925474099E15, 9.00719925474099E15, 1109.07470703125, (-1285.0), 1109.07470703125}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, (double) (-1285L), (double) 9007199254740990L, (double) 9007199254740990L, (-940.0), (double) 9007199254740990L);
      assertEquals(8.112963841459818E31, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1.801439850948548E16, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {9.00719925474099E15, 9.00719925474099E15, 1109.07470703125, (-1285.0), 1109.07470703125}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      long[] longArray0 = new long[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(1808);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1808, (int)integer1);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Integer integer2 = new Integer(1);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(1, (int)integer2);
      
      Integer integer3 = new Integer(1808);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(1808, (int)integer3);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[8];
      Integer integer4 = new Integer(1083);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(1083, (int)integer4);
      
      integerArray0[0] = integer4;
      integerArray0[1] = integer3;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[5] = integer1;
      integerArray0[6] = integer2;
      integerArray0[7] = integer1;
      boolean boolean2 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = 1109.0747F;
      floatArray0[0] = 1109.0747F;
      long long0 = 9007199254740990L;
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double0 = (-898.17611);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-898.17611);
      doubleArray1[1] = (double) 1109.0747F;
      doubleArray1[2] = (double) 9007199254740990L;
      doubleArray1[3] = (double) 1109.0747F;
      MathArrays.scaleInPlace(66.173, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-59435.00772703), 73390.8005883789, 5.9603339628397555E17, 73390.8005883789}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      
      MathArrays.checkNonNegative(longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray2, longArray1);
      assertEquals(0, longArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float[] floatArray0 = new float[2];
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2184.8518694599484);
      doubleArray2[1] = 87.957472;
      doubleArray2[2] = 3073.0;
      doubleArray2[3] = 3.834E-20;
      doubleArray2[4] = 1196.5;
      doubleArray2[5] = 3.834E-20;
      doubleArray2[6] = 7733674.260228995;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(6542.309341459948, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2184.8518694599484), 87.957472, 3073.0, 3.834E-20, 1196.5, 3.834E-20, 7733674.260228995}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, 875.40044656, 875.40044656, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 308.549F;
      floatArray0[1] = (-985.65F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1990.3715F);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-985.65F);
      doubleArray0[1] = (double) (-985.65F);
      Integer integer0 = new Integer(1808);
      assertNotNull(integer0);
      assertEquals(1808, (int)integer0);
      
      Integer integer1 = new Integer(1808);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1808, (int)integer1);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3072.1099;
      doubleArray0[1] = 3211.03;
      MathArrays.scaleInPlace(3072.1099, doubleArray0);
      assertArrayEquals(new double[] {9437859.23767801, 9864637.052197}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3072.1099;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 3072.1099;
      doubleArray1[3] = 3072.1099;
      doubleArray1[4] = 3072.1099;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1270.0);
      doubleArray0[1] = (-1270.0);
      doubleArray0[2] = (-1270.0);
      doubleArray0[3] = (-1270.0);
      doubleArray0[4] = (-1270.0);
      double[] doubleArray1 = MathArrays.scale((-1270.0), doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1270.0), (-1270.0), (-1270.0), (-1270.0), (-1270.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1612900.0, 1612900.0, 1612900.0, 1612900.0, 1612900.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      long[][] longArray0 = new long[3][5];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = 9007199254740990L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 9007199254740990L;
      longArray2[2] = 9007199254740990L;
      longArray2[3] = 9007199254740990L;
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1270.0), (-1270.0), (-1270.0), (-1270.0), (-1270.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1612900.0, 1612900.0, 1612900.0, 1612900.0, 1612900.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.scaleInPlace(0.01745329052209854, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1270.0), (-1270.0), (-1270.0), (-1270.0), (-1270.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {28150.412283092737, 28150.412283092737, 28150.412283092737, 28150.412283092737, 28150.412283092737}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.checkNonNegative(longArray1);
      assertFalse(longArray1.equals((Object)longArray2));
      assertArrayEquals(new long[] {0L, 9007199254740990L}, longArray1);
      assertNotSame(longArray1, longArray2);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = (-898.17611);
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1321.348);
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1321.348, double0, 0.01);
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 134217729;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1103);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1, 134217729}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(1103, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 2413.433725;
      doubleArray0[0] = 2413.433725;
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 3.142)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2413.433725286749;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-394.74424361952015);
      doubleArray0[8] = 4349.43;
      double double0 = MathArrays.linearCombination(0.9, 4349.43, 2413.433725286749, (-394.74424361952015), 0.0, (-2406.92441093257), 0.0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.4898026689122226E7, double1, 0.01);
      assertArrayEquals(new double[] {2413.433725286749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-394.74424361952015), 4349.43}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2413.433725286749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-394.74424361952015), 4349.43}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2413.433725286749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-394.74424361952015), 4349.43}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4826.867450573498, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-789.4884872390403), 8698.86}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1321.348);
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1321.348, double0, 0.01);
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1745960.5371039999}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1745960.5371039999}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1747281.8851039999}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Pair<String, String> pair0 = new Pair<String, String>("", "");
      assertNotNull(pair0);
      
      Pair<String, String> pair1 = new Pair<String, String>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      Field<Pair<String, String>> field0 = (Field<Pair<String, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1, pair0, pair0, pair1, pair0).when(field0).getZero();
      Pair<String, String>[][] pairArray0 = MathArrays.buildArray(field0, 1128, 0);
      assertNotNull(pairArray0);
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertEquals(1128, pairArray0.length);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1745960.5371039999}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1747281.8851039999}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      
      double double1 = MathArrays.linearCombination(1.0, 1321.348, 3659.4592819, (-1537.99705246743), (-3.141592653589793), (-1321.348));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-5622765.104017142), double1, 0.01);
      
      double[] doubleArray4 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1745960.5371039999}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray4.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1745960.5371039999}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1747281.8851039999}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathArrays.linearCombination(929.95, 929.95, 2413.433725286749, 2413.433725286749, 7733674.260228995, Double.NaN, 929.95, 2413.433725);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 929.95;
      doubleArray0[1] = 929.95;
      doubleArray0[2] = 2413.433725;
      doubleArray0[3] = 2413.433725286749;
      doubleArray0[4] = 7733674.260228995;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 2413.433725;
      doubleArray0[7] = 7733674.260228995;
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {929.95, 929.95, 2413.433725, 2413.433725286749, 7733674.260228995, Double.NaN, 2413.433725, 7733674.260228995}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {929.95, 929.95, 2413.433725, 2413.433725286749, 7733674.260228995, Double.NaN, 2413.433725, 7733674.260228995}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(2413.433725, Double.NaN, (-4273.787604559138), 1.34217729E8, (-4273.787604559138), (-4273.787604559138));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = MathArrays.linearCombination(3073.0, 2413.433725, 1.304E19, 3.834E-20);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(7416482.3368786, double3, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {929.95, 929.95, 2413.433725, 2413.433725286749, 7733674.260228995, Double.NaN, 2413.433725, 7733674.260228995}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double4 = MathArrays.linearCombination(86.915, 1.304E19, Double.NaN, (-329.29));
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("td(Jo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.td(Jo
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3072.1099;
      doubleArray0[1] = 3211.03;
      MathArrays.scaleInPlace(3072.1099, doubleArray0);
      assertArrayEquals(new double[] {9437859.23767801, 9864637.052197, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3072.1099;
      double[] doubleArray2 = new double[13];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3211.03;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {9437859.23767801, 9864637.052197, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(13, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = MathArrays.linearCombination(5.206150291559893E-8, 5.206150291559893E-8, 5.206150291559893E-8, 5.206150291559893E-8);
      assertEquals(5.420800171661831E-15, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 5.206150291559893E-8;
      doubleArray0[2] = 5.420800171661831E-15;
      doubleArray0[3] = 5.420800171661831E-15;
      doubleArray0[4] = 5.206150291559893E-8;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 5.206150291559893E-8, 5.420800171661831E-15, 5.420800171661831E-15, 5.206150291559893E-8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 2.7104000858309155E-15, 2.9385074501088937E-29, 2.9385074501088937E-29, 2.7104000858309155E-15}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[][] doubleArray2 = new double[7][3];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 5.420800171661831E-15;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = 5.420800171661831E-15;
      doubleArray3[5] = 28.5399;
      doubleArray3[6] = 5.206150291559893E-8;
      doubleArray3[7] = 5.206150291559893E-8;
      doubleArray3[8] = 5.420800171661831E-15;
      doubleArray2[4] = doubleArray3;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-818.846134);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-818.846134)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[][] longArray0 = new long[4][5];
      long[] longArray1 = new long[3];
      longArray1[0] = (-848L);
      longArray1[1] = (-848L);
      longArray1[2] = (-848L);
      longArray0[0] = longArray1;
      longArray0[1] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-95L);
      longArray2[1] = (-848L);
      longArray0[2] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[1] = (-848L);
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = (-848L);
      longArray3[6] = 0L;
      longArray3[7] = (-1313L);
      longArray3[8] = (-848L);
      longArray0[3] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4213.991213;
      doubleArray0[1] = 1378.7468460878338;
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {4213.991213, 1378.7468460878338, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.9658664808838364E7, double1, 0.01);
      assertArrayEquals(new double[] {4213.991213, 1378.7468460878338, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 4213.991213;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-403.4856);
      doubleArray3[2] = 1.9658664808838364E7;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-985.6500244140625);
      doubleArray3[5] = 4213.991213;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 1378.7468460878338;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray3, doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 1378.7468460878338}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {0.0, (-403.4856), 1.9658664808838364E7, 0.0, (-985.6500244140625), 4213.991213}, doubleArray3, 0.01);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertEquals(2, doubleArray4.length);
      assertEquals(6, doubleArray3.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertEquals(2, doubleArray4.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4213.991213;
      doubleArray0[1] = 1378.7468460878338;
      doubleArray0[2] = 0.0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-346.68304F);
      floatArray0[1] = 296.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-346.68304F), 296.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = 308.549F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-985.65F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-985.65F), (-1.0F), 0.0F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-386);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-386)}, intArray0);
      assertEquals(1, intArray0.length);
      
      double double0 = MathArrays.linearCombination((double) (-386), (double) 0.0F, (double) (-382), (double) (-386));
      assertEquals(147452.0, double0, 0.01);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3072.1099;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {3072.1099, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(9437859.23767801, double1, 0.01);
      assertArrayEquals(new double[] {3072.1099, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {3072.1099, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      long[][] longArray0 = new long[1][3];
      long[] longArray1 = new long[1];
      longArray1[0] = (-95L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 2651.782541;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.34217729E8, 2651.782541, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3171.36566903);
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = 4349.43;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {1.34217729E8, 2651.782541, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3171.36566903), 0.0, 4349.43, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Integer integer0 = new Integer(816);
      assertNotNull(integer0);
      assertEquals(816, (int)integer0);
      
      Integer integer1 = new Integer(6);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(6, (int)integer1);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3072.1099;
      doubleArray0[1] = 3211.03;
      MathArrays.scaleInPlace(3072.1099, doubleArray0);
      assertArrayEquals(new double[] {9437859.23767801, 9864637.052197}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3072.1099;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 3072.1099;
      doubleArray1[3] = 3072.1099;
      doubleArray1[4] = 3072.1099;
      long[][] longArray0 = new long[7][9];
      long[] longArray1 = new long[1];
      longArray1[0] = 0L;
      longArray0[0] = longArray1;
      longArray0[1] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = (-848L);
      longArray0[2] = longArray2;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-848L);
      longArray3[1] = (-95L);
      longArray3[2] = (-848L);
      longArray3[3] = 0L;
      longArray3[4] = (-848L);
      longArray3[5] = (-848L);
      longArray3[6] = (-848L);
      longArray0[3] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 0L;
      longArray4[1] = (-95L);
      longArray4[2] = (-95L);
      longArray4[3] = (-95L);
      longArray4[4] = 0L;
      longArray4[5] = (-95L);
      longArray4[6] = 0L;
      longArray0[4] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 0L;
      longArray5[1] = (-848L);
      longArray5[2] = 0L;
      longArray0[5] = longArray5;
      long[] longArray6 = new long[2];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = 0L;
      longArray6[1] = (-848L);
      longArray0[6] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-818.846134);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-818.846134)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-818.846134)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {(-818.846134)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 1.304E19);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-818.846134)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-757.0F);
      floatArray1[1] = (-757.0F);
      floatArray1[2] = (-1334.0F);
      floatArray1[3] = (-757.0F);
      floatArray1[4] = (-757.0F);
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1.304E19, double2, 0.01);
      assertArrayEquals(new double[] {(-818.846134)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-450.8937437);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.304E19, Double.NEGATIVE_INFINITY, (-450.8937437), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = (-450.8937437);
      try { 
        MathArrays.normalizeArray(doubleArray1, 0.4794255495071411);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 308.549F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-985.65F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {308.549F, 0.0F, 0.0F, (-985.65F), (-1.0F), 0.0F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-386);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-386)}, intArray0);
      assertEquals(1, intArray0.length);
      
      double double0 = MathArrays.linearCombination((double) (-386), (double) 0.0F, (double) (-386), 1.304E19);
      assertEquals((-5.03344E21), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2883.0;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = 2883.0;
      doubleArray2[3] = 2883.0;
      doubleArray2[4] = 41.2863315847;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2883.0, Double.NaN, 2883.0, 2883.0, 41.2863315847, 0.0, Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 6105.9820261012;
      doubleArray0[1] = (-2603.691135);
      doubleArray0[2] = 4682.750079910619;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 136.1263575;
      doubleArray0[5] = 23.380184635897;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {6105.9820261012, (-2603.691135), 4682.750079910619, (-1.0), 136.1263575, 23.380184635897}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 136.1263575;
      doubleArray1[1] = 4682.750079910619;
      doubleArray1[2] = 136.1263575;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 6105.9820261012;
      double[][] doubleArray2 = new double[7][7];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      double double0 = MathArrays.linearCombination((-1.0), 6105.9820261012, (-2011.0), 136.1263575, 4682.750079910619, 4682.750079910619);
      assertEquals(2.164829222394431E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 6.482610288782226;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      double double1 = 2704.850071311738;
      doubleArray0[2] = 2704.850071311738;
      double double2 = 1.304E19;
      doubleArray0[3] = 1.304E19;
      double double3 = 1.0;
      doubleArray0[4] = 1.0;
      double double4 = 1.34217729E8;
      doubleArray0[5] = 1.304E19;
      int int0 = 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.482610288782226, 0.0, 2704.850071311738, 1.304E19, 1.0, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2413.433725286749;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-396.7);
      doubleArray0[8] = 4349.43;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2413.433725286749, 0.0, 3.141592653589793, 0.0, 0.0, 0.0, 0.0, (-396.7), 4349.43}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      Integer integer0 = new Integer(1808);
      assertNotNull(integer0);
      assertEquals(1808, (int)integer0);
      
      Integer integer1 = new Integer(1808);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1808, (int)integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4213.991213;
      double double0 = 1378.7468460878338;
      doubleArray0[1] = 1378.7468460878338;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4213.991213, 1378.7468460878338, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.7757721943241213E7, 1.162005418873119E7, 1900942.865597149, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 679.6F;
      floatArray0[2] = 1583.77F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 679.6F, 1583.77F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[3] = (-41);
      intArray0[1] = 580;
      intArray0[2] = (-3713);
      intArray0[3] = 77;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 580, (-3713), 77}, intArray0);
      assertEquals(4, intArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, (double) 1.0F, (-2433.18645), (double) 77);
      assertEquals((-187355.35665), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, 875.40044656, 875.40044656, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 308.549F;
      floatArray0[1] = (-985.65F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1990.3715F);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-985.65F);
      doubleArray0[1] = (double) (-985.65F);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-985.65 >= -985.65)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = (-2395);
      intArray0[4] = 0;
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double double0 = MathArrays.linearCombination(354.550097, (double) 0, 1.625, 1321.348, 0.041666666666621166, (-3201.58878), (double) 0, 354.550097);
      assertEquals(2013.7909675001456, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1243.6779535095889);
      doubleArray0[1] = (-1243.6779535095889);
      doubleArray0[2] = (-1243.6779535095889);
      doubleArray0[3] = (-1243.6779535095889);
      doubleArray0[4] = (-1243.6779535095889);
      double[] doubleArray1 = MathArrays.scale((-1243.6779535095889), doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1243.6779535095889), (-1243.6779535095889), (-1243.6779535095889), (-1243.6779535095889), (-1243.6779535095889)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1546734.8520457991, 1546734.8520457991, 1546734.8520457991, 1546734.8520457991, 1546734.8520457991}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = 9007199254740990L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[1] = 9007199254740990L;
      longArray2[2] = 9007199254740990L;
      longArray2[3] = 9007199254740990L;
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 9007199254740990L;
      longArray3[1] = 9007199254740990L;
      longArray3[2] = 0L;
      longArray3[3] = 9007199254740990L;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 75.46624);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1243.6779535095889), (-1243.6779535095889), (-1243.6779535095889), (-1243.6779535095889), (-1243.6779535095889)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1546734.8520457991, 1546734.8520457991, 1546734.8520457991, 1546734.8520457991, 1546734.8520457991}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {15.093248, 15.093248, 15.093248, 15.093248, 15.093248}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 9007199254740990L;
      floatArray0[1] = (float) 9007199254740990L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {9.0071993E15F, 9.0071993E15F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1321.348);
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1321.348, double0, 0.01);
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1745960.5371039999}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1745960.5371039999}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1747281.8851039999}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, String>> field0 = (Field<Pair<String, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Pair<String, String>[][] pairArray0 = MathArrays.buildArray(field0, 1128, 0);
      assertNotNull(pairArray0);
      assertEquals(1128, pairArray0.length);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1745960.5371039999}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1747281.8851039999}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      
      double double1 = MathArrays.linearCombination(1.0, 1321.348, 3659.4592819, (-1537.99705246743), (-3.141592653589793), (-1321.348));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-5622765.104017142), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1378.7468460878338;
      double[][] doubleArray1 = new double[5][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 1378.7468460878338, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1378.7468460878338, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0, 25);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 1378.7468460878338, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(25, doubleArray3.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 25;
      floatArray0[1] = (float) 25;
      floatArray0[2] = (float) 25;
      floatArray0[3] = (float) 25;
      floatArray0[4] = 3.4028235E38F;
      floatArray0[5] = (float) 25;
      floatArray0[6] = (float) 25;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {25.0F, 25.0F, 25.0F, 25.0F, 3.4028235E38F, 25.0F, 25.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = (-2395);
      intArray0[4] = 0;
      intArray0[5] = (-687);
      intArray0[6] = (-1363);
      intArray0[7] = (-1765);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1717.320942124015);
      doubleArray0[3] = (double) 0;
      MathArrays.scaleInPlace((-3832.0), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, 6580773.8502192255, -0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray4 = new double[2][8];
      doubleArray4[0] = doubleArray0;
      doubleArray4[1] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[5];
      intArray0[0] = 8;
      intArray0[1] = (-2820);
      intArray0[2] = 4;
      intArray0[3] = (-46);
      intArray0[4] = (-57);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {8, (-2820), 4, (-46), (-57)}, intArray0);
      assertArrayEquals(new int[] {8, (-2820), 4, (-46), (-57)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2413.433725286749;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-396.7);
      doubleArray0[8] = 4349.43;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2413.433725286749, 0.0, 3.141592653589793, 0.0, 0.0, 0.0, 0.0, (-396.7), 4349.43}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.scaleInPlace(1.89175413249E7, doubleArray0);
      assertArrayEquals(new double[] {4.565623223301943E10, 0.0, 5.943120885028717E7, 0.0, 0.0, 0.0, 0.0, (-7.504588643587831E9), 8.228052176475981E10}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2050L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2050L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double double0 = MathArrays.linearCombination(1745960.5371039999, 2.0, 0.07073719799518585, 0.0, 1368.4015853, (-818.846134));
      assertEquals(2371410.726325623, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-982);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-982);
      doubleArray0[1] = (double) (-982);
      doubleArray0[2] = (double) (-982);
      doubleArray0[3] = (double) (-982);
      doubleArray0[4] = (double) (-982);
      doubleArray0[5] = (double) (-982);
      doubleArray0[6] = (double) (-982);
      doubleArray0[7] = (double) (-982);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-982.0), (-982.0), (-982.0), (-982.0), (-982.0), (-982.0), (-982.0), (-982.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-982), (-982));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4213.991213;
      doubleArray0[1] = 1378.7468460878338;
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(100.0, 100.0, 2164.334070469, 4213.991213, 100.0, 3.834E-20, (-1729.0), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-898.17611), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 2651.782541;
      doubleArray0[2] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.34217729E8, 2651.782541, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-3032L);
      longArray0[3] = 0L;
      longArray0[4] = (-3201L);
      longArray0[5] = (-925L);
      longArray0[6] = 0L;
      long long0 = 0L;
      longArray0[7] = 0L;
      longArray0[8] = (-1581L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,032 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 4066.147697579969;
      doubleArray0[2] = 225.7172999707;
      doubleArray0[3] = 1321.348;
      doubleArray0[4] = 0.0;
      doubleArray0[2] = 1938.0936508;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = (-878.07497);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 4066.147697579969, 1938.0936508, 1321.348, 0.0, 0.0, 1.304E19, (-878.07497), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<String, String>>) null, (-3171), (-3171));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-982);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-982), (-982));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, 875.40044656, 875.40044656, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 308.549F;
      floatArray0[1] = (-985.65F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1990.3715F);
      floatArray0[4] = 1583.77F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {308.549F, (-985.65F), 0.0F, (-1990.3715F), 1583.77F, (-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double double1 = MathArrays.linearCombination((double) 308.549F, (double) (-1990.3715F), 2084.232230930119, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-614127.1459522918), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2704.850071311738;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.34217729E8;
      int int0 = 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 2704.850071311738, 1.304E19, 1.0, 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      long[][] longArray0 = new long[0][3];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = Integer.getInteger("|r)&wV]");
      assertNull(integer0);
      
      integerArray0[0] = null;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(18);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(18, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer1));
      assertEquals(0, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer3));
      assertEquals(0, (int)integer5);
      
      integerArray0[5] = integer5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3072.1099;
      doubleArray0[1] = 3211.03;
      MathArrays.scaleInPlace(3072.1099, doubleArray0);
      assertArrayEquals(new double[] {9437859.23767801, 9864637.052197}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3072.1099;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 3072.1099;
      doubleArray1[3] = 3072.1099;
      doubleArray1[4] = 3072.1099;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3072.1099, 0.0, 3072.1099, 3072.1099, 3072.1099}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3072.1099, 0.0, 3072.1099, 3072.1099, 3072.1099}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      long[][] longArray0 = new long[7][9];
      long[] longArray1 = new long[1];
      longArray1[0] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = (-848L);
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray3[1] = (-848L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-848L);
      longArray4[1] = (-95L);
      longArray4[2] = (-848L);
      longArray4[3] = 0L;
      longArray4[4] = (-848L);
      longArray4[5] = (-848L);
      longArray4[6] = (-848L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 0L;
      longArray5[1] = (-95L);
      longArray5[2] = (-95L);
      longArray5[3] = (-95L);
      longArray5[4] = 0L;
      longArray5[5] = (-95L);
      longArray5[6] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = 0L;
      longArray6[1] = (-848L);
      longArray6[2] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray6));
      
      longArray7[0] = 0L;
      longArray7[1] = (-848L);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double double0 = MathArrays.linearCombination(20.0, 20.0, (-2823.96251), (-2823.96251), 20.0, 20.0, (-1261.3), 20.0);
      assertEquals(7950338.257885499, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-2943);
      intArray0[1] = 3073;
      int int0 = 0;
      intArray0[2] = 0;
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {(-2943), 3073, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3073;
      doubleArray0[1] = (double) (-2943);
      doubleArray0[2] = 2338.14;
      doubleArray0[3] = (double) (-2943);
      doubleArray0[4] = (double) 3073;
      doubleArray0[5] = (double) (-2943);
      doubleArray0[6] = (double) 3073;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (3,073 > -2,943)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-809.8);
      doubleArray0[1] = (-3495.4982182501067);
      doubleArray0[2] = 1758.05614;
      doubleArray0[3] = 340.4499968850823;
      doubleArray0[4] = (-3137.21491842);
      doubleArray0[5] = (-420.536035);
      doubleArray0[6] = (-1338.496);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-809.8), (-3495.4982182501067), 1758.05614, 340.4499968850823, (-3137.21491842), (-420.536035), (-1338.496)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1619.6), (-6990.996436500213), 3516.11228, 680.8999937701647, (-6274.42983684), (-841.07207), (-2676.992)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-420.536035), (-2146.1), (-3495.4982182501067), (-809.8));
      assertEquals(3733166.8418524363, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-749.5);
      doubleArray0[2] = 108.9296886;
      doubleArray0[3] = (-62.07344681797253);
      doubleArray0[4] = 2073.0386770694354;
      doubleArray0[5] = (-2375.4952646601);
      doubleArray0[6] = 1828.3284750443;
      doubleArray0[7] = 0.0;
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = (-1639L);
      longArray0[0] = (-1639L);
      longArray0[1] = 723L;
      longArray0[2] = 0L;
      long long1 = (-731L);
      longArray0[3] = (-731L);
      longArray0[4] = (-3454L);
      longArray0[5] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,639 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-557.1726545070346);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1438.28532;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, (-557.1726545070346), 0.0, 1438.28532, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, (-1114.3453090140692), 0.0, 2876.57064, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-67.07349971);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 1819.0072;
      doubleArray0[6] = (-445.7);
      doubleArray0[7] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NEGATIVE_INFINITY, (-445.7), (-67.07349971), 1819.0072, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][3];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = Double.NaN;
      doubleArray1[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = Double.NaN;
      doubleArray1[2] = doubleArray3;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.NaN;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = Double.NaN;
      doubleArray4[3] = Double.NaN;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = Double.NaN;
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 0.0;
      doubleArray4[8] = 0.0;
      doubleArray1[7] = doubleArray4;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = (-2276.1633);
      double double1 = 0.0;
      double double2 = MathArrays.linearCombination((-2276.1633), (-2276.1633), 0.0, 0.0, (-2276.1633), 0.0, (-2276.1633), 1999.5074744);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(629713.8369619207, double2, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double double3 = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, 875.40044656, 875.40044656, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 308.549F;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 308.549F;
      doubleArray0[2] = Double.NaN;
      double double1 = new Double(Double.NaN);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(1938.0936508, 1.34217729E8, (double) 308.549F, (-1492.3201824), 0.0, 1.304E19, (-1074.484751747189), 1.304E19);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-1.4011281162523218E22), double2, 0.01);
      
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertArrayEquals(new double[] {308.54901123046875, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (-1074.484751747189);
      doubleArray1[3] = (-1184.5074);
      doubleArray1[4] = 4.9E-324;
      double double4 = MathArrays.linearCombination((-2424.596), (double) 308.549F, 1.304E19, 294.92, (-3.940510424527919E-20), 131.0, (double) 308.549F, 0.9985313415527344);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(3.8457567999999995E21, double4, 0.01);
      
      double double5 = MathArrays.safeNorm(doubleArray1);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double5, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, (-1074.484751747189), (-1184.5074), 4.9E-324, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("%MMHF$Q^9?E^tZ-e![H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.%MMHF$Q^9?E^tZ-e![H
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = 1119;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1119;
      doubleArray0[1] = (double) 1119;
      doubleArray0[2] = (-452.457662333863);
      doubleArray0[3] = (double) 1119;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1119.0, 1119.0, (-452.457662333863), 1119.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1252161.0, 2504322.0, 239560.75169681455, 1491721.7516968146, 2709039.936204624, (-1012600.2483031854), 1252161.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, 875.40044656, 875.40044656, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.304E19, Double.NaN, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1252.76634977;
      doubleArray0[1] = 1.0E-5;
      doubleArray0[2] = 20.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1569823.5271160502, double0, 0.01);
      assertArrayEquals(new double[] {1252.76634977, 1.0E-5, 20.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1252.76634977, 1.0E-5, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2704.850071311738;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 2704.850071311738, 1.304E19, 1.0, 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 2704.850071311738, 1.304E19, 1.0, 1.34217729E8}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray2);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 2704.850071311738, 1.304E19, 1.0, 1.34217729E8}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray2.length);
      assertEquals(11, doubleArray3.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<String, String>>) null, 755, 1128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = (-2395);
      intArray0[4] = 0;
      intArray0[5] = (-687);
      intArray0[6] = (-1363);
      intArray0[7] = (-1765);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 2, 0, (-2395), 0, (-687), (-1363), (-1765)}, intArray0);
      assertArrayEquals(new int[] {0, 2, 0, (-2395), 0, (-687), (-1363), (-1765)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (134,217,729 >= 2)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0E-6);
      doubleArray0[1] = 4066.147697579969;
      doubleArray0[2] = 225.7172999707;
      doubleArray0[3] = 1321.348;
      doubleArray0[4] = (-4573.853);
      doubleArray0[5] = 1938.0936508;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = (-878.07497);
      doubleArray0[8] = 3.834E-20;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0E-6), 4066.147697579969, 225.7172999707, 1321.348, (-4573.853), 1938.0936508, 1.304E19, (-878.07497), 3.834E-20}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(225.7172999707, 1.304E19, 3.834E-20, 1321.348, (-4573.853), 4066.147697579969, 3.834E-20, 1894.218);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.9433535916179094E21, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, 1938.0936508, 1938.0936508, 208.2637003359468, (-571.686065793954), (-878.07497), 225.7172999707, (-1.0E-6));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(905617.7801589392, double2, 0.01);
      
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(1.304E19, double3, 0.01);
      assertArrayEquals(new double[] {(-1.0E-6), 4066.147697579969, 225.7172999707, 1321.348, (-4573.853), 1938.0936508, 1.304E19, (-878.07497), 3.834E-20}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0E-6), 4066.147697579969, 225.7172999707, 1321.348, (-4573.853), 1938.0936508, 1.304E19, (-878.07497), 3.834E-20}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      
      String string0 = "%MMHF$Q^9?E^tZ-e![H";
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("%MMHF$Q^9?E^tZ-e![H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.%MMHF$Q^9?E^tZ-e![H
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1321.348);
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1321.348, double0, 0.01);
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Integer integer0 = new Integer(1117);
      assertNotNull(integer0);
      assertEquals(1117, (int)integer0);
      
      Integer integer1 = new Integer(84);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(84, (int)integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.scaleInPlace((-841.1290164724), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1321.348);
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1321.348, double0, 0.01);
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1745960.5371039999}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1321.348)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1745960.5371039999}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1747281.8851039999}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      Field<Pair<String, String>> field0 = (Field<Pair<String, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1128, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1247);
      intArray0[1] = (-4510);
      intArray0[2] = (-3949);
      intArray0[3] = 121;
      intArray0[4] = (-23);
      intArray0[5] = (-2147483631);
      intArray0[6] = 66;
      intArray0[7] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1247), (-4510), (-3949), 121, (-23), (-2147483631), 66, 0}, intArray0);
      assertArrayEquals(new int[] {(-1247), (-4510), (-3949), 121, (-23), (-2147483631), 66, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1270.0);
      doubleArray0[1] = (-1270.0);
      doubleArray0[2] = (-1270.0);
      doubleArray0[3] = (-1270.0);
      doubleArray0[4] = (-1270.0);
      double[] doubleArray1 = MathArrays.scale((-1270.0), doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1270.0), (-1270.0), (-1270.0), (-1270.0), (-1270.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1612900.0, 1612900.0, 1612900.0, 1612900.0, 1612900.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      long[][] longArray0 = new long[3][5];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = 9007199254740990L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 9007199254740990L;
      longArray2[2] = 9007199254740990L;
      longArray2[3] = 9007199254740990L;
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 9007199254740990L;
      longArray3[1] = 9007199254740990L;
      longArray3[2] = 0L;
      longArray3[3] = 9007199254740990L;
      longArray0[2] = longArray3;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (-765.454F);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 9007199254740990L;
      floatArray0[4] = (float) 9007199254740990L;
      floatArray0[5] = (float) 9007199254740990L;
      floatArray0[6] = (float) 9007199254740990L;
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) 9007199254740990L;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (float) 0L;
      floatArray1[2] = (float) 9007199254740990L;
      floatArray1[3] = (float) 9007199254740990L;
      floatArray1[4] = (float) 0L;
      floatArray1[5] = (float) 0L;
      floatArray1[6] = (float) 9007199254740990L;
      floatArray1[7] = (float) 9007199254740990L;
      floatArray1[8] = (float) 0L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 9.0071993E15F, 9.0071993E15F, 0.0F, 0.0F, 9.0071993E15F, 9.0071993E15F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-765.454F), 0.0F, 9.0071993E15F, 9.0071993E15F, 9.0071993E15F, 9.0071993E15F, 0.0F, 9.0071993E15F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-450.8937437);
      doubleArray0[3] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2621;
      int int0 = 23;
      intArray0[4] = 23;
      int int1 = 52;
      intArray0[5] = 52;
      intArray0[6] = 0;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2261.629;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (-1537.08007);
      doubleArray0[5] = (double) 0.0F;
      MathArrays.scaleInPlace((-1537.08007), doubleArray0);
      assertArrayEquals(new double[] {(-3476304.86163403), -0.0, -0.0, -0.0, 2362615.141591205, -0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-818.846134);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray0, 1.304E19);
      assertArrayEquals(new double[] {1.304E19}, doubleArray3, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-757.0F);
      float[] floatArray1 = new float[7];
      floatArray1[0] = (-757.0F);
      floatArray1[1] = (-757.0F);
      floatArray1[2] = (-1334.0F);
      floatArray1[3] = (-757.0F);
      floatArray1[4] = (-757.0F);
      floatArray1[5] = (-757.0F);
      floatArray1[6] = (-1943.597F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[][] longArray0 = new long[3][7];
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      longArray1[1] = (-614L);
      longArray1[2] = 4503599627370496L;
      longArray1[3] = (-9223372036854775808L);
      longArray1[4] = 0L;
      longArray1[5] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = (-614L);
      longArray2[1] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -614 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.linearCombination(2883.0, 2883.0, 2883.0, 2883.0, 2883.0, 0.0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.0);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 2.0;
      doubleArray2[2] = 2.0;
      doubleArray2[3] = 3.834E-20;
      doubleArray2[4] = 3.834E-20;
      doubleArray2[5] = 3.834E-20;
      MathArrays.equals(doubleArray1, doubleArray2);
      int int0 = (-790);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<FieldElement<Integer>>>) null, (-790));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1109.0747F;
      floatArray0[1] = 2706.8655F;
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-205);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1401.3426004987;
      doubleArray0[3] = 1.7976931348623157E308;
      int int0 = (-750);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-750));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1342.04822015996;
      doubleArray0[1] = (-922.283766572);
      doubleArray0[2] = (-1806.78);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-707.0);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 1702.9;
      doubleArray0[7] = (-1.0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {1342.04822015996, (-922.283766572), (-1806.78), 0.0, (-707.0), 3.834E-20, 1702.9, (-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1273.8372);
      doubleArray0[3] = 3.834E-20;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("MibtY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.MibtY
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 307;
      intArray0[1] = 307;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
