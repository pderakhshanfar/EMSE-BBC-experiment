/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:40:52 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(13, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 724);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(13, doubleArray0.length);
      assertEquals(724, doubleArray1.length);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-30.23F);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1536.3066F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-30.23F);
      floatArray1[3] = (float) 0;
      floatArray1[4] = (float) 0;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (float) 0;
      floatArray1[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-30.23F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1536.3066F, 0.0F, (-30.23F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      Object[] objectArray0 = MathArrays.buildArray(field0, 0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-30.23F);
      doubleArray0[4] = (double) 1536.3066F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-30.229999542236328), 1536.306640625}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.3040000000007614E19;
      doubleArray0[1] = 622.783898354278;
      doubleArray0[2] = (-7.800414592973399E-9);
      doubleArray0[3] = 1370.0;
      doubleArray0[4] = (-1.0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.3040000000007614E19, 622.783898354278, (-7.800414592973399E-9), 1370.0, (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 134217729);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.3040000000007614E19;
      doubleArray0[1] = 622.783898354278;
      doubleArray0[2] = (-7.800414592973399E-9);
      doubleArray0[3] = 1370.0;
      doubleArray0[4] = (-1.0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.3040000000007614E19, 622.783898354278, (-7.800414592973399E-9), 1370.0, (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Object[] objectArray0 = MathArrays.buildArray(field0, 134217729);
      assertNotNull(objectArray0);
      assertEquals(134217729, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = null;
      int[] intArray0 = new int[7];
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      intArray0[0] = (-532);
      intArray0[1] = (-509);
      intArray0[2] = 1415;
      intArray0[3] = 0;
      int int0 = 1528;
      intArray0[4] = 1528;
      intArray0[5] = (-112);
      intArray0[6] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-532), (-509), 1415, 0, 1528, (-112), 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, intArray0.length);
      
      double double1 = MathArrays.linearCombination((double) 0, (double) (-532), (double) 1415, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination((double) 0, (-747.7338737728679), (-2615.749241612), 0.0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1719.0F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-514.91F);
      floatArray0[4] = 1.4E-45F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 3.4028235E38F;
      floatArray0[7] = Float.NEGATIVE_INFINITY;
      floatArray0[8] = (-2091.83F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1719.0F), 1.0F, (-514.91F), 1.4E-45F, 0.0F, 3.4028235E38F, Float.NEGATIVE_INFINITY, (-2091.83F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[5] = (double) 0.0F;
      try { 
        MathArrays.normalizeArray(doubleArray0, 504.51686);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 511.27;
      doubleArray0[1] = 581.63918;
      doubleArray0[2] = (-1.87522878398599);
      doubleArray0[3] = 8.0E298;
      doubleArray0[4] = 2.85040095144011776E17;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 914.145977;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {511.27, 581.63918, (-1.87522878398599), 8.0E298, 2.85040095144011776E17, (-1.0), 914.145977}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {511.27, 581.63918, (-1.87522878398599), 8.0E298, 2.85040095144011776E17, (-1.0), 914.145977}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {511.27, 581.63918, (-1.87522878398599), 8.0E298, 2.85040095144011776E17, (-1.0), 914.145977}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 112;
      intArray0[1] = (-164);
      intArray0[2] = 127;
      intArray0[3] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {112, (-164), 127, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.3040000000000002E19;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.3040000000000002E19;
      doubleArray0[3] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.scale(1.7976931348623157E308, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.3040000000000002E19, 1.7976931348623157E308, 1.3040000000000002E19, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.3040000000000002E19, 1.7976931348623157E308, 1.3040000000000002E19, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(4, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.3040000000000002E19, 1.7976931348623157E308, 1.3040000000000002E19, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "cannot format a {0} instance as a real vector";
      stringArray0[1] = "aLFvZO'OGM%_C7!M^";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, "").when(field0).getZero();
      int int0 = 2987;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2987, 2987);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 2987, 2987);
      assertNotNull(objectArray0);
      assertEquals(2987, objectArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2987;
      intArray0[1] = (-1);
      intArray0[2] = 2987;
      intArray0[3] = 2987;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      doubleArray0[11] = 1.7976931348623157E308;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = 1.7976931348623157E308;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(22, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2446);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2446)}, intArray0);
      assertArrayEquals(new int[] {(-2446)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      long[][] longArray0 = new long[0][1];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.scaleInPlace((-2446), doubleArray0);
      assertEquals(22, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(22, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, (-161.7730457060336), 0.0, 0.0, 0.0, 5333.8);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[1];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 142.21542;
      doubleArray0[1] = (-3104.2030333298108);
      doubleArray0[2] = 1.8307188599677033E-8;
      doubleArray0[3] = 3184.3587930686354;
      doubleArray0[4] = (-1147.44847055);
      doubleArray0[5] = (-947.40619482036);
      doubleArray0[6] = (-2942.195939177);
      doubleArray0[7] = (-469.9089);
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {142.21542, (-3104.2030333298108), 1.8307188599677033E-8, 3184.3587930686354, (-1147.44847055), (-947.40619482036), (-2942.195939177), (-469.9089)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0875862700108075, 44.98, (-1147.44847055), (-638.17754), (-1.7168146928204135), 0.0, (-2942.195939177), 1303.4881288875);
      assertEquals((-3102837.697735442), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3661.1309;
      doubleArray0[2] = (-160.5627068976);
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 2731.523;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 3661.1309, (-160.5627068976), Double.NEGATIVE_INFINITY, Double.NaN, 2731.523}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 3,661.131)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-958.0);
      double[] doubleArray1 = MathArrays.scale((-958.0), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-958.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {917764.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-32.03497982205011);
      doubleArray0[1] = (-32.03497982205011);
      doubleArray0[2] = (-32.03497982205011);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1312.27477736);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-32.03497982205011), (-32.03497982205011), (-32.03497982205011)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {437.4249257866666, 437.4249257866666, 437.4249257866666}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2143.0F);
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-2143.0F);
      floatArray1[1] = (-2990.524F);
      floatArray1[2] = (-2143.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-2143.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2143.0F), (-2990.524F), (-2143.0F)}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-32.03497982205011), (-32.03497982205011), (-32.03497982205011)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {437.4249257866666, 437.4249257866666, 437.4249257866666}, doubleArray1, 0.01);
      assertEquals((-42038.6960137129), double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = 4724.563F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, Float.NaN, 4724.563F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 861.4654265997287;
      doubleArray1[1] = 0.4342944622039795;
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 15;
      int int0 = (-3246);
      intArray0[1] = (-3246);
      int int1 = 506;
      intArray0[2] = 506;
      int int2 = 3921;
      intArray0[3] = 3921;
      intArray0[4] = 258;
      int int3 = (-2131576360);
      intArray0[5] = (-2131576360);
      intArray0[6] = 3190;
      intArray0[7] = 2097;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 258;
      intArray1[1] = (-2131576360);
      intArray1[2] = 258;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "VQ^?x0u";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[2] = "d=$k3>&$p Vj}>aL*:";
      stringArray0[3] = "hRS:R]P!ESZ|M%d!";
      stringArray0[4] = "`cnYL|K1+lA34SNPd";
      stringArray0[5] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1222.64694173;
      doubleArray0[2] = 0.9305076599121094;
      doubleArray0[3] = 835.6;
      doubleArray0[4] = 882.486805;
      doubleArray0[5] = 1.0708593250394448E-7;
      doubleArray0[6] = 0.041666663879186654;
      doubleArray0[7] = 2114.22367;
      doubleArray0[8] = 510.4020604;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {Double.NaN, 1222.64694173, 0.9305076599121094, 835.6, 882.486805, 1.0708593250394448E-7, 0.041666663879186654, 2114.22367, 510.4020604}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(2052.798528214, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.9985313415527344;
      doubleArray0[1] = 0.7937005259840998;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.9985313415527344, 0.7937005259840998}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.9985313415527344, 0.7937005259840998}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.9970626831054688, 1.5874010519681996}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2596.7);
      doubleArray0[1] = 1.5830993332061267E-10;
      doubleArray0[2] = (-3.310444867);
      doubleArray0[3] = 1784.992;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-2881.725);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
      doubleArray1[5] = null;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-76.756);
      doubleArray1[1] = 1817.7492043799;
      doubleArray1[2] = 4.3466666666666665E18;
      doubleArray1[3] = 3110.8303;
      doubleArray1[4] = 0.5000000000042687;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = (-533.0024933300001);
      doubleArray1[7] = (-1.0);
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.44888888888888883E18;
      doubleArray0[1] = 283.07673;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1629.487791;
      doubleArray0[4] = (-1000.505840078191);
      doubleArray0[5] = 139.2046;
      doubleArray0[6] = 0.1428571343421936;
      doubleArray0[7] = 0.19999998807907104;
      doubleArray0[8] = (-586.64);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.44888888888888883E18, 283.07673, Double.NaN, 1629.487791, (-1000.505840078191), 139.2046, 0.1428571343421936, 0.19999998807907104, (-586.64)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1927.055F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1927.055F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 7.367850252839672E-17;
      doubleArray0[1] = 2763.106373798553;
      doubleArray0[2] = 2763.106373798553;
      doubleArray0[3] = (double) 1927.055F;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {7.367850252839672E-17, 2763.106373798553, 2763.106373798553, 1927.0550537109375}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.4285217348269616E-33, 7634756.832926188, 7634756.832926188, 3713541.180032864}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 4324.98);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {7.367850252839672E-17, 2763.106373798553, 2763.106373798553, 1927.0550537109375}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.275413930643159E-17, 1603.3745362609916, 1603.3745362609916, 1118.2309274780166}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-32768);
      intArray0[2] = (-1834);
      intArray0[3] = 1025;
      intArray0[4] = 2146779092;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-32768);
      intArray1[1] = 1025;
      intArray1[2] = 2146779092;
      intArray1[3] = (-1834);
      intArray1[4] = 2342;
      intArray1[5] = 0;
      intArray1[6] = (-32768);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-32768), 1025, 2146779092, (-1834), 2342, 0, (-32768)}, intArray1);
      assertArrayEquals(new int[] {0, (-32768), (-1834), 1025, 2146779092}, intArray0);
      assertEquals((-1340200), int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(7, intArray1.length);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "eP\" X";
      stringArray0[2] = "Yx<";
      stringArray0[3] = "wV7Sd5";
      stringArray0[4] = "align";
      stringArray0[5] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2833);
      intArray0[1] = (-2134);
      intArray0[2] = 259;
      intArray0[3] = 1112;
      intArray0[4] = 32;
      intArray0[5] = 2;
      intArray0[6] = (-2101);
      intArray0[7] = 2143214755;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 259;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 15;
      intArray0[1] = 364;
      intArray0[2] = 3527;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3527;
      intArray1[1] = 163;
      intArray1[2] = 15;
      intArray1[3] = 0;
      intArray1[4] = 364;
      intArray1[5] = 3527;
      intArray1[6] = (-1606);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {15, 364, 3527}, intArray0);
      assertArrayEquals(new int[] {3527, 163, 15, 0, 364, 3527, (-1606)}, intArray1);
      assertEquals(3512, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = 1010L;
      longArray0[0] = 1010L;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1010L;
      doubleArray0[1] = (double) 1010L;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1010L;
      doubleArray1[1] = (double) 1010L;
      doubleArray1[2] = (double) 1010L;
      doubleArray1[3] = (double) 1010L;
      doubleArray1[4] = (double) 1010L;
      doubleArray1[5] = (double) 1010L;
      doubleArray1[6] = (double) 1010L;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1010L;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[2][1];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1010L;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1010L;
      doubleArray0[1] = (double) 1010L;
      doubleArray0[2] = (double) 1010L;
      doubleArray0[3] = (double) 1010L;
      doubleArray0[4] = (double) 1010L;
      doubleArray0[5] = (double) 1010L;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1010L;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2108.72, 1.7976931348623157E308, (-1.0), 1.44888888888888883E18, (-2460.689), (-667.28281), 1.44888888888888883E18, (-1760.542));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-882);
      intArray0[1] = 1750;
      intArray0[2] = 1;
      intArray0[3] = 2147147478;
      intArray0[4] = (-369);
      intArray0[5] = (-2379);
      intArray0[6] = 1737;
      intArray0[7] = 2532;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-882), 1750, 1, 2147147478, (-369), (-2379), 1737, 2532}, intArray1);
      assertArrayEquals(new int[] {(-882), 1750, 1, 2147147478, (-369), (-2379), 1737, 2532}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZoCvP";
      stringArray0[1] = "ZoCvP";
      stringArray0[2] = "ZoCvP";
      stringArray0[3] = "9Z";
      stringArray0[4] = ">CW";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-3719.85207);
      doubleArray0[2] = (-3661.1309);
      doubleArray0[3] = (-1732.75695);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, (-3719.85207), (-3661.1309), (-1732.75695)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, (-3719.85207), (-3661.1309), (-1732.75695)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, (-3719.85207), (-3661.1309), (-1732.75695)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, (-3719.85207), (-3661.1309), (-1732.75695)}, doubleArray1, 0.01);
      assertEquals(5499.420472867246, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 6385.0;
      doubleArray0[1] = 6385.0;
      doubleArray0[2] = 6385.0;
      doubleArray0[3] = 6385.0;
      doubleArray0[4] = 6385.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {6385.0, 6385.0, 6385.0, 6385.0, 6385.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      long[][] longArray0 = new long[0][6];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 559;
      intArray0[1] = (-2332);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {559, (-2332)}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {6385.0, 6385.0, 6385.0, 6385.0, 6385.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(25, doubleArray2.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 559;
      floatArray0[1] = (float) 559;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {559.0F, 559.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {6385.0, 6385.0, 6385.0, 6385.0, 6385.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2.0383474E8, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-558.3620567387904);
      doubleArray4[1] = (-558.3620567387904);
      doubleArray4[2] = (-151.618209461855);
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = Double.NaN;
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = (-558.3620567387904);
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 615.4713745117188;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 615.4713745117188}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 116;
      intArray0[1] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {116, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 4810;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[5] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {4810, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 4810;
      double double1 = MathArrays.linearCombination(0.0, (double) 4810.0F, (double) 0, (double) 0, (double) 4810, (double) 0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {4810.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "`/8";
      stringArray0[1] = "`/8";
      stringArray0[2] = "9Z";
      stringArray0[3] = "\u0001x7";
      stringArray0[4] = "ZoCvP";
      stringArray0[5] = "`/8";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1010L;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 600;
      intArray0[3] = 2144883788;
      intArray0[5] = 159;
      intArray0[6] = 24;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {1, Integer.MAX_VALUE, 600, 2144883788, 0, 159, 24}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, intArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 600;
      floatArray0[2] = (float) 24;
      floatArray0[3] = (float) 159;
      floatArray0[4] = (float) 600;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 2144883788;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) 600;
      floatArray1[3] = (float) 24;
      floatArray1[4] = (float) 2144883788;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 600.0F, 24.0F, 159.0F, 600.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.14488384E9F, 0.0F, 600.0F, 24.0F, 2.14488384E9F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {1, Integer.MAX_VALUE, 600, 2144883788, 0, 159, 24}, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, Integer.MAX_VALUE, 600, 2144883788, 0, 159, 24}, intArray0);
      assertArrayEquals(new int[] {1, Integer.MAX_VALUE, 600, 2144883788, 0, 159, 24}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      double double2 = MathArrays.linearCombination(0.0, (-425.97), 0.0, 3.0, 1.0, 0.0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-934);
      intArray0[1] = 30;
      intArray0[2] = 5;
      intArray0[3] = 1357;
      intArray0[4] = 2587;
      intArray0[5] = 333;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-934), 30, 5, 1357, 2587, 333}, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-6.032174644509064E-23);
      doubleArray0[1] = (-6.032174644509064E-23);
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-6.032174644509064E-23), (-6.032174644509064E-23)}, doubleArray0, 0.01);
      assertEquals(8.530783192867822E-23, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = 323.0;
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1010L;
      double double0 = MathArrays.linearCombination(1.304E19, 218.0, Double.NaN, 1.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      Double double1 = new Double(2443.151427946244);
      assertNotNull(double1);
      assertEquals(2443.151427946244, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 2, (-1));
      assertNotNull(objectArray0);
      assertEquals(2, objectArray0.length);
      
      double double0 = MathArrays.linearCombination(1948.22002513, (double) 2, 9.082573301713403, 1.304E19, 9.082573301713403, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-1215);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1), (-1215));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(1154.8817851661663, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 3124L;
      floatArray0[1] = (float) 3124L;
      floatArray0[2] = (float) 3124L;
      float float0 = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) 137L;
      floatArray0[5] = (-364.475F);
      floatArray0[6] = (float) 137L;
      floatArray0[7] = (float) 3124L;
      floatArray0[8] = (float) 137L;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = (-364.475F);
      floatArray1[3] = 1.0F;
      floatArray1[4] = (-1319.0F);
      floatArray1[5] = (float) 3124L;
      floatArray1[6] = (float) 3124L;
      floatArray1[7] = (float) 3124L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {3124.0F, 3124.0F, 3124.0F, 1.0F, 137.0F, (-364.475F), 137.0F, 3124.0F, 137.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, (-364.475F), 1.0F, (-1319.0F), 3124.0F, 3124.0F, 3124.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 862);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(862, doubleArray1.length);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 4810;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1316.1617);
      doubleArray1[1] = 2443.151427946244;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1316.1617), 2443.151427946244}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(8, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1316.1617), 2443.151427946244}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(8, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1, 0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-1316.1617), 2443.151427946244}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(2, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertArrayEquals(new double[] {(-1316.1617), 2443.151427946244}, doubleArray1, 0.01);
      assertEquals(2775.1163075486875, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = 1.7976931348623157E308;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2446);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2446)}, intArray0);
      assertArrayEquals(new int[] {(-2446)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      long[][] longArray0 = new long[0][1];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.scaleInPlace((-2446), doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = 2108341836;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2108341836, (-1519));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-259);
      intArray0[1] = 235;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-259), 235}, intArray0);
      assertArrayEquals(new int[] {(-259), 235}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-558.1830099);
      doubleArray0[1] = (-558.1830099);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-341.355019);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-952.93);
      doubleArray0[6] = 1.7976931348623157E308;
      doubleArray0[7] = (-341.355019);
      doubleArray0[8] = 1.7976931348623157E308;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-558.1830099), (-558.1830099), 0.0, (-341.355019), 1.0, (-952.93), 1.7976931348623157E308, (-341.355019), 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-558.1830099), (-558.1830099), 0.0, (-341.355019), 1.0, (-952.93), 1.7976931348623157E308, (-341.355019), 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1921.7136809701806);
      doubleArray0[1] = 1820.3719221492559;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 2209.93917758855;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-1921.7136809701806);
      doubleArray0[6] = (-1921.7136809701806);
      doubleArray0[7] = (-1921.7136809701806);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1921.7136809701806), 1820.3719221492559, 1.0, 2209.93917758855, 1.0, (-1921.7136809701806), (-1921.7136809701806), (-1921.7136809701806)}, doubleArray0, 0.01);
      assertEquals(4792.65281343245, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 4810;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {4810, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, intArray0.length);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = (-786.596F);
      floatArray1[2] = (float) 0;
      floatArray1[3] = (float) 0;
      floatArray1[4] = (float) 0;
      floatArray1[5] = (float) 0;
      floatArray1[6] = (float) 0;
      floatArray1[7] = (float) 0;
      floatArray1[8] = (float) 4810;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-786.596F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 4810.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-786.596F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (-3989.3838704446775);
      doubleArray0[4] = (-889.66093191);
      doubleArray0[5] = (double) 862;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-786.5960083007812), 0.0, 0.0, (-3989.3838704446775), (-889.66093191), 862.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -786.596 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-3404.7766F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = Float.NaN;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, (-3404.7766F), 0.0F, 1.0F, 1.0F, Float.NaN}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 1233.0F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 0;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = 1233.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (float) 0;
      floatArray1[7] = 1233.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1233.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1233.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1233.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(6, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1154.8817851661663;
      doubleArray0[1] = 1154.8817851661663;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1154.8817851661663, 1154.8817851661663, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2667503.875417182, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2139814063;
      intArray0[1] = (-1174);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {2139814063, (-1174), 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1154.8817851661663, 1154.8817851661663, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1333751.937708591, 2667503.875417182, 1333751.937708591, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1154.8817851661663, 1154.8817851661663, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1333751.937708591, 2667503.875417182, 1333751.937708591, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[2][3];
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 2139814063;
      doubleArray3[1] = (double) (-1174);
      doubleArray3[2] = (double) 598;
      doubleArray3[3] = (double) 2139814063;
      doubleArray3[4] = (double) 598;
      doubleArray3[5] = (double) 0;
      doubleArray3[6] = (double) 2139814063;
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":d lV?Chl\"P@";
      stringArray0[1] = "";
      stringArray0[2] = "7^A`V";
      stringArray0[3] = ":d lV?Chl\"P@";
      stringArray0[2] = "";
      stringArray0[5] = "P\"X!b";
      stringArray0[6] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1063.638551728368;
      doubleArray0[1] = 1243348.7515877069;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1063.638551728368, 1243348.7515877069}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1063.638551728368, 1243348.7515877069}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-152);
      intArray0[1] = (-2239);
      intArray0[2] = 513;
      intArray0[3] = 1508;
      intArray0[4] = 1;
      intArray0[5] = (-3495);
      intArray0[6] = 1461;
      intArray0[7] = (-1519);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-3495);
      intArray1[1] = 513;
      intArray1[2] = (-3495);
      intArray1[3] = 276;
      intArray1[4] = 513;
      intArray1[5] = 513;
      intArray1[6] = 1627;
      intArray1[7] = 513;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-3495), 513, (-3495), 276, 513, 513, 1627, 513}, intArray1);
      assertArrayEquals(new int[] {(-152), (-2239), 513, 1508, 1, (-3495), 1461, (-1519)}, intArray0);
      assertEquals(18053, int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = 137L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = 3124L;
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      double double0 = MathArrays.linearCombination((-184.2), (double) 0, (double) 3124L, Double.NaN, (-1462.66454962), (-1596.0));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1987.6703300029076;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1987.6703300029076}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1987.6703300029076}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2.6457513110645907, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, (-1842.3));
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1842.3);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double double0 = MathArrays.distance(intArray1, (int[]) null);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (-2821.8F);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-2821.8F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray2, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 718.3092116774258;
      doubleArray0[1] = 13.07;
      doubleArray0[2] = (-558.3620567387904);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-310.0486718);
      doubleArray0[5] = (-558.3620567387904);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {718.3092116774258, 13.07, (-558.3620567387904), 0.0, (-310.0486718), (-558.3620567387904)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1436.6184233548515, 26.14, (-1116.7241134775809), 0.0, (-620.0973436), (-1116.7241134775809)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {718.3092116774258, 13.07, (-558.3620567387904), 0.0, (-310.0486718), (-558.3620567387904)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, 1.0, 1.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {718.3092116774258, 13.07, (-558.3620567387904), 0.0, (-310.0486718), (-558.3620567387904)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, 1.0, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {719.3092116774258, 14.07, (-557.3620567387904), Double.NaN, (-309.0486718), (-557.3620567387904)}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      
      MathArrays.scaleInPlace(0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0, 0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      try { 
        MathArrays.ebeMultiply(doubleArray4, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3365.69073825;
      doubleArray0[2] = 167.279228985;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3365.69073825, 0.0, 167.279228985, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.1355856485991646E7, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3365.69073825, 0.0, 167.279228985, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = 3365.69073825;
      doubleArray1[2] = 1.1355856485991646E7;
      doubleArray1[3] = 3365.69073825;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 167.279228985;
      doubleArray2[1] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 174.57349464150101;
      doubleArray0[1] = 174.57349464150101;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {174.57349464150101, 174.57349464150101}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {174.57349464150101, 174.57349464150101}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(1.625, 1.625, (-1.0), 174.57349464150101);
      assertEquals((-171.93286964150101), double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {174.57349464150101, 174.57349464150101}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(347.14698928300203, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {174.57349464150101, 174.57349464150101}, doubleArray0, 0.01);
      assertEquals(246.88420375287757, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1704.1;
      doubleArray0[2] = 1704.1;
      doubleArray0[3] = 1704.1;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1704.1, 1704.1, 1704.1}, doubleArray0, 0.01);
      assertEquals(2951.587781178124, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1507.39671447));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1704.1, 1704.1, 1704.1}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, (-502.46557149000006), (-502.46557149000006), (-502.46557149000006)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 927;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 927;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 927;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {927.0, 0.0, 927.0, 0.0, 0.0, 927.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {927.0, 0.0, 927.0, 0.0, 0.0, 927.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {927.0, 0.0, 927.0, 0.0, 0.0, 927.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(6, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2412.8);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1.7976931348623157E308;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-2412.8), (-1.0), 0.0, (-1.0), 1.7976931348623157E308}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2412.8), (-1.0), 0.0, (-1.0), 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-2097.28109187), (-1357.2194037759712), (-2097.28109187), 982.0);
      assertEquals(786940.5608420792, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2412.8), (-1.0), 0.0, (-1.0), 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2412.8), (-1.0), 0.0, (-1.0), 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":d lV?Chl\"P@";
      stringArray0[1] = "";
      stringArray0[2] = "7^A`V";
      stringArray0[3] = "'";
      stringArray0[2] = "";
      stringArray0[5] = "P\"X!b";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":d lV?Chl\"P@";
      stringArray0[1] = "";
      stringArray0[2] = "7^A`V";
      stringArray0[3] = "'";
      stringArray0[2] = "";
      stringArray0[5] = "P\"X!b";
      stringArray0[6] = "][#g:zHBk-I`";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 72.17966F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 72.17966F, 0.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, floatArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1824);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1824)}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-558.1830099);
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-558.1830099), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, floatArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(2146845786);
      assertNotNull(integer0);
      assertEquals(2146845786, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2146845786);
      assertNotNull(integer1);
      assertEquals(2146845786, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":d lV?Chl\"P@";
      stringArray0[1] = "";
      stringArray0[2] = "7^A`V";
      stringArray0[3] = "'";
      stringArray0[2] = "";
      stringArray0[5] = "P\"X!b";
      stringArray0[6] = "][#g:zHBk-I`";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1573.0);
      doubleArray0[1] = 1063.638551728368;
      doubleArray0[2] = (-2.957007209750105E-8);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {(-1573.0), 1063.638551728368, (-2.957007209750105E-8)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2.957007209750105E-8);
      doubleArray1[1] = 1063.638551728368;
      doubleArray1[2] = (-2.957007209750105E-8);
      doubleArray1[3] = (-2.957007209750105E-8);
      doubleArray1[4] = (-2.957007209750105E-8);
      doubleArray1[5] = (-1573.0);
      doubleArray1[6] = 220.3187841909768;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1316.1617);
      doubleArray1[1] = 2443.151427946244;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 134217729;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 134217729;
      floatArray0[8] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.34217728E8F, 0.0F, 0.0F, 0.0F, 0.0F, 1.34217728E8F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1316.1617), 2443.151427946244}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1010L;
      double double0 = (-2985.46760088549);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2985.46760088549);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-2985.46760088549), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2985.46760088549), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2985.46760088549), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2985.46760088549), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      double double2 = MathArrays.linearCombination(0.11113807559013367, (double) 1010L, (-1042.54051), (double) 1010L);
      assertEquals((-1052853.665643654), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-558.1830099);
      doubleArray0[1] = (-558.1830099);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-558.1830099));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-558.1830099), (-558.1830099), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-279.09150495), (-279.09150495), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-558.1830099), (-558.1830099), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-558.1830099), (-558.1830099), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-279.09150495), (-279.09150495), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {77892.06813525587, 77892.06813525587, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-558.1830099), (-558.1830099), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-279.09150495), (-279.09150495), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {77892.06813525587, 77892.06813525587, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination(1.0, 3074.0, 1.0, 0.0, 0.0, 3074.0, (-1.0129027912496858E-9), 1.0);
      assertEquals(3073.9999999989873, double0, 0.01);
      
      double double1 = new Double(2135.91447);
      assertEquals(2135.91447, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.scale(1.34217729E8, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-558.1830099), (-558.1830099), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-7.491805595516252E10), (-7.491805595516252E10), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      
      boolean boolean2 = MathArrays.equals(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertArrayEquals(new double[] {(-558.1830099), (-558.1830099), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-279.09150495), (-279.09150495), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {77892.06813525587, 77892.06813525587, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(boolean2);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-386);
      intArray0[1] = 134;
      intArray0[2] = 8;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-386), 134, 8}, intArray0);
      assertArrayEquals(new int[] {(-386), 134, 8}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":d lV?Chl\"P@";
      stringArray0[1] = "";
      stringArray0[2] = "7^A`V";
      stringArray0[3] = "'";
      stringArray0[2] = "";
      stringArray0[5] = "P\"X!b";
      stringArray0[6] = "][#g:zHBk-I`";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = (-558.1830099);
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-558.1830099);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-558.1830099);
      doubleArray1[1] = (-558.1830099);
      doubleArray1[2] = (-558.1830099);
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = 1.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 2.0, 0.0, 2.0, 1.0, 0.0, 2.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(1.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1010L;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2985.46760088549);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-2985.46760088549), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2985.46760088549), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2985.46760088549), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2985.46760088549), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-2985.46760088549);
      doubleArray3[1] = (double) 1010L;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (double) 1010L;
      doubleArray3[5] = (double) 1010L;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-2985.46760088549), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2985.46760088549), 1010.0, 0.0, 0.0, 1010.0, 1010.0}, doubleArray3, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      MathArrays.checkNonNegative(longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) 1010L;
      floatArray0[2] = (float) 1010L;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 1010.0F, 1010.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-558.1830099);
      doubleArray0[1] = (-558.1830099);
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-558.1830099), (-558.1830099), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-558.1830099), (-558.1830099), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {311568.2725410235, 311568.2725410235, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      boolean boolean3 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-558.1830099), (-558.1830099), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {311568.2725410235, 311568.2725410235, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(0.04168701738764507, (-967.651339035), (-64.27), (-967.651339035), 164.0, (-64.27), (-558.1830099), 4449517.349786261);
      assertEquals((-2.4835933765729046E9), double0, 0.01);
      
      double double1 = MathArrays.linearCombination(5.650007086920087E-9, (-558.1830099), 0.0, 1.5874010519681994, 0.0, 1.0E-5);
      assertEquals((-3.153737961733385E-6), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-558.1830099);
      doubleArray0[1] = (-558.1830099);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-341.355019);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2188);
      intArray0[1] = 2144339455;
      intArray0[2] = 2147482877;
      intArray0[3] = (-1987);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2188), 2144339455, 2147482877, (-1987)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2570.6665F);
      floatArray0[1] = (float) 2147482877;
      floatArray0[2] = (float) (-1987);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (-2188);
      floatArray0[5] = 1.0F;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[1] = (float) (-1987);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1.0F, (-1987.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2570.6665F), 2.14748288E9F, (-1987.0F), 0.0F, (-2188.0F), 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(2, floatArray1.length);
      assertEquals(6, floatArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2188), 2144339455, 2147482877, (-1987)}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -558.183 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1704.1;
      doubleArray0[1] = (-115.38166);
      doubleArray0[2] = (-115.38166);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-115.38166);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-115.38166);
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2146672884);
      intArray0[1] = 288;
      intArray0[2] = 288;
      intArray0[3] = (-632);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2146672884), 288, 288, (-632)}, intArray0);
      assertArrayEquals(new int[] {(-2146672884), 288, 288, (-632)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      double double0 = MathArrays.linearCombination(0.0, 1.0, 3.32, (double) 288, (-909.0), (double) (-2146672884));
      assertEquals(1.95132565251216E12, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-558.1830099);
      doubleArray0[1] = (-558.1830099);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-341.355019);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.7976931348623157E308;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.7976931348623157E308}, doubleArray1, 0.01);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "INDEX";
      stringArray0[1] = "NOT_POSITIVE_UPPER_BOUND";
      stringArray0[2] = "y#<OjOYBO/1<A'";
      stringArray0[3] = "wD]";
      stringArray0[4] = "l*";
      stringArray0[5] = "class ({0}) does not implement Comparable";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = (-1718);
      intArray0[2] = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1718);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1718.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
      
      Integer integer0 = new Integer((-2146348981));
      assertNotNull(integer0);
      assertEquals((-2146348981), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(148);
      assertNotNull(integer1);
      assertEquals(148, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) (-1718);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, integerArray0.length);
      
      MathArrays.scaleInPlace(int0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1718.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-558.1830099);
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 76;
      intArray0[1] = 1763;
      intArray0[2] = 76;
      intArray0[3] = 76;
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1669.2468528856941;
      doubleArray0[1] = 3294198.0;
      doubleArray0[2] = 1669.2468528856941;
      doubleArray0[3] = (-2985.46760088549);
      doubleArray0[4] = 1408.74911814;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1669.2468528856941, 3294198.0, 1669.2468528856941, (-2985.46760088549), 1408.74911814}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-1945.0F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1945.0F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, floatArray0.length);
      
      double double0 = MathArrays.linearCombination((double) (-1945.0F), 1408.74911814, (-5.207000323380292E-8), 341.355019, (double) (-1.0F), (double) (-1945.0F));
      assertEquals((-2738072.0348000745), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[][] longArray1 = new long[5][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-558.1830099);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-341.355019);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-558.1830099), 0.0, (-341.355019), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-558.1830099), 0.0, (-341.355019), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-558.1830099), 0.0, (-341.355019), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-558.1830099), 0.0, (-341.355019), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(0.0, 3692983.471627961, 0.0, (-558.1830099));
      assertEquals(0.0, double0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -558.183)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 226.5954F;
      floatArray0[3] = -0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = Float.POSITIVE_INFINITY;
      floatArray0[7] = 3434.99F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 226.5954F, -0.0F, 0.0F, 0.0F, Float.POSITIVE_INFINITY, 3434.99F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 226.5954F, -0.0F, 0.0F, 0.0F, Float.POSITIVE_INFINITY, 3434.99F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2146672884);
      intArray0[1] = 288;
      intArray0[2] = (-901);
      intArray0[3] = (-427);
      intArray0[4] = 201;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2146672884), 288, (-901), (-427), 201}, intArray1);
      assertArrayEquals(new int[] {(-2146672884), 288, (-901), (-427), 201}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3365.69073825;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][6];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {3365.69073825, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3365.69073825, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {3365.69073825, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3365.69073825, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {3365.69073825, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(6, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":d[ lV?Chl\"P@";
      stringArray0[1] = "";
      stringArray0[2] = "7^A`V";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "P\"X!b";
      double double0 = MathArrays.linearCombination(1.304E19, (-940.89525), 1669.246862885694, 540.128604, 540.128604, (-2985.46760088549), 2474.826272, 2760.95912979);
      assertEquals((-1.2269274059999994E22), double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1.304E19, 0.0, 1669.246862885694, (-2985.46760088549), (-1187.430139259), (-50.05759972741));
      assertEquals((-4924042.524409694), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      long[][] longArray0 = new long[2][4];
      long[] longArray1 = new long[9];
      longArray1[0] = 691L;
      longArray1[1] = (-3426L);
      longArray1[2] = (-3426L);
      longArray1[3] = (-2285L);
      longArray1[4] = (-2759L);
      longArray1[5] = 645L;
      longArray1[6] = 4503599627370495L;
      longArray1[7] = 273L;
      longArray1[8] = 988L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-2759L);
      longArray2[1] = 988L;
      longArray2[2] = 988L;
      longArray2[3] = (-2759L);
      longArray2[4] = (-2759L);
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-558.1830099);
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-558.1830099), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, floatArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(2146845786);
      assertNotNull(integer0);
      assertEquals(2146845786, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2832);
      assertNotNull(integer1);
      assertEquals(2832, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2108.72;
      double[] doubleArray1 = MathArrays.scale(1.7976931348623157E308, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2108.72}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-843.25934F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 901.5771F;
      floatArray0[3] = 901.5771F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-843.25934F), 0.0F, 901.5771F, 901.5771F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2108.72}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      double[][] doubleArray3 = new double[7][7];
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (double) 901.5771F;
      doubleArray4[1] = (double) (-843.25934F);
      doubleArray4[2] = 2108.72;
      doubleArray4[3] = (double) 0.0F;
      doubleArray4[4] = (double) 901.5771F;
      doubleArray4[5] = (double) 901.5771F;
      doubleArray4[6] = (double) 0.0F;
      doubleArray3[0] = doubleArray4;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray1;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray0;
      doubleArray3[5] = doubleArray2;
      doubleArray3[6] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-558.1830099);
      doubleArray0[1] = (-2449.795);
      double double0 = MathArrays.linearCombination(2449.795, (-558.1830099), (-2449.795), 3094.976093, (-479.053799883), 3752.53);
      assertEquals((-1.074715466016386E7), double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-535);
      intArray0[1] = 213;
      intArray0[2] = 951;
      intArray0[3] = 134;
      intArray0[4] = (-1221);
      intArray0[5] = 115;
      intArray0[6] = (-1);
      intArray0[7] = (-820);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-535), 213, 951, 134, (-1221), 115, (-1), (-820)}, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-558.183 >= -2,449.795)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = 137L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = 3124L;
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 862);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(862, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double double0 = 1936.1272193408638;
      double double1 = (-558.3620567387904);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1936.1272193408638;
      doubleArray0[1] = 1936.1272193408638;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-558.3620567387904);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[2] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (-151.618209461855);
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-558.3620567387904);
      doubleArray1[1] = (-151.618209461855);
      doubleArray1[2] = (-558.3620567387904);
      doubleArray1[3] = 167.279228985;
      doubleArray1[4] = 1936.1272193408638;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-558.1830099);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (-558.1830099);
      doubleArray1[2] = 1.5874010519681994;
      doubleArray1[3] = (-558.1830099);
      doubleArray1[4] = 1.304E19;
      doubleArray1[5] = 1199.05;
      doubleArray1[6] = 1.34217729E8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-558.1830099), 1.5874010519681994, (-558.1830099), 1.304E19, 1199.05, 1.34217729E8}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1884);
      intArray0[1] = 0;
      intArray0[2] = 2666;
      intArray0[3] = (-2145584918);
      intArray0[4] = (-725);
      intArray0[5] = (-961);
      intArray0[6] = (-1);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1884);
      intArray1[1] = (-1884);
      intArray1[2] = (-725);
      intArray1[3] = (-1884);
      intArray1[4] = (-1884);
      intArray1[5] = (-961);
      intArray1[6] = (-1884);
      intArray1[7] = (-961);
      intArray1[8] = (-961);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1884), (-1884), (-725), (-1884), (-1884), (-961), (-1884), (-961), (-961)}, intArray1);
      assertArrayEquals(new int[] {(-1884), 0, 2666, (-2145584918), (-725), (-961), (-1)}, intArray0);
      assertEquals(2.145583034004646E9, double0, 0.01);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(9, intArray1.length);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-4613.039125451088);
      doubleArray0[1] = 3365.2946178178954;
      doubleArray0[3] = 167.279228985;
      doubleArray0[4] = (-4613.039125451088);
      doubleArray0[5] = 167.279228985;
      double double0 = MathArrays.linearCombination(426.5031917561, 95.026475007, 0.0, 3365.2946178178954, (-4613.039125451088), (-4613.039125451088), 426.5031917561, 3365.2946178178954);
      assertEquals(2.2755967963533312E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1130.0109881825992;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 503.6595;
      doubleArray0[6] = (-2097.28109187);
      doubleArray0[7] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, Double.NaN, 1130.0109881825992, 0.0, 0.0, 503.6595, (-2097.28109187), (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, Double.NaN, 1130.0109881825992, 0.0, 0.0, 503.6595, (-2097.28109187), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1.0, Double.NaN, Double.NaN, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "";
      stringArray0[2] = "7^A`V";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "P\"X!b";
      stringArray0[6] = "][#g:zHBk-I`";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-987.62508312997);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-3060.26);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-4613.039125451088);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-987.62508312997), 1.0, (-3060.26), Double.NaN, (-4613.039125451088)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = MathArrays.linearCombination(323.0, (-1921.7136809701806), 323.0, (-1921.7136809701806), 1.0, (-1921.7136809701806));
      assertEquals((-1243348.7515877069), double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-1243348.7515877069);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1.0), 115.38166, 1607.3854270869026, (-2980.3), 1259.43, 1.44888888888888883E18, (-354.39574273), 174.57349464150101);
      assertEquals(1.8247741333333284E21, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1607.3854270869026;
      doubleArray0[1] = 2487.6467199999997;
      doubleArray0[2] = 174.57349464150101;
      doubleArray0[3] = 1607.3854270869026;
      doubleArray0[4] = (-2980.3);
      doubleArray0[5] = (-3413.2373257983);
      doubleArray0[6] = 1.8247741333333284E21;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1607.3854270869026, 2487.6467199999997, 174.57349464150101, 1607.3854270869026, (-2980.3), (-3413.2373257983), 1.8247741333333284E21}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1085.6849F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1085.6849F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":d[ lV?Chl\"P@";
      stringArray0[1] = ":d[ lV?Chl\"P@";
      stringArray0[2] = ":d[ lV?Chl\"P@";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "P\"X!b";
      stringArray0[6] = "][#g:zHBk-I`";
      stringArray0[7] = "Sa( FL7y^7x<WqDtbv;";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(221841.0, (-115.38166), 1.34217729E8, 174.57349464150101, (-115.38166), (-1059.0), 221841.0, 174.57349464150101);
      assertEquals(2.344411135934258E10, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-433.37);
      doubleArray0[3] = 174.57349464150101;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 1.34217729E8, (-433.37), 174.57349464150101}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.7976931348623157E308, 2108.72, (-354.39574273), 1.7976931348623157E308, (-1.0), (-354.39574273), (-354.39574273), 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 2040.087);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3365.69073825;
      doubleArray0[1] = 533.0167900478936;
      doubleArray0[2] = 167.279228985;
      long long0 = 2224L;
      long[] longArray0 = new long[5];
      longArray0[0] = 2224L;
      double double0 = MathArrays.linearCombination(1.0, 5.2240336371356666E-9, 0.3333333333332802, 533.0167900478936, (double) 2224L, 167.279228985, 3365.69073825, (double) 2224L);
      assertEquals(7857502.879393994, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3365.69073825, 533.0167900478936, 167.279228985, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1224.245892);
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = (-1049);
      intArray0[2] = 2181;
      intArray0[3] = 13;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, (-1049), 2181, 13}, intArray0);
      assertArrayEquals(new int[] {1, (-1049), 2181, 13}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray1, 635);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {1, (-1049), 2181, 13}, intArray0);
      assertArrayEquals(new int[] {1, (-1049), 2181, 13}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(635, intArray2.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double0 = MathArrays.linearCombination(3124.78427705029, 3.834E-20, 1122.08881852265, 3.834E-20, 0.9166666666666666, 5.2240336371356666E-9, 1.132787414554183E7, (-1224.245892));
      assertEquals((-1.3868103387772594E10), double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1049);
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1049.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1049.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1100401.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[2];
      intArray0[0] = 13;
      intArray0[1] = (-1049);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {13, (-1049)}, intArray0);
      assertArrayEquals(new int[] {13, (-1049)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray1, 112);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {13, (-1049)}, intArray0);
      assertArrayEquals(new int[] {13, (-1049)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(112, intArray2.length);
      
      double double0 = MathArrays.linearCombination(0.0, 0.9166666666666666, 3.834E-20, 0.0, (double) 13, (-4566.5), (double) 637, 1.132787414554183E7);
      assertEquals(7.215796466210146E9, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-553.38384);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1130.0109881825992;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 503.6595;
      doubleArray0[6] = (-2097.28109187);
      doubleArray0[7] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-553.38384), Double.NaN, 1130.0109881825992, 0.0, 0.0, 503.6595, (-2097.28109187), (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-553.38384), Double.NaN, 1130.0109881825992, 0.0, 0.0, 503.6595, (-2097.28109187), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, Double.NaN, Double.NaN, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-493.0124433781322), (-3120.4748), (-65.3930469), 0.0);
      assertEquals(1538432.9056478885, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-553.38384), Double.NaN, 1130.0109881825992, 0.0, 0.0, 503.6595, (-2097.28109187), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, Double.NaN, Double.NaN, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double2 = MathArrays.linearCombination((-3460.41583584), 95.026475007, (-810.6198), (-3120.4748), 0.0, (-553.38384), 1448.5448202663, 0.0);
      assertEquals(2200687.5393427634, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[][] longArray0 = new long[3][0];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 0;
      longArray1[1] = 137L;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = 3124L;
      longArray1[5] = 0L;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      longArray1[8] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 3124L;
      longArray2[1] = 137L;
      longArray2[2] = 0L;
      longArray2[3] = (long) 0;
      longArray2[4] = 0L;
      longArray2[5] = (long) 0;
      longArray2[6] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 137L;
      longArray0[2] = longArray3;
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1305));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1704.1;
      doubleArray0[1] = (-115.38166);
      doubleArray0[2] = (-115.38166);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-115.38166);
      doubleArray0[5] = (-115.38166);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1704.1, (-115.38166), (-115.38166), 0.0, (-115.38166), (-115.38166), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3408.2, (-230.76332), (-230.76332), 0.0, (-230.76332), (-230.76332), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1704.1, (-115.38166), (-115.38166), 0.0, (-115.38166), (-115.38166), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3408.2, (-230.76332), (-230.76332), 0.0, (-230.76332), (-230.76332), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.5, 0.5, 0.5, Double.NaN, 0.5, 0.5, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1704.1, (-115.38166), (-115.38166), 0.0, (-115.38166), (-115.38166), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3408.2, (-230.76332), (-230.76332), 0.0, (-230.76332), (-230.76332), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.5, 0.5, 0.5, Double.NaN, 0.5, 0.5, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3408.7, (-230.26332), (-230.26332), Double.NaN, (-230.26332), (-230.26332), Double.NaN}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      
      MathArrays.scaleInPlace(13312.9274643556, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2.2686559692008376E7, (-1536067.67029694), (-1536067.67029694), 0.0, (-1536067.67029694), (-1536067.67029694), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray3, (-1059.0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {2.2686559692008376E7, (-1536067.67029694), (-1536067.67029694), 0.0, (-1536067.67029694), (-1536067.67029694), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3408.2, (-230.76332), (-230.76332), 0.0, (-230.76332), (-230.76332), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.5, 0.5, 0.5, Double.NaN, 0.5, 0.5, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3408.7, (-230.26332), (-230.26332), Double.NaN, (-230.26332), (-230.26332), Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-1451.0956362807015), 98.02390907017538, 98.02390907017538, Double.NaN, 98.02390907017538, 98.02390907017538, Double.NaN}, doubleArray4, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray4.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-471.0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 338);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-471.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(338, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-471.0)}, doubleArray0, 0.01);
      assertEquals(471.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 338, 338);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = 137L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = 3124L;
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 0L, (double) 137L, (-1314.5167), 6.283185307179586);
      assertEquals((-8259.352015482194), double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 964.36923822336;
      doubleArray0[0] = 964.36923822336;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double double1 = (-1059.0);
      doubleArray0[2] = (-1059.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 998.608F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-917.791F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-553.2688F);
      floatArray0[7] = 316.0F;
      floatArray0[8] = (-344.26F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {998.608F, 0.0F, (-917.791F), (-1.0F), (-1.0F), 0.0F, (-553.2688F), 316.0F, (-344.26F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[4];
      longArray1[0] = 1010L;
      longArray1[1] = (-1471L);
      longArray1[2] = 0L;
      longArray1[3] = (-9223372036854775808L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1010L;
      longArray2[1] = 1010L;
      longArray2[2] = (-9223372036854775808L);
      longArray2[3] = 0L;
      double double0 = MathArrays.linearCombination(0.0, 3.141592653589793, (-0.5), (double) 1010L, (-3276.3789116829857), (-58.735), (double) 0L, 0.0);
      assertEquals(191933.11537770016, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-558.1830099);
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-558.1830099), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = 137L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = 3124L;
      longArray0[5] = 3124L;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) 0;
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4.983191803254889E-7;
      doubleArray1[1] = 2272.189;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) 3124L;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {4.983191803254889E-7, 2272.189, 0.0, 3124.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {4.983191803254889E-7, 2272.189, 0.0, 3124.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {4.983191803254889E-7, 2272.189, 0.0, 3124.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {4.983191803254889E-7, 2272.189, 0.0, 3124.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = 137L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long[][] longArray0 = new long[1][2];
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long[][] longArray0 = new long[4][2];
      long[] longArray1 = new long[5];
      longArray1[0] = 0L;
      longArray1[1] = 9218868437227405312L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-1L);
      longArray3[1] = 0L;
      longArray3[2] = (-1L);
      longArray3[3] = 0L;
      longArray3[4] = 9218868437227405312L;
      longArray3[5] = (-1L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1010L;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2985.46760088549);
      doubleArray0[1] = 1596.6;
      doubleArray0[2] = (-2985.46760088549);
      doubleArray0[3] = 1669.2468528856941;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1669.2468528856941;
      doubleArray1[1] = 1.0E-5;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2985.46760088549), 1596.6, (-2985.46760088549), 1669.2468528856941}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1669.2468528856941, 1.0E-5}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1010L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1945.0F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1945.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 0;
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1276.03336006;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":d[ lV?Chl\"P@";
      stringArray0[1] = "";
      stringArray0[2] = "7^A`V";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "P\"X!b";
      stringArray0[6] = "][#g:zHBk-I`";
      stringArray0[7] = "Sa( FL7y^7x<WqDtbv;";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-115.38166);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2985.46760088549);
      doubleArray0[4] = 2911.5;
      doubleArray0[5] = 1596.6;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-115.38166), 0.0, 0.0, (-2985.46760088549), 2911.5, 1596.6}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-115.38166), 0.0, 0.0, (-2985.46760088549), 2911.5, 1596.6}, doubleArray0, 0.01);
      assertEquals(4466.79902540973, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-115.38166), 0.0, 0.0, (-2985.46760088549), 2911.5, 1596.6}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-115.38166), 0.0, 0.0, (-2985.46760088549), 2911.5, 1596.6}, doubleArray0, 0.01);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-151.618209461855);
      doubleArray0[2] = 1936.1272193408638;
      doubleArray0[3] = (-558.3620567387904);
      doubleArray0[4] = 1118.1655;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, (-151.618209461855), 1936.1272193408638, (-558.3620567387904), 1118.1655}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-303.23641892371), 3872.2544386817276, (-1116.7241134775809), 2236.331}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {Double.NaN, (-151.618209461855), 1936.1272193408638, (-558.3620567387904), 1118.1655}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-303.23641892371), 3872.2544386817276, (-1116.7241134775809), 2236.331}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 2.0, 2.0, 2.0, 2.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {Double.NaN, (-151.618209461855), 1936.1272193408638, (-558.3620567387904), 1118.1655}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-303.23641892371), 3872.2544386817276, (-1116.7241134775809), 2236.331}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 2.0, 2.0, 2.0, 2.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-149.618209461855), 1938.1272193408638, (-556.3620567387904), 1120.1655}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (-558.3620567387904);
      doubleArray4[1] = Double.NaN;
      doubleArray4[2] = (-558.3620567387904);
      MathArrays.scaleInPlace((-3.141592653589793), doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {1754.1461354938713, Double.NaN, 1754.1461354938713}, doubleArray4, 0.01);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(3, doubleArray4.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":d[ lV?Chl\"P@";
      stringArray0[1] = "[";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3365.69073825;
      doubleArray0[1] = 533.0167900478936;
      doubleArray0[2] = 167.279228985;
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[5];
      longArray1[0] = 2224L;
      longArray1[1] = 2224L;
      longArray1[2] = 2224L;
      longArray1[3] = 2224L;
      longArray1[4] = 2224L;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-2523L);
      longArray0[1] = 0L;
      longArray0[2] = 9218868437227405312L;
      longArray0[3] = 1L;
      longArray0[4] = (-1L);
      longArray0[5] = 6L;
      longArray0[6] = (-935L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,523 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-1718);
      intArray0[2] = 0;
      intArray0[3] = 927;
      intArray0[4] = 76;
      intArray0[5] = 134217729;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1718), 0, 927, 76, 134217729}, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[][] longArray0 = new long[3][0];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 0;
      longArray1[1] = 137L;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = 3124L;
      longArray1[5] = 0L;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      longArray1[8] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 3124L;
      longArray2[1] = 137L;
      longArray2[2] = 0L;
      longArray2[3] = (long) 0;
      longArray2[4] = 0L;
      longArray2[5] = (long) 0;
      longArray2[6] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 137L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1316.1617);
      doubleArray1[1] = 2443.151427946244;
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double double0 = MathArrays.linearCombination(323.0, (-1921.7136809701806), 323.0, (-1921.7136809701806), 1.0, (-1921.7136809701806));
      assertEquals((-1243348.7515877069), double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1243348.7515877069);
      doubleArray0[1] = (-1243348.7515877069);
      doubleArray0[2] = (-1921.7136809701806);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 323.0;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1243348.7515877069), (-1243348.7515877069), (-1921.7136809701806), 1.0, 1.0, 323.0}, doubleArray0, 0.01);
      assertEquals(3.09183603346389E12, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int int0 = 0;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray3, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long[][] longArray0 = new long[7][4];
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 1449L;
      longArray1[3] = (-1512L);
      longArray1[4] = (-862L);
      longArray1[5] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-1512L);
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = (-1512L);
      longArray3[5] = 1449L;
      longArray3[6] = 0L;
      longArray3[7] = (-1512L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-862L);
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = 0L;
      longArray6[1] = 0L;
      longArray6[2] = (-862L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[5];
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = (-1512L);
      longArray7[1] = 0L;
      longArray7[2] = 0L;
      longArray7[3] = (-862L);
      longArray7[4] = (-1512L);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      long[][] longArray0 = new long[4][2];
      long[] longArray1 = new long[5];
      longArray1[0] = 0L;
      longArray1[1] = 9218868437227405312L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-1L);
      longArray3[1] = 0L;
      longArray3[2] = (-1L);
      longArray3[3] = 0L;
      longArray3[4] = 9218868437227405312L;
      longArray3[5] = (-1L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 2224L;
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long[][] longArray0 = new long[8][9];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = (-3426L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = (-3426L);
      longArray2[2] = 2147483647L;
      longArray2[3] = (-3426L);
      longArray2[4] = 0L;
      longArray2[5] = 0L;
      longArray2[6] = 0L;
      longArray2[7] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 2147483647L;
      longArray3[1] = 0L;
      longArray3[2] = (-3426L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = 2147483647L;
      longArray4[3] = 2147483647L;
      longArray4[4] = 2147483647L;
      longArray4[5] = (-1666L);
      longArray4[6] = (-3426L);
      longArray4[7] = (-3426L);
      longArray4[8] = 2147483647L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = (-3426L);
      longArray5[1] = 2147483647L;
      longArray5[2] = (-3426L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[4];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      
      longArray6[0] = 2147483647L;
      longArray6[1] = 0L;
      longArray6[2] = (-1666L);
      longArray6[3] = 2147483647L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = (-1666L);
      longArray7[1] = (-3426L);
      longArray7[2] = 0L;
      longArray7[3] = 2147483647L;
      longArray7[4] = 2147483647L;
      longArray7[5] = (-3426L);
      longArray7[6] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[7];
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray3));
      
      longArray8[0] = 2147483647L;
      longArray8[1] = (-1666L);
      longArray8[2] = (-1666L);
      longArray8[3] = 3616L;
      longArray8[4] = 0L;
      longArray8[5] = 0L;
      longArray8[6] = (-3426L);
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,426 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double double0 = 1528.1731948;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale(1528.1731948, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 141;
      intArray0[4] = 0;
      intArray0[5] = 134217729;
      intArray0[6] = 0;
      intArray0[7] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 2, 0, 141, 0, 134217729, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 134217729;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1.34217728E8F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 2, 0, 141, 0, 134217729, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 141;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1409.13090794;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-184.2);
      doubleArray0[1] = (-58.735);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = (-578.71);
      doubleArray0[6] = (-3334.51852642);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-218.814659578343);
      doubleArray0[1] = 1226.9997097;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1538.91;
      double[][] doubleArray1 = new double[1][6];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-218.814659578343), 1226.9997097, 1.304E19, 1538.91}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1885;
      intArray0[1] = 1295;
      intArray0[2] = 0;
      intArray0[3] = (-3060);
      intArray0[4] = 1;
      intArray0[5] = 534;
      intArray0[6] = 134217729;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1885, 1295, 0, (-3060), 1, 534, 134217729}, intArray1);
      assertArrayEquals(new int[] {1885, 1295, 0, (-3060), 1, 534, 134217729}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 575.240730732742;
      doubleArray0[2] = 1275.4501021739688;
      doubleArray0[3] = 1275.4501021739688;
      doubleArray0[4] = 1275.4501021739688;
      doubleArray0[5] = 1275.4501021739688;
      MathArrays.scaleInPlace(1275.4501021739688, doubleArray0);
      assertArrayEquals(new double[] {1.7118801616660806E11, 733690.8487877042, 1626772.9631355875, 1626772.9631355875, 1626772.9631355875, 1626772.9631355875}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-558.1830099);
      doubleArray0[1] = (-2449.795);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-341.355019);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-952.93);
      doubleArray0[6] = 1.7976931348623157E308;
      doubleArray0[7] = 95.026475007;
      doubleArray0[8] = (-2671.74449);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-558.1830099), (-2449.795), 0.0, (-341.355019), 1.0, (-952.93), 1.7976931348623157E308, 95.026475007, (-2671.74449)}, doubleArray0, 0.01);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 998.608F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-917.791F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-553.2688F);
      floatArray0[7] = 316.0F;
      floatArray0[8] = (-344.26F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {998.608F, 0.0F, (-917.791F), (-1.0F), (-1.0F), 0.0F, (-553.2688F), 316.0F, (-344.26F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 46);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(46, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1.0);
      try { 
        MathArrays.checkPositive(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.0;
      double double0 = 3.32;
      doubleArray0[1] = 3.32;
      double double1 = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double double2 = (-1276.24461939);
      doubleArray0[3] = (-1276.24461939);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 3.32, Double.NEGATIVE_INFINITY, (-1276.24461939)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = (-1276.24461939);
      doubleArray2[2] = (-1276.24461939);
      doubleArray2[3] = (-5406.3480937176155);
      double double3 = MathArrays.distance1(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {2.0, 3.32, Double.NEGATIVE_INFINITY, (-1276.24461939)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, (-1276.24461939), (-1276.24461939), (-5406.3480937176155)}, doubleArray2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale(2342.5, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {2.0, 3.32, Double.NEGATIVE_INFINITY, (-1276.24461939)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4685.0, 7777.099999999999, Double.NEGATIVE_INFINITY, (-2989603.0209210753)}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.ebeSubtract(doubleArray3, doubleArray3);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {2.0, 3.32, Double.NEGATIVE_INFINITY, (-1276.24461939)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4685.0, 7777.099999999999, Double.NEGATIVE_INFINITY, (-2989603.0209210753)}, doubleArray3, 0.01);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(4, doubleArray4.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      
      double double4 = MathArrays.linearCombination(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertArrayEquals(new double[] {2.0, 3.32, Double.NEGATIVE_INFINITY, (-1276.24461939)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4685.0, 7777.099999999999, Double.NEGATIVE_INFINITY, (-2989603.0209210753)}, doubleArray3, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 95;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = (-2515);
      intArray0[4] = 3235;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2515));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 964.36923822336;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-1059.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1059.0);
      doubleArray2[1] = 964.36923822336;
      doubleArray2[2] = (-1059.0);
      doubleArray2[3] = (-1059.0);
      doubleArray2[4] = 964.36923822336;
      doubleArray2[5] = 964.36923822336;
      MathArrays.distanceInf(doubleArray2, doubleArray2);
      MathArrays.copyOf(doubleArray0);
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.copyOf(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-2285);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2285));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-471.0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 338);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 338;
      floatArray0[1] = (float) 338;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 338;
      floatArray0[4] = (float) 338;
      floatArray0[5] = (float) 338;
      MathArrays.equals(doubleArray1, doubleArray1);
      MathArrays.normalizeArray(doubleArray1, (-471.0));
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-2146632821));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, (-2147483511), (-2147483511));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = (-1049);
      int int0 = 2181;
      intArray0[2] = 2181;
      int int1 = 0;
      intArray0[3] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      MathArrays.copyOf(intArray1, 635);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2181, (-1049));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2581.8087);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1386.74330721;
      doubleArray0[8] = 1.0;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[4];
      longArray1[0] = 1010L;
      longArray1[1] = (-1471L);
      longArray1[2] = 0L;
      longArray1[3] = (-9223372036854775808L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = 1010L;
      longArray2[1] = 1010L;
      longArray2[2] = (-9223372036854775808L);
      longArray2[3] = 0L;
      longArray2[4] = 1010L;
      longArray2[5] = (-9223372036854775808L);
      longArray2[6] = 1010L;
      longArray2[7] = (-1471L);
      longArray2[8] = 1010L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3124.78427705029;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3365.69073825;
      doubleArray0[1] = 533.0167900478936;
      doubleArray0[2] = 167.279228985;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = (-4613.039125451088);
      doubleArray0[5] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 429963.42560352915;
      doubleArray0[1] = 1.7976931348623157E308;
      MathArrays.checkOrder(doubleArray0);
      int int0 = (-1196);
      int int1 = 1;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Pair<Integer, Integer>>>) null, (-1196), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-155.47842679768), (-155.47842679768), (-360.32709287556116), (-360.32709287556116));
      assertEquals(154009.15505963482, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-888);
      intArray0[2] = 175;
      intArray0[3] = (-862);
      intArray0[4] = 2;
      intArray0[5] = (-744);
      intArray0[6] = 216;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2762.4563);
      doubleArray0[1] = 154009.15505963482;
      doubleArray0[2] = (double) (-862);
      doubleArray0[3] = (double) 216;
      doubleArray0[4] = (-360.32709287556116);
      doubleArray0[5] = (double) 175;
      doubleArray0[6] = 1711.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathArrays.linearCombination(1437.72253, 556.620740001, 175.0, (-2762.4563), (double) 175, (double) (-744));
      assertEquals(186636.32606470987, double1, 0.01);
      
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2.373032868860591E10, double2, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-2762.4563), 154009.15505963482, (-862.0), 216.0, (-360.32709287556116), 175.0, 1711.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-547.390499464323);
      doubleArray0[1] = 174.692208;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 20.0;
      doubleArray0[4] = 3.834E-20;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not strictly increasing (20 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":d[ lV?Chl\"P@";
      stringArray0[1] = "";
      stringArray0[2] = "7^A`V";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "P\"X!b";
      stringArray0[6] = "][#g:zHBk-I`";
      stringArray0[7] = "Sa( FL7y^7x<WqDtbv;";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-4946.412547562);
      doubleArray0[1] = 245.5;
      doubleArray0[2] = 3.32;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2.45272783630788E7, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4946.412547562), 245.5, 3.32}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2.45272783630788E7;
      doubleArray2[1] = 245.5;
      doubleArray2[2] = 245.5;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 3.32;
      doubleArray2[5] = 245.5;
      double double1 = MathArrays.distance1(doubleArray2, doubleArray2);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = null;
      double[][] doubleArray1 = new double[1][6];
      doubleArray1[0] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2115.856918322);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 957.4711;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = false;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-1 < 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1043.02046);
      doubleArray0[3] = 1.304E19;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-771.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (-2270.57881846586);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.834E-20);
      assertArrayEquals(new double[] {3.8340000000000004E-20, 0.0, 0.0, (-2.266881901840491E-36), 0.0, (-2.940184049079755E-39), 2.940184049079755E-39, (-6.675919624231678E-36)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-471.0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 338);
      assertEquals(338, doubleArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 338;
      floatArray0[1] = (float) 338;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 338;
      floatArray0[4] = (float) 338;
      floatArray0[5] = (float) 338;
      floatArray0[6] = (float) 338;
      floatArray0[7] = (float) 338;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 338;
      intArray0[1] = 338;
      intArray0[2] = 338;
      intArray0[3] = 338;
      intArray0[4] = 338;
      intArray0[5] = 338;
      intArray0[6] = 338;
      intArray0[7] = 338;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {338, 338, 338, 338, 338, 338, 338, 338}, intArray1);
      assertNotSame(intArray0, intArray1);
  }
}
