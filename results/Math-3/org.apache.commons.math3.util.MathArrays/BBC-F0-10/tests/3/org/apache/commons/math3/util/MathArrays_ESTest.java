/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:40:54 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = 499;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      try { 
        MathArrays.sortInPlace((double[]) null, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double(3014.82042);
      assertEquals(3014.82042, (double)double0, 0.01);
      assertNotNull(double0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(double0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1065);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 2147483273;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147483273, 2147483273);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
          assertTrue(boolean0);
          
          double[] doubleArray0 = new double[5];
          doubleArray0[0] = 4559.3379514409735;
          doubleArray0[1] = 1.0E-5;
          doubleArray0[2] = 1404.66169295;
          doubleArray0[3] = 3719.845084017478;
          doubleArray0[4] = (-1.0);
          double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
          assertEquals(3.659788547618013E7, double0, 0.01);
          assertArrayEquals(new double[] {4559.3379514409735, 1.0E-5, 1404.66169295, 3719.845084017478, (-1.0)}, doubleArray0, 0.01);
          assertEquals(5, doubleArray0.length);
          
          double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 568);
          assertFalse(doubleArray1.equals((Object)doubleArray0));
          assertNotSame(doubleArray0, doubleArray1);
          assertNotSame(doubleArray1, doubleArray0);
          assertNotNull(doubleArray1);
          assertArrayEquals(new double[] {4559.3379514409735, 1.0E-5, 1404.66169295, 3719.845084017478, (-1.0)}, doubleArray0, 0.01);
          assertEquals(5, doubleArray0.length);
          assertEquals(568, doubleArray1.length);
          
          // Undeclared exception!
          MathArrays.convolve(doubleArray1, doubleArray1);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-544.2616814749969);
      doubleArray0[1] = 5.065713;
      doubleArray0[2] = 3.26E18;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-77.988008799);
      doubleArray0[5] = 1.44888888888888883E18;
      doubleArray0[6] = 729.607628457;
      doubleArray0[7] = 1.8014398818558944E16;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.3519201290420615E19, double0, 0.01);
      assertArrayEquals(new double[] {(-544.2616814749969), 5.065713, 3.26E18, 1.304E19, (-77.988008799), 1.44888888888888883E18, 729.607628457, 1.8014398818558944E16}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = 1080.4255191836;
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) (-1);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), 1080.4255191836, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), 1080.4255191836, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      doubleArray0[5] = (double) (-1);
      intArray0[2] = (-2144719833);
      intArray0[3] = 134217729;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), 0, (-2144719833), 134217729}, intArray1);
      assertArrayEquals(new int[] {(-1), 0, (-2144719833), 134217729}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      
      Object[] objectArray0 = MathArrays.buildArray(field0, 0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Field<String> field1 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field1, (-895), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2.957007209750105E-8);
      double double0 = 3719.845084017478;
      doubleArray0[1] = 3719.845084017478;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3719.845084017478;
      doubleArray1[1] = (-2.957007209750105E-8);
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-2.1999217465186333E-4), double1, 0.01);
      assertArrayEquals(new double[] {(-2.957007209750105E-8), 3719.845084017478}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3719.845084017478, (-2.957007209750105E-8)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (3,719.845 >= -0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 1359);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      int int0 = 499;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 1184.945;
      doubleArray0[0] = 1184.945;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1.0;
      double double1 = (-150.0);
      doubleArray0[3] = (-150.0);
      double double2 = MathArrays.distance(doubleArray0, doubleArray0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {1184.945, 3.834E-20, 1.0, (-150.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1184.945;
      doubleArray1[1] = 149.9768359;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1184.945;
      doubleArray1[4] = (-150.0);
      doubleArray1[5] = (-150.0);
      doubleArray1[6] = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long[][] longArray0 = new long[1][3];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2143283075);
      intArray0[1] = 750;
      intArray0[2] = 3496;
      intArray0[3] = (-2906);
      intArray0[4] = 1;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2906);
      intArray1[1] = (-2906);
      intArray1[2] = (-2143283075);
      intArray1[3] = 3496;
      intArray1[4] = (-2906);
      intArray1[5] = (-2143283075);
      intArray1[6] = 1;
      intArray1[7] = (-1);
      intArray1[8] = (-2906);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-8387591), int0);
      assertArrayEquals(new int[] {(-2143283075), 750, 3496, (-2906), 1}, intArray0);
      assertArrayEquals(new int[] {(-2906), (-2906), (-2143283075), 3496, (-2906), (-2143283075), 1, (-1), (-2906)}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(9, intArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2906);
      doubleArray0[1] = (-1937.2437473885);
      doubleArray0[2] = (double) 3496;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2906.0), (-1937.2437473885), 3496.0, 1.34217729E8, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-9.026663), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.258594253069816E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-777);
      intArray0[1] = 1332;
      intArray0[2] = 301;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 301;
      intArray1[1] = (-777);
      intArray1[2] = (-777);
      intArray1[3] = 1332;
      intArray1[4] = (-777);
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2602.316083799199, double1, 0.01);
      assertArrayEquals(new int[] {(-777), 1332, 301}, intArray0);
      assertArrayEquals(new int[] {301, (-777), (-777), 1332, (-777)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 204;
      intArray0[1] = 2160;
      intArray0[2] = 4;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 723;
      intArray1[1] = 2160;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3502.031836450375);
      doubleArray0[1] = (-3.141592653589793);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3502.031836450375);
      doubleArray1[1] = (-3.141592653589793);
      doubleArray1[2] = (-3502.031836450375);
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[2];
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1813.2322F;
      floatArray0[1] = -0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1732.0F);
      floatArray0[4] = (-2411.966F);
      floatArray0[5] = (-2836.0F);
      floatArray0[6] = (-2971.8074F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1813.2322F, -0.0F, 0.0F, (-1732.0F), (-2411.966F), (-2836.0F), (-2971.8074F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) -0.0F;
      doubleArray0[1] = (double) -0.0F;
      doubleArray0[2] = (double) 1813.2322F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-1732.0F);
      doubleArray0[5] = (double) (-2971.8074F);
      doubleArray0[6] = (double) (-2836.0F);
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = (double) (-2836.0F);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-4017);
      intArray0[1] = 1073741824;
      intArray0[2] = (-940);
      intArray0[3] = 79;
      intArray0[4] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-4017), 1073741824, (-940), 79, 2}, intArray0);
      assertArrayEquals(new int[] {(-4017), 1073741824, (-940), 79, 2}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 4.3466666666666665E18;
      doubleArray0[2] = 4.3466666666666665E18;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 4.3466666666666665E18, 4.3466666666666665E18}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 2336.4330178924033;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 3314.49784;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertArrayEquals(new double[] {1.7976931348623157E308, 2336.4330178924033, 1.0, 3.834E-20, 3314.49784}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1.7976931348623157E308);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(1.7976931348623157E308, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(1.7976931348623157E308, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) doubleArray0[1];
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 3286655.755200373;
      doubleArray1[4] = 580.23635875559;
      doubleArray1[5] = 1.7976931348623157E308;
      doubleArray1[6] = 3.2600000000356306E18;
      doubleArray1[7] = (double) doubleArray0[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308, 0.0, 3286655.755200373, 580.23635875559, 1.7976931348623157E308, 3.2600000000356306E18, 1.7976931348623157E308}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, doubleArray0.length);
      
      double double4 = MathArrays.safeNorm(doubleArray1);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308, 0.0, 3286655.755200373, 580.23635875559, 1.7976931348623157E308, 3.2600000000356306E18, 1.7976931348623157E308}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 5;
      intArray0[1] = (-408);
      intArray0[2] = 5;
      intArray0[3] = (-1657);
      intArray0[4] = 126;
      intArray0[5] = (-1283);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 144;
      intArray1[1] = (-1283);
      intArray1[2] = (-1657);
      intArray1[3] = 5;
      intArray1[4] = (-408);
      intArray1[5] = 5;
      intArray1[6] = 5;
      intArray1[7] = 126;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6160, int0);
      assertArrayEquals(new int[] {5, (-408), 5, (-1657), 126, (-1283)}, intArray0);
      assertArrayEquals(new int[] {144, (-1283), (-1657), 5, (-408), 5, 5, 126}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1856.483F;
      float float0 = 0.0F;
      floatArray0[1] = 0.0F;
      float float1 = 0.5F;
      floatArray0[2] = 0.5F;
      floatArray0[3] = 0.0F;
      float float2 = 4913.974F;
      floatArray0[4] = 4913.974F;
      float float3 = (-1592.0F);
      floatArray0[5] = (-1592.0F);
      floatArray0[6] = (-1.0F);
      float float4 = 1.0F;
      floatArray0[7] = 1.0F;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1856.483F, 0.0F, 0.5F, 0.0F, 4913.974F, (-1592.0F), (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-906.08));
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1462);
      intArray0[1] = 163;
      intArray0[2] = 312;
      intArray0[3] = (-609);
      intArray0[4] = 15;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1462), 163, 312, (-609), 15}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 514;
      intArray0[1] = (-2145097554);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2145097554);
      intArray1[1] = (-2145097554);
      intArray1[2] = (-2145097554);
      intArray1[3] = 514;
      intArray1[4] = (-2145097554);
      intArray1[5] = (-2145097554);
      intArray1[6] = (-2145097554);
      intArray1[7] = (-2145097554);
      intArray1[8] = 247;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2145098068, int0);
      assertArrayEquals(new int[] {514, (-2145097554)}, intArray0);
      assertArrayEquals(new int[] {(-2145097554), (-2145097554), (-2145097554), 514, (-2145097554), (-2145097554), (-2145097554), (-2145097554), 247}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(9, intArray1.length);
      
      double[] doubleArray2 = MathArrays.scale((-897.6), doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      
      long[][] longArray0 = new long[5][7];
      long[] longArray1 = new long[6];
      longArray1[0] = (long) (-2145097554);
      longArray1[1] = (-1362L);
      longArray1[2] = (long) (-2145097554);
      longArray1[3] = (-2003L);
      longArray1[4] = (long) (-2145097554);
      longArray1[5] = (long) (-2145097554);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 247;
      longArray2[1] = (long) (-2145097554);
      longArray2[2] = (long) (-2145097554);
      longArray2[3] = (long) (-2145097554);
      longArray2[4] = (long) (-2145097554);
      longArray2[5] = (-3512299194304650054L);
      longArray2[6] = (long) 514;
      longArray2[7] = (long) 514;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) (-2145097554);
      longArray3[1] = (long) 247;
      longArray3[2] = (long) (-2145097554);
      longArray3[3] = (-3512299194304650054L);
      longArray3[4] = (long) (-2145097554);
      longArray3[5] = (long) 514;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (long) (-2145097554);
      longArray4[1] = (-3512299194304650054L);
      longArray4[2] = (long) 247;
      longArray4[3] = (long) (-2145097554);
      longArray4[4] = (-3512299194304650054L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (-809L);
      longArray5[1] = (-3512299194304650054L);
      longArray5[2] = (long) 247;
      longArray5[3] = (long) 514;
      longArray5[4] = (long) (-2145097554);
      longArray5[5] = (-2003L);
      longArray5[6] = (long) (-2145097554);
      longArray5[7] = (long) (-2145097554);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,145,097,554 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2535.64152;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1234.91);
      doubleArray0[3] = 1904.8172055;
      doubleArray0[4] = (-1155.310948812622);
      doubleArray0[5] = 2.1068895824306656E14;
      doubleArray0[6] = (-2667.0);
      doubleArray0[7] = 4.438921624363781E-8;
      doubleArray0[8] = 3780.205479;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2535.64152, 1.0, (-1234.91), 1904.8172055, (-1155.310948812622), 2.1068895824306656E14, (-2667.0), 4.438921624363781E-8, 3780.205479}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[2][1];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2535.64152, 1.0, (-1234.91), 1904.8172055, (-1155.310948812622), 2.1068895824306656E14, (-2667.0), 4.438921624363781E-8, 3780.205479}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2535.64152, 1.0, (-1234.91), 1904.8172055, (-1155.310948812622), 2.1068895824306656E14, (-2667.0), 4.438921624363781E-8, 3780.205479}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1033;
      intArray0[1] = (-2145097554);
      intArray0[2] = 2378;
      intArray0[3] = 879145124;
      intArray0[4] = 6;
      intArray0[5] = 608;
      intArray0[6] = 2632;
      intArray0[7] = (-1);
      intArray0[8] = 278;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2632;
      intArray1[1] = 879145124;
      intArray1[2] = 2378;
      intArray1[3] = 1033;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 14.396126034566024;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {14.396126034566024, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(134217729);
      assertEquals(134217729, (int)integer0);
      assertNotNull(integer0);
      
      Pair<String, String> pair0 = new Pair<String, String>(")X#Z-ha$~]h9U-p?", ")X#Z-ha$~]h9U-p?");
      assertNotNull(pair0);
      
      Pair<String, String> pair1 = new Pair<String, String>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(object0).when(field0).getZero();
      int[] intArray0 = new int[2];
      intArray0[0] = 1291;
      intArray0[1] = 638;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1291, 638}, intArray0);
      assertArrayEquals(new int[] {1291, 638}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 638, 638);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1418.9147F;
      floatArray0[1] = 2601.7966F;
      floatArray0[2] = 1783.477F;
      floatArray0[3] = (-229.048F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = Float.NaN;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1418.9147F, 2601.7966F, 1783.477F, (-229.048F), (-1.0F), 1.0F, Float.NaN}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Double double0 = new Double(1783.477F);
      assertEquals(1783.47705078125, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) 1418.9147F;
      doubleArray0[2] = (double) 1783.477F;
      doubleArray0[3] = (double) (-229.048F);
      doubleArray0[4] = (double) 1783.477F;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1418.9146728515625, 1783.47705078125, (-229.04800415039062), 1783.47705078125}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {Double.NaN, 1418.9146728515625, 1783.47705078125, (-229.04800415039062), 1783.47705078125}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(1.7976931348623157E308, (-187.921331), (-1616.22844), (-2024.5494424521466), (-1039.324924964664), 0.0, (-2024.5494424521466), 1.0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1.0, 1.0, (-1039.324924964664), (-2024.5494424521466), 1.0, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2104165.6973638297, double1, 0.01);
      
      double[][] doubleArray2 = new double[3][5];
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1.7976931348623157E308;
      doubleArray3[1] = (-1039.324924964664);
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      double double2 = MathArrays.linearCombination(0.0, 1.0, 0.0, 0.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 154, (-2111));
      assertNotNull(objectArray0);
      assertEquals(154, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = (-2095);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.3648497F;
      floatArray0[1] = 1.3648497F;
      floatArray0[2] = Float.POSITIVE_INFINITY;
      floatArray0[3] = 1.3648497F;
      floatArray0[4] = 584.3F;
      floatArray0[5] = 1.3648497F;
      floatArray0[6] = 1.3648497F;
      floatArray0[7] = 584.3F;
      floatArray0[8] = (-1956.47F);
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = Float.POSITIVE_INFINITY;
      floatArray1[1] = (-1956.47F);
      floatArray1[2] = (-1956.47F);
      floatArray1[3] = (-1956.47F);
      floatArray1[4] = (-1956.47F);
      floatArray1[5] = (-1956.47F);
      floatArray1[6] = 1.3648497F;
      floatArray1[7] = 584.3F;
      floatArray1[8] = Float.POSITIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1.3648497F, 1.3648497F, Float.POSITIVE_INFINITY, 1.3648497F, 584.3F, 1.3648497F, 1.3648497F, 584.3F, (-1956.47F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.POSITIVE_INFINITY, (-1956.47F), (-1956.47F), (-1956.47F), (-1956.47F), (-1956.47F), 1.3648497F, 584.3F, Float.POSITIVE_INFINITY}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (-3099.1666);
      doubleArray1[2] = 836.267398783;
      doubleArray1[3] = 1.34217729E8;
      doubleArray1[4] = 590.03972929;
      doubleArray1[5] = Double.NaN;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, (-3099.1666), 836.267398783, 1.34217729E8, 590.03972929, Double.NaN}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 590.03972929);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.304E19, (-3099.1666), 836.267398783, 1.34217729E8, 590.03972929, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {590.039729283927, (-1.4023247098694695E-13), 3.7839799814945946E-14, 6.073143595418979E-9, 2.669838053198107E-14, Double.NaN}, doubleArray2, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {1.304E19, (-3099.1666), 836.267398783, 1.34217729E8, 590.03972929, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {590.039729283927, (-1.4023247098694695E-13), 3.7839799814945946E-14, 6.073143595418979E-9, 2.669838053198107E-14, Double.NaN}, doubleArray2, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 590.03972929;
      doubleArray2[1] = 590.03972929;
      doubleArray2[2] = 590.03972929;
      doubleArray2[3] = 590.03972929;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {590.03972929, 590.03972929, 590.03972929, 590.03972929}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {590.03972929, 590.03972929, 590.03972929, 590.03972929}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      Double double0 = new Double((-1229.56));
      assertEquals((-1229.56), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray3 = new Double[1];
      doubleArray3[0] = (Double) 590.03972929;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, true);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(1, doubleArray3.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-641.0F);
      floatArray0[1] = (-641.0F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-641.0F), (-641.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1321), 2141812226);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = 1080.4255191836;
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) (-1);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), 1080.4255191836, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), 1080.4255191836, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-2144719833);
      intArray0[3] = 134217729;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), (-1), (-2144719833), 134217729}, intArray1);
      assertArrayEquals(new int[] {(-1), (-1), (-2144719833), 134217729}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale((-1), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-4399.79365);
      doubleArray0[0] = (-4399.79365);
      double double1 = (-1612.761211266338);
      doubleArray0[1] = (-1612.761211266338);
      doubleArray0[2] = 1.0E-5;
      double double2 = 0.8775825500488281;
      doubleArray0[3] = 0.8775825500488281;
      double double3 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {(-4399.79365), (-1612.761211266338), 1.0E-5, 0.8775825500488281}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1612.761211266338);
      doubleArray1[1] = 302.479;
      doubleArray1[2] = 1.3697478991596638E16;
      double[] doubleArray2 = MathArrays.scale(0.8775825500488281, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1612.761211266338), 302.479, 1.3697478991596638E16}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1415.3310964029497), 265.45029215621946, 1.2020668542685628E16}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double double4 = MathArrays.linearCombination(1.0E-5, 1.0, 0.8775825500488281, (double) Float.NaN, (-4399.79365), 302.479, 1.3697478991596638E16, 126.1194368687075);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[3];
      Double double0 = new Double((-538.1924720374996));
      assertEquals((-538.1924720374996), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(100.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(100.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray1[1] = double1;
      Double double2 = new Double(100.0);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(100.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray1[2] = double2;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(3, doubleArray1.length);
      
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Integer integer0 = Integer.valueOf((-2095));
      assertEquals((-2095), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-1376.8525), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-0.0013888888689039883);
      doubleArray0[1] = (-827.952738544064);
      doubleArray0[2] = 3056.95411042236;
      doubleArray0[3] = (-3.356118100840571E-7);
      doubleArray0[4] = 86.8631416573;
      doubleArray0[5] = (-621.63);
      doubleArray0[6] = 1.304E18;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 2532.5;
      doubleArray0[3] = 614565.5040071782;
      doubleArray0[4] = 1399.2;
      doubleArray0[5] = 86.8631416573;
      doubleArray0[6] = 13.07;
      doubleArray0[7] = Double.NaN;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 1.7976931348623157E308, 2532.5, 614565.5040071782, 1399.2, 86.8631416573, 13.07, Double.NaN}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[2];
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-799.801667499921);
      doubleArray0[1] = 1797.4068;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (-7.44321345601866E-11);
      doubleArray0[4] = 2899.861034472;
      doubleArray0[5] = 1612.28458558466;
      doubleArray0[6] = 8.0E298;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = (-2095);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-2095);
      doubleArray1[1] = (-2334.610892);
      doubleArray1[2] = 408.5009;
      doubleArray1[3] = (-2334.610892);
      doubleArray1[4] = (-0.25);
      doubleArray1[5] = 2233.37965204;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1.7976931348623157E308);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(1.7976931348623157E308, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[1]);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(0);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(0);
      assertEquals((double)double6, (double)double3, 0.01);
      assertEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertEquals(0.0, (double)double6, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[2]);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertEquals(1.7976931348623157E308, (double)double7, 0.01);
      assertNotNull(double7);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[7] = double7;
      Double double8 = new Double((double) doubleArray0[0]);
      assertEquals((double)double8, (double)double4, 0.01);
      assertEquals((double)double8, (double)double0, 0.01);
      assertEquals((double)double8, (double)double1, 0.01);
      assertEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertEquals((double)double8, (double)double5, 0.01);
      assertEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertEquals(0.0, (double)double8, 0.01);
      assertNotNull(double8);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[8] = double8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1123.8183686);
      doubleArray1[1] = (double) doubleArray0[7];
      doubleArray1[2] = (double) doubleArray0[6];
      doubleArray1[3] = (double) doubleArray0[0];
      doubleArray1[4] = 1.7976931348623157E308;
      double double9 = MathArrays.safeNorm(doubleArray1);
      assertEquals(Double.POSITIVE_INFINITY, double9, 0.01);
      assertArrayEquals(new double[] {(-1123.8183686), 1.7976931348623157E308, 0.0, 0.0, 1.7976931348623157E308}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Integer integer0 = Integer.valueOf((-2095));
      assertEquals((-2095), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2095));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2095), (int)integer1);
      assertNotNull(integer1);
      
      Double double1 = new Double((-2095));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2095.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = double1;
      doubleArray1[1] = double1;
      doubleArray1[2] = double1;
      doubleArray1[3] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, doubleArray1.length);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Double double0 = new Double(8.112963841460668E31);
      assertEquals(8.112963841460668E31, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(8.112963841460668E31);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(8.112963841460668E31, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(8.112963841460668E31);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(8.112963841460668E31, (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(3811219.3494223207);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(3811219.3494223207, (double)double3, 0.01);
      assertNotNull(double3);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray2 = new Double[4];
      doubleArray2[0] = double3;
      Double double4 = new Double(Double.NaN);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals(Double.NaN, (double)double4, 0.01);
      assertNotNull(double4);
      
      doubleArray2[1] = double4;
      doubleArray2[2] = double3;
      doubleArray2[3] = double2;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, doubleArray2.length);
      
      double double5 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double5, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Integer integer0 = Integer.valueOf((-2095));
      assertEquals((-2095), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2095));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2095), (int)integer1);
      assertNotNull(integer1);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (-2095);
      doubleArray1[2] = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2309.573321729372);
      doubleArray0[1] = (-2365.51572);
      doubleArray0[2] = (-14.08);
      doubleArray0[3] = (-73.81037588664);
      doubleArray0[4] = 18.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = (-941.81291896);
      doubleArray0[8] = (-749.81994853518);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {(-2309.573321729372), (-2365.51572), (-14.08), (-73.81037588664), 18.0, Double.NaN, 3.834E-20, (-941.81291896), (-749.81994853518)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-941.81291896);
      doubleArray1[1] = 1435.2339535861;
      doubleArray1[2] = (-73.81037588664);
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = 1615.08447036;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-749.81994853518);
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2147483405;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2147483405;
      intArray1[1] = 2;
      intArray1[2] = 0;
      intArray1[3] = 2147483405;
      intArray1[4] = 2147483405;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 2275L;
      longArray0[2] = 2275L;
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 0L;
      Double[] doubleArray2 = new Double[4];
      Double double0 = new Double(8.112963841460668E31);
      assertEquals(8.112963841460668E31, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[0] = double0;
      Double double1 = new Double(0L);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray2[1] = double1;
      Double double2 = new Double(8.112963841460668E31);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(8.112963841460668E31, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray2[2] = double2;
      Double double3 = new Double(364.0154164);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(364.0154164, (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray2[3] = double3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, doubleArray2.length);
      
      double double4 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double4, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3.356118100840571E-7);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3488.93);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3.356118100840571E-7)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3488.93}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-3.356118100840571E-7)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3488.93}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3488.93}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3488.93;
      doubleArray3[1] = 3488.93;
      doubleArray3[2] = (-3.356118100840571E-7);
      doubleArray3[3] = 3488.93;
      doubleArray3[4] = (-3.356118100840571E-7);
      doubleArray3[5] = 3488.93;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray4 = new double[7][4];
      doubleArray4[0] = doubleArray3;
      doubleArray4[1] = doubleArray3;
      doubleArray4[2] = doubleArray2;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      
      doubleArray5[0] = (-3.356118100840571E-7);
      doubleArray5[1] = (-3.356118100840571E-7);
      doubleArray5[2] = (-3.356118100840571E-7);
      doubleArray5[3] = (-3.356118100840571E-7);
      doubleArray5[4] = (-3.356118100840571E-7);
      doubleArray5[5] = 468.4742501589088;
      doubleArray5[6] = (-3.356118100840571E-7);
      doubleArray5[7] = (-3.356118100840571E-7);
      doubleArray4[3] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      
      doubleArray6[0] = 468.4742501589088;
      doubleArray4[4] = doubleArray6;
      doubleArray4[5] = doubleArray1;
      doubleArray4[6] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray3, mathArrays_OrderDirection0, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.0, 1.0, 0.0, 1544.13571856626);
      assertEquals(1.0, double0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 993;
      int[] intArray0 = new int[6];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 993L;
      doubleArray0[1] = (double) 993;
      doubleArray0[2] = 1544.13571856626;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 9.007199254740992E15;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {993.0, 993.0, 1544.13571856626, 0.0, 9.007199254740992E15}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.scale((-598.6345812480095), doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-332.93130183752);
      doubleArray3[1] = 1.0E-5;
      doubleArray3[2] = (-332.93130183752);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-598.6345812480095);
      doubleArray3[5] = (-332.93130183752);
      doubleArray3[6] = (-332.93130183752);
      doubleArray3[7] = (-332.93130183752);
      doubleArray3[8] = (-332.93130183752);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-2146595650);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-332.93130183752);
      doubleArray0[7] = (-332.93130183752);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 1.0E-5;
      doubleArray1[3] = (Double) (-332.93130183752);
      doubleArray1[4] = (Double) 1.34217729E8;
      Double double1 = new Double((-332.93130183752));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-332.93130183752), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray1[5] = double1;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, doubleArray1.length);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(2.1507875960626755E9, double2, 0.01);
      assertArrayEquals(new double[] {1.0E-5, 1.34217729E8, 0.0, 0.0, (-2.14659565E9), 0.0, (-332.93130183752), (-332.93130183752)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long[][] longArray0 = new long[0][2];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = (-1106.9222F);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2275L;
      doubleArray0[1] = (double) (-1106.9222F);
      doubleArray0[2] = (double) (-1106.9222F);
      doubleArray0[3] = (double) 2275L;
      doubleArray0[4] = (double) (-1106.9222F);
      doubleArray0[5] = (double) (-1106.9222F);
      doubleArray0[6] = (double) (-1106.9222F);
      doubleArray0[7] = (double) 2275L;
      doubleArray0[8] = (double) 2275L;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2275.0, (-1106.9222412109375), (-1106.9222412109375), 2275.0, (-1106.9222412109375), (-1106.9222412109375), (-1106.9222412109375), 2275.0, 2275.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2275.0, (-1106.9222412109375), (-1106.9222412109375), 2275.0, (-1106.9222412109375), (-1106.9222412109375), (-1106.9222412109375), 2275.0, 2275.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      
      Double double0 = new Double(0.9489846229553223);
      assertEquals(0.9489846229553223, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(3.834E-20);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(3.834E-20, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((-1079.5392257875));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-1079.5392257875), (double)double2, 0.01);
      assertNotNull(double2);
      
      Double[] doubleArray2 = new Double[8];
      doubleArray2[0] = (Double) 2275.0;
      doubleArray2[1] = double1;
      doubleArray2[2] = (Double) 2275.0;
      doubleArray2[3] = (Double) 2275.0;
      doubleArray2[4] = (Double) 2275.0;
      doubleArray2[5] = double2;
      doubleArray2[6] = (Double) 2275.0;
      doubleArray2[7] = (Double) (-1106.9222412109375);
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertTrue(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection0, mathArrays_OrderDirection1);
      assertFalse(boolean1);
      assertEquals(8, doubleArray2.length);
      
      double double3 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3.3577262080542184E7, double3, 0.01);
      assertArrayEquals(new double[] {2275.0, (-1106.9222412109375), (-1106.9222412109375), 2275.0, (-1106.9222412109375), (-1106.9222412109375), (-1106.9222412109375), 2275.0, 2275.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 836.267398783;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 836.267398783}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {Double.NaN, 836.267398783}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Double double0 = new Double(836.267398783);
      assertEquals(836.267398783, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(18, doubleArray0.length);
      assertEquals(35, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(18, doubleArray0.length);
      assertEquals(35, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray2 = new Double[3];
      Double double0 = new Double(9.007199254740992E15);
      assertEquals(9.007199254740992E15, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[0] = double0;
      Double double1 = new Double((-2575.2509765625));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2575.2509765625), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray2[1] = double1;
      Double double2 = new Double((-2575.2509765625));
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-2575.2509765625), (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray2[2] = double2;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection1, true);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertEquals(3, doubleArray2.length);
      
      double double3 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double3, 0.01);
      assertEquals(18, doubleArray0.length);
      assertEquals(35, doubleArray1.length);
      
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 35 != 18
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long[][] longArray0 = new long[3][3];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 2275L;
      longArray1[2] = 227L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0L;
      floatArray1[1] = (float) 0L;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = (-913.62650682);
      double double1 = 0.0;
      double double2 = 1066.0;
      Double double3 = new Double(0.0);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      float float0 = (-1350.09F);
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.7976931348623157E308;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 9.007199254740992E15;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = 1.0;
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {9.007199254740992E15, 1.0, 1.7976931348623157E308, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {8.112963841460668E31, 1.0, Double.POSITIVE_INFINITY, 1.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {9.007199254740992E15, 1.0, 1.7976931348623157E308, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {8.112963841460668E31, 1.0, Double.POSITIVE_INFINITY, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {7.3075081866545146E47, 8.112963841460668E31, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0}, doubleArray3, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {9.007199254740992E15, 1.0, 1.7976931348623157E308, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {8.112963841460668E31, 1.0, Double.POSITIVE_INFINITY, 1.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection1, true, false);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {9.007199254740992E15, 1.0, 1.7976931348623157E308, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {8.112963841460668E31, 1.0, Double.POSITIVE_INFINITY, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {7.3075081866545146E47, 8.112963841460668E31, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0}, doubleArray3, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 3639;
      int int0 = 0;
      intArray0[1] = 0;
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 0;
      try { 
        MathArrays.ebeDivide(doubleArray4, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.7976931348623157E308;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 9.007199254740992E15;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = 1.0;
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {9.007199254740992E15, 1.0, 1.7976931348623157E308, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {8.112963841460668E31, 1.0, Double.POSITIVE_INFINITY, 1.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {9.007199254740992E15, 1.0, 1.7976931348623157E308, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {8.112963841460668E31, 1.0, Double.POSITIVE_INFINITY, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {7.3075081866545146E47, 8.112963841460668E31, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0}, doubleArray3, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {9.007199254740992E15, 1.0, 1.7976931348623157E308, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {8.112963841460668E31, 1.0, Double.POSITIVE_INFINITY, 1.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      Double[] doubleArray4 = new Double[3];
      doubleArray4[0] = (Double) 1.7976931348623157E308;
      doubleArray4[1] = (Double) 1.0;
      doubleArray4[2] = (Double) 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray4, mathArrays_OrderDirection1, false);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertEquals(3, doubleArray4.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertArrayEquals(new double[] {9.007199254740992E15, 1.0, 1.7976931348623157E308, 1.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 1.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) (-2146595650);
      doubleArray0[2] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-2146595650);
      doubleArray0[5] = 253.0;
      doubleArray0[6] = (double) 1.0F;
      try { 
        MathArrays.normalizeArray(doubleArray0, 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1073.145;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1073.145}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1151640.191025}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1073.145}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1151640.191025}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.2358769127975237E9}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1073.145;
      doubleArray3[1] = 1073.145;
      doubleArray3[2] = 1073.145;
      doubleArray3[3] = 1073.145;
      doubleArray3[4] = 3.834E-20;
      doubleArray3[5] = (-2105.013);
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-2146595650);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-332.93130183752);
      doubleArray0[7] = (-332.93130183752);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 952);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0E-5, 1.34217729E8, 0.0, 0.0, (-2.14659565E9), 0.0, (-332.93130183752), (-332.93130183752)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(952, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 952);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.0E-5, 1.34217729E8, 0.0, 0.0, (-2.14659565E9), 0.0, (-332.93130183752), (-332.93130183752)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(952, doubleArray1.length);
      assertEquals(952, doubleArray2.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2870.7F;
      floatArray0[1] = 1334.7346F;
      floatArray0[2] = (-2306.0F);
      floatArray0[3] = 546.348F;
      floatArray0[4] = (-281.7141F);
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 2870.7F;
      floatArray1[1] = (-281.7141F);
      floatArray1[2] = (-2306.0F);
      floatArray1[3] = 1334.7346F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {2870.7F, 1334.7346F, (-2306.0F), 546.348F, (-281.7141F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2870.7F, (-281.7141F), (-2306.0F), 1334.7346F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 263;
      intArray0[1] = 5;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {263, 5}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-986.1209F);
      float float0 = (-3739.9F);
      floatArray0[1] = (-3739.9F);
      floatArray0[2] = 0.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-3739.9F);
      floatArray1[2] = (-986.1209F);
      floatArray1[3] = (-986.1209F);
      floatArray1[4] = (-1402.857F);
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = (-3739.9F);
      floatArray1[8] = (-986.1209F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-986.1209F), (-3739.9F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-3739.9F), (-986.1209F), (-986.1209F), (-1402.857F), 0.0F, 0.0F, (-3739.9F), (-986.1209F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3063.23;
      doubleArray0[1] = 989.754382927;
      doubleArray0[2] = 1445.7189691108088;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3063.23, 989.754382927, 1445.7189691108088}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2745.83F);
      floatArray0[2] = 231.94331F;
      floatArray0[3] = 2107.2634F;
      floatArray0[4] = 1435.0273F;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray1, floatArray2);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray2.length);
      
      double double0 = MathArrays.linearCombination(3063.23, 6266.71249476, (double) 1435.0273F, (-72.5377));
      assertEquals(1.9092288132370938E7, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1277);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1277);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (double) 2107.2634F;
      doubleArray1[3] = (double) 2107.2634F;
      doubleArray1[4] = (double) 1435.0273F;
      doubleArray1[5] = (double) 1435.0273F;
      doubleArray1[6] = (double) 231.94331F;
      doubleArray1[7] = (double) 0.0F;
      boolean boolean2 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {(-1277.0), 1.0, 2107.263427734375, 2107.263427734375, 1435.02734375, 1435.02734375, 231.9433135986328, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      
      intArray0[1] = (-2951);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1277));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = (-2697);
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2697), (-2697));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 5440.0F;
      floatArray0[1] = (-150.445F);
      floatArray0[2] = (-54.897934F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 2532.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = Float.POSITIVE_INFINITY;
      floatArray0[8] = Float.POSITIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {5440.0F, (-150.445F), (-54.897934F), 1.0F, 0.0F, 2532.0F, 0.0F, Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      double double0 = MathArrays.linearCombination((double) Float.POSITIVE_INFINITY, 0.0, 1715.301447561, (double) Float.POSITIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 613);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.7976931348623157E308;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 9.007199254740992E15;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = 1.0;
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {9.007199254740992E15, 1.0, 1.7976931348623157E308, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {8.112963841460668E31, 1.0, Double.POSITIVE_INFINITY, 1.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {9.007199254740992E15, 1.0, 1.7976931348623157E308, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {8.112963841460668E31, 1.0, Double.POSITIVE_INFINITY, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {7.3075081866545146E47, 8.112963841460668E31, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0}, doubleArray3, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {9.007199254740992E15, 1.0, 1.7976931348623157E308, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {8.112963841460668E31, 1.0, Double.POSITIVE_INFINITY, 1.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      Double[] doubleArray4 = new Double[3];
      doubleArray4[0] = (Double) 1.7976931348623157E308;
      doubleArray4[1] = (Double) 1.0;
      doubleArray4[2] = (Double) 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray4, mathArrays_OrderDirection1, true);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertEquals(3, doubleArray4.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertArrayEquals(new double[] {9.007199254740992E15, 1.0, 1.7976931348623157E308, 1.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = 2741.0;
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = (-1.0);
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rtc14ul):QR#)v5v";
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1.0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      
      double double1 = 2700.2003705724;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1643.82;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = 3177.4183258035882;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, 1.0, 1643.82, 1.0, 1.7976931348623157E308, 3177.4183258035882}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, (-312.43), 1.0, 3177.4183258035882);
      assertEquals(3177.4183258035882, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1180));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 14.396126034566024;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {14.396126034566024, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      int[] intArray0 = new int[2];
      intArray0[0] = 1291;
      intArray0[1] = 638;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1291, 638}, intArray0);
      assertArrayEquals(new int[] {1291, 638}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      Object[][] objectArray0 = MathArrays.buildArray(field0, 638, 638);
      assertNotNull(objectArray0);
      assertEquals(638, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = (-1106.9222F);
      floatArray0[2] = (-637.6012F);
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 2700.2003705724);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2275L;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2275.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(3.834E-20, 2208.6845786, 0.11113807559013367, (-205.63));
      assertEquals((-22.853322483599186), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = Double.NaN;
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-275);
      intArray0[2] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, (-275), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray3.length);
      
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = 4490.649705;
      doubleArray4[1] = 935.15555;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[][] longArray0 = new long[3][3];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 2275L;
      longArray1[2] = 227L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1526.87);
      doubleArray0[1] = (-1826.2626668);
      doubleArray0[2] = (-3.356118100840571E-7);
      doubleArray0[3] = 2741.0;
      doubleArray0[4] = 4839.07988153;
      doubleArray0[5] = (-2444.4343885908);
      doubleArray0[6] = 1394.9055;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1526.87), (-1826.2626668), (-3.356118100840571E-7), 2741.0, 4839.07988153, (-2444.4343885908), 1394.9055}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2198.21791580888);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1526.87), (-1826.2626668), (-3.356118100840571E-7), 2741.0, 4839.07988153, (-2444.4343885908), 1394.9055}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1056.3270696382897), (-1263.4544468164627), (-2.3218469148132732E-7), 1896.2927412802348, 3347.797173958613, (-1691.121192127152), 965.0307093841215}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new int[] {1}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1394.9055;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1394.9055}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = Float.POSITIVE_INFINITY;
      floatArray0[2] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1.0F, Float.POSITIVE_INFINITY, 1.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-2146595650));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 993);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(993, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = 3063.23;
      doubleArray0[1] = 989.754382927;
      doubleArray0[16] = 1445.7189691108088;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertEquals(19, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2745.83F);
      floatArray0[2] = 231.94331F;
      floatArray0[3] = 2107.2634F;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, doubleArray1.length);
      assertEquals(37, doubleArray2.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3528.894318206487, double0, 0.01);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, doubleArray1.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3063.23, double1, 0.01);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(0.0, 3488.93, (-1.5707963267948966), (-2024.5494424521466), (-1039.324924964664), 3063.046750561, (-2024.5494424521466), (-1616.22844));
      assertEquals(91813.70771485232, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, (-2343.632), 3174.700672103801, (-1.5707963267948966), (-2343.632), (-1616.22844));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3782857.883139666, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][8];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 1.7976931348623157E308);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 968;
      intArray0[1] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {968, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 968;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 968;
      longArray1[3] = (-2825L);
      longArray1[4] = (long) 968;
      longArray1[5] = (long) 968;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      longArray1[8] = (long) 0;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[17];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(17, intArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 2178.8541712561, 1.0E-5, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(17, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.060359557811404715;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[][] longArray0 = new long[3][3];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 2275L;
      longArray1[2] = 227L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((-918.3911778595648), (double) 0L, 1.0, 2198.21791580888);
      assertEquals(2198.21791580888, double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1277);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1277));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      double double0 = MathArrays.linearCombination(2178.8541712561, 968.0, 1.0E-5, 0.0, (-332.93130183752), 1.0E-5);
      assertEquals(2109130.834446592, double0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2106;
      intArray0[1] = 288;
      intArray0[2] = (-1809);
      intArray0[3] = (-2146723744);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {2106, 288, (-1809), (-2146723744)}, intArray0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.7976931348623157E308;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2745.83F);
      floatArray0[1] = (-2745.83F);
      floatArray0[2] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-2745.83F), (-2745.83F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(1.0, (double) (-2745.83F), (double) (-2745.83F), 1.0);
      assertEquals((-5491.66015625), double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2951);
      intArray0[1] = (-1277);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2951));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3063.23;
      doubleArray0[1] = 989.754382927;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3063.23, 989.754382927, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[1] = (-2745.83F);
      floatArray0[2] = 231.94331F;
      floatArray0[3] = 2107.2634F;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 231.94331F;
      doubleArray1[1] = (double) 2107.2634F;
      doubleArray1[2] = (double) (-2745.83F);
      doubleArray1[3] = (double) 0.0F;
      doubleArray1[4] = 1445.7189691108088;
      doubleArray1[5] = 989.754382927;
      doubleArray1[6] = (-9.007199254740992E15);
      doubleArray1[7] = 1445.7189691108088;
      doubleArray1[8] = (double) (-2745.83F);
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {3063.23, 989.754382927, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {231.9433135986328, 2107.263427734375, (-2745.830078125), 0.0, 1445.7189691108088, 989.754382927, (-9.007199254740992E15), 1445.7189691108088, (-2745.830078125)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3063.23;
      doubleArray0[1] = 989.754382927;
      doubleArray0[2] = 1445.7189691108088;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3063.23, 989.754382927, 1445.7189691108088}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2745.83F);
      floatArray0[2] = 231.94331F;
      floatArray0[3] = 2107.2634F;
      floatArray0[4] = 1435.0273F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, (-2745.83F), 231.94331F, 2107.2634F, 1435.0273F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(3063.23, 6266.71249476, (double) 1435.0273F, (-72.5377));
      assertEquals(1.9092288132370938E7, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1277);
      intArray0[1] = (-2951);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1277));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1632.319998;
      doubleArray0[1] = 3667.489626;
      doubleArray0[2] = 3667.489626;
      doubleArray0[4] = 3667.489626;
      doubleArray0[5] = 3667.489626;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.4E-45F;
      floatArray0[1] = 1.4E-45F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.4E-45F, 1.4E-45F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1.4E-45F;
      doubleArray0[1] = (double) 1.4E-45F;
      doubleArray0[2] = (double) 1.4E-45F;
      doubleArray0[3] = (double) 1.4E-45F;
      doubleArray0[4] = (double) 1.4E-45F;
      doubleArray0[5] = (double) 1.4E-45F;
      doubleArray0[6] = (double) 1.4E-45F;
      doubleArray0[7] = (double) 1.4E-45F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3.963470586361494E-45, double0, 0.01);
      assertArrayEquals(new double[] {1.401298464324817E-45, 1.401298464324817E-45, 1.401298464324817E-45, 1.401298464324817E-45, 1.401298464324817E-45, 1.401298464324817E-45, 1.401298464324817E-45, 1.401298464324817E-45}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2146507171;
      intArray0[1] = 0;
      intArray0[2] = 0;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {2146507171, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      long[][] longArray1 = new long[9][4];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      longArray1[8] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(9, longArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      long[][] longArray1 = new long[9][4];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      longArray1[8] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(9, longArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.scale(2703.804920909306, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray4.length);
      
      double[] doubleArray5 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotNull(doubleArray5);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray5, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray5.length);
      
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.scale(2703.804920909306, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray4.length);
      
      long[][] longArray0 = new long[3][3];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 2275L;
      longArray1[2] = 227L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 2275L;
      longArray2[2] = 0L;
      longArray2[3] = 2275L;
      longArray2[4] = 2275L;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray5 = new double[8][4];
      doubleArray5[0] = doubleArray4;
      doubleArray5[1] = doubleArray1;
      doubleArray5[2] = doubleArray1;
      doubleArray5[3] = doubleArray2;
      doubleArray5[4] = doubleArray4;
      doubleArray5[5] = doubleArray0;
      doubleArray5[6] = doubleArray3;
      doubleArray5[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray5);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(8, doubleArray5.length);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rtc14ul):QR#)v5v";
      stringArray0[2] = "_<_w_}$l";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1164.052977;
      doubleArray0[4] = 1128.9365;
      doubleArray0[5] = 174.0476947394158;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2295.8258956;
      doubleArray0[8] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3.141592653589793, 0.0, 0.0, 1164.052977, 1128.9365, 174.0476947394158, 0.0, 2295.8258956, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      float float0 = (-1106.9222F);
      floatArray0[1] = (-1106.9222F);
      floatArray0[2] = (-637.6012F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-2575.251F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-320.9638F);
      floatArray0[7] = 1.0F;
      floatArray0[8] = Float.POSITIVE_INFINITY;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, (-1106.9222F), (-637.6012F), (-1.0F), (-2575.251F), 0.0F, (-320.9638F), 1.0F, Float.POSITIVE_INFINITY}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-320.9638F);
      doubleArray0[5] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, Double.POSITIVE_INFINITY, 0.0, 0.0, (-641.9276123046875), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, Double.POSITIVE_INFINITY, 0.0, 0.0, (-320.96380615234375), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2.0, Double.POSITIVE_INFINITY, 0.0, 0.0, (-641.9276123046875), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, Double.POSITIVE_INFINITY, 0.0, 0.0, (-320.96380615234375), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(11, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray2, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {2.0, Double.POSITIVE_INFINITY, 0.0, 0.0, (-641.9276123046875), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, Double.POSITIVE_INFINITY, 0.0, 0.0, (-320.96380615234375), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(11, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3.356118100840571E-7);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3488.93);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3.356118100840571E-7)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3488.93}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-3.356118100840571E-7)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3488.93}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3488.93}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-3.356118100840571E-7)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3488.93}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 638, 638);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2720.0379374713234;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2720.0379374713234;
      doubleArray0[3] = (-952.705409);
      doubleArray0[4] = 2720.0379374713234;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-952.705409);
      doubleArray1[1] = 1702.27565629532;
      doubleArray1[2] = (-952.705409);
      doubleArray1[3] = (double) 0;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) 0;
      try { 
        MathArrays.ebeAdd(doubleArray3, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rtc14ul):QR#)v5v";
      stringArray0[1] = "_<_w_}$l";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      int[] intArray0 = new int[8];
      intArray0[0] = 3639;
      intArray0[1] = 0;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3639;
      intArray1[1] = 134217729;
      intArray1[3] = 134217729;
      intArray1[4] = 0;
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {3639, 134217729, 0, 134217729, 0}, intArray2);
      assertArrayEquals(new int[] {3639, 134217729, 0, 134217729, 0}, intArray1);
      assertEquals(5, intArray2.length);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(1.7976931348623157E308, (-187.921331), (-1616.22844), (-2024.5494424521466), (-1039.324924964664), 0.0, (-2024.5494424521466), 1.0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 1.0, (-1039.324924964664), 915.0715213, 1.7976931348623157E308, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-951056.6402124234), double1, 0.01);
      
      double[][] doubleArray2 = new double[3][5];
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1.7976931348623157E308;
      doubleArray3[1] = (-1039.324924964664);
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      double double2 = MathArrays.linearCombination(0.0, 1.0, 0.0, 0.0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      double double3 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.scale(2703.804920909306, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray4.length);
      
      long[][] longArray0 = new long[3][3];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 2275L;
      longArray1[2] = 227L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 2275L;
      longArray2[2] = 0L;
      longArray2[3] = 2275L;
      longArray2[4] = 2275L;
      double double0 = MathArrays.distance1(doubleArray2, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-2146723744);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, (-2146723744)}, intArray0);
      assertArrayEquals(new int[] {1, (-2146723744)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, (-826.19374506), (double) 1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-826.19374506), double1, 0.01);
      
      int int0 = MathArrays.distance1(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1, (-2146723744)}, intArray0);
      assertArrayEquals(new int[] {1, (-2146723744)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      double[] doubleArray5 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotNull(doubleArray5);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray5, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray5.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2740.06219038);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2740.06219038)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2740.06219038);
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {(-2740.06219038)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray2, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 968;
      doubleArray0[2] = (double) 968;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3063.23;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-563.757568);
      doubleArray1[3] = (-97.3);
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 3.834E-20;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5662.287568000001, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 968.0, 968.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3063.23, (-1.0), (-563.757568), (-97.3), 0.0, 0.0, 3.834E-20}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      
      double double1 = MathArrays.linearCombination(1.304E19, 818.0, (-1.0), 3.141592653589793);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0666719999999999E22, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (3,063.23 > -1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][7];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-170.7666394);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (-170.7666394);
      doubleArray1[2] = (-170.7666394);
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(170.7666394, double0, 0.01);
      assertArrayEquals(new double[] {(-170.7666394)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-170.7666394), (-170.7666394)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = Integer.valueOf((-2095));
      assertEquals((-2095), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2095));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2095), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(134217729);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(134217729, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      try { 
        Integer.valueOf("{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = Integer.valueOf((-2095));
      assertEquals((-2095), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2095));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2095), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(134217729);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(134217729, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      try { 
        Integer.valueOf("{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[7];
      intArray0[0] = 2272;
      intArray0[1] = 229;
      intArray0[2] = (-1);
      intArray0[3] = 495;
      intArray0[4] = 2;
      intArray0[5] = 2272;
      intArray0[6] = (-1);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {2272, 229, (-1), 495, 2, 2272, (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2272, 229, (-1), 495, 2, 2272, (-1)}, intArray0);
      assertArrayEquals(new int[] {2272, 229, (-1), 495, 2, 2272, (-1)}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 968;
      intArray0[1] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {968, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[9];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (-2676.461257504216));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 2738;
      intArray0[3] = 1000;
      intArray0[4] = 2785;
      intArray0[5] = 1572;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 2738, 1000, 2785, 1572}, intArray0);
      assertArrayEquals(new int[] {0, 0, 2738, 1000, 2785, 1572}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      double double1 = MathArrays.linearCombination(0.0, (double) 1572, (-1.0), (double) 2785);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2785.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long[][] longArray0 = new long[3][2];
      long[] longArray1 = new long[9];
      longArray1[0] = 10000L;
      longArray1[1] = (-1493L);
      longArray1[2] = (-195L);
      longArray1[3] = (-1073741824L);
      longArray1[4] = 2022L;
      longArray1[5] = 100L;
      longArray1[6] = (-96L);
      longArray1[7] = 4503599627370495L;
      longArray1[8] = 0L;
      longArray0[0] = longArray1;
      longArray0[1] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 100L;
      longArray2[1] = 4503599627370495L;
      longArray2[2] = 4503599627370495L;
      longArray0[2] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 3 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 1073.145;
      doubleArray0[0] = 1073.145;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1073.145}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1151640.191025}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1073.145}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1151640.191025}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.2358769127975237E9}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-2466);
      int int1 = 499;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2466), 499);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = (-1.0F);
      floatArray0[0] = (-1.0F);
      float float1 = 0.0F;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3488.93;
      doubleArray0[2] = (double) (-1.0F);
      double double0 = (-3336.965741166545);
      doubleArray0[3] = (-3336.965741166545);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = (-2417.345043977654);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 581.449088115;
      doubleArray0[4] = (-2010.30031238719);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not increasing (581.449 > -2,010.3)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 968;
      intArray0[1] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {968, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 968;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 968;
      doubleArray0[5] = (double) 968;
      doubleArray0[6] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 968.0, 0.0, 968.0, 968.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2740.06219038);
      int[] intArray0 = new int[7];
      intArray0[0] = (-3380);
      intArray0[1] = (-707);
      intArray0[3] = 0;
      intArray0[4] = (-822);
      intArray0[5] = (-2820);
      intArray0[6] = 1267;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-3380), (-707), 0, 0, (-822), (-2820), 1267}, intArray0);
      assertArrayEquals(new int[] {(-3380), (-707), 0, 0, (-822), (-2820), 1267}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      double double0 = MathArrays.linearCombination(3.26E18, 3.26E18, (double) 1267, 511.322467852);
      assertEquals(1.06276E37, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      double double0 = 2703.804920909306;
      double[] doubleArray4 = MathArrays.scale(2703.804920909306, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray4.length);
      
      long[][] longArray0 = new long[3][3];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      long long0 = 2275L;
      longArray1[1] = 2275L;
      longArray1[2] = 227L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 2275L;
      longArray2[2] = 0L;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(1.7976931348623157E308, (-187.921331), (-1616.22844), (-2024.5494424521466), (-1039.324924964664), 0.0, (-2024.5494424521466), 1.0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1.0, 1.0, (-1039.324924964664), (-2024.5494424521466), 1.0, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2104165.6973638297, double1, 0.01);
      
      double[][] doubleArray2 = new double[3][5];
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1.7976931348623157E308;
      doubleArray3[1] = (-1039.324924964664);
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      double double2 = MathArrays.linearCombination(0.0, 1.0, 0.0, 0.0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 154, (-2111));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = 0.0;
      double double2 = MathArrays.linearCombination(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-170.7666394);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-170.7666394);
      doubleArray1[1] = (-170.7666394);
      doubleArray1[2] = (-170.7666394);
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-170.7666394)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-170.7666394), (-170.7666394), (-170.7666394)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = Integer.valueOf((-2095));
      assertEquals((-2095), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2095));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2095), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(134217729);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(134217729, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      try { 
        Integer.valueOf("{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = (-2051.3658244826743);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-2051.3658244826743), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 0.0;
      int int0 = 499;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 499, 996);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1073.145;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1073.145}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1151640.191025}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1073.145}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1151640.191025}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.2358769127975237E9}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-2466);
      int int1 = 499;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2466), 499);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1972.21280128001;
      doubleArray0[2] = 2339.292964;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2339.292964;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 1972.21280128001, 2339.292964, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2339.292964}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4613583.529545058, 5472291.571419906, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-739);
      intArray0[1] = 134217729;
      intArray0[2] = 0;
      intArray0[3] = 716;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-739), 134217729, 0, 716}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (-739);
      double[][] doubleArray4 = new double[4][1];
      doubleArray4[0] = doubleArray2;
      doubleArray4[1] = doubleArray2;
      doubleArray4[2] = doubleArray2;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (double) 134217729;
      doubleArray5[1] = (double) 134217729;
      doubleArray5[2] = (double) (-739);
      doubleArray5[3] = (double) 134217729;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (double) (-739);
      doubleArray5[6] = 2339.292964;
      doubleArray5[7] = (double) 716;
      doubleArray5[8] = 0.0;
      doubleArray4[3] = doubleArray5;
      try { 
        MathArrays.sortInPlace(doubleArray3, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long[][] longArray0 = new long[6][7];
      long[] longArray1 = new long[6];
      longArray1[0] = (-2453L);
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (-710L);
      longArray1[4] = 2147483647L;
      longArray1[5] = 1723L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-710L);
      longArray2[1] = 1723L;
      longArray2[2] = (-710L);
      longArray2[3] = 0L;
      longArray2[4] = 2147483647L;
      longArray2[5] = (-1542L);
      longArray2[6] = 2147483647L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-2453L);
      longArray3[1] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 0L;
      longArray4[1] = (-710L);
      longArray4[2] = 0L;
      longArray4[3] = 1723L;
      longArray4[4] = 1723L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (-2453L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = 0L;
      longArray6[1] = 0L;
      longArray6[2] = 0L;
      longArray6[3] = 0L;
      longArray6[4] = (-710L);
      longArray6[5] = 1723L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 5921.2;
      doubleArray0[3] = (-3264.5958129);
      doubleArray0[4] = 1210.5564876;
      doubleArray0[5] = (-1011.9135790415637);
      doubleArray0[6] = (-512.18429334);
      doubleArray0[7] = 0.0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (13,040,000,000,000,000,000 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[1] = 746.0;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-455.04);
      doubleArray0[2] = (-468.5501347);
      doubleArray0[3] = 1580.8691;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-455.04), (-468.5501347), 1580.8691}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 207061.4016, 219539.22872738814, 2499147.1113348096}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.scale(1580.8691, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, (-455.04), (-468.5501347), 1580.8691}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 207061.4016, 219539.22872738814, 2499147.1113348096}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 3.2733697159213054E8, 3.470627829329602E8, 3.95082444466346E9}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4116.409;
      doubleArray0[1] = (-317.444);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4116.409, (-317.444)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4116.409, (-317.444)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {4116.409, (-317.444)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8232.818, (-634.888)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {4116.409, (-317.444)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4116.409, (-317.444)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.6944823055281E7, 100770.69313600002}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[][] longArray0 = new long[7][5];
      long[] longArray1 = new long[6];
      longArray1[0] = (-2825L);
      longArray1[1] = 9218868437227405312L;
      longArray1[2] = 1124L;
      longArray1[3] = (-1641L);
      longArray1[4] = 0L;
      longArray1[5] = 3304L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 3304L;
      longArray3[1] = (-1641L);
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = (-1641L);
      longArray3[5] = 0L;
      longArray3[6] = (-1641L);
      longArray3[7] = 9218868437227405312L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-2825L);
      longArray4[1] = 9218868437227405312L;
      longArray4[2] = (-2825L);
      longArray4[3] = 9218868437227405312L;
      longArray4[4] = 3304L;
      longArray4[5] = 1124L;
      longArray4[6] = 1124L;
      longArray4[7] = (-1641L);
      longArray4[8] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (-1641L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = 3304L;
      longArray6[1] = 1124L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[4];
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      
      longArray7[0] = 0L;
      longArray7[1] = 0L;
      longArray7[2] = 1124L;
      longArray7[3] = (-1641L);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,825 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      long long0 = 2997L;
      longArray0[1] = 2997L;
      longArray0[2] = (-2515L);
      longArray0[3] = 0L;
      longArray0[4] = (-3446L);
      longArray0[5] = 1023L;
      long long1 = 616L;
      longArray0[6] = 616L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,515 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.scale(2703.804920909306, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray4.length);
      
      long[][] longArray0 = new long[3][3];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 2275L;
      longArray1[2] = 227L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 2275L;
      longArray2[2] = 0L;
      longArray2[3] = 2275L;
      longArray2[4] = 2275L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray0[2] = longArray3;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray5 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotNull(doubleArray5);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray5, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray5.length);
      
      double[] doubleArray6 = MathArrays.ebeSubtract(doubleArray3, doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray6);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray6);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray6);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotNull(doubleArray6);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {}, doubleArray6, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray4.length);
      assertEquals(0, doubleArray6.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 359;
      intArray0[1] = 299;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 77;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {359, 299, 0, 0, (-1), 0, 0, 77}, intArray0);
      assertArrayEquals(new int[] {359, 299, 0, 0, (-1), 0, 0, 77}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 77;
      doubleArray0[3] = (double) 299;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 299.0, 77.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = (-1106.9222F);
      Double double0 = new Double(0.9489846229553223);
      assertEquals(0.9489846229553223, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(3.834E-20);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(3.834E-20, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((-1079.5392257875));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-1079.5392257875), (double)double2, 0.01);
      assertNotNull(double2);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = (Double) (double)(-1106.9222F);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1079.5392257875);
      doubleArray1[1] = (double) doubleArray0[0];
      doubleArray1[2] = 3.834E-20;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 302);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1.7976931348623157E308);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(1.7976931348623157E308, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(1.7976931348623157E308, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) doubleArray0[2];
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = (double) doubleArray0[2];
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      double[] doubleArray2 = MathArrays.scale(372.342, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      
      double double4 = MathArrays.linearCombination(doubleArray1, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Integer integer0 = Integer.valueOf((-2095));
      assertEquals((-2095), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2095));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2095), (int)integer1);
      assertNotNull(integer1);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = 4512;
      int int1 = (-1144);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 4512, (-1144));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      double double0 = (-627.67);
      doubleArray0[0] = (-627.67);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-627.67);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = (-331.71);
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 3.141592653589793;
      doubleArray0[6] = 0.0;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 134217729;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 134217729);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distance(intArray0, intArray0);
      MathArrays.linearCombination((-332.93130183752), (-332.93130183752), (-332.93130183752), 2178.8541712561, 1.0E-5, 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-614565.5040071782);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1632.319998;
      doubleArray0[3] = 0.0;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rtc14ul):QR#)v5v";
      stringArray0[1] = "_<_w_}$l";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[8];
      intArray0[0] = 3639;
      intArray0[1] = 0;
      intArray0[2] = 2559;
      intArray0[3] = (-280);
      intArray0[4] = 95;
      intArray0[5] = 2;
      intArray0[6] = 689;
      intArray0[7] = 0;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double double0 = 20.0;
      MathArrays.linearCombination((-1849.447529591873), (-1849.447529591873), 20.0, 20.0);
      double double1 = (-1904.5668294567297);
      double double2 = (-527.8924492192265);
      MathArrays.linearCombination(5588.294289292558, 20.0, 3.32, 3420856.164713482, (-1849.447529591873), (-1904.5668294567297), (-527.8924492192265), (-1849.447529591873));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 3.32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 968;
      intArray0[1] = 0;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 968;
      doubleArray0[5] = (double) 968;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 968;
      doubleArray0[8] = (double) 968;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 968;
      doubleArray1[2] = (-97.3);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 968;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1164.052977;
      doubleArray0[4] = 1128.9365;
      doubleArray0[5] = 174.0476947394158;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2295.8258956;
      doubleArray0[8] = 1845.432184387;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.0, 1.0, (-876.12606), (-876.12606), (-876.12606), 3667.489626);
      assertEquals((-2445585.36310713), double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-876.12606);
      doubleArray0[1] = (-876.12606);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3667.489626;
      doubleArray0[5] = (-876.12606);
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (-876.12606);
      doubleArray0[8] = (-2445585.36310713);
      MathArrays.scaleInPlace((-2445585.36310713), doubleArray0);
      assertArrayEquals(new double[] {2.1426410685727193E9, 2.1426410685727193E9, (-2445585.36310713), -0.0, (-8.969158948692842E9), 2.1426410685727193E9, (-2445585.36310713), 2.1426410685727193E9, 5.980887768243833E12}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2417.345043977654);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 581.449088115;
      doubleArray0[4] = (-2010.30031238719);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-2,417.345 < 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3779.071);
      doubleArray0[1] = 3535.6756;
      double double0 = (-437.10564);
      doubleArray0[2] = (-437.10564);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = (-1304.4873248732);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = (-1336.7282308);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,779.071 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-892.24);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1649.8042730472205);
      doubleArray0[7] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1784.48), 0.0, 0.0, Double.NEGATIVE_INFINITY, 0.0, (-3299.608546094441), Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-378);
      intArray0[0] = (-378);
      int int1 = 93;
      intArray0[1] = 93;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-378));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double double0 = (-913.62650682);
      MathArrays.linearCombination((-913.62650682), (-913.62650682), 0.0, (-913.62650682), (-913.62650682), (-913.62650682), (-913.62650682), 1066.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3488.93;
      doubleArray0[2] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-275);
      intArray0[2] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 4490.649705;
      doubleArray4[1] = 935.15555;
      doubleArray4[2] = (-212.0174828879649);
      doubleArray4[3] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray4);
      assertEquals(4490.649705, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-3810.85656927);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1137.52131;
      doubleArray0[4] = 6.283185307179586;
      doubleArray0[5] = 496.0;
      doubleArray0[6] = (-2.685222);
      doubleArray0[7] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-3.141592653589793);
      doubleArray0[8] = Double.NaN;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(6.283185307179586, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-19.739208802178716), Double.NaN}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1944);
      intArray0[1] = 231;
      intArray0[2] = 1157;
      intArray0[3] = 103;
      intArray0[4] = 0;
      intArray0[5] = 126;
      int[] intArray1 = MathArrays.copyOf(intArray0, 194);
      assertEquals(194, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.7976931348623157E308;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1.7976931348623157E308, (-187.921331), (-1616.22844), (-2024.5494424521466), (-1039.324924964664), 0.0, (-2024.5494424521466), 1.0);
      MathArrays.linearCombination(0.0, 1.0, (-1039.324924964664), 915.0715213, 1.7976931348623157E308, 0.0);
      double[][] doubleArray1 = new double[3][5];
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 1.7976931348623157E308;
      doubleArray2[1] = (-1039.324924964664);
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.linearCombination(0.0, 1.0, 0.0, 0.0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 2418;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-557);
      intArray0[6] = 134217729;
      intArray0[7] = 0;
      intArray0[8] = 2136;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3063.23;
      MathArrays.checkOrder(doubleArray0);
      MathArrays.OrderDirection.values();
      float[] floatArray0 = new float[8];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1863.851F;
      floatArray0[5] = 1897.03F;
      floatArray0[6] = 1045.5F;
      floatArray0[7] = (-6081.765F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      long[][] longArray0 = new long[5][7];
      long[] longArray1 = new long[7];
      longArray1[0] = 4492L;
      longArray1[1] = 0L;
      longArray1[2] = (-1816L);
      longArray1[3] = (-834L);
      longArray1[4] = 2714L;
      longArray1[5] = 1L;
      longArray1[6] = (-1073741824L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 0L;
      longArray2[1] = (-1816L);
      longArray2[2] = 4492L;
      longArray2[3] = (-1073741824L);
      longArray2[4] = (-834L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = 0L;
      longArray3[1] = 1L;
      longArray3[2] = 2714L;
      longArray3[3] = 1L;
      longArray3[4] = 0L;
      longArray3[5] = 4492L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = (-1816L);
      longArray4[1] = (-1073741824L);
      longArray4[2] = 1L;
      longArray4[3] = 0L;
      longArray4[4] = 377L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      longArray5[0] = 0L;
      longArray5[1] = 2714L;
      longArray5[2] = (-834L);
      longArray5[3] = 2714L;
      longArray5[4] = 4492L;
      longArray5[5] = 1L;
      longArray5[6] = 1L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1578);
      intArray0[3] = 106;
      intArray0[4] = 246;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, 0, (-1578), 106, 246}, intArray1);
      assertNotSame(intArray1, intArray0);
  }
}
