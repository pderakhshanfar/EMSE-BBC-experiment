/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 17:03:34 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = (-1144.6497);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.141592653589793);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.141592653589793, 100.0, (-1144.6497)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.009476262672823041), (-0.30163880928340064), 3.4527077255460172}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {3.141592653589793, 100.0, (-1144.6497)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.009476262672823041), (-0.30163880928340064), 3.4527077255460172}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-0.029770557196428044), (-1.8952525345646083), (-8.46987847720388), 690.5415451092035, (-3952.140862233931)}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0, 494);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {3.141592653589793, 100.0, (-1144.6497)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(494, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      double[][] doubleArray4 = new double[7][7];
      doubleArray4[0] = doubleArray0;
      doubleArray4[1] = doubleArray3;
      int[] intArray0 = new int[1];
      intArray0[0] = 494;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {494}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = MathArrays.equals(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3.141592653589793, 100.0, (-1144.6497)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(494, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(boolean0);
      
      double[] doubleArray5 = MathArrays.copyOf(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertNotNull(doubleArray5);
      assertArrayEquals(new double[] {3.141592653589793, 100.0, (-1144.6497)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.009476262672823041), (-0.30163880928340064), 3.4527077255460172}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-0.029770557196428044), (-1.8952525345646083), (-8.46987847720388), 690.5415451092035, (-3952.140862233931)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-0.029770557196428044), (-1.8952525345646083), (-8.46987847720388), 690.5415451092035, (-3952.140862233931)}, doubleArray5, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray5.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray3);
      
      MathArrays.convolve(doubleArray3, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 1570.0;
      doubleArray0[2] = 1716.136;
      doubleArray0[3] = 1445.671;
      doubleArray0[4] = 1.86285714285714278E18;
      doubleArray0[5] = 3153.897086631105;
      doubleArray0[6] = (-4969.7);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1570.0, 1716.136, 1445.671, 1.86285714285714278E18, 3153.897086631105, (-4969.7)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1570.0, 1716.136, 1445.671, 1.86285714285714278E18, 3153.897086631105, (-4969.7)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3.4702367346938774E36, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 1570.0, 1716.136, 1445.671, 1.86285714285714278E18, 3153.897086631105, (-4969.7)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(13, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 127.477586;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-4687.95999758);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {127.477586, Double.POSITIVE_INFINITY, (-4687.95999758)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {127.477586, Double.POSITIVE_INFINITY, (-4687.95999758)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, -0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {127.477586, Double.POSITIVE_INFINITY, (-4687.95999758)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, -0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 127.477586;
      doubleArray3[1] = (-4687.95999758);
      doubleArray3[2] = 902.79112472175;
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray3[4] = Double.POSITIVE_INFINITY;
      doubleArray3[5] = Double.NaN;
      doubleArray3[6] = Double.NaN;
      double double1 = MathArrays.safeNorm(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {127.477586, (-4687.95999758), 902.79112472175, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertEquals(7, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.7168146928204135);
      double double0 = 0.7214844226837158;
      doubleArray0[1] = 0.7214844226837158;
      doubleArray0[2] = 267.84;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = null;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 267.84;
      doubleArray2[1] = (-1.7168146928204135);
      doubleArray2[2] = 267.84;
      doubleArray1[5] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[9];
      intArray0[0] = 188;
      intArray0[1] = 188;
      intArray0[2] = 188;
      intArray0[3] = 188;
      intArray0[4] = 188;
      intArray0[5] = 188;
      intArray0[6] = 1017229096;
      intArray0[7] = 188;
      intArray0[8] = 188;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1017229096;
      intArray1[1] = 1017229096;
      intArray1[2] = 188;
      intArray1[3] = 188;
      intArray1[4] = 188;
      intArray1[5] = 188;
      intArray1[6] = 1017229096;
      intArray1[7] = 1017229096;
      intArray1[8] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {188, 188, 188, 188, 188, 188, 1017229096, 188, 188}, intArray0);
      assertArrayEquals(new int[] {1017229096, 1017229096, 188, 188, 188, 188, 1017229096, 1017229096, 0}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-1243280384), int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1532.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1521.0F;
      floatArray0[6] = (-3149.694F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = 2767.8F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1532.0F, 0.0F, 1521.0F, (-3149.694F), 0.0F, 2767.8F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 2767.8F;
      MathArrays.scaleInPlace(0.0F, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2774.3184F;
      floatArray0[2] = (-6234.449F);
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 2774.3184F, (-6234.449F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.5707963267948966);
      doubleArray0[1] = 1.8990950478044723E-24;
      doubleArray0[2] = 1893.8009837849718;
      doubleArray0[3] = (-2186.98);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 261.860005;
      doubleArray0[8] = 2570.3209608127;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1.5707963267948966), 1.8990950478044723E-24, 1893.8009837849718, (-2186.98), (-1.0), 1.34217729E8, 3.834E-20, 261.860005, 2570.3209608127}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.342177290560451E8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-606);
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 29;
      intArray1[1] = (-606);
      intArray1[2] = 0;
      intArray1[3] = (-606);
      intArray1[4] = (-606);
      intArray1[5] = (-606);
      intArray1[6] = (-606);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-606)}, intArray0);
      assertArrayEquals(new int[] {29, (-606), 0, (-606), (-606), (-606), (-606)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 2146479330;
      int int1 = 225;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146479330, 225);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 1121.402465965779;
      doubleArray0[2] = 3077.0;
      doubleArray0[3] = 1343.697;
      try { 
        MathArrays.normalizeArray(doubleArray0, 1121.402465965779);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-858);
      intArray0[1] = 14;
      intArray0[2] = 793;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-858), 14, 793}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 14;
      doubleArray0[1] = (-627.47);
      doubleArray0[2] = (double) 14;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {14.0, (-627.47), 14.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {196.0, 393718.6009, 196.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {14.0, (-627.47), 14.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {196.0, 393718.6009, 196.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-2.4704112250672302E8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<String>[][] fieldElementArray0 = MathArrays.buildArray(field0, 91, (-731));
      assertNotNull(fieldElementArray0);
      assertEquals(91, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(400.6069636098076, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      FieldElement<String>[][] fieldElementArray0 = MathArrays.buildArray(field0, 188, 188);
      assertNotNull(fieldElementArray0);
      assertEquals(188, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1461.2314F;
      floatArray0[1] = (-1146.0F);
      floatArray0[2] = (-5046.41F);
      floatArray0[3] = 0.0F;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1146.0F);
      floatArray1[1] = 2376.0F;
      floatArray1[2] = (-1146.0F);
      floatArray1[3] = (-5046.41F);
      floatArray1[4] = 645.4269F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1461.2314F, (-1146.0F), (-5046.41F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1146.0F), 2376.0F, (-1146.0F), (-5046.41F), 645.4269F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-641.1653569);
      doubleArray0[1] = 1916.3729720203391;
      doubleArray0[2] = 0.041666663879186654;
      doubleArray0[3] = (-2.144138656E9);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-1526.91817033);
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = (-954.40891946);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-641.1653569), 1916.3729720203391, 0.041666663879186654, (-2.144138656E9), Double.NaN, (-1526.91817033), 1.0, 1.0, (-954.40891946)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.9903149922166596E-7, (-8.937723735758528E-7), (-1.9432810636557368E-11), 0.9999994384331776, Double.NaN, 7.121355275185222E-7, (-4.66387486478476E-10), (-4.66387486478476E-10), 4.4512437701958764E-7}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-895.274);
      doubleArray0[1] = (-2.144138656E9);
      doubleArray0[2] = 613.7388004698792;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-735.8F);
      floatArray0[1] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-735.8F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-2.144138656E9), (-895.274), 0.0, 613.7388004698792, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 12;
      intArray0[1] = (-200);
      intArray0[2] = 267;
      intArray0[3] = 277;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {12, (-200), 267, 277}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, int0);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-200);
      intArray1[1] = 277;
      intArray1[2] = 277;
      int int1 = MathArrays.distanceInf(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {12, (-200), 267, 277}, intArray0);
      assertArrayEquals(new int[] {(-200), 277, 277}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(477, int1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 14;
      intArray0[1] = (-6784);
      intArray0[2] = (-1555);
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1555);
      intArray1[1] = (-6784);
      intArray1[2] = 14;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {14, (-6784), (-1555)}, intArray0);
      assertArrayEquals(new int[] {(-1555), (-6784), 14}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2218.901079363386, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 14;
      doubleArray0[1] = (double) 14;
      doubleArray0[2] = (double) (-6784);
      doubleArray0[3] = (double) (-1555);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {14.0, 14.0, (-6784.0), (-1555.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {196.0, 392.0, (-189756.0), (-233492.0), 4.5979116E7, 2.109824E7, 2418025.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-1555), (-6784), 14}, intArray1);
      assertArrayEquals(new int[] {(-1555), (-6784), 14}, intArray2);
      assertEquals(3, intArray1.length);
      assertEquals(3, intArray2.length);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 861.225042;
      doubleArray0[2] = (-1402.5209658138715);
      doubleArray0[3] = (-2565.0);
      doubleArray0[4] = 3.0;
      doubleArray0[5] = (-228.76388422906);
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 861.225042, (-1402.5209658138715), (-2565.0), 3.0, (-228.76388422906), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-3114.7F);
      floatArray0[1] = (-554.612F);
      floatArray0[2] = 994.69F;
      floatArray0[3] = 2287.344F;
      floatArray0[4] = (-1512.0F);
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = (-1423.0F);
      floatArray0[7] = 3.4028235E38F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-3114.7F), (-554.612F), 994.69F, 2287.344F, (-1512.0F), 3.4028235E38F, (-1423.0F), 3.4028235E38F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 861.225042, (-1402.5209658138715), (-2565.0), 3.0, (-228.76388422906), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3056.19707271029, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 861.225042, (-1402.5209658138715), (-2565.0), 3.0, (-228.76388422906), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 861.225042, (-1402.5209658138715), (-2565.0), 3.0, (-228.76388422906), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-2144138656);
      floatArray0[1] = (float) (-2144138656);
      floatArray0[2] = (float) (-2144138656);
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-2144138656);
      floatArray1[1] = (float) (-2144138656);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-2.14413862E9F), (-2.14413862E9F), (-2.14413862E9F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2.14413862E9F), (-2.14413862E9F), 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = Double.NaN;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Double double0 = new Double((-2431.792));
      assertNotNull(double0);
      assertEquals((-2431.792), (double)double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 2223);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2223, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2223;
      intArray0[1] = 2223;
      intArray0[2] = 2223;
      intArray0[3] = 2223;
      intArray0[4] = 2223;
      intArray0[5] = 2223;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 49;
      intArray1[1] = 2223;
      intArray1[2] = 2223;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-247.474661);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-247.474661)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(61243.70783706492, double0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3265.91F;
      floatArray0[1] = Float.POSITIVE_INFINITY;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1652.9329F);
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (-3669.426F);
      floatArray0[6] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {3265.91F, Float.POSITIVE_INFINITY, 0.0F, (-1652.9329F), Float.NaN, (-3669.426F), 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-247.474661)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2144138656);
      floatArray0[1] = (float) (-2144138656);
      floatArray0[2] = 1790.4927F;
      floatArray0[3] = (float) (-2144138656);
      floatArray0[4] = (float) (-2144138656);
      floatArray0[5] = 2384.0F;
      floatArray0[6] = (float) (-2144138656);
      floatArray0[7] = (float) (-2144138656);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {(-2.14413862E9F), (-2.14413862E9F), 1790.4927F, (-2.14413862E9F), (-2.14413862E9F), 2384.0F, (-2.14413862E9F), (-2.14413862E9F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2.14413862E9F);
      doubleArray0[1] = (double) (-2.14413862E9F);
      doubleArray0[2] = (double) 2384.0F;
      doubleArray0[3] = 4141.788028439;
      doubleArray0[4] = (double) (-2.14413862E9F);
      doubleArray0[5] = (double) (-2.14413862E9F);
      doubleArray0[6] = (double) (-2.14413862E9F);
      doubleArray0[7] = (double) 1790.4927F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-2.144138624E9), (-2.144138624E9), 2384.0, 4141.788028439, (-2.144138624E9), (-2.144138624E9), (-2.144138624E9), 1790.49267578125}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(4.794439716449578E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 3.145894820876798E-6;
      doubleArray0[2] = 1739.0709811851;
      doubleArray0[3] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8, 3.145894820876798E-6, 1739.0709811851, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-3266.695F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1878.2522F;
      floatArray0[3] = (-104.821365F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-350.92F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {(-3266.695F), 0.0F, 1878.2522F, (-104.821365F), (-1.0F), (-350.92F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.34217729E8, 3.145894820876798E-6, 1739.0709811851, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-247.474661);
      double double0 = new Double((-247.474661));
      assertEquals((-247.474661), double0, 0.01);
      
      float[] floatArray0 = new float[2];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-247.474661)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[2];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 5003.3945F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-2408.316F);
      floatArray0[4] = 1777.3F;
      floatArray0[5] = 2364.0F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 5003.3945F;
      floatArray1[1] = (-2408.316F);
      floatArray1[2] = 2364.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 5003.3945F, 0.0F, (-2408.316F), 1777.3F, 2364.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {5003.3945F, (-2408.316F), 2364.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.8307188599677033E-8;
      doubleArray0[1] = 1.5707963267948966;
      doubleArray0[2] = 0.3153223395347595;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 1220.5493;
      doubleArray0[5] = 3685.7;
      doubleArray0[6] = 9.219544613762692E-9;
      doubleArray0[7] = 3.4028234663852886E38;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.8307188599677033E-8, 1.5707963267948966, 0.3153223395347595, Double.NaN, 1220.5493, 3685.7, 9.219544613762692E-9, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(0.5, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.8307188599677033E-8, 1.5707963267948966, 0.3153223395347595, Double.NaN, 1220.5493, 3685.7, 9.219544613762692E-9, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.153594299838516E-9, 0.7853981633974483, 0.15766116976737976, Double.NaN, 610.27465, 1842.85, 4.609772306881346E-9, 1.7014117331926443E38}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale(3.4028234663852886E38, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.8307188599677033E-8, 1.5707963267948966, 0.3153223395347595, Double.NaN, 1220.5493, 3685.7, 9.219544613762692E-9, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.153594299838516E-9, 0.7853981633974483, 0.15766116976737976, Double.NaN, 610.27465, 1842.85, 4.609772306881346E-9, 1.7014117331926443E38}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.114806548526112E30, 2.6725713008647443E38, 5.364931282221947E37, Double.NaN, 2.0766568999600685E41, 6.270893225028129E41, 1.568624138054889E30, 5.7896037716911957E76}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 9.219544613762692E-9;
      doubleArray3[1] = (-1003.7252196);
      double double1 = MathArrays.safeNorm(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {9.219544613762692E-9, (-1003.7252196)}, doubleArray3, 0.01);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(1003.7252196, double1, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-507.0F);
      floatArray0[1] = (-2075.7F);
      floatArray0[2] = (-2129.2F);
      floatArray0[3] = (-424.0F);
      floatArray0[4] = Float.NEGATIVE_INFINITY;
      floatArray0[5] = (-1961.0F);
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1961.0F);
      floatArray1[1] = (-1961.0F);
      floatArray1[2] = (-2075.7F);
      floatArray1[3] = (-424.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-507.0F), (-2075.7F), (-2129.2F), (-424.0F), Float.NEGATIVE_INFINITY, (-1961.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1961.0F), (-1961.0F), (-2075.7F), (-424.0F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-2144138656);
      floatArray0[1] = (float) (-2144138656);
      floatArray0[2] = (float) (-2144138656);
      floatArray0[3] = (float) (-2144138656);
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = (-2144138656);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2144138656);
      doubleArray0[1] = (double) (-2144138656);
      doubleArray0[2] = (double) (-2144138656);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (double) (-2144138656);
      doubleArray0[5] = (double) (-2144138656);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-2144138656);
      doubleArray1[1] = (double) (-2144138656);
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = 1.304E19;
      doubleArray1[4] = 1124.302859722;
      doubleArray1[5] = 1.304E19;
      doubleArray1[6] = 1.304E19;
      doubleArray1[7] = (double) (-2144138656);
      doubleArray1[8] = (double) (-2144138656);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2.144138656E9), (-2.144138656E9), (-2.144138656E9), 1.304E19, (-2.144138656E9), (-2.144138656E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.144138656E9), (-2.144138656E9), 1.304E19, 1.304E19, 1124.302859722, 1.304E19, 1.304E19, (-2.144138656E9), (-2.144138656E9)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(14, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[0][6];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147483646);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-935.28523);
      doubleArray0[1] = 2684.281;
      doubleArray0[2] = 2516.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 2245.635889689947;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-935.28523), 2684.281, 2516.0, Double.NaN, 2245.635889689947}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {874758.4614561528, 7205364.486961, 6330256.0, Double.NaN, 5042880.54906356}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-4155.5303F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1.0F;
      floatArray1[4] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-4155.5303F), 1.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Double double1 = new Double((-1.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = (-1.0);
      double double2 = (-2236.0);
      doubleArray1[8] = (-2236.0);
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 5994.098652899163;
      doubleArray2[1] = (-247.474661);
      doubleArray2[2] = (-247.474661);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2088.12804033324;
      doubleArray0[1] = 37822.0;
      doubleArray0[2] = 770.2888465;
      doubleArray0[3] = (-2.144138624E9);
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 3.834E-20;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {2088.12804033324, 37822.0, 770.2888465, (-2.144138624E9), 1.304E19, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1.304E19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.304E19;
      doubleArray1[2] = 1.304E19;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 1.304E19, 1.304E19}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19, 1.304E19}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(1.8441344853345161E19, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.304E19;
      doubleArray1[2] = 1.304E19;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 1.304E19, 1.304E19}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19, 1.304E19}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.8441344853345161E19, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2797.0434292654063;
      doubleArray1[1] = 2797.0434292654063;
      doubleArray0[4] = 2797.0434292654063;
      doubleArray1[3] = 2797.0434292654063;
      doubleArray1[4] = 2797.0434292654063;
      double double0 = new Double(2797.0434292654063);
      assertEquals(2797.0434292654063, double0, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 32, (-2260));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[11];
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 7557652.75175796;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2590.75484;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 3613.593634975827;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {2590.75484, Double.NaN, 3613.593634975827}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2672;
      intArray0[1] = (-1431);
      intArray0[2] = 25;
      intArray0[3] = 2146481555;
      intArray0[4] = 997;
      intArray0[5] = (-937);
      intArray0[6] = 2146817772;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2672);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2672, (-1431), 25, 2146481555, 997, (-937), 2146817772}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(2672, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double double0 = 1.0;
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = null;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "En)|I-eRpqrf";
      stringArray0[1] = "F*R.K(<f_P";
      stringArray0[2] = "";
      stringArray0[3] = "y";
      stringArray0[4] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 134217729;
      intArray0[1] = 2147483646;
      intArray0[2] = (-2558);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {134217729, 2147483646, (-2558)}, intArray0);
      assertArrayEquals(new int[] {134217729, 2147483646, (-2558)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2558);
      doubleArray0[1] = (double) (-2558);
      doubleArray0[2] = (double) 134217729;
      doubleArray0[3] = (double) 2147483646;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 134217729;
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = (double) (-2558);
      doubleArray1[3] = (double) (-2558);
      doubleArray1[4] = (double) 2147483646;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2558.0), (-2558.0), 1.34217729E8, 2.147483646E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 3.834E-20, (-2558.0), (-2558.0), 2.147483646E9}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[9][6];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-2558);
      doubleArray3[1] = (double) (-2558);
      doubleArray3[2] = (double) (-2558);
      doubleArray3[3] = (double) (-2558);
      doubleArray3[4] = (double) 2147483646;
      doubleArray3[5] = (double) 134217729;
      doubleArray2[4] = doubleArray3;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray0;
      doubleArray2[8] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = 3.834E-20;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1.4699556E-39, double0, 0.01);
      
      long[][] longArray0 = new long[1][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 0.0, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.4699556E-39;
      doubleArray1[1] = (-0.1428571423679182);
      doubleArray1[2] = 3.834E-20;
      doubleArray1[3] = 1.4699556E-39;
      doubleArray1[4] = (-2386.8407539244704);
      MathArrays.scaleInPlace(0.3936265707015991, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {5.786135819116115E-40, (-0.05623236705051376), 1.509164272069931E-20, 5.786135819116115E-40, (-939.5239407781087)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-1479);
      intArray0[2] = 0;
      int int0 = 0;
      intArray0[3] = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.304E19;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.608E19, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1.304E19, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 1.304E19, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.304E19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-247.474661);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-247.474661)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(61243.70783706492, double0, 0.01);
      
      long[][] longArray0 = new long[1][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-247.474661)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-247.474661)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(247.474661, double2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-247.474661);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-247.474661)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(61243.70783706492, double0, 0.01);
      
      long[][] longArray0 = new long[1][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 61243.70783706492;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 61243.70783706492;
      doubleArray1[4] = (-247.474661);
      doubleArray1[5] = 61243.70783706492;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-247.474661);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-247.474661)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(61243.70783706492, double0, 0.01);
      
      long[][] longArray0 = new long[1][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertArrayEquals(new double[] {0.0, 0.0, (-247.474661)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-247.474661);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-247.474661)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(61243.70783706492, double0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 61243.70783706492;
      doubleArray1[2] = (-247.474661);
      doubleArray1[3] = (-247.474661);
      doubleArray1[4] = (-247.474661);
      doubleArray1[5] = 61243.70783706492;
      doubleArray1[6] = 61243.70783706492;
      doubleArray1[7] = 61243.70783706492;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[11];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(11, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(1.0, double1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(1.0, double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-247.474661);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-247.474661)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(61243.70783706492, double0, 0.01);
      
      long[][] longArray0 = new long[1][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-247.474661)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 61243.70783706492}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[3][5];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, (-247.474661)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 61243.70783706492}, doubleArray1, 0.01);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-115), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 8;
      intArray0[1] = 8;
      Integer integer0 = new Integer(135);
      assertNotNull(integer0);
      assertEquals(135, (int)integer0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "4";
      stringArray0[1] = "O?E*urHl~g*P2ZF-y$q";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 135;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = (double) 135;
      doubleArray0[6] = (double) 8;
      doubleArray0[7] = (double) 8;
      doubleArray0[8] = (double) 8;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 8;
      doubleArray1[1] = 61243.70783706492;
      doubleArray1[2] = 9.3142857142857139E17;
      doubleArray1[3] = (double) 8;
      doubleArray1[4] = (double) 135;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = 1832.0615;
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int int0 = 0;
      double double1 = 37822.0;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(37822.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      double double0 = MathArrays.linearCombination((-1869.65), (double) 0, (-1869.65), 0.0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[11];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(11, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(1.0, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-247.474661);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-247.474661)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(61243.70783706492, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.1256551444530487, (double) 0, 1576.2600218226153, (-2688.1), 0.0, 0.9);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-4237144.5646613715), double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-247.474661)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(247.474661, double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {0.0, 0.0, (-247.474661)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-247.474661)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 14;
      intArray0[1] = 135;
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 14;
      doubleArray2[2] = 1168.9692516;
      doubleArray2[3] = (double) 14;
      doubleArray2[4] = (double) 135;
      doubleArray2[5] = 0.0;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1118);
      intArray0[1] = 0;
      intArray0[2] = (-837);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1118), 0, (-837), 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1118);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 88.41073);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1118.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {88.41073}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[2][9];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1118.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {88.41073}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-837));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 14;
      intArray0[1] = 135;
      double[] doubleArray0 = new double[2];
      intArray0[0] = 14;
      doubleArray0[1] = (double) 14;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 14.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 135);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 14.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(135, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 14.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {14, 135, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-266.25);
      doubleArray0[1] = (-266.25);
      doubleArray0[2] = (-266.25);
      doubleArray0[3] = (-266.25);
      doubleArray0[4] = (-266.25);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-266.25);
      doubleArray0[7] = (-266.25);
      MathArrays.scaleInPlace((-266.25), doubleArray0);
      assertArrayEquals(new double[] {70889.0625, 70889.0625, 70889.0625, 70889.0625, 70889.0625, (-266.25), 70889.0625, 70889.0625}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-266.25);
      doubleArray1[1] = (-3086.0);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-266.25);
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (-266.25);
      doubleArray1[6] = 1.0;
      doubleArray1[7] = (-266.25);
      doubleArray1[8] = (-266.25);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {70889.0625, 70889.0625, 70889.0625, 70889.0625, 70889.0625, (-266.25), 70889.0625, 70889.0625}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-266.25), (-3086.0), 1.0, (-266.25), 1.0, (-266.25), 1.0, (-266.25), (-266.25)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(500105.1875, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 32;
      intArray0[1] = 1;
      intArray0[2] = 2147483474;
      intArray0[3] = 15;
      intArray0[4] = (-2604);
      intArray0[5] = 1141;
      intArray0[6] = 3779;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {32, 1, 2147483474, 15, (-2604), 1141, 3779}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 494;
      Integer integer0 = new Integer(494);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(494, (int)integer0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1832.0615;
      doubleArray0[2] = 1832.0615;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {1832.0615, 0.0, 1832.0615, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      Double double0 = new Double(1832.0615);
      assertNotNull(double0);
      assertEquals(1832.0615, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 14;
      intArray0[1] = 14;
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 14;
      doubleArray1[1] = 192.96;
      doubleArray1[2] = (double) 14;
      doubleArray1[3] = (double) 14;
      doubleArray1[4] = (double) 14;
      doubleArray1[5] = (double) 14;
      doubleArray1[6] = (double) 14;
      doubleArray1[7] = (double) 14;
      doubleArray1[8] = (double) 14;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      assertArrayEquals(new double[] {14.0, 192.96, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      assertFalse(boolean0);
      
      Double double0 = new Double(14.0);
      assertNotNull(double0);
      assertEquals(14.0, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      MathArrays.scaleInPlace(230.85138789, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 14;
      intArray0[1] = 135;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 135;
      doubleArray1[1] = (double) 135;
      doubleArray1[2] = (double) 14;
      doubleArray1[3] = (double) 135;
      doubleArray1[4] = 18225.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) 14;
      doubleArray1[7] = (double) 14;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {135.0, 135.0, 14.0, 135.0, 18225.0, 0.0, 14.0, 14.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-1479);
      intArray0[2] = 0;
      intArray0[3] = 0;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5661.761820296446);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-5661.761820296446), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-5661.761820296446), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      Double double1 = new Double(662.950465115);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(662.950465115, (double)double1, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 662.950465115;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 1.7827257129423813E-8;
      doubleArray1[4] = 662.950465115;
      doubleArray1[5] = 2863.43;
      doubleArray1[6] = 2863.43;
      doubleArray1[7] = 619.6174806081;
      doubleArray1[8] = 0.0;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Double, Object>> field0 = (Field<Pair<Double, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Pair<Double, Object>[][] pairArray0 = MathArrays.buildArray(field0, 0, 0);
      assertNotNull(pairArray0);
      assertEquals(0, pairArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.scaleInPlace(229227.23975972302, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 229227.23975972302;
      doubleArray2[1] = 229227.23975972302;
      doubleArray2[2] = 229227.23975972302;
      doubleArray2[3] = 229227.23975972302;
      doubleArray2[4] = 229227.23975972302;
      doubleArray2[5] = 229227.23975972302;
      doubleArray2[6] = 229227.23975972302;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[9][2];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray2;
      doubleArray3[3] = doubleArray1;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = 0.9;
      doubleArray4[1] = 229227.23975972302;
      doubleArray4[2] = 229227.23975972302;
      doubleArray4[3] = 229227.23975972302;
      doubleArray4[4] = 1097.519497;
      doubleArray4[5] = 229227.23975972302;
      doubleArray4[6] = 229227.23975972302;
      doubleArray4[7] = 1.0E-5;
      doubleArray4[8] = (-3.7999795083850525E-8);
      doubleArray3[4] = doubleArray4;
      doubleArray3[5] = doubleArray2;
      doubleArray3[6] = doubleArray1;
      doubleArray3[7] = doubleArray1;
      doubleArray3[8] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 14;
      intArray0[1] = 135;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 14;
      doubleArray0[1] = 0.1256551444530487;
      doubleArray0[2] = (double) 135;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {14.0, 0.1256551444530487, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      boolean boolean1 = true;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean2);
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-247.474661);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-247.474661)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(61243.70783706492, double0, 0.01);
      
      long[][] longArray0 = new long[1][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      long[][] longArray1 = new long[4][9];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(4, longArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("org.apache.commons.math3.util.MathArrays$3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.org.apache.commons.math3.util.MathArrays$3
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[7];
      intArray0[0] = 453;
      intArray0[1] = (-1986);
      intArray0[2] = 231;
      intArray0[3] = 3439;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(mathArrays_OrderDirection0, mathArrays_OrderDirection1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 231);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {231.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 143.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 453;
      floatArray0[5] = (float) 3439;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (float) (-1986);
      floatArray0[8] = (float) 453;
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new float[] {143.0F, 0.0F, 0.0F, 0.0F, 453.0F, 3439.0F, 0.0F, (-1986.0F), 453.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-1479);
      intArray0[2] = 0;
      double double0 = MathArrays.linearCombination((double) 0, (double) (-1479), (double) 0, (double) 0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer integer0 = new Integer(135);
      assertNotNull(integer0);
      assertEquals(135, (int)integer0);
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 14;
      doubleArray1[1] = (double) 14;
      doubleArray1[2] = (double) 14;
      doubleArray1[3] = (double) 14;
      doubleArray1[4] = (double) 135;
      doubleArray1[5] = (double) 135;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, (double[]) null);
      assertArrayEquals(new double[] {14.0, 14.0, 14.0, 14.0, 135.0, 135.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      assertFalse(boolean0);
      
      Double double0 = new Double(1315.206497708);
      assertNotNull(double0);
      assertEquals(1315.206497708, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1.0;
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[7];
      int int0 = (-1986);
      int int1 = 231;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (1 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 1.304E19;
      MathArrays.scaleInPlace(0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = new Integer(0);
      assertEquals(0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, 1.304E19, (-782.4913988942), 0.6299605249474366, (-2688.1), 1.304E19);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-3.5052824E22), double2, 0.01);
      
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1.304E19, double3, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".XN[Ri[ET7";
      stringArray0[1] = "<6;\"Xvw5u<T1O~X%;(h";
      stringArray0[2] = "DECREASING";
      stringArray0[3] = "INCREASING";
      stringArray0[4] = "";
      stringArray0[5] = "r7J";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.304E19;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1.304E19;
      doubleArray1[7] = 1.304E19;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double double0 = MathArrays.distance(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-1479);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "50D<|tkNj";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scale((-1479), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2515.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 2515.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.0, 2515.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1.0, 2515.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(15, doubleArray3.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      
      MathArrays.scaleInPlace(0.0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 2515.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double0 = new Double(1.0);
      assertEquals(1.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 14;
      intArray0[1] = 135;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {14, 135, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "cannot compute beta density at 1 when beta = %.3g";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.3333333333333333;
      doubleArray0[1] = (double) 135;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 14;
      Integer integer0 = new Integer(1034);
      assertNotNull(integer0);
      assertEquals(1034, (int)integer0);
      
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(135);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(135, (int)integer1);
      
      integerArray0[2] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[7];
      intArray0[0] = 453;
      intArray0[1] = (-1986);
      intArray0[2] = 231;
      intArray0[3] = 3439;
      intArray0[4] = 6;
      intArray0[5] = 2143684107;
      intArray0[6] = 170;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {453, (-1986), 231, 3439, 6, 2143684107, 170}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 170;
      longArray0[1] = (long) 170;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {170L, 170L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.0, double1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 14;
      int int1 = 135;
      int[] intArray0 = new int[3];
      intArray0[0] = 14;
      intArray0[1] = 14;
      Integer integer0 = new Integer(135);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(135, (int)integer0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = 2863.43;
      Double double1 = new Double((double) integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(135.0, (double)double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "B{q";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[7];
      intArray0[1] = 89;
      intArray0[2] = 14;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "mg";
      stringArray0[1] = "loxAI";
      stringArray0[2] = "loxAI";
      stringArray0[3] = "8MY>bQx+;";
      stringArray0[4] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 14;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {14.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 14;
      floatArray1[1] = (float) 14;
      floatArray1[2] = (float) 89;
      floatArray1[3] = (float) 89;
      floatArray1[4] = (float) 89;
      floatArray1[5] = (float) 14;
      floatArray1[6] = (float) 89;
      floatArray1[7] = (float) 89;
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray1, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new float[] {14.0F, 14.0F, 89.0F, 89.0F, 89.0F, 14.0F, 89.0F, 89.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 1.304E19;
      MathArrays.scaleInPlace(0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray2 = MathArrays.scale(1746.672937096636, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.2776615099740134E22}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = (-1);
      intArray1[4] = (-1361);
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = (-1);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 687.603143042403;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = 2395.872393072;
      doubleArray0[4] = (-522.2708619);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-807.2628);
      doubleArray0[7] = 2696.75718921828;
      doubleArray0[8] = 564.1956526661;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 687.603143042403, 20.0, 2395.872393072, (-522.2708619), 0.0, (-807.2628), 2696.75718921828, 564.1956526661}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[8];
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 687.603143042403, 20.0, 2395.872393072, (-522.2708619), 0.0, (-807.2628), 2696.75718921828, 564.1956526661}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 687.603143042403, 20.0, 2395.872393072, (-522.2708619), 0.0, (-807.2628), 2696.75718921828, 564.1956526661}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.4728658759747757E7, double2, 0.01);
      
      double double3 = MathArrays.linearCombination(0.0, 564.1956526661, 0.0, 564.1956526661, 3.834E-20, (double) 0L);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 687.603143042403, 20.0, 2395.872393072, (-522.2708619), 0.0, (-807.2628), 2696.75718921828, 564.1956526661}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(3837.793475390222, double4, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 687.603143042403, 20.0, 2395.872393072, (-522.2708619), 0.0, (-807.2628), 2696.75718921828, 564.1956526661}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean1);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 687.603143042403, 20.0, 2395.872393072, (-522.2708619), 0.0, (-807.2628), 2696.75718921828, 564.1956526661}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double5 = MathArrays.linearCombination(687.603143042403, Double.NaN, (-1.0), (-2453.625015361522), (-1.0), (-21.0), 3.2198399809897274E7, 20.0);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 1.304E19;
      MathArrays.scaleInPlace(0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(200.9498795, 1.304E19, (-782.4913988942), 0.6299605249474366, (-2688.1), 1.304E19);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-3.243243757132E22), double2, 0.01);
      
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1.304E19, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 100.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 100.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 100.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0, 494);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 100.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(494, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      
      double[][] doubleArray4 = new double[7][7];
      doubleArray4[0] = doubleArray0;
      doubleArray4[1] = doubleArray3;
      double double0 = MathArrays.distanceInf(doubleArray3, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 100.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(494, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[8];
      stringArray0[1] = "org.apache.commons.math3.util.Decimal64";
      stringArray0[4] = "org.apache.commons.math3.util.Decimal64";
      stringArray0[5] = "org.apache.commons.math3.util.Decimal64";
      stringArray0[6] = "ZJ`L/{L";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2379.05283822;
      doubleArray0[1] = 361.7632578326;
      double double0 = 0.9974949359893799;
      doubleArray0[2] = 0.9974949359893799;
      double double1 = 18.5854707;
      doubleArray0[3] = 18.5854707;
      double double2 = 1315.206497708;
      doubleArray0[4] = 1315.206497708;
      double double3 = 191.763249;
      doubleArray0[5] = 191.763249;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {2379.05283822, 361.7632578326, 0.9974949359893799, 18.5854707, 1315.206497708, 191.763249}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2379.05283822, 361.7632578326, 0.9974949359893799, 18.5854707, 1315.206497708, 191.763249}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2379.05283822, 361.7632578326, 0.9974949359893799, 18.5854707, 1315.206497708, 191.763249}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double4 = MathArrays.distance(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertArrayEquals(new double[] {2379.05283822, 361.7632578326, 0.9974949359893799, 18.5854707, 1315.206497708, 191.763249}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2379.05283822, 361.7632578326, 0.9974949359893799, 18.5854707, 1315.206497708, 191.763249}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double4, 0.01);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 361.7632578326;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      boolean boolean1 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 361.7632578326}, doubleArray2, 0.01);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertTrue(boolean1);
      
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 1.304E19;
      MathArrays.scaleInPlace(0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[19];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(19, longArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-720.0309257);
      doubleArray0[2] = 2361.19;
      doubleArray0[3] = 2515.0;
      doubleArray0[4] = 452.12811918192;
      doubleArray0[5] = 0.8109631538391113;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 452.12811918192;
      doubleArray1[1] = 2515.0;
      doubleArray1[2] = 452.12811918192;
      doubleArray1[3] = 2515.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 1185.16094474125;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = (-1479);
      intArray0[1] = (-1479);
      intArray0[2] = 0;
      int int1 = 0;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1479);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) (-1479);
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 706.67417;
      doubleArray1[7] = (double) 0;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 60);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 14;
      intArray0[1] = 135;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {14, 135, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "cannot compute beta density at 1 when beta = %.3g";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[1] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.3333333333333333;
      doubleArray0[1] = (double) 135;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-247.474661);
      doubleArray0[4] = (-2.6437112632041807E-8);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.3333333333333333, 135.0, 0.0, (-247.474661), (-2.6437112632041807E-8)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(79468.81894817603, double1, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 135;
      floatArray0[1] = (float) 135;
      floatArray0[2] = (float) 135;
      floatArray0[3] = (float) 135;
      floatArray0[4] = (float) 135;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {135.0F, 135.0F, 135.0F, 135.0F, 135.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 135;
      int[] intArray0 = new int[3];
      intArray0[0] = 14;
      intArray0[1] = 135;
      int int1 = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 135;
      doubleArray0[2] = (double) 14;
      doubleArray0[3] = (double) 135;
      MathArrays.scaleInPlace(135, doubleArray0);
      assertArrayEquals(new double[] {0.0, 18225.0, 1890.0, 18225.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 135;
      long long0 = 3439L;
      longArray0[1] = 3439L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {135L, 3439L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(100.0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1822500.0, 189000.0, 1822500.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 18225.0, 1890.0, 18225.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 18,225)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 1.304E19;
      MathArrays.scaleInPlace(0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray2 = MathArrays.scale((-1.0), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.304E19)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-21), (-2432));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[3];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (double) 135;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.0, 135.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.0, 135.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 3.0, 136.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.0, 135.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 540.0, 18225.0}, doubleArray3, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      MathArrays.scaleInPlace((-2917.951247710814), doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.0, 135.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, (-8753.853743132442), (-396841.36968867073)}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray4 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray3, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long[][] longArray0 = new long[7][4];
      long[] longArray1 = new long[6];
      longArray1[0] = 1656L;
      longArray1[1] = 1073741824L;
      longArray1[2] = 4368491638549381120L;
      longArray1[3] = 4607182418800017408L;
      longArray1[4] = (-1L);
      longArray1[5] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-1L);
      longArray3[1] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 4368491638549381120L;
      longArray5[1] = 1L;
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray5[4] = 4368491638549381120L;
      longArray5[5] = 0L;
      longArray5[6] = 1073741824L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      
      longArray6[0] = 0L;
      longArray6[1] = 1073741824L;
      longArray6[2] = 4607182418800017408L;
      longArray6[3] = (-1L);
      longArray6[4] = 4368491638549381120L;
      longArray6[5] = 1073741824L;
      longArray6[6] = (-1L);
      longArray6[7] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[3];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = 1073741824L;
      longArray7[1] = (-341L);
      longArray7[2] = 1L;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 18;
      intArray0[3] = 18;
      intArray0[4] = 134217729;
      intArray0[5] = 2478;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 18, 18, 134217729, 2478}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2478;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 2160;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 2160);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-1479);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 18;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1479), 0, 0, 18}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1479), 134217729);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 564.1956526661;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {20.0, 0.0, 564.1956526661}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      long[][] longArray1 = new long[0][3];
      MathArrays.checkRectangular(longArray1);
      assertEquals(0, longArray1.length);
      
      double double1 = MathArrays.linearCombination(0.0, (double) 2629L, (-807.2628), 20.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-16145.256), double1, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {20.0, 0.0, 564.1956526661}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(357.6509092497151, 357.6509092497151, 2.0, 357.6509092497151, (-430.921916267861), 357.6509092497151, 100.0, (-430.921916267861));
      assertEquals((-68582.3320899688), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = (-2337);
      intArray0[1] = (-1479);
      intArray0[2] = 0;
      double double0 = (-218.59445706);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 9;
      intArray0[1] = 163;
      intArray0[2] = (-641);
      intArray0[3] = 0;
      intArray0[4] = (-2127);
      intArray0[5] = 2146828745;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2323);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {9, 163, (-641), 0, (-2127), 2146828745}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(2323, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2146828745;
      longArray0[1] = (long) (-641);
      longArray0[2] = (long) 2323;
      longArray0[3] = (long) 163;
      longArray0[4] = (long) 163;
      longArray0[5] = (long) 2146828745;
      longArray0[6] = (long) (-2127);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -641 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Field<Pair<Double, Object>> field0 = (Field<Pair<Double, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 2686;
      intArray0[0] = 2686;
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {2686}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int1);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {2686}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<Double, Object>>) null, 2, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-1479);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 18;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1479), 0, 0, 18}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1479), 134217729);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 687.603143042403;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = 2395.872393072;
      doubleArray0[4] = (-522.2708619);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-807.2628);
      doubleArray0[7] = 2696.75718921828;
      doubleArray0[8] = 564.1956526661;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 687.603143042403, 20.0, 2395.872393072, (-522.2708619), 0.0, (-807.2628), 2696.75718921828, 564.1956526661}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      long[][] longArray0 = new long[4][4];
      long[] longArray1 = new long[8];
      longArray1[1] = 0L;
      longArray1[2] = (-2551L);
      longArray1[3] = 2629L;
      longArray1[4] = 0L;
      longArray1[5] = (-400L);
      MathArrays.checkRectangular(longArray0);
      assertEquals(4, longArray0.length);
      
      double double1 = MathArrays.linearCombination(193.38, 102.680222, 0.0, (-1.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(19856.30133036, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 687.603143042403, 20.0, 2395.872393072, (-522.2708619), 0.0, (-807.2628), 2696.75718921828, 564.1956526661}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, 1.0, Double.NaN, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 2682L;
      int[] intArray0 = new int[4];
      intArray0[0] = 135;
      intArray0[1] = (-711);
      intArray0[2] = 135;
      intArray0[3] = (-711);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {135, (-711), 135, (-711)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("3e`zzzt{$s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.3e`zzzt{$s
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-3410.7753);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-3410.7753)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-3410.7753)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-3410.7753)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1633388147090089E7}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-3410.7753)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1073741824L);
      longArray0[1] = 685L;
      longArray0[2] = (-1L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,073,741,824 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[7];
      intArray0[1] = 89;
      intArray0[2] = 14;
      intArray0[5] = 89;
      intArray0[4] = 135;
      intArray0[5] = 14;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[7];
      intArray0[0] = 14;
      intArray0[1] = 89;
      intArray0[2] = 14;
      intArray0[3] = 89;
      intArray0[4] = 135;
      intArray0[5] = 14;
      intArray0[6] = (-711);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {14, 89, 14, 89, 135, 14, (-711)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 135;
      doubleArray1[1] = (double) 14;
      doubleArray1[2] = 1995.786;
      doubleArray1[3] = (double) 14;
      doubleArray1[4] = (double) 14;
      doubleArray1[5] = (double) (-711);
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {135.0, 14.0, 1995.786, 14.0, 14.0, (-711.0)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 135;
      intArray1[1] = 89;
      intArray1[2] = (-711);
      intArray1[3] = 14;
      intArray1[4] = 89;
      intArray1[5] = 14;
      intArray1[6] = 89;
      intArray1[7] = (-44);
      intArray1[8] = 135;
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {135, 89, (-711), 14, 89, 14, 89, (-44), 135}, intArray1);
      assertArrayEquals(new int[] {135, 89, (-711), 14, 89, 14, 89, (-44), 135}, intArray2);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray2.length);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1118);
      intArray0[1] = 0;
      intArray0[2] = (-837);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1118), 0, (-837), 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      
      double double0 = MathArrays.linearCombination((double) (-837), (-3114.8962034445603), (double) 0, 2225.7408773, (double) 0, (double) (-837), 2853.849656934578, (-81.026));
      assertEquals(2375932.099980316, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(3.834E-20, (-1799.1), 1390.5906571900816, 2375932.099980316);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3.3039489803506384E9, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long[][] longArray0 = new long[2][0];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = 2682L;
      longArray1[2] = 1537L;
      longArray1[3] = 1L;
      longArray1[4] = (-48L);
      longArray1[5] = 2147483647L;
      longArray1[6] = (-27L);
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 5105.39435812;
      doubleArray0[1] = (-3491.96237083);
      doubleArray0[2] = (double) 1537L;
      doubleArray0[3] = (double) 2682L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {5105.39435812, 0.0, 1537.0, (-3491.96237083), 2682.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 847);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-1957.1813389135534);
      doubleArray0[2] = 0.11113807559013367;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, (-1957.1813389135534), 0.11113807559013367}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Integer[] integerArray0 = new Integer[3];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1000000000);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(1000000000, (int)integer1);
      
      integerArray0[1] = integer1;
      int int1 = 267;
      Integer integer2 = new Integer(267);
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(267, (int)integer2);
      
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, integerArray0.length);
      assertFalse(boolean0);
      
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-1,957.181 <= 0.111)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (-5661.761820296446);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-5661.761820296446)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-5661.761820296446)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, (-5660.761820296446)}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-5661.761820296446)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, (-5660.761820296446)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, (-5660.761820296446)}, doubleArray3, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(9, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      
      MathArrays.scaleInPlace(0.0, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-5661.761820296446)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, (-5660.761820296446)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, -0.0}, doubleArray3, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(9, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      
      long[] longArray0 = new long[3];
      doubleArray0[4] = (double) 0;
      longArray0[1] = (long) 18;
      longArray0[2] = (long) 18;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 18L, 18L}, longArray0);
      assertEquals(3, longArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 18L;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 18;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {18.0F, 0.0F, 18.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 1.304E19;
      MathArrays.scaleInPlace(0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[7];
      intArray0[0] = 14;
      intArray0[1] = 89;
      intArray0[2] = 14;
      intArray0[3] = 89;
      intArray0[4] = 135;
      intArray0[5] = 14;
      intArray0[6] = (-711);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {14, 89, 14, 89, 135, 14, (-711)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      double double1 = MathArrays.linearCombination((double) (-711), (double) 89, Double.NEGATIVE_INFINITY, 2797.9, Double.NEGATIVE_INFINITY, (double) 14);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[7];
      intArray0[1] = 89;
      intArray0[2] = 14;
      intArray0[3] = 89;
      intArray0[4] = 135;
      intArray0[5] = 14;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 14;
      intArray0[1] = 135;
      intArray0[2] = (-711);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {14, 135, (-711)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "cannot compute beta density at 1 when beta = %.3g";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-711);
      floatArray0[1] = (float) (-711);
      floatArray0[2] = (float) 135;
      floatArray0[3] = (float) (-711);
      floatArray0[4] = (float) (-711);
      floatArray0[5] = (float) (-711);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-711.0F), (-711.0F), 135.0F, (-711.0F), (-711.0F), (-711.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1118);
      intArray0[1] = 0;
      intArray0[2] = (-837);
      intArray0[3] = 14;
      intArray0[4] = 89;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1118), 0, (-837), 14, 89}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "j6VJ/{5";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[3][8];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[7][1];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[7];
      intArray0[0] = 14;
      intArray0[1] = 14;
      intArray0[2] = 14;
      intArray0[3] = 14;
      int int0 = 135;
      intArray0[4] = 135;
      intArray0[5] = 14;
      intArray0[6] = (-711);
      double double0 = new Integer(14);
      assertEquals(14, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1957.1813389135534);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 2682L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (-2406.92787791303);
      doubleArray0[8] = 544.22016488;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1957.1813389135534), 0.0, 0.0, 0.0, 0.0, 2682.0, 0.0, (-2406.92787791303), 544.22016488}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 2682L;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = 1302.0F;
      floatArray0[7] = 1302.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 2682.0F, 0.0F, 0.0F, 0.0F, 3.4028235E38F, 1302.0F, 1302.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,957.181 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1118);
      intArray0[1] = 0;
      intArray0[2] = (-837);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1118), 0, (-837), 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1118);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 88.41073);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1118.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {88.41073}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[][] doubleArray2 = new double[2][9];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1118), 0, (-837), 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1118), 0, (-837), 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray1, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 687.603143042403;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = 2395.872393072;
      doubleArray0[4] = (-522.2708619);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-807.2628);
      doubleArray0[7] = 2696.75718921828;
      doubleArray0[8] = 564.1956526661;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 687.603143042403, 20.0, 2395.872393072, (-522.2708619), 0.0, (-807.2628), 2696.75718921828, 564.1956526661}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      long[][] longArray0 = new long[4][4];
      long[] longArray1 = new long[8];
      longArray1[1] = 0L;
      longArray1[2] = (-2551L);
      longArray1[3] = 2629L;
      longArray1[4] = 0L;
      longArray1[5] = (-400L);
      longArray1[6] = 1623L;
      longArray1[7] = 2415L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-140L);
      longArray2[1] = (-400L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray3[1] = (-140L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 2629L;
      longArray4[1] = (-844L);
      longArray4[3] = 2415L;
      longArray4[4] = (-341L);
      longArray4[5] = (-341L);
      longArray4[6] = (-140L);
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,551 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NEGATIVE_INFINITY, 1.34217729E8, 7.848361555046424E-8, 7.848361555046424E-8);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 7.848361555046424E-8;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 7.848361555046424E-8;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-679));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-776.18);
      doubleArray0[1] = (-776.18);
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 100.0;
      doubleArray0[5] = (-1380.86271190904);
      doubleArray0[6] = (-409.0);
      doubleArray0[7] = 800.90262823;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {(-776.18), (-776.18), 0.0, 0.0, 100.0, (-1380.86271190904), (-409.0), 800.90262823}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2337);
      intArray0[1] = (-1479);
      intArray0[2] = 0;
      intArray0[3] = 0;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2515.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 2515.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 2515.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 2515.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 1455;
      intArray0[3] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1), 0, 1455, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[7];
      double double0 = (-5565.0831302);
      doubleArray0[0] = (-5565.0831302);
      double double1 = 570.4465482594277;
      doubleArray0[1] = 570.4465482594277;
      double double2 = 0.3333333333333333;
      doubleArray0[2] = 0.3333333333333333;
      double double3 = (-3.9986783938944604E-8);
      doubleArray0[3] = (-3.9986783938944604E-8);
      double double4 = (-361.7632578326);
      doubleArray0[4] = (-361.7632578326);
      doubleArray0[5] = (-857.43477299661);
      doubleArray0[6] = (-191.763249);
      double double5 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertArrayEquals(new double[] {(-5565.0831302), 570.4465482594277, 0.3333333333333333, (-3.9986783938944604E-8), (-361.7632578326), (-857.43477299661), (-191.763249)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(5674.363383666689, double5, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.3333333333333333, (-3.9986783938944604E-8), (-191.763249), (-5565.0831302), (-361.7632578326), (-857.43477299661), 570.4465482594277}, doubleArray0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.3333333333333333, (-3.9986783938944604E-8), (-191.763249), (-5565.0831302), (-361.7632578326), (-857.43477299661), 570.4465482594277}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.3333333333333333, (-3.9986783938944604E-8), (-191.763249), (-5565.0831302), (-361.7632578326), (-857.43477299661), 570.4465482594277}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.6666666666666666, (-7.997356787788921E-8), (-383.526498), (-11130.1662604), (-723.5265156652), (-1714.86954599322), 1140.8930965188554}, doubleArray3, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1118);
      intArray0[1] = 0;
      intArray0[2] = (-837);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1118), 0, (-837), 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1118);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 88.41073);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1118.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {88.41073}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[2][9];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1118.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {88.41073}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5661.761820296446);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-218.59445706);
      doubleArray0[4] = 367.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-5661.761820296446), 0.0, 0.0, (-218.59445706), 367.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-5661.761820296446), 0.0, 0.0, (-218.59445706), 367.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(3.223801944642388E7, double1, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.223801944642388E7;
      doubleArray1[1] = 3.223801944642388E7;
      doubleArray1[2] = 915.6095;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[7][5];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long[][] longArray0 = new long[2][0];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = 2682L;
      longArray1[2] = 1537L;
      longArray1[3] = 1L;
      longArray1[4] = (-48L);
      longArray1[5] = 2147483647L;
      longArray1[6] = (-27L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-48L);
      doubleArray0[1] = (double) 2147483647L;
      doubleArray0[2] = (double) (-48L);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 1537L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2304.0, 4.6116860141324206E18, 2304.0, 0.0, 2362369.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-48.0), 2.147483647E9, (-48.0), 0.0, 1537.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-48.0), 2.147483647E9, (-48.0), 0.0, 1537.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1118);
      intArray0[1] = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-68.618176);
      doubleArray0[2] = (-2406.92787791303);
      doubleArray0[3] = (double) (-837);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-68.618176), (-2406.92787791303), (-837.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-837);
      floatArray0[2] = 1302.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 3.4028235E38F;
      floatArray0[5] = (float) (-1118);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-837.0F), 1302.0F, 0.0F, 3.4028235E38F, (-1118.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1.0;
      double double1 = 2515.0;
      doubleArray0[1] = 2515.0;
      doubleArray0[2] = 2515.0;
      double double2 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 6.926630256878365;
      doubleArray0[5] = 0.0;
      double double3 = (-247.474661);
      doubleArray0[6] = (-247.474661);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = (-1144.6497);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.141592653589793);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.141592653589793, 100.0, (-1144.6497)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.009476262672823041), (-0.30163880928340064), 3.4527077255460172}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {3.141592653589793, 100.0, (-1144.6497)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.009476262672823041), (-0.30163880928340064), 3.4527077255460172}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-0.029770557196428044), (-1.8952525345646083), (-8.46987847720388), 690.5415451092035, (-3952.140862233931)}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0, 494);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {3.141592653589793, 100.0, (-1144.6497)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(494, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      double[][] doubleArray4 = new double[7][7];
      doubleArray4[0] = doubleArray0;
      doubleArray4[1] = doubleArray3;
      double double0 = MathArrays.distanceInf(doubleArray3, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3.141592653589793, 100.0, (-1144.6497)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(494, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "org.apache.commons.math3.util.Decimal64";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[4] = "org.apache.commons.math3.util.Decimal64";
      stringArray0[5] = "org.apache.commons.math3.util.Decimal64";
      stringArray0[6] = "ZJ`L/{L";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$3";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = 0;
      intArray0[2] = 0;
      intArray0[3] = (-805);
      int int1 = 1386;
      intArray0[4] = 1386;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, (-805), 1386}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, (-805), 1386}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-776.18);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-776.18 >= -\u221E)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2797.9;
      doubleArray0[1] = 1985.04115623;
      doubleArray0[2] = (-2151.60183918);
      doubleArray0[3] = (-1196.68914218322);
      doubleArray0[4] = 2042.61149235709;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,797.9 >= 1,985.041)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 46;
      intArray0[2] = 0;
      intArray0[3] = 134217729;
      intArray0[4] = 691;
      intArray0[5] = (-393);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 46, 0, 134217729, 691, (-393)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      MathArrays.checkOrder(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1456.129;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1456.129}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      long[][] longArray0 = new long[9][1];
      long[] longArray1 = new long[6];
      longArray1[0] = (-2473L);
      longArray1[1] = 1631L;
      longArray1[2] = (-108L);
      longArray1[3] = 0L;
      longArray1[4] = 0L;
      longArray1[5] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-108L);
      longArray2[1] = (-108L);
      longArray2[2] = 1631L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = (-1L);
      longArray2[6] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1119L;
      longArray3[1] = (-3461L);
      longArray3[2] = (-551L);
      longArray3[3] = 1631L;
      longArray3[4] = 748L;
      longArray3[5] = 1631L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-2473L);
      longArray4[1] = (-2473L);
      longArray4[2] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = 748L;
      longArray5[1] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      
      longArray6[0] = (-108L);
      longArray6[1] = (-3461L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray0[6] = longArray7;
      long[] longArray8 = new long[2];
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray4));
      
      longArray8[0] = (-1L);
      longArray8[1] = (-108L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[7];
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray4));
      
      longArray9[0] = 0L;
      longArray9[1] = 0L;
      longArray9[2] = (-1L);
      longArray9[3] = 748L;
      longArray9[4] = 0L;
      longArray9[5] = 1119L;
      longArray9[6] = 1631L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1343.277893003);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1343.277893003)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1343.277893003);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-1343.277893003);
      doubleArray2[5] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-68.618176);
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, Double.NaN, (-68.618176), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, Double.NaN, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2019.9F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-2266.268F);
      floatArray0[4] = 1302.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-2019.9F), 0.0F, 0.0F, (-2266.268F), 1302.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, Double.NaN, (-68.618176), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, Double.NaN, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 3.834E-20;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 3.834E-20}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[7];
      int int0 = (-3063);
      intArray0[0] = (-3063);
      intArray0[1] = 134217729;
      intArray0[2] = (-532);
      intArray0[3] = 589;
      intArray0[4] = 0;
      intArray0[5] = (-92);
      intArray0[6] = 1973;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 589;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 877.083797;
      doubleArray0[1] = 746.7612;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-711.0938296516013);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.34217729E8;
      doubleArray0[7] = -0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {877.083797, 746.7612, 1.0, (-711.0938296516013), 0.0, 0.0, 1.34217729E8, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN, Double.NaN, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(191);
      assertNotNull(integer0);
      assertEquals(191, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(180);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(180, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(302);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(302, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(55);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals(55, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(302);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      assertEquals(302, (int)integer6);
      
      integerArray0[6] = integer6;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.834E-20, 3.834E-20, 3.834E-20, 3.834E-20, (-1671.427749175515), 3.834E-20, (-1.0), (-1686.10967975743));
      assertEquals(1686.10967975743, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1671.427749175515);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1686.10967975743;
      doubleArray0[3] = (-1671.427749175515);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-1.0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1671.427749175515), (-1.0), 1686.10967975743, (-1671.427749175515), (-1.0), 0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1671.427749175515), (-1.0), 1686.10967975743, (-1671.427749175515), (-1.0), 0.0, (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = 1832.0615;
      double double1 = (-1957.1813389135534);
      int int0 = 0;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 1.0, 3178.2, 0.0, 0.0, 1.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1506.480111617;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[][] doubleArray1 = new double[5][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 1506.480111617, 0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 5404.22555;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = (-830.68245639218);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {5404.22555, 1.34217729E8, 0.0, (-3.141592653589793), (-830.68245639218)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-830.68245639218), (-3.141592653589793), 0.0, 5404.22555, 1.34217729E8}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-3096.81893), (-1608.9845972), 0.0, 3117.787, (-81.026), 0.0, 0.0, 3117.787);
      assertEquals(4982733.958687385, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-1608.9845972), (-3096.81893), (-81.026), 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(4982733.958687385, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2515.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-247.474661);
      doubleArray0[7] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (1 < 2,515)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 4078;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2918);
      intArray0[4] = 0;
      intArray0[5] = 2075;
      intArray0[6] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {4078, 0, 0, (-2918), 0, 2075, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 394.6F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 394.6F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long[][] longArray0 = new long[0][5];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = (-2337);
      intArray0[0] = (-2337);
      intArray0[1] = (-1479);
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int1 = 18;
      intArray0[4] = 18;
      int int2 = MathArrays.distanceInf(intArray0, intArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new int[] {(-2337), (-1479), 0, 0, 18}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int2);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2337), (-1479), 0, 0, 18}, intArray0);
      assertArrayEquals(new int[] {(-2337), (-1479), 0, 0, 18}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      try { 
        MathArrays.convolve(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3278.09107;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {3278.09107}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = (-1.0);
      double double1 = MathArrays.linearCombination((-4695.30900090229), (-4695.30900090229), (-4695.30900090229), (-1.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.205062192295496E7, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-711);
      intArray0[1] = (-711);
      intArray0[2] = (-711);
      intArray0[3] = (-711);
      intArray0[4] = (-711);
      intArray0[5] = (-711);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-711), (-711), (-711), (-711), (-711), (-711)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "&'n3oEORK{2rN2H";
      stringArray0[2] = "cannot compute beta density at 1 when beta = %.3g";
      stringArray0[3] = "cannot compute beta density at 1 when beta = %.3g";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-711);
      floatArray0[1] = (float) (-711);
      floatArray0[2] = (-3642.6602F);
      floatArray0[3] = (float) (-711);
      floatArray0[4] = (float) (-711);
      floatArray0[5] = (float) (-711);
      floatArray0[6] = (float) (-711);
      floatArray0[7] = (float) (-711);
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new float[] {(-711.0F), (-711.0F), (-3642.6602F), (-711.0F), (-711.0F), (-711.0F), (-711.0F), (-711.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("&'n3oEORK{2rN2H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.&'n3oEORK{2rN2H
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2515.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-247.474661);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {1.0, 2515.0, 0.0, 0.0, 0.0, 0.0, (-247.474661), 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(2487.49782256243, 2336.34593648, Double.NaN, 0.0, 0.0, 0.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1595L);
      longArray0[1] = (-1543L);
      longArray0[2] = 4208363204685324176L;
      longArray0[3] = (-1073741824L);
      longArray0[4] = (-2619L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,595 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-776.18);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 123.096043839;
      doubleArray0[4] = 100.0;
      doubleArray0[5] = (-1380.86271190904);
      doubleArray0[6] = (-409.0);
      doubleArray0[7] = 800.90262823;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {(-776.18), Double.NEGATIVE_INFINITY, 0.0, 123.096043839, 100.0, (-1380.86271190904), (-409.0), 800.90262823}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2205.201;
      double double0 = (-1333.90937254044);
      doubleArray0[1] = (-1333.90937254044);
      doubleArray0[2] = 579.0374349;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2205.201, (-1333.90937254044), 579.0374349}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4410.402, (-2667.81874508088), 1158.0748698}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {2205.201, (-1333.90937254044), 579.0374349}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4410.402, (-2667.81874508088), 1158.0748698}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {2205.201, (-1333.90937254044), 579.0374349}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4410.402, (-2667.81874508088), 1158.0748698}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2205.201, double2, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2205.201;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2205.201, (-1333.90937254044), 579.0374349}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2205.201}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1249);
      int int0 = 0;
      intArray0[1] = 0;
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {(-1249), 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int1);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {2205.201, (-1333.90937254044), 579.0374349}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9725822.900802, 3558628.428302461, 670568.7020311435}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {4410.402, (-2667.81874508088), 1158.0748698}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      
      MathArrays.scaleInPlace((-1333.90937254044), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2941538.2822355507), 1779314.2141512304, (-772383.4614648849)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray3, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = 14;
      int int1 = 135;
      int[] intArray0 = new int[3];
      intArray0[0] = 14;
      intArray0[1] = 14;
      double double0 = new Integer(135);
      assertEquals(135, double0, 0.01);
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double1 = 2863.43;
      Double double2 = new Double(135);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(135.0, (double)double2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      int int1 = (-2933);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, (-2933));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5661.761820296446);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-218.59445706);
      doubleArray0[4] = 367.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3.223801944642388E7, double0, 0.01);
      assertArrayEquals(new double[] {(-5661.761820296446), 0.0, 0.0, (-218.59445706), 367.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((-218.59445706), 0.0, 0.0, 573.0, 2336.34593648, 2487.49782256243);
      assertEquals(5811655.429746581, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = (-21);
      int int1 = 2;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Integer>>) null, 2, (-21));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Field<Pair<String, String>> field0 = (Field<Pair<String, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-1296);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1296));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1308.034793679332;
      doubleArray0[1] = (-1246.8375967);
      doubleArray0[2] = 2031.21797103396;
      doubleArray0[3] = (-848.4941);
      doubleArray0[4] = 1.0E-5;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1569.9915);
      doubleArray0[8] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "org.apache.commons.math3.util.Decimal64";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MathArrays.linearCombination((-2050.71), 6110.0, 1.304E19, 1.304E19, 1.304E19, 1.304E19, (-2050.71), 6110.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-240.36);
      doubleArray0[1] = 6110.0;
      doubleArray0[2] = 1.304E19;
      int int0 = (-228);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-228));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = (-863);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, (-863));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-1);
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 1455;
      intArray0[3] = 0;
      int int1 = (-1096);
      intArray0[4] = (-1096);
      intArray0[5] = 0;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      try { 
        MathArrays.normalizeArray(doubleArray0, (-1096));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int[] intArray0 = new int[1];
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = Double.NaN;
      try { 
        MathArrays.normalizeArray(doubleArray0, (-2136.390779731857));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = (-1144.6497);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.141592653589793);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0, 494);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray4 = new double[7][7];
      doubleArray4[0] = doubleArray0;
      doubleArray4[1] = doubleArray3;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 3.141592653589793;
      doubleArray5[1] = 3.141592653589793;
      doubleArray5[2] = (double) 494;
      doubleArray5[3] = (double) 494;
      doubleArray5[4] = (-1144.6497);
      doubleArray5[5] = 100.0;
      doubleArray4[2] = doubleArray5;
      doubleArray4[3] = doubleArray1;
      doubleArray4[4] = doubleArray2;
      doubleArray4[5] = doubleArray1;
      doubleArray4[6] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray3, mathArrays_OrderDirection0, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 494
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-1);
      intArray0[0] = (-1);
      intArray0[1] = 0;
      int int1 = 1455;
      intArray0[2] = 1455;
      intArray0[3] = 0;
      int int2 = (-1096);
      intArray0[4] = (-1096);
      intArray0[5] = 0;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      try { 
        MathArrays.normalizeArray(doubleArray0, (-1096));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 687.603143042403;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = 2395.872393072;
      doubleArray0[4] = (-522.2708619);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-807.2628);
      doubleArray0[7] = 2696.75718921828;
      doubleArray0[8] = 564.1956526661;
      MathArrays.distance1(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[4][4];
      long[] longArray1 = new long[8];
      longArray1[0] = (-341L);
      longArray1[1] = 0L;
      longArray1[2] = (-2551L);
      longArray1[3] = 2629L;
      longArray1[4] = 0L;
      longArray1[5] = (-400L);
      longArray1[6] = 1623L;
      longArray1[7] = 2415L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = (-140L);
      longArray2[1] = (-400L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = 0L;
      longArray3[1] = (-140L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = 2629L;
      longArray4[1] = (-844L);
      longArray4[2] = 2415L;
      longArray4[3] = 2415L;
      longArray4[4] = (-341L);
      longArray4[5] = (-341L);
      longArray4[6] = (-140L);
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -341 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1574.69348705);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 695.5852906;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 100.0;
      doubleArray0[7] = (-245.9287534760179);
      doubleArray0[8] = 0.0;
      double[][] doubleArray1 = new double[8][0];
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 695.5852906;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-1028.05);
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 695.5852906;
      doubleArray3[2] = 0.0;
      doubleArray1[7] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      long[][] longArray0 = new long[6][3];
      long[] longArray1 = new long[9];
      longArray1[0] = 0L;
      longArray1[1] = (-330L);
      longArray1[2] = (-295L);
      longArray1[3] = (-3161L);
      longArray1[4] = (-1071L);
      longArray1[5] = 0L;
      longArray1[6] = (-1L);
      longArray1[7] = (-2688L);
      longArray1[8] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 0L;
      longArray2[1] = 52L;
      longArray2[2] = (-1L);
      longArray2[3] = (-295L);
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = (-920L);
      longArray3[1] = (-3161L);
      longArray3[2] = (-3161L);
      longArray3[3] = 52L;
      longArray3[4] = (-1071L);
      longArray3[5] = 0L;
      longArray3[6] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      longArray4[0] = 0L;
      longArray4[1] = 265L;
      longArray4[2] = (-330L);
      longArray4[3] = 0L;
      longArray4[4] = (-3752L);
      longArray4[5] = 0L;
      longArray4[6] = 1L;
      longArray4[7] = (-920L);
      longArray4[8] = (-295L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      longArray5[0] = 0L;
      longArray5[1] = (-2688L);
      longArray5[2] = (-1071L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      longArray6[0] = (-3752L);
      longArray6[1] = 0L;
      longArray6[2] = (-576L);
      longArray6[3] = 0L;
      longArray6[4] = 265L;
      longArray6[5] = 1L;
      longArray6[6] = (-330L);
      longArray6[7] = (-3752L);
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1118);
      intArray0[1] = 0;
      intArray0[2] = (-837);
      intArray0[3] = 14;
      intArray0[4] = 89;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "j6VJ/{5";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[3] = "HW{";
      stringArray0[4] = "k!x-xQ8@e";
      stringArray0[5] = "ARITHMETIC_EXCEPTION";
      stringArray0[6] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = 747L;
      longArray0[0] = 747L;
      longArray0[1] = (-1073741824L);
      long long1 = (-3168L);
      longArray0[2] = (-3168L);
      longArray0[3] = 9218868437227405312L;
      longArray0[4] = (-1096L);
      longArray0[5] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,073,741,824 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-638.45583);
      doubleArray0[2] = (-539.8830963204);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 100.0;
      doubleArray0[5] = (-1993.87);
      doubleArray0[6] = (-1041.24);
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = Double.NaN;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-638.45583), (-539.8830963204), (-1.0), 100.0, (-1993.87), (-1041.24), (-1.0), Double.NaN}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 1375;
      intArray0[2] = 0;
      intArray0[3] = (-2862);
      intArray0[4] = 285;
      intArray0[5] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }
}
