/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:42:22 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1427.2721779083;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, (-4802.601061151531));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(2126429886);
      assertEquals(2126429886, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(2126429886);
      assertEquals(2.126429886E9, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      Field<Pair<Integer, Double>> field0 = (Field<Pair<Integer, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2126429886, 2126429886);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4.3466666666666665E18;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = 4544.420454864915;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {4.3466666666666665E18, 3.0, 4544.420454864915}, doubleArray0, 0.01);
      assertEquals(4.3466666666666665E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = (-833.3644F);
      floatArray0[2] = 508.5F;
      floatArray0[3] = 1.4E-45F;
      floatArray0[4] = 1710.2201F;
      floatArray0[5] = (-1.4E-45F);
      floatArray0[6] = (-1368.0516F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-833.3644F), 508.5F, 1.4E-45F, 1710.2201F, (-1.4E-45F), (-1368.0516F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1.4E-45F);
      doubleArray0[1] = (double) 1.4E-45F;
      doubleArray0[2] = (double) (-1.4E-45F);
      doubleArray0[3] = (double) 1710.2201F;
      doubleArray0[4] = (-663.1858918311171);
      doubleArray0[5] = (double) 1710.2201F;
      doubleArray0[6] = (double) 1.4E-45F;
      doubleArray0[7] = (double) (-1.4E-45F);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2.802596928649634E-45), 2.802596928649634E-45, (-2.802596928649634E-45), 3420.440185546875, (-1326.3717836622343), 3420.440185546875, 2.802596928649634E-45, (-2.802596928649634E-45)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.401298464324817E-45), 1.401298464324817E-45, (-1.401298464324817E-45), 1710.2200927734375, (-663.1858918311171), 1710.2200927734375, 1.401298464324817E-45, (-1.401298464324817E-45)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1.401298464324817E-45), 1.401298464324817E-45, (-1.401298464324817E-45), 1710.2200927734375, (-663.1858918311171), 1710.2200927734375, 1.401298464324817E-45, (-1.401298464324817E-45)}, doubleArray0, 0.01);
      assertEquals(2507.891755753387, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1.401298464324817E-45), 1.401298464324817E-45, (-1.401298464324817E-45), 1710.2200927734375, (-663.1858918311171), 1710.2200927734375, 1.401298464324817E-45, (-1.401298464324817E-45)}, doubleArray0, 0.01);
      assertEquals(2507.891755753387, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = Double.NaN;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1780.7652815892502;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 719.9553115940776;
      doubleArray0[3] = 1244.26;
      doubleArray0[4] = 1.0708593250394448E-7;
      doubleArray0[5] = 0.1111111111111111;
      doubleArray0[6] = 1.86285714285714278E18;
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = 1244.26;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1780.7652815892502, 1.0, 719.9553115940776, 1244.26, 1.0708593250394448E-7, 0.1111111111111111, 1.86285714285714278E18, 1.304E19, 1244.26}, doubleArray0, 0.01);
      assertEquals(1.317238918096083E19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1554.69776441;
      doubleArray0[1] = 863.0026401874164;
      doubleArray0[2] = (-101.8788734);
      doubleArray0[3] = 770.253655;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1554.69776441, 863.0026401874164, (-101.8788734), 770.253655}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-20.0);
      doubleArray1[2] = 192.0692905753548;
      doubleArray1[3] = 863.0026401874164;
      doubleArray1[4] = 863.0026401874164;
      doubleArray1[5] = 1554.69776441;
      double[] doubleArray2 = MathArrays.scale((-20.0), doubleArray1);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0, 400.0, (-3841.385811507096), (-17260.052803748327), (-17260.052803748327), (-31093.9552882)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, (-20.0), 192.0692905753548, 863.0026401874164, 863.0026401874164, 1554.69776441}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.linearCombination(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0, 400.0, (-3841.385811507096), (-17260.052803748327), (-17260.052803748327), (-31093.9552882)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, (-20.0), 192.0692905753548, 863.0026401874164, 863.0026401874164, 1554.69776441}, doubleArray1, 0.01);
      assertEquals((-7.887845729968949E7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2145;
      intArray0[2] = (-1073741823);
      intArray0[3] = 2146674498;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1073741823);
      intArray1[1] = 2;
      intArray1[2] = (-1073741823);
      intArray1[3] = (-1073741823);
      intArray1[4] = (-1073741823);
      intArray1[5] = 2146674498;
      intArray1[6] = 2145;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 2145, (-1073741823), 2146674498}, intArray0);
      assertArrayEquals(new int[] {(-1073741823), 2, (-1073741823), (-1073741823), (-1073741823), 2146674498, 2145}, intArray1);
      assertEquals((-2146672353), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2145;
      doubleArray0[1] = (double) (-1073741823);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4601025.0, (-4.60635242067E12), 1.15292150245936333E18}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2145.0, (-1.073741823E9)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-1073741823);
      intArray2[1] = 2;
      intArray2[2] = (-1073741823);
      intArray2[3] = 2145;
      double double0 = MathArrays.distance(intArray0, intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 2145, (-1073741823), 2146674498}, intArray0);
      assertArrayEquals(new int[] {(-1073741823), 2, (-1073741823), 2145}, intArray2);
      assertEquals(2.400234092311306E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 2326.4453F;
      floatArray0[4] = Float.NEGATIVE_INFINITY;
      floatArray0[5] = (-4214.9355F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 262.11F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-1.0F), 2326.4453F, Float.NEGATIVE_INFINITY, (-4214.9355F), 0.0F, 0.0F, 262.11F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (-1682.9);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[7] = (double) 2326.4453F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1682.9), (-1.0), 0.0, 1.0, 0.0, Double.NEGATIVE_INFINITY, 2326.4453125}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(29);
      assertEquals(29, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(2889.0);
      assertEquals(2889.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      Field<Pair<Integer, Double>> field0 = (Field<Pair<Integer, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      int int0 = 29;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 29, 29);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Double>> field0 = (Field<Pair<Integer, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Pair<Integer, Double>[][] pairArray0 = MathArrays.buildArray(field0, 29, 29);
      assertEquals(29, pairArray0.length);
      assertNotNull(pairArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 29;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {29.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 29;
      floatArray0[1] = (float) 29;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 29;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {29.0F, 29.0F, 0.0F, 29.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {29.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-28.0)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {29.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      
      MathArrays.checkOrder(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {29.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-28.0)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-3353.699951171875);
      doubleArray0[2] = 3569.0;
      doubleArray0[3] = (-648.16774032);
      doubleArray0[4] = 1853.2;
      doubleArray0[5] = (-1233.59184);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.834E-20, (-3353.699951171875), 3569.0, (-648.16774032), 1853.2, (-1233.59184)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, 1.1247303362490237E7, 1.2737761E7, 420121.41959153494, 3434350.24, 1521748.8277145857}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.834E-20, (-3353.699951171875), 3569.0, (-648.16774032), 1853.2, (-1233.59184)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, 1.1247303362490237E7, 1.2737761E7, 420121.41959153494, 3434350.24, 1521748.8277145857}, doubleArray1, 0.01);
      assertEquals(1.7408026059661202E7, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3.834E-20, (-3353.699951171875), 3569.0, (-648.16774032), 1853.2, (-1233.59184)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2186.271F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-2177.0F);
      floatArray0[3] = 2850.0F;
      floatArray0[4] = 94.0F;
      floatArray0[5] = 520.5222F;
      floatArray0[6] = (-21.756767F);
      floatArray0[7] = (-2117.6719F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-2186.271F), 1.0F, (-2177.0F), 2850.0F, 94.0F, 520.5222F, (-21.756767F), (-2117.6719F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 3096.8828F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-3.4028235E38F);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3096.8828F;
      doubleArray0[1] = (double) (-3.4028235E38F);
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (double) (-2048.0F);
      doubleArray0[4] = (double) 0.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {3096.8828125, (-3.4028234663852886E38), 1.304E19, (-2048.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3.4028234663852886E38, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {3096.8828F, 0.0F, (-3.4028235E38F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1045.979F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1853.2F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-2378.5F);
      floatArray0[8] = (-1.0F);
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-2378.5F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-1045.979F);
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.0F;
      floatArray1[8] = 1853.2F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1045.979F), 0.0F, 1853.2F, 0.0F, 0.0F, 0.0F, 0.0F, (-2378.5F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2378.5F), 0.0F, (-1045.979F), 0.0F, 0.0F, 0.0F, 1853.2F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1045.979F), 0.0F, 1853.2F, 0.0F, 0.0F, 0.0F, 0.0F, (-2378.5F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2378.5F), 0.0F, (-1045.979F), 0.0F, 0.0F, 0.0F, 1853.2F}, floatArray1, 0.01F);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = 2749.2292874725385;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 6.52E18;
      doubleArray1[3] = 2749.2292874725385;
      doubleArray1[4] = 2749.2292874725385;
      doubleArray1[5] = Double.NaN;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 2749.2292874725385, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 6.52E18, 2749.2292874725385, 2749.2292874725385, Double.NaN}, doubleArray1, 0.01);
      assertFalse(boolean0);
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.8014398789159424E16;
      doubleArray1[1] = 1490.7662006919404;
      doubleArray1[2] = 0.19999998807907104;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 3031.8921;
      doubleArray1[5] = 0.5039018405998233;
      doubleArray1[6] = 898.7;
      doubleArray1[7] = 2748.904257;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-94.0);
      doubleArray0[1] = (-94.0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-94.0), (-94.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[11];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[1] = (-549.6);
      doubleArray1[2] = (-94.0);
      doubleArray1[3] = (-94.0);
      doubleArray1[4] = (-549.6);
      doubleArray1[5] = (-549.6);
      doubleArray1[6] = (-94.0);
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-94.0), (-549.6)}, doubleArray0, 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = 15;
      intArray1[0] = 15;
      int int1 = 18;
      intArray1[1] = 18;
      int int2 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {15, 18}, intArray1);
      assertEquals(0, int2);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 576.0;
      doubleArray0[1] = (-781.8328563889);
      doubleArray0[2] = 0.8109631538391113;
      doubleArray0[3] = 0.10420436110443335;
      doubleArray0[4] = 1393.09;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-166.4370141);
      doubleArray1[1] = 0.8109631538391113;
      doubleArray1[2] = 0.8109631538391113;
      doubleArray1[3] = 0.10420436110443335;
      doubleArray1[4] = 576.0;
      doubleArray1[5] = 0.8109631538391113;
      doubleArray1[6] = 0.10420436110443335;
      doubleArray1[7] = 1393.09;
      doubleArray1[8] = 0.8109631538391113;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 3097.8984F;
      floatArray0[1] = 0.0F;
      floatArray0[3] = (-2048.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {3097.8984F, 0.0F, 0.0F, (-2048.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale(0.0F, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[] floatArray0 = new float[7];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 690.4;
      doubleArray1[1] = 2064.464543443;
      doubleArray1[2] = 1438.78;
      doubleArray1[3] = (-1407.56);
      doubleArray1[4] = 1.7976931348623157E308;
      doubleArray1[5] = 644.4969286567813;
      doubleArray1[6] = (-555.36017615);
      doubleArray1[7] = 1891.032113889;
      doubleArray1[8] = 2718.62881;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2048.0F);
      floatArray0[1] = 3097.8984F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-2048.0F), 3097.8984F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3097.8984F;
      doubleArray0[1] = (double) 3097.8984F;
      doubleArray0[2] = 3.4028234663852886E38;
      doubleArray0[3] = (double) (-3.4028235E38F);
      doubleArray0[4] = (double) (-3.4028235E38F);
      doubleArray0[5] = (double) (-2048.0F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {3097.8984375, 3097.8984375, 3.4028234663852886E38, (-3.4028234663852886E38), (-3.4028234663852886E38), (-2048.0)}, doubleArray0, 0.01);
      assertEquals(5.8938631329669654E38, double0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -340,282,346,638,528,860,000,000,000,000,000,000,000 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.8775825500488281;
      doubleArray0[2] = 2.444415;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1586.963676308518);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {3.834E-20, 0.8775825500488281, 2.444415, (-1.0), (-1586.963676308518)}, doubleArray0, 0.01);
      assertEquals(1586.9661166006258, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 1144);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1144, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale((-178.2031135563098), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Double>> field0 = (Field<Pair<Integer, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Pair<Integer, Double>[][] pairArray0 = MathArrays.buildArray(field0, 0, 0);
      assertEquals(0, pairArray0.length);
      assertNotNull(pairArray0);
      
      double double0 = MathArrays.linearCombination(667.6, (double) 0, 667.6, 1151.0, Double.NaN, (-1981.91453), Double.NaN, 1740.1478);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-1.0);
      doubleArray0[3] = 2748.904257;
      doubleArray0[0] = (-1.0);
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.linearCombination((-1655.40963689), (-1655.40963689), (-1961.1986), 1072.165966, Double.NaN, 0.0, 2748.904257, 1695.160711);
      assertEquals(Double.NaN, double0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1 >= -1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.7355985718833965, 0.7355985718833965, (-3968.19032023), 0.0, (-4354.404229549691), 1.44888888888888883E18);
      assertEquals((-6.30904790592533E21), double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.7355985718833965;
      doubleArray0[1] = 599.9078743055468;
      doubleArray0[2] = (-3968.19032023);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-6.30904790592533E21);
      doubleArray0[5] = 476.4503043492252;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.44888888888888883E18;
      doubleArray0[8] = (-6.30904790592533E21);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (599.908 >= -3,968.19)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1891.953F);
      floatArray1[1] = Float.NaN;
      floatArray1[2] = (-2165.9F);
      floatArray1[3] = 0.5F;
      boolean boolean1 = MathArrays.equals(floatArray1, floatArray1);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1891.953F), Float.NaN, (-2165.9F), 0.5F}, floatArray1, 0.01F);
      assertFalse(boolean1);
      
      float[] floatArray2 = new float[0];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray2);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Double double0 = new Double(3069.8258);
      assertEquals(3069.8258, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1167.6));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1167.6), (double)double1, 0.01);
      assertNotNull(double1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-3221.24F);
      floatArray0[3] = 0.0F;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-3221.24F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, (-3221.24F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3221.24F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-3221.24F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3221.24F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.5463024377822876;
      doubleArray2[1] = 4212.933128842473;
      doubleArray2[2] = 2740.471144772518;
      doubleArray2[3] = 2093.81780889355;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = 0.5000000000042687;
      doubleArray2[6] = (-3015.0);
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-3015.0);
      doubleArray3[1] = (-3015.0);
      doubleArray3[2] = 2093.81780889355;
      doubleArray3[3] = (-1140.187962134069);
      doubleArray3[4] = 2740.471144772518;
      doubleArray3[5] = 0.5463024377822876;
      doubleArray3[6] = 2093.81780889355;
      doubleArray3[7] = (-1.0);
      doubleArray3[8] = (-1.0);
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray3);
      assertEquals(7, doubleArray2.length);
      assertEquals(9, doubleArray3.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.5463024377822876, 4212.933128842473, 2740.471144772518, 2093.81780889355, (-1.0), 0.5000000000042687, (-3015.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-3015.0), (-3015.0), 2093.81780889355, (-1140.187962134069), 2740.471144772518, 0.5463024377822876, 2093.81780889355, (-1.0), (-1.0)}, doubleArray3, 0.01);
      assertFalse(boolean0);
      
      double double0 = MathArrays.linearCombination(doubleArray3, doubleArray3);
      assertEquals(9, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-3015.0), (-3015.0), 2093.81780889355, (-1140.187962134069), 2740.471144772518, 0.5463024377822876, 2093.81780889355, (-1.0), (-1.0)}, doubleArray3, 0.01);
      assertEquals(3.575880901645216E7, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.5463024377822876, 4212.933128842473, 2740.471144772518, 2093.81780889355, (-1.0), 0.5000000000042687, (-3015.0)}, doubleArray2, 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Double double0 = new Double((-4961.297));
      assertEquals((-4961.297), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.34217729E8;
      doubleArray1[3] = (-4961.297);
      doubleArray1[4] = (-4961.297);
      double[][] doubleArray2 = new double[5][2];
      doubleArray2[0] = null;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = null;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = new Double(3069.8258);
      assertEquals(3069.8258, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1167.6));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1167.6), (double)double1, 0.01);
      assertNotNull(double1);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 327.40070326798;
      doubleArray0[1] = (-1167.6);
      double[] doubleArray1 = MathArrays.scale(327.40070326798, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {327.40070326798, (-1167.6)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {107191.2205003679, (-382273.06113569345)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1167.6);
      doubleArray2[1] = 3069.8258;
      doubleArray2[2] = 880531.6254206824;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = 3069.8258;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = 3069.8258;
      doubleArray2[7] = (double) 0;
      doubleArray2[8] = 0.1246747374534607;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = Double.NaN;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1.0), Double.NaN, (-1.0), (-1.0), Double.NaN}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), Double.NaN, (-1.0), (-1.0), Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NaN, (-1.0), Double.NaN, (-1.0), (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-492);
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-492)}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(492, int0);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray2.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Double double0 = new Double(1050.21);
      assertEquals(1050.21, (double)double0, 0.01);
      assertNotNull(double0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) 11;
      floatArray0[2] = (float) 11;
      floatArray0[4] = (float) 11;
      floatArray0[5] = (float) 11;
      floatArray0[6] = (float) 11;
      floatArray0[7] = (float) 8;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double1 = new Double(8.0F);
      assertEquals(8.0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[0][1];
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Double double0 = new Double(1050.21);
      assertEquals(1050.21, (double)double0, 0.01);
      assertNotNull(double0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) 8;
      floatArray0[2] = (float) 11;
      floatArray0[3] = (float) 11;
      floatArray0[5] = (float) 11;
      floatArray0[6] = (float) 11;
      floatArray0[7] = (float) 8;
      floatArray0[8] = (float) 8;
      double[] doubleArray0 = new double[1];
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 8;
      doubleArray2[1] = (-1486.0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {8.0, (-1486.0)}, doubleArray2, 0.01);
      assertFalse(boolean0);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, 8.0F);
      assertEquals(2, doubleArray3.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-0.04330175913396482), 8.043301759133964}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {8.0, (-1486.0)}, doubleArray2, 0.01);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-574.182211);
      doubleArray0[1] = 1890.1025945809072;
      int int0 = (-2147037420);
      Integer integer0 = new Integer((-2147037420));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-2147037420), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2145031649);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2145031649, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2145031649);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(2145031649, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = Integer.valueOf(213);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertEquals(213, (int)integer3);
      assertNotNull(integer3);
      
      int int1 = 239;
      Integer integer4 = new Integer(239);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(239, (int)integer4);
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(239);
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)int1));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertEquals(239, (int)integer5);
      assertNotNull(integer5);
      
      int int2 = (-2253);
      Integer integer6 = new Integer((-2253));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)int2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertEquals((-2253), (int)integer6);
      assertNotNull(integer6);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2253);
      intArray0[1] = 239;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 213;
      intArray1[1] = 2145031649;
      intArray1[2] = (-2147037420);
      intArray1[3] = (-2144);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {213, 2145031649, (-2147037420), (-2144)}, intArray1);
      assertArrayEquals(new int[] {(-2253), 239}, intArray0);
      assertEquals(2.1450314100014174E9, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-574.182211);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 11;
      floatArray0[1] = (float) 11;
      floatArray0[2] = (float) 11;
      floatArray0[3] = (float) 11;
      floatArray0[4] = (float) 11;
      floatArray0[5] = (float) 11;
      floatArray0[6] = (float) 11;
      floatArray0[7] = (float) 11;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {11.0F, 11.0F, 11.0F, 11.0F, 11.0F, 11.0F, 11.0F, 11.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[7];
      longArray1[0] = (long) 11;
      longArray1[1] = (long) 11;
      longArray1[2] = (long) 11;
      longArray1[3] = (long) 11;
      longArray1[4] = (long) 11;
      longArray1[5] = (long) 11;
      longArray1[6] = (long) 11;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 11;
      longArray2[1] = (long) 11;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray1 = MathArrays.scale((-1487.03), doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-574.182211), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {853826.17322333, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 774.5064348);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-574.182211), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {774.5064348, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Double double0 = new Double(1050.21);
      assertEquals(1050.21, (double)double0, 0.01);
      assertNotNull(double0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) 8;
      floatArray0[2] = (float) 11;
      floatArray0[3] = (float) 11;
      floatArray0[4] = (float) 11;
      floatArray0[5] = (float) 11;
      floatArray0[6] = (float) 11;
      floatArray0[7] = (float) 8;
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1244.286177819598;
      doubleArray0[1] = 4496.9987954;
      doubleArray0[2] = (-10.75350727007165);
      doubleArray0[3] = (-3017.684747517196);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1244.286177819598, 4496.9987954, (-10.75350727007165), (-3017.684747517196)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1244.286177819598, 4496.9987954, (-10.75350727007165), (-3017.684747517196)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1244.286177819598, 4496.9987954, (-10.75350727007165), (-3017.684747517196)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1244.286177819598, 4496.9987954, (-10.75350727007165), (-3017.684747517196)}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 289;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 289);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Double double0 = new Double(1050.21);
      assertEquals(1050.21, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 8;
      intArray0[1] = 11;
      intArray0[2] = 11;
      intArray0[3] = 8;
      intArray0[4] = 1073741824;
      intArray0[5] = 11;
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      Double double1 = new Double(1073741824);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.073741824E9, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[3] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Double double0 = new Double(1050.21);
      assertEquals(1050.21, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 329685.21142884856;
      doubleArray0[1] = (-10.75350727007165);
      doubleArray0[2] = 1050.21;
      doubleArray0[3] = (-1811.90845296924);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {329685.21142884856, (-10.75350727007165), 1050.21, (-1811.90845296924)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1050.21;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-10.75350727007165);
      doubleArray1[3] = (-1811.90845296924);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1050.21, 1.0, (-10.75350727007165), (-1811.90845296924)}, doubleArray1, 0.01);
      assertTrue(boolean1);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 4.3466666666666665E18;
      doubleArray2[1] = (-1811.90845296924);
      try { 
        MathArrays.checkPositive(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,811.908 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1050.21);
      assertEquals(1050.21, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = new double[0];
      MathArrays.checkPositive(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3767.92886991);
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-3767.92886991);
      MathArrays.scaleInPlace((-3767.92886991), doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.4197287968701247E7, (-5.057228559528566E11), 1.4197287968701247E7}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.4197287968701247E7, (-5.057228559528566E11), 1.4197287968701247E7}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.34217729E8;
      doubleArray1[1] = 1050.21;
      doubleArray1[2] = (-3767.92886991);
      doubleArray1[3] = 1.34217729E8;
      doubleArray1[4] = (-3767.92886991);
      doubleArray1[5] = 1.34217729E8;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 215.1;
      doubleArray0[1] = (-1.0);
      MathArrays.scaleInPlace(1144.59, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {246201.30899999998, (-1144.59)}, doubleArray0, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      
      double double1 = MathArrays.linearCombination((-1144.59), (double) 0, 215.1, 246201.30899999998, 246201.30899999998, (double) 0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5.295790156589999E7, double1, 0.01);
      
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      int int1 = 7;
      intArray2[1] = 7;
      intArray2[2] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray2, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      Integer integer0 = new Integer(2135921725);
      assertEquals(2135921725, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2137448677);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2137448677, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-2146787767));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-2146787767), (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-3085));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-3085), (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = Integer.valueOf(213);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(213, (int)integer4);
      assertNotNull(integer4);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 1890.1025945809072;
      doubleArray0[3] = (-1778.114);
      doubleArray0[4] = (double) 213;
      MathArrays.scaleInPlace(3281.4105, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 6202202.499935032, (-5834721.949797), 698940.4365}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2985;
      intArray0[0] = (-2147037420);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-2147037420), 0}, intArray0);
      assertEquals(0, int0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 6202202.499935032, (-5834721.949797), 698940.4365}, doubleArray0, 0.01);
      assertEquals(8543992.849682055, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 6,202,202.5)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-574.182211);
      doubleArray0[1] = 1890.1025945809072;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-574.182211), 1890.1025945809072, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-574.182211);
      doubleArray1[1] = (-574.182211);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3589.093481705862;
      doubleArray0[3] = 2748.904257;
      doubleArray0[4] = Double.NaN;
      doubleArray0[0] = (-1.0);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 3589.093481705862, 2748.904257, Double.NaN, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-180.24);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1032.6656881);
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = (-2447.830356578);
      doubleArray2[7] = 100.0;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1050.21);
      assertEquals(1050.21, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(13.07);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(13.07, (double)double1, 0.01);
      assertNotNull(double1);
      
      double[] doubleArray1 = new double[0];
      MathArrays.checkPositive(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-574.182211);
      doubleArray0[1] = 1890.1025945809072;
      Integer integer0 = new Integer((-2147037420));
      assertEquals((-2147037420), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-3085));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-3085), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2145031649);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(2145031649, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(2145031649);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(2145031649, (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = Integer.valueOf(213);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(213, (int)integer4);
      assertNotNull(integer4);
      
      MathArrays.scaleInPlace((-2147037420), doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.2327906929153357E12, (-4.058120998204297E12), -0.0, -0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      double double0 = MathArrays.linearCombination((double) (-3085), (double) (-2147037420), 348.56729005, (-4.058120998204297E12), (-4.058120998204297E12), (double) 0, 2987.41890012538, (double) 2145031649);
      assertEquals((-1.401496520508783E15), double0, 0.01);
      
      long[][] longArray0 = new long[5][3];
      long[] longArray1 = new long[5];
      longArray1[0] = (long) 213;
      longArray1[1] = (long) 2145031649;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) (-3085);
      longArray1[4] = (long) (-2147037420);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (-2147037420);
      longArray2[1] = (-782L);
      longArray2[2] = (-921L);
      longArray2[3] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-782L);
      longArray3[1] = (-782L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (long) 213;
      longArray4[1] = (long) 2145031649;
      longArray4[2] = (-782L);
      longArray4[3] = (long) 213;
      longArray4[4] = (-402L);
      longArray4[5] = (long) 2145031649;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,085 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Double double0 = new Double(1050.21);
      assertEquals(1050.21, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 8;
      Integer integer0 = new Integer(8);
      assertEquals(8, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1719));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1719), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(8);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(8, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-1719));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals((-1719), (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = Integer.valueOf(213);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(213, (int)integer4);
      assertNotNull(integer4);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-3085), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[1] = 1.0;
      double double0 = MathArrays.linearCombination(0.0, 0.0, 1.0, 0.0, 1.1261751313608276E7, 0.0, 0.0, (-10.753507270072));
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3069.8258;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {3069.8258, 20.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {3069.8258, 20.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      assertEquals(3, doubleArray0.length);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertArrayEquals(new double[] {3069.8258, 20.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 336;
      intArray0[1] = (-2312);
      intArray0[2] = (-1612);
      intArray0[3] = 152;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {336, (-2312), (-1612), 152}, intArray0);
      assertEquals(0, int0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 152);
      assertEquals(4, intArray0.length);
      assertEquals(152, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {336, (-2312), (-1612), 152}, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2748.904257;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3589.093481705862;
      doubleArray0[3] = 2748.904257;
      doubleArray0[4] = Double.NaN;
      doubleArray0[0] = (-1.0);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = Double.NaN;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2930;
      intArray0[1] = 2484;
      intArray0[2] = (-3863);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2930, 2484, (-3863)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 471.31533246643);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-0.07438691614222338), (-0.07438691614222338), 266.9815958502545, 204.4825104484599, Double.NaN, 0.0, 0.0, 0.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 3589.093481705862, 2748.904257, Double.NaN, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      int int0 = (-862);
      intArray0[0] = (-862);
      int int1 = 2932;
      intArray0[1] = 2932;
      intArray0[2] = 2894;
      intArray0[3] = 134217729;
      int int2 = 2933;
      intArray0[4] = 2933;
      int int3 = 3;
      intArray0[5] = 3;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-862), 2932, 2894, 134217729, 2933, 3}, intArray0);
      assertArrayEquals(new int[] {(-862), 2932, 2894, 134217729, 2933, 3}, intArray1);
      assertNotNull(intArray1);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-862);
      doubleArray2[1] = (double) 2932;
      doubleArray2[2] = (double) 134217729;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2756.6117636539925;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3589.093481705862;
      doubleArray0[3] = 2756.6117636539925;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-1.0);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {2756.6117636539925, (-1.0), 3589.093481705862, 2756.6117636539925, Double.NaN, (-1.0), 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 50;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 50;
      intArray1[1] = 2;
      intArray1[2] = 1;
      intArray1[3] = 50;
      intArray1[4] = 2;
      intArray1[5] = 2;
      intArray1[6] = 50;
      intArray1[7] = (-361);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(3, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {50, 2, 1, 50, 2, 2, 50, (-361)}, intArray1);
      assertArrayEquals(new int[] {2, 1, 50}, intArray0);
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1159.0555F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1915.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 204.1351F;
      floatArray0[5] = 895.7F;
      floatArray0[6] = 808.254F;
      floatArray0[7] = (-452.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1159.0555F), 1.0F, 1915.0F, 0.0F, 204.1351F, 895.7F, 808.254F, (-452.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1159.0555F), 1.0F, 1915.0F, 0.0F, 204.1351F, 895.7F, 808.254F, (-452.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-574.182211);
      doubleArray0[1] = 1890.1025945809072;
      Integer integer0 = new Integer((-2147037420));
      assertEquals((-2147037420), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-3085));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-3085), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2145031649);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(2145031649, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(2145031649);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(2145031649, (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = Integer.valueOf(213);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(213, (int)integer4);
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(239);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertEquals(239, (int)integer5);
      assertNotNull(integer5);
      
      Integer integer6 = new Integer(239);
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertEquals(239, (int)integer6);
      assertNotNull(integer6);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer7 = new Integer((-2253));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertEquals((-2253), (int)integer7);
      assertNotNull(integer7);
      
      integerArray0[0] = integer7;
      integerArray0[1] = integer1;
      integerArray0[2] = integer6;
      integerArray0[3] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, integerArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 239;
      doubleArray1[1] = (double) (int)integerArray0[3];
      doubleArray1[2] = (-574.182211);
      doubleArray1[3] = (double) (-3085);
      doubleArray1[4] = (-574.182211);
      doubleArray1[5] = (double) (int)integerArray0[2];
      doubleArray1[6] = (-574.182211);
      boolean boolean1 = MathArrays.equals(doubleArray1, (double[]) null);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {239.0, (-3085.0), (-574.182211), (-3085.0), (-574.182211), 239.0, (-574.182211)}, doubleArray1, 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double double0 = new Double(1050.21);
      assertEquals(1050.21, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1050.21;
      doubleArray0[1] = (-377.891687378835);
      doubleArray0[2] = 3023.24469022538;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1050.21, (-377.891687378835), 3023.24469022538}, doubleArray0, 0.01);
      assertEquals(1.0385751628465977E7, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {3023.24469022538, 1050.21, (-377.891687378835)}, doubleArray0, 0.01);
      
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {3023.24469022538, 1050.21, (-377.891687378835)}, doubleArray0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {3023.24469022538, 1050.21, (-377.891687378835)}, doubleArray0, 0.01);
      assertEquals(3222.693225931686, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double double0 = MathArrays.linearCombination((double) 0L, (double) 0L, (double) 0L, (double) 0L);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      int int1 = 1;
      Integer integer2 = new Integer(1);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(1, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-552));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-552), (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(3760);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int1));
      assertEquals(3760, (int)integer4);
      assertNotNull(integer4);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, integerArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (-3.9986783938944604E-8);
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, (-3.9986783938944604E-8)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1050.21);
      assertEquals(1050.21, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1515.24567766726;
      MathArrays.checkPositive(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1515.24567766726}, doubleArray1, 0.01);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2948, 2948);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3017.684747517196);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-3017.684747517196), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.902613872022698);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3017.684747517196), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.902613872022698, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 323208.0;
      doubleArray0[1] = 2.7553817452272217E-6;
      doubleArray0[2] = (-854.0);
      doubleArray0[3] = Double.NaN;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -854 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      assertEquals(4, doubleArray0.length);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1890.1025945809072, (-182.126093275), 0.902613872022698, (-3355.853291431), 1890.1025945809072, 0.902613872022698, (-3355.853291431), (-574.182211));
      assertEquals(1581311.2543136135, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1222);
      intArray0[1] = 3726;
      intArray0[2] = (-4345);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1222), 3726, (-4345)}, intArray0);
      assertEquals(0, int0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3726;
      intArray1[1] = (-1222);
      intArray1[2] = (-4345);
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = (-4345);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = (double) (-402L);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1909);
      intArray0[1] = (-1909);
      intArray0[2] = (-4345);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1909), (-1909), (-4345)}, intArray0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "L:rM)";
      stringArray0[1] = "w21Bf~AW(q;";
      stringArray0[2] = "~Pbh!uA'l`C";
      stringArray0[3] = "amR?v@ZL@&a\"[Yk";
      stringArray0[4] = "";
      stringArray0[5] = "INCREASING";
      stringArray0[6] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[][] longArray0 = new long[1][4];
      long[] longArray1 = new long[7];
      longArray1[0] = (-402L);
      longArray1[1] = (-402L);
      longArray1[2] = (-402L);
      longArray1[3] = (long) (-4345);
      longArray1[4] = (long) (-4345);
      longArray1[5] = (long) 0;
      longArray1[6] = (long) (-4345);
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -402 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1050.21);
      assertEquals(1050.21, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(3, doubleArray0.length);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (double) doubleArray0[0];
      doubleArray1[2] = (double) doubleArray0[0];
      doubleArray1[3] = 1050.21;
      doubleArray1[4] = (double) doubleArray0[2];
      doubleArray1[5] = (double) doubleArray0[0];
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (double) doubleArray0[0];
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 2100.42, 2100.42, 2100.42, 0.0, 2100.42, 0.0, 2100.42}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 1050.21, 1050.21, 1050.21, 0.0, 1050.21, 0.0, 1050.21}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1280), (-3009));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-574.182211);
      doubleArray0[1] = 1890.1025945809072;
      double double0 = (-1.0);
      double double1 = MathArrays.linearCombination(3698.17693, 256.1219, (-574.182211), (-1.0), (-3355.853291431), 1144.59, (-574.182211), 1890.1025945809072);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-3978581.121553543), double1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-574.182211), 1890.1025945809072, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {(-574.182211), 1890.1025945809072, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3902173.029470326, double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2146601264);
      intArray0[1] = 134217729;
      intArray0[2] = 1;
      int int0 = (-1074);
      intArray0[3] = (-1074);
      intArray0[4] = 271;
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {(-2146601264), 134217729, 1, (-1074), 271}, intArray0);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1074);
      double[] doubleArray1 = MathArrays.scale(134217729, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1074.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.44149840946E11)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[0][5];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 134217729;
      doubleArray2[1] = (double) 271;
      doubleArray2[2] = (double) (-2146601264);
      doubleArray2[3] = (double) 271;
      doubleArray2[4] = (double) (-1074);
      doubleArray2[5] = (double) (-1074);
      double[] doubleArray3 = MathArrays.scale(1.34217729E8, doubleArray2);
      assertEquals(6, doubleArray3.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.801439877791744E16, 3.6373004559E10, (-2.88111946722609472E17), 3.6373004559E10, (-1.44149840946E11), (-1.44149840946E11)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 271.0, (-2.146601264E9), 271.0, (-1074.0), (-1074.0)}, doubleArray2, 0.01);
      assertNotNull(doubleArray3);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 271);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3355.853291431);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 510.0965961860435;
      doubleArray0[6] = 1633.75076463059;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 0.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 0.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 0.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 0.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.1265107166899707E7), 0.0, 0.0, 0.0, 0.0, (-259688.44084440146), (-2667507.810166407)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      boolean boolean2 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Double[] doubleArray3 = new Double[4];
      doubleArray3[0] = (Double) 1.0;
      doubleArray3[1] = (Double) 1.0;
      doubleArray3[2] = (Double) 510.0965961860435;
      doubleArray3[3] = (Double) 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean3 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, false);
      assertEquals(4, doubleArray3.length);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray4.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 0.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1258395460316844E7, 0.0, 2.0, 0.0, 2.0, 260708.63403677355, 2670775.3116956684}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 0.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertNotNull(doubleArray4);
      
      double[] doubleArray5 = MathArrays.scale((-226.6), doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray5.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 0.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {760436.3558382646, -0.0, (-226.6), -0.0, (-226.6), (-115587.88869575746), (-370207.9232652917)}, doubleArray5, 0.01);
      assertNotNull(doubleArray5);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean4 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-799);
      intArray0[1] = 240;
      intArray0[2] = 1640;
      intArray0[3] = 2061;
      intArray0[4] = (-79);
      intArray0[5] = (-2140944430);
      intArray0[6] = 244;
      intArray0[7] = 5000;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2061;
      intArray1[1] = 5000;
      intArray1[2] = 1640;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1050.21);
      assertEquals(1050.21, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (double) doubleArray0[0];
      doubleArray1[2] = (double) doubleArray0[0];
      doubleArray1[3] = 1050.21;
      doubleArray1[4] = (double) doubleArray0[2];
      doubleArray1[5] = (double) doubleArray0[0];
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (double) doubleArray0[0];
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 2100.42, 2100.42, 2100.42, 0.0, 2100.42, 0.0, 2100.42}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 1050.21, 1050.21, 1050.21, 0.0, 1050.21, 0.0, 1050.21}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1280), (-3009));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-574.182211);
      doubleArray1[5] = doubleArray2;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 510.0965961860435;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 510.0965961860435;
      doubleArray1[1] = 1633.75076463059;
      doubleArray1[2] = 510.0965961860435;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-574.182211);
      doubleArray0[1] = 1890.1025945809072;
      Integer integer0 = new Integer(2145031649);
      assertEquals(2145031649, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2145609082);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2145609082, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(213);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(213, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(213);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(213, (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(2145031649);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertEquals(2145031649, (int)integer4);
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(239);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertEquals(239, (int)integer5);
      assertNotNull(integer5);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-574.182211), 1890.1025945809072, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2145609082;
      intArray0[1] = 14;
      intArray0[2] = 8;
      intArray0[3] = 11;
      intArray0[4] = 14;
      intArray0[5] = 14;
      intArray0[6] = (-4104);
      intArray0[7] = 2145609082;
      intArray0[8] = 8;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new int[] {2145609082, 14, 8, 11, 14, 14, (-4104), 2145609082, 8}, intArray0);
      assertEquals(0.0, double2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3355.853291431);
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3355.853291431, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) (-3355.853291431);
      doubleArray1[1] = (Double) (-3355.853291431);
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) (-3355.853291431);
      doubleArray1[4] = (Double) (-3355.853291431);
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) (-3355.853291431);
      doubleArray1[7] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1050.21);
      assertEquals(1050.21, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double double1 = 0.0;
      Double double2 = new Double(0.0);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[1] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(3, doubleArray0.length);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[2] = double3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "*f7ST%&MFw8p L>H";
      stringArray0[1] = "yhYbo9Fz0^";
      stringArray0[2] = "yhYbo9Fz0^";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      assertEquals(3, stringArray0.length);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (double) doubleArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-574.182211);
      doubleArray0[1] = 1890.1025945809072;
      Integer integer0 = new Integer((-2147037370));
      assertEquals((-2147037370), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-3085));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-3085), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2145031649);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(2145031649, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(2145031649);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(2145031649, (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = Integer.valueOf(213);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(213, (int)integer4);
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(239);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals(239, (int)integer5);
      assertNotNull(integer5);
      
      Integer integer6 = new Integer(239);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer5));
      assertEquals(239, (int)integer6);
      assertNotNull(integer6);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer7 = new Integer((-2253));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertEquals((-2253), (int)integer7);
      assertNotNull(integer7);
      
      integerArray0[0] = integer7;
      integerArray0[1] = integer1;
      integerArray0[2] = integer6;
      integerArray0[3] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, integerArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3355.853291431);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3355.853291431, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[21];
      stringArray0[0] = "*f7ST%&MFw8p L>H";
      stringArray0[1] = "CANNOT_SET_AT_NEGATIVE_INDEX";
      stringArray0[2] = "*f7ST%&MFw8p L>H";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(21, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 323208.0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {323208.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double2 = MathArrays.linearCombination(2748.904257, 1843.8305200894, 462.020604897024, (-0.0013888888689039883));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(5068512.924165, double2, 0.01);
      
      double double3 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {323208.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(326563.853291431, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1976.213);
      doubleArray0[1] = 3023.24469022538;
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 3023.24469022538;
      doubleArray1[1] = (Double) (-1976.213);
      doubleArray1[2] = (Double) 3023.24469022538;
      doubleArray1[3] = (Double) 3023.24469022538;
      doubleArray1[4] = (Double) 3023.24469022538;
      doubleArray1[5] = (Double) 3023.24469022538;
      doubleArray1[6] = (Double) 3023.24469022538;
      doubleArray1[7] = (Double) 3023.24469022538;
      doubleArray1[8] = (Double) 3023.24469022538;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertEquals(9, doubleArray1.length);
      assertFalse(boolean0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray2);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3017.684747517196);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 2748.904257;
      doubleArray0[6] = 1144.59;
      doubleArray0[7] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-3017.684747517196), 0.0, 0.0, Double.NaN, (-1.0), 2748.904257, 1144.59, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-3017.684747517196), 0.0, 0.0, Double.NaN, (-1.0), 2748.904257, 1144.59, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      stringArray0[0] = "*f7ST%&MFw8p L>H";
      stringArray0[1] = "@D.m/NMNbS(H$AkHEz";
      stringArray0[2] = "CANNOT_SET_AT_NEGATIVE_INDEX";
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) (-3017.684747517196);
      doubleArray1[1] = (Double) (-3017.684747517196);
      doubleArray1[2] = (Double) Double.NaN;
      doubleArray1[3] = (Double) (-3017.684747517196);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(4, doubleArray1.length);
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3017.684747517196), 0.0, 0.0, Double.NaN, (-1.0), 2748.904257, 1144.59, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-6035.369495034392), 0.0, 0.0, Double.NaN, (-2.0), 5497.808514, 2289.18, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {(-3017.684747517196), 0.0, 0.0, Double.NaN, (-1.0), 2748.904257, 1144.59, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-6035.369495034392), 0.0, 0.0, Double.NaN, (-2.0), 5497.808514, 2289.18, 0.0}, doubleArray2, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      long[][] longArray0 = new long[9][1];
      long[] longArray1 = new long[3];
      longArray1[0] = 4499201580859392L;
      longArray1[1] = (-215L);
      longArray1[2] = (-2169L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-2169L);
      longArray3[1] = (-2169L);
      longArray3[2] = 4499201580859392L;
      longArray3[3] = (-215L);
      longArray3[4] = (-2169L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-215L);
      longArray4[1] = 4499201580859392L;
      longArray4[2] = 4499201580859392L;
      longArray4[3] = (-215L);
      longArray4[4] = (-2169L);
      longArray4[5] = (-2169L);
      longArray4[6] = 4499201580859392L;
      longArray4[7] = (-2169L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = (-215L);
      longArray5[1] = (-215L);
      longArray5[2] = 4499201580859392L;
      longArray5[3] = (-215L);
      longArray5[4] = (-215L);
      longArray5[5] = (-215L);
      longArray5[6] = 4499201580859392L;
      longArray5[7] = 4499201580859392L;
      longArray5[8] = (-215L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = 4499201580859392L;
      longArray6[1] = (-2169L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      
      longArray0[6] = longArray7;
      long[] longArray8 = new long[3];
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray4));
      
      longArray8[0] = (-2169L);
      longArray8[1] = 4499201580859392L;
      longArray8[2] = 4499201580859392L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[3];
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray3));
      
      longArray9[0] = (-215L);
      longArray9[1] = 4499201580859392L;
      longArray9[2] = (-215L);
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double double0 = new Double(3069.8258);
      assertEquals(3069.8258, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1167.6));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1167.6), (double)double1, 0.01);
      assertNotNull(double1);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1727.272782;
      doubleArray0[1] = 3069.8258;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 3069.8258}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 3069.8258}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.scale(1315.9203835809071, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 3069.8258}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1315.9203835809071}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      
      double double2 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 3069.8258}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 3069.8258}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1315.9203835809071}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 20.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-180.24);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1032.6656881);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-2447.830356578);
      doubleArray0[7] = 100.0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-551.2592F);
      floatArray0[1] = 1629.84F;
      floatArray0[2] = (-1715.6719F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-551.2592F), 1629.84F, (-1715.6719F), 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-180.24), 0.0, (-1032.6656881), Double.NaN, 0.0, 1.0, (-2447.830356578), 100.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 945.9F;
      floatArray0[1] = (-48.9246F);
      floatArray0[2] = 4151.57F;
      floatArray0[3] = 0.0F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-1459.0271F);
      floatArray1[2] = (-48.9246F);
      floatArray1[3] = (-48.9246F);
      floatArray1[4] = (-48.9246F);
      floatArray1[5] = 4151.57F;
      floatArray1[6] = (-48.9246F);
      floatArray1[7] = 945.9F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {945.9F, (-48.9246F), 4151.57F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1459.0271F), (-48.9246F), (-48.9246F), (-48.9246F), 4151.57F, (-48.9246F), 945.9F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      
      double double0 = MathArrays.linearCombination((double) (-1459.0271F), 2351.18, 1914.1160875024655, 3023.24469022538, (-1844.9661009862282), (-285.47));
      assertEquals(2883088.434805776, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1914.1160875024655, (double) 0.0F, (double) (-48.9246F), 821.23668, 1914.1160875024655, (double) (-48.9246F));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-133826.0364361637), double1, 0.01);
      
      long[][] longArray0 = new long[4][6];
      long[] longArray1 = new long[3];
      longArray1[0] = (-782L);
      longArray1[1] = (-4811L);
      longArray1[2] = 239L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-4811L);
      longArray4[1] = 239L;
      longArray4[2] = (-4811L);
      longArray4[3] = 239L;
      longArray4[4] = (-4811L);
      longArray4[5] = (-782L);
      longArray4[6] = 1073741824L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -782 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "yhYbo9Fz0^";
      stringArray0[1] = "yhYbo9Fz0^";
      stringArray0[2] = "*f7ST%&MFw8p L>H";
      stringArray0[3] = "CANNOT_SET_AT_NEGATIVE_INDEX";
      stringArray0[4] = "yhYbo9Fz0^";
      stringArray0[5] = "@D.m/NMNbS(H$AkHEz";
      stringArray0[6] = ": ";
      stringArray0[7] = "CANNOT_SET_AT_NEGATIVE_INDEX";
      stringArray0[8] = "yhYbo9Fz0^";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 1.304E19);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1976.213);
      doubleArray0[1] = 3023.24469022538;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3158.1589915194;
      doubleArray0[4] = (-379.2692);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1976.213), 3023.24469022538, 0.0, 3158.1589915194, (-379.2692)}, doubleArray0, 0.01);
      assertEquals(2.3163239620128427E7, double0, 0.01);
      
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1976.213), 3023.24469022538, 0.0, 3158.1589915194, (-379.2692)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3905417.821369, (-1.1949150918008737E7), 9140008.456975954, (-1.2482389710215056E7), 2.0594808251076333E7, (-2293247.1901320554), 9973968.215714833, (-2395584.8683727393), 143845.12606864}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1976.213), 3023.24469022538, 0.0, 3158.1589915194, (-379.2692)}, doubleArray0, 0.01);
      assertEquals(4812.820339481666, double1, 0.01);
      
      double double2 = MathArrays.linearCombination((-1976.213), (-3355.853291431), 1.34217729E8, 3.834E-20, Double.NaN, 3158.1589915194);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-2145698778);
      intArray0[2] = 193;
      intArray0[3] = (-120);
      intArray0[4] = 4;
      intArray0[5] = 3;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1024);
      assertEquals(1024, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-2145698778), 193, (-120), 4, 3}, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-574.182211);
      doubleArray0[1] = 1890.1025945809072;
      double double0 = MathArrays.linearCombination(3698.17693, 256.1219, (-574.182211), (-1.0), (-3355.853291431), 1144.59, (-574.182211), 447.8538378842786);
      assertEquals((-3150467.5416214718), double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3726;
      intArray0[1] = (-1909);
      intArray0[2] = (-4345);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {3726, (-1909), (-4345)}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3726;
      doubleArray1[1] = (-3150467.5416214718);
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-574.182211), 1890.1025945809072, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3726.0, (-3150467.5416214718)}, doubleArray1, 0.01);
      assertEquals(3152357.6442160527, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[4][5];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double double0 = MathArrays.linearCombination((double) 0L, (double) 0L, (double) 0L, (double) 0L);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 0L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      long[][] longArray1 = new long[2][7];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(2, longArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      long[][] longArray2 = new long[20][1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = longArray0;
      longArray2[1] = longArray0;
      longArray2[2] = longArray0;
      longArray2[3] = longArray0;
      longArray2[4] = longArray0;
      longArray2[5] = longArray0;
      longArray2[6] = longArray0;
      MathArrays.checkRectangular(longArray2);
      assertEquals(20, longArray2.length);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 259L;
      longArray0[1] = 259L;
      longArray0[2] = 0L;
      longArray0[3] = (-402L);
      longArray0[6] = 0L;
      Integer integer0 = Integer.valueOf((-231));
      assertEquals((-231), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2145764090);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2145764090, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(1651);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1651, (int)integer2);
      assertNotNull(integer2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer2;
      integerArray0[3] = integer1;
      integerArray0[4] = integer2;
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer1;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, integerArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 259L;
      doubleArray0[1] = (double) (int)integerArray0[0];
      MathArrays.checkOrder(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {259.0, 2.14576409E9}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) integerArray0[8];
      intArray0[1] = (int) integerArray0[6];
      intArray0[2] = (-762);
      intArray0[3] = (-231);
      intArray0[4] = 2145764090;
      intArray0[5] = (int) integerArray0[5];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2145764090, (-231), (-762), (-231), 2145764090, 2145764090}, intArray1);
      assertArrayEquals(new int[] {2145764090, (-231), (-762), (-231), 2145764090, 2145764090}, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3355.853291431);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 510.0965961860435;
      doubleArray0[6] = 1633.75076463059;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.1265107166899707E7), 0.0, 0.0, 0.0, 0.0, (-259688.44084440146), (-2667507.810166407)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertFalse(boolean2);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.1265107166899707E7), 0.0, 0.0, 0.0, 0.0, (-259688.44084440146), (-2667507.810166407)}, doubleArray2, 0.01);
      assertEquals(3.33135378501023E10, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(13, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.1265107166899707E7), 0.0, 0.0, 0.0, 0.0, (-259688.44084440146), (-2667507.810166407)}, doubleArray2, 0.01);
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2147037370));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-2147037370), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1788));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1788), (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(134217729);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(134217729, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(15);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(15, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      double double1 = MathArrays.distance(doubleArray0, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.1265107166899707E7), 0.0, 0.0, 0.0, 0.0, (-259688.44084440146), (-2667507.810166407)}, doubleArray2, 0.01);
      assertEquals(1.1576660252453482E7, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-745);
      intArray0[1] = 412;
      intArray0[2] = (-1476);
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1476);
      doubleArray0[1] = (double) 412;
      doubleArray0[2] = (double) 412;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1476.0), 412.0, 412.0}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 412;
      integerArray0[1] = (Integer) (-745);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, false);
      assertEquals(2, integerArray0.length);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection2, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (412 >= 412)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1976.213);
      doubleArray0[1] = 3023.24469022538;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3158.1589915194;
      doubleArray0[4] = (-379.2692);
      double double0 = 1.883511811213715E-8;
      double double1 = MathArrays.linearCombination((-1885.802541904887), 1.883511811213715E-8, 0.0, 3023.24469022538);
      assertEquals(double1, double0, 0.01);
      assertEquals((-3.5519313612947016E-5), double1, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1976.213), 3023.24469022538, 0.0, 3158.1589915194, (-379.2692)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1976.213), 3023.24469022538, 0.0, 3158.1589915194, (-379.2692)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 259L;
      longArray0[1] = (-402L);
      longArray0[2] = 0L;
      longArray0[3] = (-402L);
      longArray0[4] = 0L;
      long long0 = 1251L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = (double) 1251L;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {3.141592653589793, 1251.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3355.853291431);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 510.0965961860435;
      doubleArray0[6] = 1633.75076463059;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.1265107166899707E7), 0.0, 0.0, 0.0, 0.0, (-259688.44084440146), (-2667507.810166407)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertFalse(boolean2);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.1265107166899707E7), 0.0, 0.0, 0.0, 0.0, (-259688.44084440146), (-2667507.810166407)}, doubleArray2, 0.01);
      assertEquals(3.33135378501023E10, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(13, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.1265107166899707E7), 0.0, 0.0, 0.0, 0.0, (-259688.44084440146), (-2667507.810166407)}, doubleArray2, 0.01);
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      
      double double1 = MathArrays.linearCombination((-2100.8394837), 1.0, (-1.0), (-1195.1318250984903), (-3355.853291431), (-665.787394), (-1.0), (-2433.4725096304));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2235812.5823991965, double1, 0.01);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1.3502735275311684), (-1.3502735275311684), (-1.3502735275311684), 974.07257058);
      assertEquals((-1313.4411673492582), double0, 0.01);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1011));
      assertEquals((-1011), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 974.07257058);
      assertEquals(0.0, double0, 0.01);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1011));
      assertEquals((-1011), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1305.93853635);
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, (-1305.93853635), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = false;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (1 > -1,305.939)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2057.8367F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2057.8367F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 2057.8367F;
      floatArray1[1] = 2057.8367F;
      floatArray1[2] = 2057.8367F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {2057.8367F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2057.8367F, 2057.8367F, 2057.8367F}, floatArray1, 0.01F);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.0, 1.0, 1.0, 1.0, 1.0, 184.7376);
      assertEquals(186.7376, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-945.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-945.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(boolean0);
      
      int int0 = 287;
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-395);
      intArray1[1] = 287;
      intArray1[2] = 0;
      intArray1[3] = 0;
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-395), 287, 0, 0}, intArray1);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Double double0 = new Double(1050.21);
      assertEquals(1050.21, (double)double0, 0.01);
      assertNotNull(double0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) 8;
      floatArray0[2] = (float) 11;
      floatArray0[3] = (float) 11;
      floatArray0[4] = (float) 11;
      floatArray0[5] = (float) 11;
      floatArray0[6] = (float) 11;
      floatArray0[7] = (float) 8;
      floatArray0[8] = (float) 8;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {8.0F, 8.0F, 11.0F, 11.0F, 11.0F, 11.0F, 11.0F, 8.0F, 8.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      long[][] longArray0 = new long[0][9];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 8.0F;
      double[] doubleArray1 = MathArrays.scale(774.5064348, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6196.0514784}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {8.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 8.0F);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {8.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {8.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 974.07257058);
      assertEquals(0.0, double0, 0.01);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1011));
      assertEquals((-1011), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1248.8295);
      doubleArray0[1] = (double) (int)integerArray0[0];
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((-5909.741635554), 0.0, (-5.0), 0.1246747374534607, 1.34217729E8, (-3971.522363668039), 1.34217729E8, 0.041666666666621166);
      assertEquals((-5.330431199194847E11), double0, 0.01);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 974.07257058);
      assertEquals(0.0, double0, 0.01);
      
      Integer[] integerArray0 = new Integer[1];
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.linearCombination((-472.68), 2304.00793, 1.0, 1.0, 2304.00793, 2304.00793);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4219395.073150486, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (-1976.213);
      doubleArray0[1] = 3023.24469022538;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3158.1589915194;
      doubleArray0[4] = (-379.2692);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(17, doubleArray0.length);
      assertEquals(2.3163239620128427E7, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(17, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = 3338;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3338;
      intArray1[1] = (-1753);
      intArray1[2] = 0;
      intArray1[3] = (-1753);
      intArray1[4] = (-1753);
      intArray1[5] = 19;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-745);
      intArray0[1] = 412;
      intArray0[2] = (-1476);
      intArray0[3] = 0;
      intArray0[4] = (-717);
      intArray0[5] = (-3985);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-745), 412, (-1476), 0, (-717), (-3985)}, intArray0);
      assertArrayEquals(new int[] {(-745), 412, (-1476), 0, (-717), (-3985)}, intArray1);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      double double0 = MathArrays.linearCombination(0.0, 0.902613872022698, (-3044.66961), (double) (-745), (double) 0, (double) (-3985), (-327.40070326798), (-3.08136));
      assertEquals(2269287.6988810217, double0, 0.01);
      
      int int0 = MathArrays.distanceInf(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-745), 412, (-1476), 0, (-717), (-3985)}, intArray0);
      assertArrayEquals(new int[] {(-745), 412, (-1476), 0, (-717), (-3985)}, intArray1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-745);
      intArray0[1] = 412;
      intArray0[2] = (-1476);
      intArray0[3] = 0;
      intArray0[4] = (-717);
      intArray0[5] = (-3985);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-745), 412, (-1476), 0, (-717), (-3985)}, intArray0);
      assertArrayEquals(new int[] {(-745), 412, (-1476), 0, (-717), (-3985)}, intArray1);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 412;
      doubleArray0[2] = (double) (-3985);
      doubleArray0[3] = (double) (-3985);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-3985);
      doubleArray0[6] = (double) (-745);
      double[][] doubleArray1 = new double[4][6];
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3355.853291431);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 510.0965961860435;
      doubleArray0[6] = 1633.75076463059;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.1265107166899707E7), 0.0, 0.0, 0.0, 0.0, (-259688.44084440146), (-2667507.810166407)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertFalse(boolean2);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.1265107166899707E7), 0.0, 0.0, 0.0, 0.0, (-259688.44084440146), (-2667507.810166407)}, doubleArray2, 0.01);
      assertEquals(3.33135378501023E10, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(13, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.1265107166899707E7), 0.0, 0.0, 0.0, 0.0, (-259688.44084440146), (-2667507.810166407)}, doubleArray2, 0.01);
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 1.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 1.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2147037370));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-2147037370), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1788));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-1788), (int)integer2);
      assertNotNull(integer2);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,355.853 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 259L;
      longArray0[1] = 259L;
      longArray0[2] = 0L;
      longArray0[3] = (-402L);
      longArray0[6] = 0L;
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 2;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 2, 0, 2, 2, 2, 2}, intArray0);
      assertEquals(0, int0);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {2, 2, 2, 0, 2, 2, 2, 2}, intArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3017.684747517196);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-1.3704671429558426);
      doubleArray0[5] = 2748.904257;
      doubleArray0[6] = 1144.59;
      doubleArray0[7] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-3017.684747517196), 0.0, 0.0, Double.NaN, (-1.3704671429558426), 2748.904257, 1144.59, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-3017.684747517196), 0.0, 0.0, Double.NaN, (-1.3704671429558426), 2748.904257, 1144.59, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2708));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-745);
      intArray0[1] = 412;
      intArray0[2] = (-1476);
      intArray0[3] = 0;
      intArray0[4] = (-717);
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(2.14576409E9);
      assertEquals(2.14576409E9, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-402.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-402.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(2.14576409E9);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(2.14576409E9, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1251.0);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(1251.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(2.14576409E9);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals(2.14576409E9, (double)double4, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 1251.0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (-402.0);
      doubleArray1[4] = (double) (-1476);
      doubleArray1[5] = (double) doubleArray0[0];
      doubleArray1[6] = (double) doubleArray0[2];
      doubleArray1[7] = (double) 412;
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 1251.0, 0.0, (-402.0), (-1476.0), 2.14576409E9, 2.14576409E9, 412.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2502.0, 0.0, (-804.0), (-2952.0), 4.29152818E9, 4.29152818E9, 824.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double double0 = MathArrays.linearCombination((double) 0L, (double) 0L, (double) 0L, (double) 0L);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) 0L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      long[][] longArray1 = new long[2][7];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1195.1318250984903);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 6.283185307179586);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, (-1195.1318250984903)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 6.283185307179586}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      long[][] longArray0 = new long[4][3];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-991L);
      longArray2[1] = 0L;
      longArray2[2] = 9007199254740990L;
      longArray2[3] = (-574L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-991L);
      longArray3[1] = 0L;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "<qq&M-.`j!R?>mAzp";
      stringArray0[1] = "INCREASING";
      stringArray0[2] = "<qq&M-.`j!R?>mAzp";
      stringArray0[3] = "<qq&M-.`j!R?>mAzp";
      stringArray0[4] = "<qq&M-.`j!R?>mAzp";
      stringArray0[5] = "<qq&M-.`j!R?>mAzp";
      stringArray0[6] = "<qq&M-.`j!R?>mAzp";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2145335603;
      intArray0[1] = 19;
      intArray0[2] = (-2145318844);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2145335603, 19, (-2145318844)}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1976.213);
      doubleArray0[1] = 3023.24469022538;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3158.1589915194;
      doubleArray0[4] = (-379.2692);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1976.213), 3023.24469022538, 0.0, 3158.1589915194, (-379.2692)}, doubleArray0, 0.01);
      assertEquals(2.3163239620128427E7, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1976.213), 3023.24469022538, 0.0, 3158.1589915194, (-379.2692)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1976.213), 3023.24469022538, 0.0, 3158.1589915194, (-379.2692)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[][] longArray0 = new long[8][4];
      long[] longArray1 = new long[4];
      longArray1[0] = 0L;
      longArray1[1] = 1L;
      longArray1[2] = (-1073741824L);
      longArray1[3] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1L;
      longArray2[1] = 0L;
      longArray2[2] = (-1L);
      longArray2[3] = (-1073741824L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-1073741824L);
      longArray3[1] = 1L;
      longArray3[2] = (-1073741824L);
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-1L);
      longArray4[1] = (-1073741824L);
      longArray4[2] = (-1L);
      longArray4[3] = 0L;
      longArray4[4] = 0L;
      longArray4[5] = 1L;
      longArray4[6] = 0L;
      longArray4[7] = 1L;
      longArray4[8] = (-1L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = 1L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = 0L;
      longArray6[1] = 0L;
      longArray6[2] = 0L;
      longArray6[3] = 0L;
      longArray6[4] = 1L;
      longArray6[5] = 1L;
      longArray6[6] = 1L;
      longArray6[7] = (-1L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      
      longArray0[6] = longArray7;
      long[] longArray8 = new long[9];
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray3));
      
      longArray8[0] = (-1073741824L);
      longArray8[1] = 0L;
      longArray8[2] = 0L;
      longArray8[3] = 0L;
      longArray8[4] = 0L;
      longArray8[5] = 1L;
      longArray8[6] = (-1L);
      longArray8[7] = (-1L);
      longArray8[8] = 0L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = (-327.40070326798);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 131.79420389;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1757.77300258;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, (-327.40070326798), 0.0, 0.0, 131.79420389, 0.0, 0.0, 1757.77300258}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, (-327.40070326798), 0.0, 0.0, 131.79420389, 0.0, 0.0, 1757.77300258}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 259L;
      longArray0[1] = 259L;
      longArray0[2] = 0L;
      longArray0[3] = (-402L);
      longArray0[6] = 0L;
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = (double) (-402L);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-402L);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(22, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 14;
      intArray0[1] = 2145609082;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {14, 2145609082}, intArray0);
      assertEquals(0.0, double1, 0.01);
      
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -402 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2708));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.linearCombination(974.07257058, 974.07257058, 974.07257058, 974.07257058);
      assertEquals(1897634.7455126583, double0, 0.01);
      
      Integer integer0 = new Integer((-1011));
      assertEquals((-1011), (int)integer0);
      assertNotNull(integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[6] = integer0;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Double>> field0 = (Field<Pair<Integer, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Pair<Integer, Double>[][] pairArray0 = MathArrays.buildArray(field0, 0, 0);
      assertEquals(0, pairArray0.length);
      assertNotNull(pairArray0);
      
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3355.853291431);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 510.0965961860435;
      doubleArray0[6] = 1633.75076463059;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 0.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 0.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 0.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 0.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.1265107166899707E7), 0.0, 0.0, 0.0, 0.0, (-259688.44084440146), (-2667507.810166407)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      boolean boolean2 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 0.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 0.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertFalse(boolean3);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 0.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 0.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.1265107166899707E7), 0.0, 0.0, 0.0, 0.0, (-259688.44084440146), (-2667507.810166407)}, doubleArray2, 0.01);
      assertEquals(3.33135378501023E10, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(13, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3355.853291431), 0.0, 1.0, 0.0, 1.0, 510.0965961860435, 1633.75076463059}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1261751313608276E7, 0.0, 1.0, 0.0, 1.0, 260198.5374405875, 2669141.5609310376}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.1265107166899707E7), 0.0, 0.0, 0.0, 0.0, (-259688.44084440146), (-2667507.810166407)}, doubleArray2, 0.01);
      assertNotNull(doubleArray3);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray4 = new double[3][3];
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 1633.75076463059;
      doubleArray5[2] = 1.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 510.0965961860435;
      doubleArray5[7] = 1.0;
      doubleArray5[8] = 0.0;
      doubleArray4[0] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      
      doubleArray4[1] = doubleArray6;
      doubleArray4[2] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray3, mathArrays_OrderDirection0, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 13
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 462.020604897024;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-2066.214716481);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = -0.0;
      doubleArray0[5] = 0.0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (134,217,729 >= -2,066.215)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3017.684747517196);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 2748.904257;
      doubleArray0[6] = 1144.59;
      doubleArray0[7] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-3017.684747517196), 0.0, 0.0, Double.NaN, (-1.0), 2748.904257, 1144.59, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-3017.684747517196), 0.0, 0.0, Double.NaN, (-1.0), 2748.904257, 1144.59, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2708));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 3097.8984F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-3.4028235E38F);
      floatArray0[3] = (-2048.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {3097.8984F, 0.0F, (-3.4028235E38F), (-2048.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3097.8984F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 3097.8984F;
      doubleArray0[3] = (double) (-3.4028235E38F);
      doubleArray0[4] = 1518.4652273623;
      doubleArray0[5] = (double) (-3.4028235E38F);
      doubleArray0[6] = (double) 3097.8984F;
      doubleArray0[7] = (double) (-3.4028235E38F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3097.8984375, 0.0, 3097.8984375, (-3.4028234663852886E38), 1518.4652273623, (-3.4028234663852886E38), 3097.8984375, (-3.4028234663852886E38)}, doubleArray0, 0.01);
      assertEquals(5.8938631329669654E38, double0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2748.904257;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3589.093481705862;
      doubleArray0[3] = 2748.904257;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-1.0);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {2748.904257, (-1.0), 3589.093481705862, 2748.904257, Double.NaN, (-1.0), 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {2748.904257, (-1.0), 3589.093481705862, 2748.904257, Double.NaN, (-1.0), 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2748.904257, (-1.0), 3589.093481705862, 2748.904257, Double.NaN, (-1.0), 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5497.808514, (-2.0), 7178.186963411724, 5497.808514, Double.NaN, (-2.0), 0.0, 0.0, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double double0 = MathArrays.linearCombination((double) 0L, (double) 0L, (double) 0L, (double) 0L);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 0L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      long[][] longArray1 = new long[2][7];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(2, longArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.linearCombination((double) 0L, (-755.284083), 0.0, 3440.7563338, Double.NaN, (double) 0L);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 974.07257058);
      assertEquals(0.0, double0, 0.01);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1011));
      assertEquals((-1011), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 974.07257058;
      doubleArray0[1] = 974.07257058;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (int)integerArray0[0];
      doubleArray0[4] = 974.07257058;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {974.07257058, 974.07257058, 0.0, (-1011.0), 974.07257058}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {974.07257058, 974.07257058, 0.0, (-1011.0), 974.07257058}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1050.21);
      assertEquals(1050.21, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) doubleArray0[0];
      doubleArray1[2] = (double) doubleArray0[0];
      doubleArray1[3] = 1050.21;
      doubleArray1[4] = (double) doubleArray0[2];
      doubleArray1[5] = (double) doubleArray0[0];
      doubleArray1[7] = (double) doubleArray0[0];
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 1050.21, 1050.21, 1050.21, 0.0, 1050.21, 0.0, 1050.21}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2100.42, 2100.42, 2100.42, 0.0, 2100.42, 0.0, 2100.42}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double double3 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 1050.21, 1050.21, 1050.21, 0.0, 1050.21, 0.0, 1050.21}, doubleArray1, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2603.84F;
      floatArray0[1] = (-842.2F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-945.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {2603.84F, (-842.2F), 0.0F, (-945.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 287;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 287}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 287;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 2603.84F;
      doubleArray0[4] = (double) 0.0F;
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {287.0, 0.0, 0.0, 2603.840087890625, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (287 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 229.408;
      doubleArray0[4] = 3046.7394;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 229.408, 3046.7394}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 229.408);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 229.408, 3046.7394}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 16.063999581947993, 213.34400041805202}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 229.408;
      doubleArray0[4] = 3046.7394;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 229.408, 3046.7394}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 229.408);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 229.408, 3046.7394}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 16.063999581947993, 213.34400041805202}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double double0 = MathArrays.linearCombination(464.994155473, 464.994155473, 464.994155473, 464.994155473);
      assertEquals(432439.12924809696, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 432439.12924809696;
      doubleArray1[1] = 464.994155473;
      doubleArray1[2] = 0.0;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {432439.12924809696, 464.994155473, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 701;
      intArray0[1] = 2417;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {701, 2417}, intArray0);
      assertArrayEquals(new int[] {701, 2417}, intArray1);
      assertNotNull(intArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long[][] longArray0 = new long[8][4];
      long[] longArray1 = new long[4];
      longArray1[0] = 0L;
      longArray1[1] = 1L;
      longArray1[2] = (-1073741824L);
      longArray1[3] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1L;
      longArray2[1] = 0L;
      longArray2[2] = (-1L);
      longArray2[3] = (-1073741824L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-1073741824L);
      longArray3[1] = 1L;
      longArray3[2] = (-1073741824L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-1L);
      longArray4[1] = (-1073741824L);
      longArray4[2] = (-1L);
      longArray4[3] = 0L;
      longArray4[4] = 0L;
      longArray4[5] = 1L;
      longArray4[6] = 0L;
      longArray4[7] = 1L;
      longArray4[8] = (-1L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 1L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      
      longArray6[0] = 0L;
      longArray6[1] = 0L;
      longArray6[2] = 0L;
      longArray6[3] = 0L;
      longArray6[4] = 1L;
      longArray6[5] = 1L;
      longArray6[6] = 1L;
      longArray6[7] = (-1L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray2));
      
      longArray0[6] = longArray7;
      long[] longArray8 = new long[9];
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray4));
      
      longArray8[0] = (-1073741824L);
      longArray8[1] = 0L;
      longArray8[2] = 0L;
      longArray8[3] = 0L;
      longArray8[4] = 0L;
      longArray8[5] = 1L;
      longArray8[6] = (-1L);
      longArray8[7] = (-1L);
      longArray8[8] = 0L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 3 while others have length 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2981.0893049506);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2981.0893049506)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-4811L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (-1226L);
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,811 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1050.21);
      assertEquals(1050.21, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(3, doubleArray0.length);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) doubleArray0[0];
      doubleArray1[2] = (double) doubleArray0[0];
      doubleArray1[3] = 1050.21;
      doubleArray1[4] = (double) doubleArray0[2];
      doubleArray1[5] = (double) doubleArray0[0];
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (double) doubleArray0[0];
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 2100.42, 2100.42, 2100.42, 0.0, 2100.42, 0.0, 2100.42}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 1050.21, 1050.21, 1050.21, 0.0, 1050.21, 0.0, 1050.21}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[4][6];
      long[] longArray1 = new long[7];
      longArray1[0] = 259L;
      longArray1[1] = (-402L);
      longArray1[2] = 0L;
      longArray1[3] = (-402L);
      longArray1[4] = 0L;
      longArray1[5] = 1251L;
      longArray1[6] = (-1784L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-402L);
      longArray2[1] = 0L;
      longArray2[2] = (-402L);
      longArray2[3] = (-1784L);
      longArray2[4] = 0L;
      longArray2[5] = (-3167L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 1251L;
      longArray4[1] = 1L;
      longArray4[2] = 0L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1976.213);
      doubleArray0[1] = 3023.24469022538;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3158.1589915194;
      doubleArray0[4] = (-379.2692);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1976.213), 3023.24469022538, 0.0, 3158.1589915194, (-379.2692)}, doubleArray0, 0.01);
      assertEquals(2.3163239620128427E7, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1976.213), 3023.24469022538, 0.0, 3158.1589915194, (-379.2692)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = 3338;
      intArray0[3] = (-1753);
      intArray0[4] = 0;
      intArray0[5] = 123;
      intArray0[6] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 134217729, 3338, (-1753), 0, 123, 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, (-3968.19032023), 0.0, (-3968.19032023));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-574.182211);
      doubleArray0[1] = 1890.1025945809072;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-574.182211), 1890.1025945809072, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double double0 = MathArrays.linearCombination((double) 0L, (double) 0L, (double) 0L, (double) 0L);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) 0L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "|Wy)3I~R=!;v";
      stringArray0[2] = "<qq&M-.`j!R?>mAzp";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      boolean boolean2 = MathArrays.equals((float[]) null, (float[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 997.7391291;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (-3756.1668766765133);
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = (-97.5965604647846);
      doubleArray0[6] = 958.865549412115;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (997.739 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MathArrays.linearCombination(1.0, 1.0, 1.0, 1.0, 1.0, 184.7376);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 656.65115246;
      doubleArray0[1] = 186.7376;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      MathArrays.scaleInPlace(184.7376, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-1.0), 186.7376, 656.65115246, 0.0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (121,308.158 >= 34,497.456)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-745);
      intArray0[1] = 412;
      intArray0[2] = (-1476);
      intArray0[3] = 0;
      intArray0[4] = (-717);
      intArray0[5] = (-3985);
      MathArrays.copyOf(intArray0);
      MathArrays.linearCombination(783.6194, (-545.11), (double) (-745), 1238.0, (double) (-717), (double) (-717));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-835379.771134);
      doubleArray0[2] = (double) (-3985);
      doubleArray0[3] = (-835379.771134);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-3985);
      doubleArray0[6] = (double) (-745);
      doubleArray0[7] = (-545.11);
      doubleArray0[8] = 2726.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NaN, (-937.515));
      MathArrays.linearCombination(1.0E-5, 256.0, 0.0, 3528.74776843);
      long[][] longArray0 = new long[9][3];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray4[4] = 0L;
      longArray4[5] = 3058L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      longArray5[0] = 3058L;
      longArray5[1] = 0L;
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray5[4] = 1L;
      longArray5[5] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      longArray6[0] = 3058L;
      longArray6[1] = 0L;
      longArray6[2] = 0L;
      longArray6[3] = 0L;
      longArray6[4] = 1L;
      longArray6[5] = 3058L;
      longArray6[6] = 1L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[4];
      longArray7[0] = 3058L;
      longArray7[1] = 0L;
      longArray7[2] = 0L;
      longArray7[3] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[1];
      longArray8[0] = 0L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[4];
      longArray9[0] = 0L;
      longArray9[1] = 0L;
      longArray9[2] = 1L;
      longArray9[3] = 3058L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1195.1318250984903);
      MathArrays.normalizeArray(doubleArray0, 6.283185307179586);
      long[][] longArray0 = new long[4][3];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = (-991L);
      longArray2[1] = 0L;
      longArray2[2] = 9007199254740990L;
      longArray2[3] = (-574L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = (-991L);
      longArray3[1] = 0L;
      longArray3[2] = 9007199254740990L;
      longArray3[3] = (-574L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -991 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3393);
      intArray0[1] = (-1073741804);
      intArray0[2] = 198;
      intArray0[3] = 1497;
      intArray0[4] = (-886);
      intArray0[5] = 2309;
      MathArrays.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 198);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MathArrays.linearCombination(3069.8258, 3069.8258, 20.0, 0.0, 1.34217729E8, 20.0, 0.0, (-254.597775645));
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double double0 = 1.304E19;
      double double1 = 792.868;
      double double2 = (-406.0);
      MathArrays.linearCombination((-1.0), 1.304E19, 0.0, 0.0, (-1.0), 792.868, 0.0, (-406.0));
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 493;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 493);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-896.1703538257);
      double double0 = 780.11;
      doubleArray0[1] = 780.11;
      double double1 = (-648.8356973645086);
      doubleArray0[2] = (-648.8356973645086);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 640;
      int int0 = (-856);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-856));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      Double double0 = new Double(1.304E19);
      Double double1 = new Double(1.304E19);
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 14, (-1280));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = 788;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<Integer, Double>>) null, 788, 788);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2111.923655122294;
      doubleArray0[1] = (-3.141592653589793);
      doubleArray0[2] = (-1279.55681);
      doubleArray0[3] = 2192.2372;
      doubleArray0[4] = (-3018.4871762080247);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-1279.55681), 2111.923655122294, (-2535.7), 4473.775340658382, (-3018.4871762080247), (-20.0));
      int[] intArray0 = new int[8];
      intArray0[0] = 1401;
      intArray0[1] = 1910;
      intArray0[2] = (-4915);
      intArray0[3] = (-625);
      intArray0[4] = 59;
      intArray0[5] = 239;
      intArray0[6] = (-1);
      intArray0[7] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[][] longArray0 = new long[6][8];
      long[] longArray1 = new long[4];
      longArray1[0] = 0L;
      longArray1[1] = (-1L);
      longArray1[2] = (-1073741824L);
      longArray1[3] = 314L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = (-1073741824L);
      longArray2[1] = (-1073741824L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = 314L;
      longArray3[1] = 314L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = 0L;
      longArray4[1] = (-1073741824L);
      longArray4[2] = 314L;
      longArray4[3] = 1029L;
      longArray4[4] = 0L;
      longArray4[5] = (-1L);
      longArray4[6] = (-1L);
      longArray4[7] = 314L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = 314L;
      longArray5[1] = (-1L);
      longArray5[2] = 1029L;
      longArray5[3] = 1029L;
      longArray5[4] = (-1L);
      longArray5[5] = 314L;
      longArray5[6] = (-1L);
      longArray5[7] = 314L;
      longArray5[8] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      longArray6[0] = (-3519L);
      longArray6[1] = 1029L;
      longArray6[2] = (-1L);
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[7];
      double double0 = 3.834E-20;
      doubleArray1[0] = 3.834E-20;
      double double1 = 3.834E-20;
      doubleArray1[1] = 3.834E-20;
      double double2 = 1450.638937;
      doubleArray1[2] = 1450.638937;
      double double3 = 162.752421409187;
      doubleArray1[3] = 162.752421409187;
      double double4 = (-2182.823209267);
      doubleArray1[4] = (-2182.823209267);
      doubleArray1[5] = 220.412482935256;
      double double5 = 321.213241567;
      doubleArray1[6] = 321.213241567;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1045.6873;
      doubleArray0[1] = 2694.14;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1045.6873);
      assertArrayEquals(new double[] {292.38300104961803, 753.304298950382}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1202.16);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1305.93853635);
      doubleArray0[4] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (0 > -1,202.16)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      int int0 = (-145);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-145));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2013.632;
      doubleArray0[1] = (-94.0);
      doubleArray0[2] = 818.2189177;
      int int0 = 3207;
      MathArrays.copyOf(doubleArray0, 3207);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf(".;xeh;T}P,[~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection..;xeh;T}P,[~
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 109.3422;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2279.27);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-183.66406867988152);
      doubleArray1[1] = (-2279.27);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
