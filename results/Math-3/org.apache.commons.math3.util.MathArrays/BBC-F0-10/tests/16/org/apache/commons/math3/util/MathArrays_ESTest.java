/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 17:04:16 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[13];
      stringArray0[0] = "$VALUES";
      stringArray0[1] = "$VALUES";
      stringArray0[2] = "$VALUES";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(13, stringArray0.length);
      assertFalse(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(object0).when(field0).getZero();
      int int0 = 3444;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 3444);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[22];
      stringArray0[0] = "$VALUES";
      stringArray0[1] = "$VALUES";
      stringArray0[2] = "$VALUES";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(22, stringArray0.length);
      assertFalse(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 3444);
      assertEquals(3444, objectArray0.length);
      assertNotNull(objectArray0);
      
      Field<FieldElement<Object>> field1 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field1, 3444);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (-1372.177516765362);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (-573.6);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = (-573.6);
      doubleArray1[3] = (-1372.177516765362);
      doubleArray1[4] = (-573.6);
      doubleArray1[5] = 9.313225746154785E-10;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1372.177516765362), Double.POSITIVE_INFINITY, (-573.6)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-573.6), (-1372.177516765362), (-573.6), 9.313225746154785E-10}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, Double.NaN, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, (-5.342066287994385E-7)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[20];
      intArray0[0] = (-1);
      intArray0[1] = 1448;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(20, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1448;
      doubleArray0[1] = (double) 1448;
      doubleArray0[2] = (double) (-1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {1448.0, 1448.0, (-1.0)}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, (-2142005372));
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.63E18;
      doubleArray0[1] = 6236.603637743059;
      doubleArray0[2] = 2980.8;
      doubleArray0[3] = 3470.420907877814;
      double[][] doubleArray1 = new double[4][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-2420.3176354);
      doubleArray1[1] = (-2420.3176354);
      doubleArray1[2] = (-2420.3176354);
      doubleArray1[3] = (-2420.3176354);
      doubleArray1[4] = (-2420.3176354);
      doubleArray1[5] = (-2420.3176354);
      doubleArray1[6] = (-2420.3176354);
      doubleArray1[7] = (-2420.3176354);
      doubleArray1[8] = (-1316.607355331);
      double[] doubleArray2 = MathArrays.scale((-2420.3176354), doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-2420.3176354), (-2420.3176354), (-2420.3176354), (-2420.3176354), (-2420.3176354), (-2420.3176354), (-2420.3176354), (-2420.3176354), (-1316.607355331)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5857937.456228248, 5857937.456228248, 5857937.456228248, 5857937.456228248, 5857937.456228248, 5857937.456228248, 5857937.456228248, 5857937.456228248, 3186608.001004974}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.linearCombination(doubleArray2, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals((-1.1762006619171532E11), double0, 0.01);
      assertArrayEquals(new double[] {(-2420.3176354), (-2420.3176354), (-2420.3176354), (-2420.3176354), (-2420.3176354), (-2420.3176354), (-2420.3176354), (-2420.3176354), (-1316.607355331)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5857937.456228248, 5857937.456228248, 5857937.456228248, 5857937.456228248, 5857937.456228248, 5857937.456228248, 5857937.456228248, 5857937.456228248, 3186608.001004974}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Pair<Object, String> pair0 = new Pair<Object, String>("SUBARRAY_ENDS_AFTER_ARRAY_END", "");
      assertNotNull(pair0);
      
      Pair<Object, String> pair1 = new Pair<Object, String>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 701, 701);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Pair<Object, String>[][] pairArray0 = MathArrays.buildArray(field0, 701, 701);
      assertEquals(701, pairArray0.length);
      assertNotNull(pairArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "j~N_gY(<sl[)$}503g";
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-548.716F);
      floatArray0[2] = 697.88F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, (-548.716F), 697.88F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.linearCombination((double) 0.0F, (double) 0.0F, (double) 0.0F, (double) 0.0F, (double) 0.0F, (double) 0.0F, 0.0, (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2376.0F);
      floatArray0[2] = 1463.6782F;
      floatArray0[4] = 0.5F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 845.03F;
      floatArray0[7] = (-1756.3973F);
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 1463.6782F, 0.0F, 0.5F, 0.0F, 845.03F, (-1756.3973F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2359.2);
      doubleArray0[1] = (-2018.26795);
      doubleArray0[2] = 3.32;
      doubleArray0[3] = 5.669184079525E-24;
      doubleArray0[4] = 1496.628085729;
      doubleArray0[5] = 1505.3423475056381;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(3761.00949089255, double0, 0.01);
      assertArrayEquals(new double[] {(-2359.2), (-2018.26795), 3.32, 5.669184079525E-24, 1496.628085729, 1505.3423475056381}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.32);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2359.2), (-2018.26795), 3.32, 5.669184079525E-24, 1496.628085729, 1505.3423475056381}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.708112765514244, 4.8832235713899905, (-0.00803277991755989), (-1.371665904305984E-26), (-3.6211096479216907), (-3.6421939090649857)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-2359.2), (-2018.26795), 3.32, 5.669184079525E-24, 1496.628085729, 1505.3423475056381}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.708112765514244, 4.8832235713899905, (-0.00803277991755989), (-1.371665904305984E-26), (-3.6211096479216907), (-3.6421939090649857)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2364.908112765514, 2023.15117357139, (-3.3280327799175597), (-5.68290073856806E-24), (-1500.2491953769218), (-1508.984541414703)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2359.2), (-2018.26795), 3.32, 5.669184079525E-24, 1496.628085729, 1505.3423475056381}, doubleArray0, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-2359.2), (-2018.26795), 3.32, 5.669184079525E-24, 1496.628085729, 1505.3423475056381}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.708112765514244, 4.8832235713899905, (-0.00803277991755989), (-1.371665904305984E-26), (-3.6211096479216907), (-3.6421939090649857)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2364.908112765514, 2023.15117357139, (-3.3280327799175597), (-5.68290073856806E-24), (-1500.2491953769218), (-1508.984541414703)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2364.908112765514, 2023.15117357139, (-3.3280327799175597), (-5.68290073856806E-24), (-1500.2491953769218), (-1508.984541414703)}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1253;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1253);
      assertEquals(1, intArray0.length);
      assertEquals(1253, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1253}, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 3761.00949089255;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 1462.0269671;
      doubleArray0[3] = 3.145894820876798E-6;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1462.0269671, 3.145894820876798E-6}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1462.0269671, 3.145894820876798E-6}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 2924.0539342, 6.291789641753596E-6}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 6.867304697791491E-19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 4.6063015474256707E18;
      doubleArray0[3] = 0.3333333333332802;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1.382966427451571E19, double0, 0.01);
      assertArrayEquals(new double[] {6.867304697791491E-19, 1.304E19, 4.6063015474256707E18, 0.3333333333332802}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.3333333333332802;
      doubleArray1[1] = 1.304E19;
      doubleArray1[2] = 6.867304697791491E-19;
      doubleArray1[3] = 1.382966427451571E19;
      doubleArray1[4] = 1.304E19;
      doubleArray1[5] = 0.3333333333332802;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1849);
      intArray0[1] = 2147483632;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2147483632;
      intArray1[1] = 134217729;
      intArray1[2] = (-1849);
      intArray1[3] = 2147483632;
      intArray1[4] = (-1849);
      intArray1[5] = 2147483632;
      intArray1[6] = 2147483632;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-134219578), int0);
      assertArrayEquals(new int[] {(-1849), 2147483632}, intArray0);
      assertArrayEquals(new int[] {2147483632, 134217729, (-1849), 2147483632, (-1849), 2147483632, 2147483632}, intArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = (-345.7F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, (-345.7F), 0.0F, Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-884);
      intArray0[1] = 2116;
      intArray0[2] = (-1);
      intArray0[3] = 757;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 757;
      intArray1[1] = 757;
      intArray1[2] = 2116;
      intArray1[3] = (-884);
      intArray1[4] = 757;
      intArray1[5] = 2116;
      intArray1[6] = (-1);
      intArray1[7] = (-884);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3422.620633374374, double0, 0.01);
      assertArrayEquals(new int[] {(-884), 2116, (-1), 757}, intArray0);
      assertArrayEquals(new int[] {757, 757, 2116, (-884), 757, 2116, (-1), (-884)}, intArray1);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, (-345.7F), 0.0F, Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2056.919F);
      floatArray0[2] = (-557.1573F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2081.2356F);
      floatArray0[5] = Float.NaN;
      floatArray0[6] = 356.7231F;
      floatArray0[7] = 1.0F;
      floatArray0[8] = -0.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[1] = 1888.322F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 356.7231F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.0F;
      floatArray1[8] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, (-2056.919F), (-557.1573F), 0.0F, (-2081.2356F), Float.NaN, 356.7231F, 1.0F, -0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1888.322F, 0.0F, 0.0F, 356.7231F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 3443.656F;
      floatArray0[1] = (-3962.45F);
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 2463.1F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {3443.656F, (-3962.45F), Float.NaN, 2463.1F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2463.1F;
      doubleArray0[1] = (double) 3443.656F;
      doubleArray0[2] = (double) 3443.656F;
      doubleArray0[3] = (double) 3443.656F;
      doubleArray0[4] = (double) (-3962.45F);
      doubleArray0[5] = (double) 2463.1F;
      doubleArray0[6] = (double) 3443.656F;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {2463.10009765625, 3443.656005859375, 3443.656005859375, 3443.656005859375, (-3962.449951171875), 2463.10009765625, 3443.656005859375}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 44.0900703203;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {44.0900703203}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-1227);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1227);
      doubleArray0[1] = (double) (-1227);
      doubleArray0[2] = (double) (-1227);
      doubleArray0[3] = (double) (-1227);
      doubleArray0[4] = 0.14285714285714285;
      doubleArray0[5] = (double) (-1227);
      doubleArray0[6] = (double) (-1227);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1227);
      doubleArray1[1] = 0.14285714285714285;
      doubleArray1[2] = 0.14285714285714285;
      doubleArray1[3] = 0.14285714285714285;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (-4258.91158660978);
      doubleArray0[2] = 1462.0269671;
      doubleArray0[3] = 3.145894820876798E-6;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-4258.91158660978), 1462.0269671, 3.145894820876798E-6}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[0][1];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-4258.91158660978), 3.145894820876798E-6, 1462.0269671, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = (-2910.99);
      doubleArray1[1] = (-2910.99);
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.4E-45F;
      floatArray0[2] = 893.376F;
      floatArray0[3] = 893.376F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = Float.NEGATIVE_INFINITY;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 2744.8F;
      floatArray0[8] = 0.0F;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = 1.8307188599677033E-8;
      doubleArray0[2] = (double) 1.4E-45F;
      doubleArray0[3] = (double) 1.4E-45F;
      doubleArray0[4] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0.0F;
      try { 
        MathArrays.normalizeArray(doubleArray0, 1.4E-45F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.scaleInPlace((-1377.79033), doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 2.17333333333333325E18;
      doubleArray0[2] = (-889.37960969053);
      doubleArray0[3] = (-2600.99855007968);
      doubleArray0[4] = 344.9341059767384;
      doubleArray0[5] = 662.4842634191972;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1.321987056584813E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 2.17333333333333325E18, (-889.37960969053), (-2600.99855007968), 344.9341059767384, 662.4842634191972}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 2.17333333333333325E18, (-889.37960969053), (-2600.99855007968), 344.9341059767384, 662.4842634191972}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 2.17333333333333325E18, (-889.37960969053), (-2600.99855007968), 344.9341059767384, 662.4842634191972}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'ic7_eG0Y8I'";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = (-1241);
      intArray0[2] = 2586;
      intArray0[3] = 2147481963;
      intArray0[4] = 32;
      intArray0[5] = 95;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {3, (-1241), 2586, 2147481963, 32, 95}, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2273);
      intArray0[1] = 5;
      intArray0[2] = 264;
      intArray0[3] = 3299;
      intArray0[4] = (-729);
      intArray0[5] = 0;
      intArray0[6] = (-1580);
      intArray0[7] = 181;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 181;
      intArray1[1] = 3299;
      intArray1[2] = 264;
      intArray1[3] = 181;
      intArray1[4] = 264;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 3007.23F;
      floatArray0[1] = Float.NaN;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {3007.23F, Float.NaN}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1763.7903664605396);
      doubleArray0[1] = 1.25;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1216.25747333);
      doubleArray0[5] = 1606.4775918;
      doubleArray0[6] = 3.834E-20;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1895.5836F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1895.5836F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1895.5836F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1895.5836F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = (-822.772);
      double double1 = MathArrays.linearCombination(0.8109631538391113, (-1145.6764361011), (-822.772), (-1145.6764361011), (-1145.6764361011), 1.9987994582857286E-8, 0.0, 911.1301384787514);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(941701.3912849749, double1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1423);
      intArray0[1] = (-1423);
      intArray0[2] = (-1423);
      intArray0[3] = (-1423);
      intArray0[4] = (-2145771140);
      intArray0[5] = (-1253);
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {(-1423), (-1423), (-1423), (-1423), (-2145771140), (-1253)}, intArray0);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-1253);
      doubleArray2[1] = (double) (-1423);
      doubleArray2[2] = (double) (-1423);
      doubleArray2[3] = (-2325.33);
      doubleArray2[4] = 941701.3912849749;
      doubleArray2[5] = (double) (-2145771140);
      doubleArray2[6] = (double) 1449;
      double double3 = MathArrays.distance1(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2.1467207147212849E9, double3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1253.0), (-1423.0), (-1423.0), (-2325.33), 941701.3912849749, (-2.14577114E9), 1449.0}, doubleArray2, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1253));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 20.0;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 1.0E-5;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (-569.8128);
      doubleArray1[5] = 1.304E19;
      doubleArray1[6] = (-726.1692067727996);
      doubleArray1[7] = (-3572.983288);
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(14, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 4164.383061805247;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = 310.9928517381;
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 14
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1116;
      intArray0[1] = (-1);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {1116, (-1)}, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 1116;
      doubleArray0[2] = 2597.7032256327716;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-544.494359);
      doubleArray0[5] = (double) (-1);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-544.494359);
      doubleArray1[1] = 2597.7032256327716;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = 2597.7032256327716;
      doubleArray1[4] = (double) (-1);
      doubleArray1[5] = (double) 1116;
      doubleArray1[6] = (double) (-1);
      doubleArray1[7] = 2597.7032256327716;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0), 1116.0, 2597.7032256327716, 0.0, (-544.494359), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-544.494359), 2597.7032256327716, (-1.0), 2597.7032256327716, (-1.0), 1116.0, (-1.0), 2597.7032256327716}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1059);
      intArray0[1] = 25;
      intArray0[2] = (-1);
      intArray0[3] = 134217729;
      intArray0[4] = 1665;
      intArray0[5] = (-2140709250);
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1665;
      intArray1[1] = (-1);
      intArray1[2] = (-2140709250);
      intArray1[3] = 1665;
      intArray1[4] = (-1);
      intArray1[5] = (-1059);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2140709249, int0);
      assertArrayEquals(new int[] {(-1059), 25, (-1), 134217729, 1665, (-2140709250)}, intArray0);
      assertArrayEquals(new int[] {1665, (-1), (-2140709250), 1665, (-1), (-1059)}, intArray1);
      
      int int1 = MathArrays.distance1(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(120670624, int1);
      assertArrayEquals(new int[] {(-1059), 25, (-1), 134217729, 1665, (-2140709250)}, intArray0);
      assertArrayEquals(new int[] {1665, (-1), (-2140709250), 1665, (-1), (-1059)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3553.32;
      doubleArray0[1] = 0.0875862700108075;
      doubleArray0[2] = (-1.7168146928204135);
      doubleArray0[3] = (-4236.9);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-1098.155);
      doubleArray0[6] = 1800.895227;
      doubleArray0[7] = 3305.34185;
      doubleArray0[8] = 1.9987994582857286E-8;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1305);
      doubleArray0[1] = (double) (-1305);
      doubleArray0[2] = 1.44888888888888883E18;
      doubleArray0[3] = (double) (-1305);
      doubleArray0[4] = (double) (-1305);
      doubleArray0[5] = 3553.32;
      doubleArray0[6] = (double) (-1305);
      doubleArray0[7] = (double) (-1305);
      doubleArray0[8] = (double) (-1305);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1305.0), (-1305.0), 1.44888888888888883E18, (-1305.0), (-1305.0), 3553.32, (-1305.0), (-1305.0), (-1305.0)}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1305.0), (-1305.0), 1.44888888888888883E18, (-1305.0), (-1305.0), 3553.32, (-1305.0), (-1305.0), (-1305.0)}, doubleArray0, 0.01);
      
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {(-1305.0), (-1305.0), 1.44888888888888883E18, (-1305.0), (-1305.0), 3553.32, (-1305.0), (-1305.0), (-1305.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.44888888888888883E18;
      doubleArray1[1] = (double) (-1305);
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = 3553.32;
      doubleArray1[4] = 3553.32;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.312024691125688E19, double0, 0.01);
      assertArrayEquals(new double[] {1.44888888888888883E18, (-1305.0), 1.304E19, 3553.32, 3553.32}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean3 = MathArrays.equals(doubleArray0, doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean3);
      assertArrayEquals(new double[] {(-1305.0), (-1305.0), 1.44888888888888883E18, (-1305.0), (-1305.0), 3553.32, (-1305.0), (-1305.0), (-1305.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 2147483632;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147483632, 2147483632);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[6][6];
      doubleArray0[0] = null;
      doubleArray0[0] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = null;
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(21475.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-4946.94);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, (double[]) null);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[0];
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4946.94);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1.986821492305628E-8);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.986821492305628E-8}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.986821492305628E-8}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, true);
      assertEquals(1, doubleArray0.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(1, doubleArray0.length);
      assertFalse(mathArrays_OrderDirection0.equals((Object)mathArrays_OrderDirection1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(mathArrays_OrderDirection0, mathArrays_OrderDirection1);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 2247.08;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      boolean boolean3 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean3);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 2247.08, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2247.08, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 2247.08, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = 425L;
      int int0 = (-1);
      int int1 = (-1227);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2376.0F);
      floatArray0[3] = 1463.6782F;
      floatArray0[4] = 0.5F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 845.03F;
      floatArray0[7] = (-1756.3973F);
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-2376.0F), 1463.6782F, 0.5F, 0.0F, 845.03F, (-1756.3973F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4946.94);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4946.94), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1.986821492305628E-8);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-4946.94), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.986821492305628E-8, Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-4946.94), 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2146403967;
      intArray0[1] = (-2312);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2146403967, (-2312)}, intArray0);
      assertArrayEquals(new int[] {2146403967, (-2312)}, intArray1);
      assertNotNull(intArray1);
      
      int[] intArray2 = MathArrays.copyOf(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {2146403967, (-2312)}, intArray0);
      assertArrayEquals(new int[] {2146403967, (-2312)}, intArray2);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 946.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {946.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-379);
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-379)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = 1.986821492305628E-8;
      double double1 = 826.0;
      try { 
        MathArrays.normalizeArray(doubleArray1, 826.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4946.94);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1.986821492305628E-8);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.986821492305628E-8}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1176L;
      doubleArray0[1] = 2159.9032939;
      doubleArray0[2] = (-4946.94);
      doubleArray0[3] = (-4946.94);
      doubleArray0[4] = (-4946.94);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1176.0, 2159.9032939, (-4946.94), (-4946.94), (-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1176.0, 2159.9032939, (-4946.94), (-4946.94), (-4946.94)}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {1176.0, 2159.9032939, (-4946.94), (-4946.94), (-4946.94)}, doubleArray0, 0.01);
      
      double[][] doubleArray2 = new double[8][8];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 1176L;
      doubleArray2[3] = doubleArray3;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray0;
      doubleArray2[7] = null;
      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2979.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 619.48F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2425.149F);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 619.48F;
      floatArray1[1] = (-2425.149F);
      floatArray1[2] = 1.0F;
      floatArray1[3] = 2979.0F;
      floatArray1[4] = 619.48F;
      floatArray1[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2979.0F, 1.0F, 619.48F, 0.0F, (-2425.149F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {619.48F, (-2425.149F), 1.0F, 2979.0F, 619.48F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      Integer integer0 = Integer.getInteger("-mjB");
      assertNull(integer0);
      
      int int0 = (-3481);
      double[] doubleArray2 = MathArrays.scale((-3481), doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (-2679.7016172);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1311.951495);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {100.0, (-2679.7016172)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-50.856714832934365), 1362.8082098329344}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.scale((-2679.7016172), doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {100.0, (-2679.7016172)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-50.856714832934365), 1362.8082098329344}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {136280.82098329344, (-3651919.363822751)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      MathArrays.scaleInPlace(1311.951495, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {100.0, (-2679.7016172)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-50.856714832934365), 1362.8082098329344}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.787938268288592E8, (-4.791141068986708E9)}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {100.0, (-2679.7016172)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-50.856714832934365), 1362.8082098329344}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.787938268288592E8, (-4.791141068986708E9)}, doubleArray2, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {100.0, (-2679.7016172)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-50.856714832934365), 1362.8082098329344}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.787938268288592E8, (-4.791141068986708E9)}, doubleArray2, 0.01);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "TT}S?`xb";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[2] = "PkE`o6)f|H";
      stringArray0[3] = "NOT_POSITIVE_ELEMENT_AT_INDEX";
      stringArray0[4] = "b.A!R1(>wL7U<";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-2625));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3481), (-3481));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, (-3383.0136988), 0.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathArrays.linearCombination(470.880575972929, 0.0, 470.880575972929, 2.4472215363599997E7);
      assertEquals(1.152349086574553E10, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.152349086574553E10;
      doubleArray0[1] = 2053.871867366086;
      doubleArray0[2] = 470.880575972929;
      doubleArray0[3] = 3.0095696449279785;
      doubleArray0[4] = 2.4472215363599997E7;
      doubleArray0[5] = 1903.19434482;
      doubleArray0[6] = 2461.5024685748194;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.0095696449279785;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1564.81259;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1564.8129095270488, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 1564.81259}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 425L;
      longArray0[0] = 425L;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 425L;
      longArray0[0] = 425L;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "+6";
      stringArray0[1] = "xjWo5QKl;x";
      stringArray0[2] = ">R";
      stringArray0[3] = "Al3X1f@xlGsbeu.j";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.4079954646626107E7;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[27];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2845.150390919);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 3.834E-20;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 27
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = 3.834E-20;
      double double1 = 2053.871867366086;
      double double2 = 470.880575972929;
      double double3 = MathArrays.linearCombination(3.834E-20, 3.834E-20, 2053.871867366086, 470.880575972929);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(967128.3678799379, double3, 0.01);
      
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double4 = 3254663.392001632;
      try { 
        MathArrays.normalizeArray(doubleArray0, 3254663.392001632);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "'ic7_eG0Y8I'";
      double double0 = MathArrays.linearCombination((-299.22), 3070.2965964647765, 1.0, (-299.22));
      assertEquals((-918993.3675941905), double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 470.880575972929;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray1[7] = doubleArray3;
      doubleArray1[8] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = (-3.141592653589793);
      doubleArray0[2] = (-3.141592653589793);
      doubleArray0[3] = 1486.0;
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.19999954104423523;
      doubleArray0[1] = 4000.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 370.8848666417767;
      doubleArray0[5] = 1436.9;
      doubleArray0[6] = 3.26E18;
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = 1189.19947583918;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.26E18;
      doubleArray1[1] = 1436.9;
      doubleArray1[2] = 1189.19947583918;
      doubleArray1[3] = 1189.19947583918;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = 3.26E18;
      doubleArray1[8] = 4000.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.19999954104423523, 4000.0, 1.0, (-1.0), 370.8848666417767, 1436.9, 3.26E18, 1.304E19, 1189.19947583918}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.26E18, 1436.9, 1189.19947583918, 1189.19947583918, (-1.0), (-1.0), (-1.0), 3.26E18, 4000.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4946.296097441927);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-4946.296097441927)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2498.6326F;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "5#idA";
      stringArray0[1] = "DECREASING";
      stringArray0[2] = "+6_65xbrz{mqx|,&g";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "s|O]v)%zm[9,&Us0J`";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[7] = "t8";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 199;
      int[] intArray0 = new int[6];
      intArray0[0] = 199;
      intArray0[1] = (-3398);
      intArray0[2] = (-302);
      intArray0[3] = (-302);
      intArray0[4] = (-302);
      intArray0[5] = (-3398);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-302));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2635.105932, 2635.105932, 2635.105932, 2635.105932);
      assertEquals(1.3887566545723177E7, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.scale(135.478326556, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 135.478326556;
      doubleArray3[1] = 135.478326556;
      double double1 = MathArrays.safeNorm(doubleArray3);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(191.59528682310628, double1, 0.01);
      assertArrayEquals(new double[] {135.478326556, 135.478326556}, doubleArray3, 0.01);
      
      try { 
        MathArrays.ebeDivide(doubleArray3, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-4946.94);
      doubleArray0[0] = (-4946.94);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4946.94, double1, 0.01);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      
      double[][] doubleArray2 = new double[7][9];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.0, double2, 0.01);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.scale((-1208.9995), doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(9523396.0, (-1764.4643565), 1544.19943, 2970.3981663, 3.834E-20, 236.77546561422);
      assertEquals((-1.67991059076794E10), double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2127;
      intArray0[1] = 3;
      intArray0[2] = 723;
      intArray0[3] = (-1618);
      int int0 = 202;
      intArray0[4] = 202;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-107));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2994.567611418), (-2994.567611418), (-2994.567611418), (-2994.567611418), (-569.8128), (-569.8128), (-569.8128), (-569.8128));
      assertEquals(1.8584243612795092E7, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-569.8128);
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(569.8128, double1, 0.01);
      assertArrayEquals(new double[] {0.0, (-569.8128)}, doubleArray0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(569.8128, double2, 0.01);
      assertArrayEquals(new double[] {0.0, (-569.8128)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2787);
      assertEquals(2, doubleArray0.length);
      assertEquals(2787, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-569.8128)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = 204;
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[6] = 0;
      intArray0[7] = (-1423);
      intArray0[8] = (-1423);
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2;
      intArray1[1] = (-1);
      int int1 = (-1);
      intArray1[2] = (-1);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = (-822.772);
      double double1 = MathArrays.linearCombination(0.8109631538391113, (-1145.6764361011), (-822.772), (-1145.6764361011), (-1145.6764361011), 1.9987994582857286E-8, 0.0, 911.1301384787514);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(941701.3912849749, double1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1423);
      intArray0[1] = (-1423);
      intArray0[2] = (-1423);
      intArray0[3] = (-1423);
      intArray0[4] = (-2145771140);
      intArray0[5] = (-1253);
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {(-1423), (-1423), (-1423), (-1423), (-2145771140), (-1253)}, intArray0);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-1253);
      doubleArray2[1] = (double) (-1423);
      doubleArray2[2] = (double) (-1423);
      doubleArray2[3] = (-2325.33);
      doubleArray2[4] = 941701.3912849749;
      doubleArray2[5] = (double) (-2145771140);
      doubleArray2[6] = (double) 1449;
      double double3 = MathArrays.distance1(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2.1467207147212849E9, double3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1253.0), (-1423.0), (-1423.0), (-2325.33), 941701.3912849749, (-2.14577114E9), 1449.0}, doubleArray2, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1253));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3.141592653589793);
      doubleArray2[1] = (-3.141592653589793);
      try { 
        MathArrays.checkOrder(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-3.142 >= -3.142)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 677.032;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 135.478326556;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {135.478326556, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {135.478326556, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {135.478326556, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(135.478326556, double0, 0.01);
      assertArrayEquals(new double[] {135.478326556, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 470.880575972929;
      doubleArray0[2] = 470.880575972929;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "'ic7_eG0Y8I'";
      stringArray0[1] = "'ic7_eG0Y8I'";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 470.880575972929;
      doubleArray0[2] = 470.880575972929;
      doubleArray0[3] = 470.880575972929;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 470.880575972929;
      doubleArray0[6] = 0.0;
      doubleArray0[8] = 470.880575972929;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 470.880575972929, 470.880575972929, 470.880575972929, 0.0, 470.880575972929, 0.0, 0.0, 470.880575972929}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 470.880575972929);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 470.880575972929, 470.880575972929, 470.880575972929, 0.0, 470.880575972929, 0.0, 0.0, 470.880575972929}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 94.1761151945858, 94.1761151945858, 94.1761151945858, 0.0, 94.1761151945858, 0.0, 0.0, 94.1761151945858}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace(1037.01235, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 488308.97265904065, 488308.97265904065, 488308.97265904065, 0.0, 488308.97265904065, 0.0, 0.0, 488308.97265904065}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(1.1795268640216787E-8, 0.0, 2313.0, 488308.97265904065, 182226.0276957503, 1.0);
      assertEquals(1.1296408797880569E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 470.880575972929;
      doubleArray0[2] = 470.880575972929;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 470.880575972929, 470.880575972929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 470.880575972929, 470.880575972929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 470.880575972929, 470.880575972929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 470.880575972929, 470.880575972929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 1804.0685663249144, 0.0, 0.0, Double.NaN, 39.9679083767);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 135.478326556;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {135.478326556, Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {270.956653112, Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {135.478326556, Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {270.956653112, Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int[] intArray0 = new int[5];
      intArray0[0] = 85;
      intArray0[1] = (-2178);
      intArray0[2] = (-2178);
      intArray0[3] = (-2178);
      intArray0[4] = (-2178);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 85;
      intArray1[1] = 85;
      intArray1[2] = (-2178);
      intArray1[3] = 85;
      intArray1[4] = (-2178);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2263, int0);
      assertArrayEquals(new int[] {85, (-2178), (-2178), (-2178), (-2178)}, intArray0);
      assertArrayEquals(new int[] {85, 85, (-2178), 85, (-2178)}, intArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2178), 85);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(1.0, (-264.985016983), 2756.5527783239263, 0.0, 2756.5527783239263, 0.0, 0.0, 0.0);
      assertEquals((-264.985016983), double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 470.880575972929;
      doubleArray0[2] = 470.880575972929;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 470.880575972929, 470.880575972929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 470.880575972929, 470.880575972929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 470.880575972929, 470.880575972929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[][] doubleArray2 = new double[6][4];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 470.880575972929, 470.880575972929, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 470.880575972929, 470.880575972929, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long[][] longArray0 = new long[2][6];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1176L;
      longArray2[1] = 1176L;
      longArray2[2] = 1176L;
      longArray2[3] = 0L;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1804.0685663249144;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 946.0F;
      floatArray1[1] = 946.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {946.0F, 946.0F}, floatArray1, 0.01F);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 866.9846;
      doubleArray0[2] = (-2653.0);
      doubleArray0[3] = (-200.71);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7830355.80073716, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 866.9846, (-2653.0), (-200.71)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-302);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-3391);
      floatArray0[1] = 946.0F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-3391.0F), 946.0F, 0.0F}, floatArray0, 0.01F);
      
      double double1 = MathArrays.linearCombination((-1735.2596313205747), 866.9846, (-2653.0), 569.8128, 182226.0276957503, 6.123233995736766E-17, (-2563.86091630688), 2.4472215363599997E7);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-6.274637266291455E10), double1, 0.01);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}";
      stringArray0[1] = "?xuvGzSTEXp_";
      stringArray0[2] = "!sb6~Oomr|'Y\"jyvs>";
      stringArray0[3] = "~J0Vd`";
      stringArray0[4] = "1>4Z7McjA\"n/$";
      stringArray0[5] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = (-569.8128);
      double double1 = MathArrays.linearCombination((-2994.567611418), (-2994.567611418), (-2994.567611418), (-2994.567611418), (-569.8128), (-569.8128), (-569.8128), (-569.8128));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.8584243612795092E7, double1, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.834E-20, 3.834E-20, 2053.871867366086, 470.880575972929);
      assertEquals(967128.3678799379, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 2053.871867366086;
      doubleArray0[2] = 967128.3678799379;
      double[] doubleArray1 = MathArrays.scale(569.8128, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 2053.871867366086, 967128.3678799379}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.1846622752E-17, 1170322.479585098, 5.510821232610976E8}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = (-569.8128);
      double double1 = MathArrays.linearCombination((-2994.567611418), (-2994.567611418), (-2994.567611418), (-2994.567611418), (-569.8128), (-569.8128), (-569.8128), (-569.8128));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.8584243612795092E7, double1, 0.01);
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2994.567611418);
      doubleArray1[1] = (-569.8128);
      doubleArray1[2] = (-569.8128);
      doubleArray1[3] = 0.0;
      double double2 = 946.0;
      doubleArray1[4] = 946.0;
      doubleArray1[5] = (-2994.567611418);
      double double3 = (-1272.60184839);
      doubleArray1[6] = (-2994.567611418);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2994.567611418), (-569.8128), (-569.8128), 0.0, 946.0, (-2994.567611418), (-2994.567611418)}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2994.567611418), (-569.8128), (-569.8128), 0.0, 946.0, (-2994.567611418), (-2994.567611418)}, doubleArray1, 0.01);
      
      double double4 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double4, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 4 and 5 are not increasing (946 > -2,994.568)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-4946.94);
      doubleArray2[1] = (-4946.94);
      doubleArray2[2] = (-4946.94);
      doubleArray2[3] = (-4946.94);
      doubleArray2[4] = (-4946.94);
      doubleArray2[6] = (-4946.94);
      doubleArray2[7] = (-4946.94);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4946.94), (-4946.94), (-4946.94), (-4946.94), (-4946.94), 0.0, (-4946.94), (-4946.94)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 417L;
      longArray0[1] = 9218868437227405312L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {417L, 9218868437227405312L, 0L}, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1097);
      intArray0[2] = (-2146381242);
      intArray0[3] = 1486;
      intArray0[4] = 2045222521;
      intArray0[5] = 1859;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1), (-1097), (-2146381242), 1486, 2045222521, 1859}, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.34217729E8, 0.0, 0.0, 1.34217729E8);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.scale(400.0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.34217729E8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 5.36870916E10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[6][4];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 5.36870916E10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5.368725937189911E10, double1, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 5.36870916E10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray3.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 5.36870916E10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4946.94);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      
      float float0 = 0.0F;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      float float1 = 2384.5515F;
      floatArray0[1] = 2384.5515F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-4445.123F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      float float2 = (-3254.3F);
      floatArray1[2] = (-3254.3F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-2515.1064F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 2384.5515F, 0.0F, 0.0F, (-4445.123F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-3254.3F), 0.0F, (-2515.1064F)}, floatArray1, 0.01F);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4947.94, double0, 0.01);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 965, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 470.880575972929;
      doubleArray0[2] = 470.880575972929;
      doubleArray0[3] = 470.880575972929;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 470.880575972929;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 470.880575972929, 470.880575972929, 470.880575972929, 0.0, 470.880575972929, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 470.880575972929, 470.880575972929, 470.880575972929, 0.0, 470.880575972929, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[0][2];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 470.880575972929, 470.880575972929, 470.880575972929, 470.880575972929}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(1033.73, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 470.880575972929, 470.880575972929, 470.880575972929, 470.880575972929}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 486763.37780049595, 486763.37780049595, 486763.37780049595, 486763.37780049595}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.34217729E8, 0.0, 0.0, 1.34217729E8);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double1 = MathArrays.linearCombination(0.125, 0.0, 0.0, (-471.2597), 0.0, 1.34217729E8, 0.125, 2290.80396956889);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(286.35049619611124, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.34217729E8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double2 = MathArrays.linearCombination(833.6, 1.34217729E8, 3.834E-20, Double.NaN, (-772.04715), (-471.2597));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 911.1301384787514;
      doubleArray2[1] = (-822.772);
      doubleArray2[2] = (-2325.33);
      doubleArray2[3] = 911.1301384787514;
      doubleArray2[4] = (-2325.33);
      doubleArray2[6] = (-1555.0);
      doubleArray2[7] = (-822.772);
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "'ic7_eG0Y8I'";
      stringArray0[1] = "'ic7_eG0Y8I'";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 20.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = false;
      double double0 = 100.0;
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 100.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 911.1301384787514;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      try { 
        MathArrays.convolve((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray2 = MathArrays.scale(2661.8231152690355, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[4][3];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray0;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 2661.8231152690355;
      doubleArray3[2] = doubleArray4;
      doubleArray3[3] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      try { 
        MathArrays.normalizeArray(doubleArray0, 1.1730463525082348E-7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1757.599);
      doubleArray0[3] = 31.08379629923;
      doubleArray0[4] = (-5245.813963253323);
      doubleArray0[5] = (-1967.94455325893);
      doubleArray0[6] = 1136.86069;
      doubleArray0[7] = (-2733.732251710109);
      doubleArray0[8] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (0 > -1,757.599)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = 506.58721;
      doubleArray0[2] = 915.18798565537;
      doubleArray0[3] = 1115.52293737273;
      doubleArray0[4] = 969.41578824749;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 506.58721;
      doubleArray1[1] = 969.41578824749;
      doubleArray1[2] = 1257.7761745;
      doubleArray1[3] = 1115.52293737273;
      doubleArray1[4] = (-1333.388195725);
      doubleArray1[5] = 969.41578824749;
      doubleArray1[6] = 969.41578824749;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 470.880575972929;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {470.880575972929}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2515.1064F);
      floatArray0[1] = 0.0F;
      double[] doubleArray1 = MathArrays.scale((-944.707), doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {470.880575972929}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-444844.17628565786)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[0][7];
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection1, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {470.880575972929}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-444844.17628565786)}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[6];
      int int0 = (-2045222521);
      intArray0[0] = (-2045222521);
      intArray0[1] = (-3123);
      intArray0[2] = 1;
      intArray0[3] = 1114;
      intArray0[4] = (-334);
      int int1 = (-4651);
      intArray0[5] = (-4651);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int2 = (-1446);
      intArray1[0] = (-1446);
      intArray1[1] = 1;
      intArray1[2] = (-4651);
      intArray1[3] = (-2045222521);
      intArray1[4] = (-3123);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3.141592653589793);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4946.94);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      
      double[][] doubleArray2 = new double[3][9];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-4946.94);
      doubleArray3[1] = (-4946.94);
      doubleArray3[2] = (-4946.94);
      doubleArray3[3] = (-4946.94);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = (-20.0);
      double double1 = (-1.0);
      double double2 = 3459.16;
      double double3 = 0.0;
      double double4 = MathArrays.linearCombination((-20.0), (-1.0), (-1.0), 3459.16, 0.0, 0.0);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals((-3439.16), double4, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.scale(0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2902.0F;
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = (-2921.552F);
      floatArray0[5] = 3371.04F;
      floatArray0[6] = (-2921.552F);
      floatArray0[7] = 2902.0F;
      floatArray0[8] = (-1415.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2902.0F, 0.0F, 3.4028235E38F, 3.4028235E38F, (-2921.552F), 3371.04F, (-2921.552F), 2902.0F, (-1415.0F)}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) (-1.0F);
      doubleArray0[7] = 2.4079954646626107E7;
      doubleArray0[8] = (double) (-1.0F);
      double[] doubleArray1 = MathArrays.scale((-1.0F), doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), Double.NaN, (-1.0), 2.4079954646626107E7, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, Double.NaN, 1.0, (-2.4079954646626107E7), 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-1.0F);
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = 2.4079954646626107E7;
      doubleArray2[3] = 2.4079954646626107E7;
      doubleArray2[4] = Double.NaN;
      doubleArray2[5] = Double.NaN;
      doubleArray2[6] = Double.NaN;
      doubleArray2[7] = 2.4079954646626107E7;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), Double.NaN, 2.4079954646626107E7, 2.4079954646626107E7, Double.NaN, Double.NaN, Double.NaN, 2.4079954646626107E7}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1476);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-1476)}, intArray0);
      assertArrayEquals(new int[] {0, (-1476)}, intArray1);
      assertNotNull(intArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4946.94);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      
      double[][] doubleArray2 = new double[3][9];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2994.567611418), (-2994.567611418), (-2994.567611418), (-2994.567611418), (-569.8128), (-569.8128), (-569.8128), (-569.8128));
      assertEquals(1.8584243612795092E7, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-569.8128);
      double[] doubleArray1 = MathArrays.scale((-1.0), doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-569.8128)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 569.8128}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[9][7];
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1.0);
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-569.8128);
      doubleArray4[2] = 1.8584243612795092E7;
      doubleArray4[3] = 1.8584243612795092E7;
      doubleArray2[3] = doubleArray4;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray1;
      doubleArray2[7] = doubleArray0;
      doubleArray2[8] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-3086.0);
      doubleArray0[2] = 475.527888582764;
      doubleArray0[3] = (-605.02);
      doubleArray0[4] = 475.527888582764;
      doubleArray0[5] = 502.94;
      doubleArray0[7] = 502.94;
      doubleArray0[8] = 677.032;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-3086.0), 475.527888582764, (-605.02), 475.527888582764, 502.94, 0.0, 502.94, 677.032}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 9523396.0, 226126.7728199816, 366049.2004, 226126.7728199816, 252948.6436, 0.0, 252948.6436, 458372.32902400004}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'ic7_eG0Y8I'";
      stringArray0[1] = "string \"{0}\" unparseable (from position {1})";
      stringArray0[2] = "|6T$dGI";
      stringArray0[3] = "|6T$dGI";
      stringArray0[4] = "string \"{0}\" unparseable (from position {1})";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 9,523,396)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long[][] longArray0 = new long[3][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1245L;
      longArray2[1] = 3184L;
      longArray2[2] = 1L;
      longArray2[3] = 2274L;
      longArray2[4] = 288L;
      longArray2[5] = (-38L);
      longArray2[6] = 0L;
      longArray2[7] = 1L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 288L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 713.88;
      doubleArray0[1] = (-3086.0);
      doubleArray0[2] = 475.527888582764;
      doubleArray0[3] = (-605.02);
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 502.94;
      doubleArray0[7] = 502.94;
      doubleArray0[8] = 677.032;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {713.88, (-3086.0), 475.527888582764, (-605.02), 1.34217729E8, 502.94, 0.0, 502.94, 677.032}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {509624.6544, 9523396.0, 226126.7728199816, 366049.2004, 1.801439877791744E16, 252948.6436, 0.0, 252948.6436, 458372.32902400004}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'ic7_eG0Y8I'";
      stringArray0[1] = "string \"{0}\" unparseable (from position {1})";
      stringArray0[2] = "|6T$dGI";
      stringArray0[3] = "|6T$dGI";
      stringArray0[4] = "string \"{0}\" unparseable (from position {1})";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[0][8];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[][] longArray0 = new long[3][0];
      long[] longArray1 = new long[6];
      longArray1[0] = (-1558L);
      longArray1[1] = 1258L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = (-2153L);
      longArray1[5] = (-1613L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = (-2153L);
      longArray2[2] = 1258L;
      longArray2[3] = 0L;
      longArray0[1] = longArray2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "string \"{0}\" unparseable (from position {1})";
      stringArray0[1] = "M#";
      stringArray0[2] = "M#";
      stringArray0[3] = "M#";
      stringArray0[4] = "M#";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2403.645;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1757.599);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly decreasing (-1,757.599 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 866.9846;
      doubleArray0[2] = (-2653.0);
      doubleArray0[3] = (-200.71);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7830355.80073716, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 866.9846, (-2653.0), (-200.71)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-302);
      intArray0[1] = (-3391);
      int[] intArray1 = MathArrays.copyOf(intArray0, 199);
      assertEquals(2, intArray0.length);
      assertEquals(199, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-302), (-3391)}, intArray0);
      assertNotNull(intArray1);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(199, intArray1.length);
      assertEquals(199, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {(-302), (-3391)}, intArray0);
      assertNotNull(intArray2);
      
      long[][] longArray0 = new long[6][2];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (-3391);
      longArray2[1] = (long) (-3391);
      longArray2[2] = (long) 199;
      longArray2[3] = (long) (-302);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 199;
      longArray3[1] = (-2779L);
      longArray3[2] = (long) (-302);
      longArray3[3] = 1176L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-3474L);
      longArray4[1] = 0L;
      longArray4[2] = 1176L;
      longArray4[3] = (long) (-3391);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (long) (-3391);
      longArray5[1] = 0L;
      longArray5[2] = (-1547L);
      longArray5[3] = (long) (-3391);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[9];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = (long) (-302);
      longArray6[1] = (long) (-302);
      longArray6[2] = (long) (-3391);
      longArray6[3] = 0L;
      longArray6[4] = (long) (-302);
      longArray6[5] = 0L;
      longArray6[6] = (-3474L);
      longArray6[7] = (long) (-302);
      longArray6[8] = (long) (-302);
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,391 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 911.1301384787514;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {20.0, 100.0, 911.1301384787514}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {400.0, 4000.0, 46445.205539150054, 182226.0276957503, 830158.1292443087}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(911.1301384787514, 0.0, 20.0, 100.0, (-264.985016983), Double.NaN, 100.0, 20.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1253);
      intArray0[1] = (-1423);
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[5] = 204;
      intArray0[6] = (-1227);
      intArray0[7] = 2;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-1253), (-1423), (-1), 0, 0, 204, (-1227), 2}, intArray0);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {20.0, 100.0, 911.1301384787514}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination(911.1301384787514, 100.0, (double) 0, (-330.3952), (-264.985016983), (-0.49999999999999994), 1704.1483, 1.0E-6);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(91245.50806051494, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cG";
      stringArray0[1] = "";
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3555.658);
      doubleArray0[1] = (-3555.658);
      doubleArray0[2] = (-2193.385980331);
      doubleArray0[3] = (-1326.442702);
      doubleArray0[4] = 2293.42;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 0.75;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-3555.658), (-3555.658), (-2193.385980331), (-1326.442702), 2293.42, (-1.0), 0.75}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2293.42;
      doubleArray1[1] = 0.167;
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {2293.42, 0.167}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 85, 224);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 85;
      floatArray0[1] = (float) 85;
      floatArray0[2] = (float) (-2178);
      floatArray0[3] = (float) (-2178);
      floatArray0[4] = (float) 85;
      floatArray0[5] = (float) 85;
      floatArray0[6] = (float) 85;
      floatArray0[7] = (float) 85;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {85.0F, 85.0F, (-2178.0F), (-2178.0F), 85.0F, 85.0F, 85.0F, 85.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2178), 85);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.scale(4879.4042863, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1476);
      intArray0[1] = 1965;
      intArray0[2] = 2;
      intArray0[3] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1476), 1965, 2, 0}, intArray0);
      assertArrayEquals(new int[] {(-1476), 1965, 2, 0}, intArray1);
      assertNotNull(intArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 1965);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1965, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 911.1301384787514;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {20.0, 100.0, 911.1301384787514}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {400.0, 4000.0, 46445.205539150054, 182226.0276957503, 830158.1292443087}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(911.1301384787514, 569.8128, 20.0, 100.0, (-264.985016983), Double.NaN, 100.0, 20.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1253);
      intArray0[1] = (-1423);
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = 1647;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(916.8195728955118, double1, 0.01);
      assertArrayEquals(new double[] {20.0, 100.0, 911.1301384787514}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {20.0, 100.0, 911.1301384787514}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {400.0, 4000.0, 46445.205539150054, 182226.0276957503, 830158.1292443087}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 149.57756F;
      floatArray0[2] = 3371.04F;
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-2921.552F);
      floatArray0[6] = 2902.0F;
      floatArray0[7] = (-1415.0F);
      floatArray0[8] = 946.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 149.57756F, 3371.04F, 3.4028235E38F, 0.0F, (-2921.552F), 2902.0F, (-1415.0F), 946.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2921.552F);
      doubleArray0[1] = (double) 946.0F;
      doubleArray0[2] = (double) (-1415.0F);
      doubleArray0[3] = (double) (-1415.0F);
      doubleArray0[4] = (double) (-1415.0F);
      doubleArray0[5] = (double) 149.57756F;
      doubleArray0[6] = (double) 2902.0F;
      doubleArray0[7] = (double) 0.0F;
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = (-755);
      intArray0[2] = 6;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2, (-755), 6}, intArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 911.1301384787514;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {20.0, 100.0, 911.1301384787514}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {400.0, 4000.0, 46445.205539150054, 182226.0276957503, 830158.1292443087}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(911.1301384787514, 0.0, 20.0, 100.0, (-264.985016983), Double.NaN, 100.0, 20.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1253);
      intArray0[1] = (-1423);
      intArray0[2] = (-1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "DECREASING";
      stringArray0[1] = "string \"{0}\" unparseable (from position {1})";
      stringArray0[2] = "string \"{0}\" unparseable (from position {1})";
      stringArray0[3] = "";
      stringArray0[4] = "string \"{0}\" unparseable (from position {1})";
      stringArray0[5] = "IT$V_mZ0Y9,";
      stringArray0[6] = "string \"{0}\" unparseable (from position {1})";
      stringArray0[7] = "M#";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = 0.0;
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, (-1.0));
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4946.94);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1.986821492305628E-8);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.986821492305628E-8}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      MathArrays.scaleInPlace(2492.0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.2327774479999999E7)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4946.94);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-4946.94)}, doubleArray0, 0.01);
      
      double[][] doubleArray2 = new double[3][9];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-4946.94);
      doubleArray3[1] = (-4946.94);
      doubleArray3[2] = (-4946.94);
      doubleArray3[3] = (-4946.94);
      doubleArray2[2] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 417L;
      longArray0[1] = 9218868437227405312L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {417L, 9218868437227405312L, 0L}, longArray0);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 417L;
      doubleArray0[3] = (double) 9218868437227405312L;
      doubleArray0[4] = (double) 417L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 9218868437227405312L;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 417.0, 9.2188684372274053E18, 417.0, 0.0, 0.0, 0.0, 9.2188684372274053E18}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 417.0, 9.2188684372274053E18, 417.0, 0.0, 0.0, 0.0, 9.2188684372274053E18}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 470.880575972929;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {470.880575972929}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2515.1064F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2498.6326F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-2515.1064F), 0.0F, 0.0F, 0.0F, 2498.6326F, (-1.0F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2007.727110693);
      doubleArray0[1] = 6565.96720416;
      doubleArray0[2] = (-84.14978);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2007.727110693), 6565.96720416, (-84.14978)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2007.727110693), 6565.96720416, (-84.14978)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "l>(8>#kN%<p2-&?E`";
      stringArray0[1] = "[gc*l05tt>}VZUZ";
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 417L;
      longArray0[1] = 9218868437227405312L;
      long[][] longArray1 = new long[4][9];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2007.727110693);
      doubleArray0[1] = 6579.623835107007;
      doubleArray0[2] = (-84.14978);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2007.727110693), 6579.623835107007, (-84.14978)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2007.727110693), 6579.623835107007, (-84.14978)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "l>(8>#kh%<p2-&?E`";
      stringArray0[1] = "[gc*l05tt>}VZUZ";
      long[][] longArray0 = new long[0][5];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-20.0), (-1.0), (-1.0), 3459.16, 0.0, 0.0);
      assertEquals((-3439.16), double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-507);
      intArray0[1] = (-495);
      intArray0[2] = 0;
      intArray0[3] = 224;
      intArray0[4] = 138;
      intArray0[5] = 0;
      intArray0[6] = (-2606);
      intArray0[7] = (-742);
      intArray0[8] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-507), (-495), 0, 224, 138, 0, (-2606), (-742), 0}, intArray0);
      assertArrayEquals(new int[] {(-507), (-495), 0, 224, 138, 0, (-2606), (-742), 0}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathArrays.linearCombination(0.0, (-1.0), 0.0, (-1.0), 0.0, 0.0, (-1.0), (-879.94));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(879.94, double1, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-879.94);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 879.94);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), (-879.94), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.9977322720366465, 0.9977322720366465, 877.9445354559267, -0.0, -0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-879.94);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "F<,";
      stringArray0[1] = "$<";
      stringArray0[2] = "2Z@!/(fn @blzJ";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[4] = "S3D o!";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2178), 85);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination((-822.772), (-2325.33), (-2325.33), (-1145.6764361011), (-822.772), (-1145.6764361011), 0.8109631538391113, 911.1301384787514);
      assertEquals(5520661.587573404, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 204;
      intArray0[1] = (-1227);
      intArray0[2] = (-1253);
      intArray0[3] = 1647;
      intArray0[4] = (-1);
      intArray0[5] = (-1423);
      intArray0[6] = 1647;
      intArray0[7] = 0;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {204, (-1227), (-1253), 1647, (-1), (-1423), 1647, 0}, intArray0);
      
      double double2 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1554.9000319157944);
      doubleArray0[1] = (-4657.86570457426);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1554.9000319157944), (-4657.86570457426), 0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 129;
      intArray0[1] = (-1051);
      intArray0[2] = (-2045222521);
      intArray0[3] = (-2045222521);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {129, (-1051), (-2045222521), (-2045222521)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 149.57756F;
      floatArray0[2] = 3371.04F;
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-2921.552F);
      floatArray0[6] = 2902.0F;
      floatArray0[7] = (-1415.0F);
      floatArray0[8] = 946.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 149.57756F, 3371.04F, 3.4028235E38F, 0.0F, (-2921.552F), 2902.0F, (-1415.0F), 946.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2921.552F);
      doubleArray0[1] = (double) 946.0F;
      doubleArray0[2] = (double) (-1415.0F);
      doubleArray0[3] = (double) (-1415.0F);
      doubleArray0[4] = (double) (-1415.0F);
      doubleArray0[5] = (double) 149.57756F;
      doubleArray0[6] = (double) 2902.0F;
      doubleArray0[7] = (double) 0.0F;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,921.552 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 20.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-2471.0809396639);
      doubleArray0[5] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-2471.0809396639), (-1.0), 0.0, 3.834E-20, 20.0, 1.304E19}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1227.0;
      doubleArray0[2] = (-330.3952);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,227 >= -330.395)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2994.567611418), (-2994.567611418), (-2994.567611418), (-2994.567611418), (-569.8128), (-569.8128), (-569.8128), (-569.8128));
      assertEquals(1.8584243612795092E7, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      double double1 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-569.8128);
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(569.8128, double2, 0.01);
      assertArrayEquals(new double[] {0.0, (-569.8128)}, doubleArray0, 0.01);
      
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(569.8128, double3, 0.01);
      assertArrayEquals(new double[] {0.0, (-569.8128)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2787);
      assertEquals(2, doubleArray0.length);
      assertEquals(2787, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-569.8128)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,787 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 149.57756F;
      floatArray0[2] = 3371.04F;
      floatArray0[3] = 3.4028235E38F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 149.57756F;
      floatArray0[8] = 149.57756F;
      floatArray1[2] = 2902.0F;
      floatArray1[3] = 3.4028235E38F;
      floatArray1[4] = (-1415.0F);
      floatArray1[5] = 3.4028235E38F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 149.57756F, 3371.04F, 3.4028235E38F, 0.0F, 0.0F, 0.0F, 0.0F, 149.57756F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {149.57756F, 0.0F, 2902.0F, 3.4028235E38F, (-1415.0F), 3.4028235E38F}, floatArray1, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[3];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      double double0 = MathArrays.linearCombination(Double.NaN, (-1159.02), (-0.3058015757857271), 1108.74);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3.4028235E38F;
      doubleArray0[1] = (double) (-1415.0F);
      doubleArray0[2] = (double) 3.4028235E38F;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.4028234663852886E38, (-1415.0), 3.4028234663852886E38}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      long[][] longArray0 = new long[9][5];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 3952090531849364496L;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) 0;
      longArray2[5] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 0;
      longArray3[1] = 3952090531849364496L;
      longArray3[2] = (-1558L);
      longArray3[3] = 3952090531849364496L;
      longArray3[4] = (long) 0;
      longArray3[5] = (long) 0;
      longArray3[6] = (long) 0;
      longArray3[7] = (-2184L);
      longArray3[8] = 3952090531849364496L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-1558L);
      longArray4[1] = 3952090531849364496L;
      longArray4[2] = (long) 0;
      longArray4[3] = (-2184L);
      longArray4[4] = 3952090531849364496L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = (-1558L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = (-1558L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = (-2184L);
      longArray7[1] = 3952090531849364496L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[2];
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray5));
      
      longArray8[0] = (long) 0;
      longArray8[1] = (long) 0;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[1];
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray3));
      
      longArray9[0] = (-2184L);
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.34217729E8, 0.0, 0.0, 1.34217729E8);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 599.7203;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.34217729E8, 0.0, 0.0, 0.0, 0.0, 0.0, 599.7203}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.68435458E8, 0.0, 0.0, 0.0, 0.0, 0.0, 1199.4406}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.34217729E8, 0.0, 0.0, 0.0, 0.0, 0.0, 599.7203}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.68435458E8, 0.0, 0.0, 0.0, 0.0, 0.0, 1199.4406}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 7.205759511166976E16, 0.0, 0.0, 0.0, 0.0, 0.0, 1438657.7529283597}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|6T$dGI";
      stringArray0[1] = "'ic7_eG0Y8I'";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.34217729E8, 0.0, 0.0, 1.34217729E8);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 599.7203;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.34217729E8, 0.0, 0.0, 0.0, 0.0, 0.0, 599.7203}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.68435458E8, 0.0, 0.0, 0.0, 0.0, 0.0, 1199.4406}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1410;
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1410, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 713.88;
      doubleArray0[1] = (-3086.0);
      doubleArray0[2] = 475.527888582764;
      doubleArray0[3] = (-605.02);
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 502.94;
      doubleArray0[6] = 2055.28;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 677.032;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {713.88, (-3086.0), 475.527888582764, (-605.02), 1.34217729E8, 502.94, 2055.28, 0.0, 677.032}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {509624.6544, 9523396.0, 226126.7728199816, 366049.2004, 1.801439877791744E16, 252948.6436, 4224175.878400001, 0.0, 458372.32902400004}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {713.88, (-3086.0), 475.527888582764, (-605.02), 1.34217729E8, 502.94, 2055.28, 0.0, 677.032}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {509624.6544, 9523396.0, 226126.7728199816, 366049.2004, 1.801439877791744E16, 252948.6436, 4224175.878400001, 0.0, 458372.32902400004}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      MathArrays.scaleInPlace((-1.0), doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {713.88, (-3086.0), 475.527888582764, (-605.02), 1.34217729E8, 502.94, 2055.28, 0.0, 677.032}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-509624.6544), (-9523396.0), (-226126.7728199816), (-366049.2004), (-1.801439877791744E16), (-252948.6436), (-4224175.878400001), -0.0, (-458372.32902400004)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 0);
      assertArrayEquals(new double[] {(-509624.6544), (-9523396.0), (-226126.7728199816), (-366049.2004), (-1.801439877791744E16), (-252948.6436), (-4224175.878400001), -0.0, (-458372.32902400004)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {713.88, (-3086.0), 475.527888582764, (-605.02), 1.34217729E8, 502.94, 2055.28, 0.0, 677.032}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1639.6435557984519;
      doubleArray0[1] = 866.9846;
      doubleArray0[2] = (-2653.0);
      doubleArray0[3] = (-200.71);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1.0518786790808551E7, double0, 0.01);
      assertArrayEquals(new double[] {1639.6435557984519, 866.9846, (-2653.0), (-200.71)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-302);
      intArray0[1] = (-3391);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-302), (-3391)}, intArray0);
      assertArrayEquals(new int[] {(-302), (-3391)}, intArray1);
      assertNotNull(intArray1);
      
      int[] intArray2 = MathArrays.copyOf(intArray0, 199);
      assertEquals(2, intArray0.length);
      assertEquals(199, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {(-302), (-3391)}, intArray0);
      assertNotNull(intArray2);
      
      int[] intArray3 = MathArrays.copyOf(intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(199, intArray2.length);
      assertEquals(199, intArray3.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertArrayEquals(new int[] {(-302), (-3391)}, intArray0);
      assertNotNull(intArray3);
      
      long[][] longArray0 = new long[6][2];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (-3391);
      longArray2[1] = (long) (-3391);
      longArray2[2] = (long) 199;
      longArray2[3] = (long) (-302);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 199;
      longArray3[1] = (-2779L);
      longArray3[2] = (long) (-302);
      longArray3[3] = 1176L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-3474L);
      longArray4[1] = 0L;
      longArray4[2] = 1176L;
      longArray4[3] = (long) (-3391);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (long) (-3391);
      longArray5[1] = 0L;
      longArray5[2] = (-1547L);
      longArray5[3] = (long) (-3391);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[9];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      
      longArray6[0] = (long) (-302);
      longArray6[1] = (long) (-302);
      longArray6[2] = (long) (-3391);
      longArray6[3] = 0L;
      longArray6[4] = (long) (-302);
      longArray6[5] = 0L;
      longArray6[6] = (-3474L);
      longArray6[7] = (long) (-302);
      longArray6[8] = (long) (-302);
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,391 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 4762;
      intArray0[1] = (-1627);
      intArray0[2] = (-1);
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {4762, (-1627), (-1), 2, 0, 2, 0}, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 58.44678552406;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 3826.128612218;
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, (-1.0), 0.0, 0.0, 58.44678552406, 0.0, 3826.128612218}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[][] longArray0 = new long[3][0];
      long[] longArray1 = new long[6];
      longArray1[0] = (-1558L);
      longArray1[1] = 1258L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = (-2153L);
      longArray1[5] = (-1613L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = (-2153L);
      longArray2[2] = 1258L;
      longArray2[3] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[1] = (-159L);
      longArray3[2] = 0L;
      longArray3[3] = (-1558L);
      longArray3[4] = 1258L;
      longArray3[5] = (-2153L);
      longArray3[6] = 0L;
      longArray3[7] = 1258L;
      longArray3[8] = 0L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double double0 = MathArrays.linearCombination(7.166400897, 7.166400897, 7.166400897, 7.166400897, 0.0, 7.166400897);
      assertEquals(102.7146036330448, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 7.166400897;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 7.166400897}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 51.3573018165224}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2331;
      intArray0[3] = 1;
      intArray0[4] = 1826;
      intArray0[5] = 0;
      intArray0[6] = 12;
      intArray0[7] = (-2753);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 2331, 1, 1826, 0, 12, (-2753)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      long[][] longArray0 = new long[0][3];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = -0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = -0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = -0.0;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      float float0 = (-380.0F);
      floatArray0[1] = (-380.0F);
      floatArray0[2] = 1273.5F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-3465.4492F);
      floatArray0[5] = 1194.26F;
      float float1 = 0.0F;
      floatArray0[6] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, (-380.0F), 1273.5F, 0.0F, (-3465.4492F), 1194.26F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      long long0 = (-2145L);
      longArray0[1] = (-2145L);
      long long1 = 0L;
      longArray0[2] = 0L;
      long long2 = (-631L);
      longArray0[3] = (-631L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,145 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-3153);
      intArray0[1] = 0;
      intArray0[2] = 931;
      intArray0[3] = 0;
      intArray0[4] = (-632);
      intArray0[5] = 132;
      intArray0[6] = 3989;
      intArray0[7] = 44;
      intArray0[8] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-3153), 0, 931, 0, (-632), 132, 3989, 44, 0}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3153), 0, 931, 0, (-632), 132, 3989, 44, 0}, intArray0);
      assertArrayEquals(new int[] {(-3153), 0, 931, 0, (-632), 132, 3989, 44, 0}, intArray1);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-632);
      doubleArray0[1] = (double) (-3153);
      doubleArray0[2] = (double) (-632);
      doubleArray0[3] = (double) 44;
      doubleArray0[4] = (double) 44;
      doubleArray0[5] = (double) 3989;
      doubleArray0[6] = (double) (-3153);
      doubleArray0[7] = 3.834E-20;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1264.0), (-6306.0), (-1264.0), 88.0, 88.0, 7978.0, (-6306.0), 7.668E-20}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-632.0), (-3153.0), (-632.0), 44.0, 44.0, 3989.0, (-3153.0), 3.834E-20}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3.141592653589793);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-3.141592653589793)}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-3.141592653589793)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-3.141592653589793));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3.141592653589793)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3.141592653589793)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      long[][] longArray0 = new long[1][9];
      long[] longArray1 = new long[8];
      longArray1[0] = (-297L);
      longArray1[1] = 0L;
      longArray1[2] = 5103L;
      longArray1[3] = 2356L;
      longArray1[4] = (-3687L);
      longArray1[5] = 0L;
      longArray1[6] = (-2798L);
      longArray1[7] = (-1L);
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -297 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 911.1301384787514;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {20.0, 100.0, 911.1301384787514}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {400.0, 4000.0, 46445.205539150054, 182226.0276957503, 830158.1292443087}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(911.1301384787514, 0.0, 20.0, 100.0, (-264.985016983), Double.NaN, 100.0, 20.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1253);
      intArray0[1] = (-1423);
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = 1647;
      intArray0[5] = 204;
      intArray0[6] = (-1227);
      intArray0[7] = 2;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-1253), (-1423), (-1), 0, 1647, 204, (-1227), 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cG";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = (-2492.0);
      doubleArray0[2] = 1435.5111;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 20.0;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = (-2016.8028115367106);
      doubleArray0[7] = (-3426.558761758);
      doubleArray0[8] = -0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(4907.133037388136, double0, 0.01);
      assertArrayEquals(new double[] {1.0E-5, (-2492.0), 1435.5111, 0.0, 20.0, 3.834E-20, (-2016.8028115367106), (-3426.558761758), -0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2007.727110693);
      doubleArray0[1] = 6565.96720416;
      doubleArray0[2] = (-84.14978);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2007.727110693), 6565.96720416, (-84.14978)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2007.727110693), 6565.96720416, (-84.14978)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "l>(8>#kN%<p2-&?E`";
      stringArray0[1] = "[gc*l05tt>}VZUZ";
      stringArray0[2] = "|6T$dGI";
      stringArray0[3] = "M#";
      stringArray0[4] = "string \"{0}\" unparseable (from position {1})";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-408.603);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 974.29323);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-408.603), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {974.29323, -0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1899.391496168;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 100.0;
      doubleArray0[3] = 284.376;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1899.391496168, 0.0, 100.0, 284.376}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3798.782992336, 0.0, 200.0, 568.752}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2403.645;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1757.599);
      doubleArray0[3] = 31.08379629923;
      doubleArray0[4] = (-5245.813963253323);
      doubleArray0[5] = (-1967.94455325893);
      doubleArray0[6] = 1136.86069;
      doubleArray0[7] = (-2733.732251710109);
      doubleArray0[8] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (2,403.645 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1619);
      intArray0[1] = 0;
      intArray0[2] = (-1476);
      intArray0[3] = 0;
      intArray0[4] = 1965;
      intArray0[5] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {(-1619), 0, (-1476), 0, 1965, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.8333333333333334;
      doubleArray0[5] = 732.61595545;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4866.90977576);
      doubleArray0[1] = 2293.42;
      doubleArray0[2] = (-3.141592653589793);
      doubleArray0[3] = (-396.62761803495);
      doubleArray0[4] = 2.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,293.42 >= -3.142)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[4];
      double double0 = 866.9846;
      doubleArray0[1] = 866.9846;
      doubleArray0[2] = (-2653.0);
      double double1 = (-200.71);
      doubleArray0[3] = (-200.71);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 12, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 732.61595545;
      double double1 = 0.0;
      doubleArray0[2] = 0.0;
      double double2 = 1.7976931348623157E308;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 1600.035532;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1386.57035233);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2439.125220177;
      doubleArray0[4] = (-2035.44336);
      doubleArray0[5] = 1688.89;
      doubleArray0[6] = 810.6462918615106;
      doubleArray0[7] = (-52.3971779);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 810.6462918615106;
      doubleArray1[1] = 1688.89;
      doubleArray1[2] = 810.6462918615106;
      doubleArray1[3] = (-1386.57035233);
      doubleArray1[4] = 1688.89;
      doubleArray1[5] = (-2035.44336);
      double double0 = 0.0;
      doubleArray1[6] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[1];
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      int int0 = 1;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 470.880575972929;
      doubleArray0[2] = 470.880575972929;
      doubleArray0[3] = 470.880575972929;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 470.880575972929;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 470.880575972929;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2515.1064F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 2498.6326F;
      floatArray0[6] = (-1.0F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, (-465), (-349));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 134217729;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 134217729);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
