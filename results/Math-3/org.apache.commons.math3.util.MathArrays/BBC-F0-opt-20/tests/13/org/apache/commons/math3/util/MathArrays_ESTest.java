/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 07:07:24 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = 168;
      intArray1[0] = 168;
      int int1 = MathArrays.distanceInf(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {168}, intArray1);
      assertEquals(0, int1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 168;
      doubleArray0[2] = (double) 168;
      doubleArray0[3] = (double) 168;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 168;
      doubleArray0[6] = (double) 168;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 168);
      assertArrayEquals(new double[] {0.0, 168.0, 168.0, 168.0, 0.0, 168.0, 168.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(168, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[24];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = (-1813.8749F);
      floatArray0[2] = (-1206.6936F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 123.7F;
      floatArray0[6] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(24, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1206.6936F);
      doubleArray0[1] = (double) (-199.83F);
      doubleArray0[2] = (double) (-1206.6936F);
      doubleArray0[3] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[4] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[5] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[6] = (double) (-1813.8749F);
      doubleArray0[7] = (double) 123.7F;
      doubleArray0[8] = (double) (-1206.6936F);
      try { 
        MathArrays.normalizeArray(doubleArray0, Float.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = (-797);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 3856.2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 3856.2}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = (-252);
      Integer integer1 = new Integer((-252));
      assertEquals((-252), (int)integer1);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(integer0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-797), (-797));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5.207000323380292E-8);
      doubleArray0[1] = (-5.207000323380292E-8);
      doubleArray0[2] = (-5.207000323380292E-8);
      doubleArray0[3] = (-5.207000323380292E-8);
      doubleArray0[4] = 3.834E-20;
      double[] doubleArray1 = MathArrays.scale(3.834E-20, doubleArray0);
      assertArrayEquals(new double[] {(-5.207000323380292E-8), (-5.207000323380292E-8), (-5.207000323380292E-8), (-5.207000323380292E-8), 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.9963639239840037E-27), (-1.9963639239840037E-27), (-1.9963639239840037E-27), (-1.9963639239840037E-27), 1.4699556E-39}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {(-5.207000323380292E-8), (-5.207000323380292E-8), (-5.207000323380292E-8), (-5.207000323380292E-8), 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.9963639239840037E-27), (-1.9963639239840037E-27), (-1.9963639239840037E-27), (-1.9963639239840037E-27), 1.4699556E-39}, doubleArray1, 0.01);
      assertEquals(3.9927278479680074E-27, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-2571.575F);
      floatArray0[2] = (-781.0426F);
      floatArray0[3] = 500.8478F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-781.0426F);
      floatArray1[1] = 500.8478F;
      floatArray1[2] = (-781.0426F);
      floatArray1[3] = 500.8478F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1.0F, (-2571.575F), (-781.0426F), 500.8478F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-781.0426F), 500.8478F, (-781.0426F), 500.8478F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1174.1F);
      floatArray0[1] = (-567.987F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = Float.NEGATIVE_INFINITY;
      floatArray0[6] = (-1258.225F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1174.1F), (-567.987F), 0.0F, 0.0F, 0.0F, Float.NEGATIVE_INFINITY, (-1258.225F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-567.987F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (-1174.1F);
      doubleArray0[6] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[7] = 2.12958795E9;
      doubleArray0[8] = (-1267.19455726874);
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-59.14619F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.4E-45F;
      floatArray0[3] = (-1530.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-59.14619F), 0.0F, 1.4E-45F, (-1530.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1530.0F);
      doubleArray0[1] = (double) (-1530.0F);
      doubleArray0[2] = (double) (-59.14619F);
      doubleArray0[3] = (double) 1.4E-45F;
      doubleArray0[4] = (double) 0.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1530.0), (-1530.0), (-59.14619064331055), 1.401298464324817E-45, 0.0}, doubleArray0, 0.01);
      assertEquals(2164.5549824080736, double0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "bt/-O?";
      stringArray0[1] = "";
      stringArray0[2] = "5R3O^H=|mt|C";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3738.560966847;
      MathArrays.scaleInPlace(3738.560966847, doubleArray0);
      assertArrayEquals(new double[] {1.3976838102831976E7}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.scaleInPlace(3738.560966847, doubleArray0);
      assertArrayEquals(new double[] {5.225326137118751E10}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {5.225326137118751E10}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {5.225326137118751E10}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 880.4265354267498;
      doubleArray2[1] = (-793.5977925694797);
      doubleArray2[2] = 3738.560966847;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = 1813.0782;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = 3738.560966847;
      double[] doubleArray3 = MathArrays.scale(880.4265354267498, doubleArray2);
      assertArrayEquals(new double[] {775150.8842835499, (-698704.5550342634), 3291528.279522784, 0.0, 1596282.1580837676, 0.0, 3291528.279522784}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {880.4265354267498, (-793.5977925694797), 3738.560966847, 0.0, 1813.0782, 0.0, 3738.560966847}, doubleArray2, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2132673415;
      intArray0[1] = 134217729;
      intArray0[2] = (-2142061764);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2142061764);
      intArray1[1] = (-3756);
      intArray1[2] = 134217729;
      intArray1[3] = (-2142061764);
      intArray1[4] = 134217729;
      intArray1[5] = 2132673415;
      intArray1[6] = 2132673415;
      intArray1[7] = 2132673415;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {2132673415, 134217729, (-2142061764)}, intArray0);
      assertArrayEquals(new int[] {(-2142061764), (-3756), 134217729, (-2142061764), 134217729, 2132673415, 2132673415, 2132673415}, intArray1);
      assertEquals((-2121825891), int0);
      assertEquals(3, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 956.0840403784451;
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {956.0840403784451}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2147008534;
      intArray0[1] = (-5209);
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-5209);
      intArray1[1] = (-5209);
      intArray1[2] = 2147008534;
      intArray1[3] = (-5209);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertArrayEquals(new int[] {2147008534, (-5209)}, intArray0);
      assertArrayEquals(new int[] {(-5209), (-5209), 2147008534, (-5209)}, intArray1);
      assertEquals(2147013743, int0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray1, (-1935));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 194;
      intArray0[1] = 0;
      intArray0[2] = (-498);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 264;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 264;
      intArray1[1] = 194;
      intArray1[2] = 0;
      intArray1[3] = (-1);
      intArray1[4] = 0;
      intArray1[5] = 1500;
      intArray1[6] = (-1);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertArrayEquals(new int[] {194, 0, (-498), (-1), (-1), 264}, intArray0);
      assertArrayEquals(new int[] {264, 194, 0, (-1), 0, 1500, (-1)}, intArray1);
      assertEquals(1348.420186737057, double0, 0.01);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 264;
      doubleArray0[3] = (double) 1500;
      doubleArray0[4] = (double) 1500;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1 >= -1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3146.63F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-3146.63F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(18, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2954.427F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = 2370.6562F;
      floatArray0[5] = (-1633.5272F);
      floatArray0[6] = (-1142.23F);
      floatArray0[7] = Float.NEGATIVE_INFINITY;
      floatArray0[8] = (-362.0F);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 2954.427F, 0.0F, Float.NaN, 2370.6562F, (-1633.5272F), (-1142.23F), Float.NEGATIVE_INFINITY, (-362.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double double0 = MathArrays.linearCombination((-1891.427), 3855590.276870364, Double.NaN, (double) Float.NaN, 1120.7974207, (double) Float.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-984);
      intArray0[0] = (-984);
      int int1 = (-2147483647);
      intArray0[1] = (-2147483647);
      int int2 = (-2193);
      intArray0[2] = (-2193);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2193));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-602.0);
      doubleArray0[1] = 2.608E18;
      doubleArray0[2] = 178.5999274596829;
      doubleArray0[3] = 2652.83;
      doubleArray0[4] = 1.01;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-602.0), 2.608E18, 178.5999274596829, 2652.83, 1.01}, doubleArray0, 0.01);
      assertEquals(2.608E18, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 335;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 335);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double0 = Double.NaN;
      double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2336.56023537921;
      doubleArray0[1] = 891.96166;
      doubleArray0[2] = 4.3466666666666665E18;
      doubleArray0[3] = 3.26E18;
      doubleArray0[4] = 9.869604401089358;
      doubleArray0[5] = 1506.062;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = 6.100345806024758E13;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {2336.56023537921, 891.96166, 4.3466666666666665E18, 3.26E18, 9.869604401089358, 1506.062, 1.0, 1.304E19, 6.100345806024758E13}, doubleArray0, 0.01);
      assertEquals(1.4126666666798383E19, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0}, doubleArray0, 0.01);
      assertEquals(5.422094798138447E-20, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(1963.56570475);
      assertEquals(1963.56570475, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1963.56570475);
      assertEquals(1963.56570475, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) doubleArray0[1];
      doubleArray1[1] = (-359.73);
      doubleArray1[2] = 1963.56570475;
      doubleArray1[3] = 1963.56570475;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 380.383F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 573.2444F;
      floatArray0[3] = (-1347.0771F);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 573.2444F;
      floatArray1[2] = (-1347.0771F);
      floatArray1[3] = 380.383F;
      floatArray1[4] = 380.383F;
      floatArray1[5] = 5286.772F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 573.2444F, (-1347.0771F), 380.383F, 380.383F, 5286.772F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {380.383F, 0.0F, 573.2444F, (-1347.0771F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      double[] doubleArray3 = MathArrays.scale((-7205.785511500149), doubleArray1);
      assertArrayEquals(new double[] {1963.56570475, (-359.73), 1963.56570475, 1963.56570475}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.414903330616613E7), 2592137.222051949, (-1.414903330616613E7), (-1.414903330616613E7)}, doubleArray3, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray3.length);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {1963.56570475, (-359.73), 1963.56570475, 1963.56570475}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.414903330616613E7), 2592137.222051949, (-1.414903330616613E7), (-1.414903330616613E7)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-1.414706974046138E7), 2591777.492051949, (-1.414706974046138E7), (-1.414706974046138E7)}, doubleArray4, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray4.length);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotNull(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(1963.56570475);
      assertEquals(1963.56570475, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1963.56570475);
      assertEquals(1963.56570475, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(1963.56570475);
      assertEquals(1963.56570475, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1963.56570475);
      assertEquals(1963.56570475, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) doubleArray0[1];
      doubleArray1[1] = (-359.73);
      doubleArray1[2] = 1963.56570475;
      doubleArray1[3] = 1963.56570475;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      try { 
        MathArrays.convolve(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(1963.56570475);
      assertEquals(1963.56570475, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1963.56570475);
      assertEquals(1963.56570475, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2937.46647845);
      doubleArray0[1] = 1.0851747513708006E13;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2937.46647845);
      doubleArray2[1] = 1.0851747513708006E13;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 1.0851747513708006E13;
      doubleArray2[4] = (-1229.6487);
      doubleArray2[5] = 1.0851747513708006E13;
      doubleArray2[6] = (-2937.46647845);
      doubleArray1[5] = doubleArray2;
      doubleArray1[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 155;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {155}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 155;
      doubleArray0[1] = (double) 155;
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {155}, intArray0);
      assertArrayEquals(new int[] {155}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double2 = new Double(155);
      assertEquals(155.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Integer integer0 = new Integer((-1518));
      assertEquals((-1518), (int)integer0);
      assertNotNull(integer0);
      
      Pair<Double, Integer> pair0 = new Pair<Double, Integer>(double2, integer0);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(pair0);
      
      Pair<Double, Integer> pair1 = new Pair<Double, Integer>(pair0);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 155;
      doubleArray2[1] = 0.9166666666666666;
      doubleArray2[2] = (double) 155;
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 450;
      doubleArray0[1] = (double) 450;
      doubleArray0[2] = (double) 450;
      doubleArray0[3] = (double) 450;
      doubleArray0[4] = (-599.82);
      doubleArray0[5] = (double) 450;
      doubleArray0[6] = (double) 450;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {450.0, 450.0, 450.0, 450.0, (-599.82), 450.0, 450.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {202500.0, 202500.0, 202500.0, 202500.0, 359784.0324000001, 202500.0, 202500.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-599.82);
      doubleArray2[1] = (-599.82);
      doubleArray2[2] = (double) 450;
      doubleArray2[3] = (-599.82);
      doubleArray2[4] = (-599.82);
      doubleArray2[5] = (double) 450;
      doubleArray2[6] = (double) 450;
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {450.0, 450.0, 450.0, 450.0, (-599.82), 450.0, 450.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-149.82000000000005), (-149.82000000000005), 900.0, (-149.82000000000005), (-1199.64), 900.0, 900.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-599.82), (-599.82), 450.0, (-599.82), (-599.82), 450.0, 450.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {450.0, 450.0, 450.0, 450.0, (-599.82), 450.0, 450.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-149.82000000000005), (-149.82000000000005), 900.0, (-149.82000000000005), (-1199.64), 900.0, 900.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-599.82), (-599.82), 450.0, (-599.82), (-599.82), 450.0, 450.0}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {450.0, 450.0, 450.0, 450.0, (-599.82), 450.0, 450.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {202500.0, 202500.0, 202500.0, 202500.0, 359784.0324000001, 202500.0, 202500.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-599.82), (-599.82), 450.0, (-599.82), (-599.82), 450.0, 450.0}, doubleArray2, 0.01);
      assertEquals((-3.068213083141681E8), double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale(1376.0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1376.0;
      doubleArray3[1] = 1376.0;
      doubleArray3[2] = 1376.0;
      doubleArray3[3] = 1376.0;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 450;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 450;
      floatArray0[1] = (float) 450;
      floatArray0[2] = (float) 450;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {450.0F, 450.0F, 450.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = MathArrays.equals(floatArray1, floatArray0);
      assertArrayEquals(new float[] {450.0F, 450.0F, 450.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-1.962596), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2338;
      intArray0[1] = 2;
      intArray0[2] = 1203;
      intArray0[3] = (-1134);
      intArray0[4] = (-980);
      intArray0[5] = 2861;
      intArray0[6] = 134217729;
      intArray0[7] = (-1);
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = 1.304E19;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.304E19;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[2] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale(1376.0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      double double1 = MathArrays.linearCombination((-1026.0), 0.0, 616.62266, 0.0, 0.0, (-1026.0));
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1.0);
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 568611.8089696876);
      assertArrayEquals(new double[] {Double.NaN, (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 568611.8089696876, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 635209.0;
      doubleArray0[3] = 4068.2900937;
      doubleArray0[4] = 1641.12;
      doubleArray0[5] = 579.4779078368965;
      doubleArray0[6] = 12.0;
      doubleArray0[7] = (-2598.17);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (635,209 > 4,068.29)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 20.0);
      assertEquals(0.0, double0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (-659.3948);
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, (-659.3948)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, (-659.3948)}, doubleArray0, 0.01);
      assertEquals(2.258594253069816E19, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, (-659.3948)}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 450;
      long[][] longArray0 = new long[2][0];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(450, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = Double.valueOf(1.34217729E8);
      assertEquals(1.34217729E8, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[1] = double0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) doubleArray0[1];
      doubleArray1[1] = 1.34217729E8;
      doubleArray1[2] = 1.34217729E8;
      doubleArray1[3] = (double) doubleArray0[1];
      doubleArray1[4] = 1.34217729E8;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8, 1.34217729E8, 1.34217729E8, 1.34217729E8, 1.34217729E8}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((-1.0), (-1.0), (-1.0), (-1.0));
      assertEquals(2.0, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (-1.0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-550);
      intArray0[2] = 3218;
      intArray0[3] = 134217729;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 25;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 754.0635311;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {754.0635311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {568611.8089350007, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[4];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[1] = 2164;
      intArray1[1] = 12;
      intArray1[2] = 151;
      intArray1[3] = 0;
      int int1 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 12, 151, 0}, intArray1);
      assertEquals(163, int1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      
      int[] intArray2 = MathArrays.copyOf(intArray1, 163);
      assertArrayEquals(new int[] {0, 12, 151, 0}, intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(163, intArray2.length);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-270.16869952061563);
      doubleArray0[1] = (-270.16869952061563);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {(-270.16869952061563), (-270.16869952061563), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-270.16869952061563), (-270.16869952061563), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {72991.1262006607, 72991.1262006607, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-270.16869952061563));
      assertArrayEquals(new double[] {(-270.16869952061563), (-270.16869952061563), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {72991.1262006607, 72991.1262006607, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-135.08434976030782), (-135.08434976030782), -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-270.16869952061563), (-270.16869952061563), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {72991.1262006607, 72991.1262006607, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-135.08434976030782), (-135.08434976030782), -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertEquals(191.03811949537806, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1560.1);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1560.1), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2433912.01, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(1917.3325913088, 444.79805806464, 1917.3325913088, (-1560.1));
      assertEquals((-2138404.7624226604), double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1560.1), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1560.1, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1560.1), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2433912.01, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("a+N(g*shw?ws}E]5t+c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.a+N(g*shw?ws}E]5t+c
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-3122);
      intArray0[1] = (-183);
      intArray0[2] = (-1);
      intArray0[3] = 528;
      intArray0[4] = 134217729;
      intArray0[5] = 158;
      intArray0[6] = 1316;
      intArray0[7] = 88;
      intArray0[8] = 1218;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-3122), (-183), (-1), 528, 134217729, 158, 1316, 88, 1218}, intArray0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2696L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2696L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.304E19;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.608E19, 2.608E19, 2.608E19, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.608E19, 2.608E19, 2.608E19, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.400832E38, 3.400832E38, 3.400832E38, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[][] doubleArrayArray0 = null;
      try { 
        MathArrays.sortInPlace((double[]) null, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 155;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {155}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      Double double1 = new Double(155);
      assertEquals(155.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(3.834E-20);
      assertEquals(3.834E-20, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray0 = new Double[9];
      Double double3 = new Double(1257.001317006814);
      assertEquals(1257.001317006814, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[0] = double3;
      doubleArray0[1] = double2;
      doubleArray0[2] = double1;
      doubleArray0[3] = double2;
      Double double4 = new Double((-805.174001818235));
      assertEquals((-805.174001818235), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      doubleArray0[5] = double2;
      doubleArray0[6] = double1;
      doubleArray0[7] = double1;
      doubleArray0[8] = double2;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 155;
      floatArray0[1] = (float) 155;
      floatArray0[2] = (float) 155;
      floatArray0[3] = (float) 155;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {155.0F, 155.0F, 155.0F, 155.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 155;
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {155.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {310.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      MathArrays.checkOrder(doubleArray1);
      assertArrayEquals(new double[] {155.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {155.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-1156L);
      longArray0[1] = (long) 155;
      longArray0[2] = (long) 155;
      longArray0[3] = (long) 155;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,156 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 754.063531123;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {754.063531123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(754.063531123, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertArrayEquals(new double[] {754.063531123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.linearCombination((-127.630454), 754.063531123, 20853.892034529046, 754.063531123, 754.063531123, 754.063531123, (-2606.1779024593566), 20853.892034529046);
      assertEquals((-3.8151422797300406E7), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 754.063531123;
      doubleArray2[1] = 2.17333333333333325E18;
      doubleArray2[2] = 20.0;
      doubleArray2[3] = (-127.630454);
      doubleArray2[4] = 754.063531123;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2623899.357326784, 106.267527, 106.267527, 106.267527, 106.267527, 2916.539341, 156.3, 3871.9474839472077);
      assertEquals(2.797617074022086E8, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2623899.357326784;
      doubleArray0[1] = 3871.9474839472077;
      doubleArray0[2] = 156.3;
      doubleArray0[3] = 2.797617074022086E8;
      doubleArray0[4] = 2916.539341;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2623899.357326784, 3871.9474839472077, 156.3, 2.797617074022086E8, 2916.539341}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.884847837379911E12, 1.4991977318445113E7, 24429.690000000002, 7.8266612928598992E16, 8506201.727600716}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 2209);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double((-2059.69807377487));
      assertEquals((-2059.69807377487), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2059.69807377487);
      doubleArray0[1] = (-2059.69807377487);
      float[] floatArray0 = new float[0];
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean2);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean3);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scale((-2059.69807377487), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 155;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {155L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 155;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {155}, intArray0);
      assertArrayEquals(new int[] {155}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[4][5];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 155;
      doubleArray3[1] = (double) 155;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 155;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {155.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 155;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray4, mathArrays_OrderDirection1, true, true);
      assertArrayEquals(new double[] {155.0}, doubleArray4, 0.01);
      assertTrue(boolean1);
      assertEquals(1, doubleArray4.length);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {155}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      
      double[] doubleArray5 = MathArrays.scale(1443.9299837407839, doubleArray4);
      assertArrayEquals(new double[] {155.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {223809.1474798215}, doubleArray5, 0.01);
      assertEquals(1, doubleArray4.length);
      assertEquals(1, doubleArray5.length);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertNotNull(doubleArray5);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 155;
      double[] doubleArray0 = new double[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {155}, intArray0);
      assertArrayEquals(new int[] {155}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 155;
      floatArray0[1] = (float) 155;
      floatArray0[2] = (float) 155;
      floatArray0[3] = (float) 155;
      floatArray0[4] = (float) 155;
      floatArray0[5] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {155.0F, 155.0F, 155.0F, 155.0F, 155.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {155.0F, 155.0F, 155.0F, 155.0F, 155.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = MathArrays.scale(155.0F, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(436.3015759, 436.3015759, 3.834E-20, 436.3015759);
      assertEquals(190359.06513282345, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3062.1426F);
      floatArray0[2] = (-3080.0F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-3062.1426F), (-3080.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 155;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {155L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long[][] longArray0 = new long[1][9];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 134217708;
      longArray1[1] = (long) 4;
      longArray1[2] = 866L;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4L;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 134217708;
      doubleArray0[3] = (double) 98;
      doubleArray0[4] = (double) 866L;
      doubleArray0[5] = (double) 98;
      double[] doubleArray1 = MathArrays.scale(4, doubleArray0);
      assertArrayEquals(new double[] {4.0, 1.0, 1.34217708E8, 98.0, 866.0, 98.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {16.0, 4.0, 5.36870832E8, 392.0, 3464.0, 392.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(389.0, 1.0, 4.0, 98.0);
      assertEquals(781.0, double0, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 781.0;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1619.845473286506;
      doubleArray0[1] = 641.0;
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(1619.845473286506, doubleArray0);
      assertArrayEquals(new double[] {1619.845473286506, 641.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2623899.357326784, 1038320.9483766503, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(568611.8089696876, 885.986, 254.8495634454719, (-1428.153555382));
      assertEquals(5.034181378716954E8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double((-2059.69807377487));
      assertEquals((-2059.69807377487), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2059.69807377487);
      double double1 = MathArrays.linearCombination((-2059.69807377487), (-2059.69807377487), (-110.9), 2.0217439756338078E-10, 2.0217439756338078E-10, 3433.0);
      assertEquals(4242356.155112581, double1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-3114);
      intArray0[1] = (-1158);
      intArray0[2] = 2147483503;
      intArray0[3] = (-2147483647);
      intArray0[4] = 69;
      intArray0[5] = (-896);
      intArray0[6] = 1000;
      intArray0[7] = 72;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-3114), (-1158), 2147483503, (-2147483647), 69, (-896), 1000, 72}, intArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(8, intArray0.length);
      assertNotEquals(double2, double1, 0.01);
      
      MathArrays.scaleInPlace(1.5830993332061267E-10, doubleArray0);
      assertArrayEquals(new double[] {(-3.26070664719894E-7), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {(-3.26070664719894E-7), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3.26070664719894E-7), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {(-3114), (-1158), 2147483503, (-2147483647), 69, (-896), 1000, 72}, intArray1);
      assertArrayEquals(new int[] {(-3114), (-1158), 2147483503, (-2147483647), 69, (-896), 1000, 72}, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double((-2059.69807377487));
      assertEquals((-2059.69807377487), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2059.69807377487);
      doubleArray1[1] = (-2059.69807377487);
      doubleArray1[2] = (-2059.69807377487);
      doubleArray1[3] = (-2059.69807377487);
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-2059.69807377487), (-2059.69807377487), (-2059.69807377487), (-2059.69807377487)}, doubleArray1, 0.01);
      assertEquals(1.696942462044764E7, double1, 0.01);
      assertEquals(4, doubleArray1.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2142821460));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-720));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace((-1.962596), doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray2 = MathArrays.scale((-1.962596), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 866L;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (double) 866L;
      doubleArray0[3] = (double) 98;
      doubleArray0[4] = (double) 98;
      doubleArray0[5] = (double) 866L;
      doubleArray0[6] = (double) 866L;
      doubleArray0[7] = (double) 98;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 98;
      doubleArray1[1] = (double) 4;
      doubleArray1[2] = 9.219544613762692E-9;
      doubleArray1[3] = (double) 98;
      doubleArray1[4] = (double) 134217708;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-20.0);
      double double0 = MathArrays.linearCombination(1.304E19, 1.0, (-3346.6115081843514), 1.0, 1.0, 1986.23229126188);
      assertEquals(1.3039999999999998E19, double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 277;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {277}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 277;
      longArray0[1] = (long) 277;
      longArray0[2] = (long) 277;
      longArray0[3] = (long) 277;
      longArray0[4] = (long) 277;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {277L, 277L, 277L, 277L, 277L}, longArray0);
      assertEquals(5, longArray0.length);
      
      long[][] longArray1 = new long[9][2];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) 277;
      longArray2[1] = 134217729L;
      longArray2[2] = (long) 277;
      longArray2[3] = (long) 277;
      longArray2[4] = (long) 277;
      longArray2[5] = (long) 277;
      longArray2[6] = (long) 277;
      longArray1[3] = longArray2;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      
      longArray3[0] = (long) 277;
      longArray3[1] = 134217729L;
      longArray3[2] = (long) 277;
      longArray3[3] = (long) 277;
      longArray3[4] = (long) 277;
      longArray1[8] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-270.16869952061563), (-270.16869952061563), (-270.16869952061563), 571.63544, 1.34217729E8, 2.0217439756338078E-10);
      assertEquals((-81446.8500886457), double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long[] longArray0 = new long[0];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 450;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {450.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {450.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {450.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {202500.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      
      Double[] doubleArray4 = new Double[6];
      doubleArray4[0] = (Double) 0.0;
      doubleArray4[1] = (Double) 0.0;
      doubleArray4[2] = (Double) 0.0;
      doubleArray4[3] = (Double) 0.0;
      doubleArray4[4] = (Double) 0.0;
      doubleArray4[5] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray4, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, doubleArray4.length);
      
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (double) doubleArray4[1];
      doubleArray5[1] = (double) doubleArray4[5];
      doubleArray5[2] = (double) doubleArray4[0];
      doubleArray5[3] = (double) doubleArray4[3];
      doubleArray5[4] = 0.0;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      double[][] doubleArray7 = new double[2][5];
      doubleArray7[0] = doubleArray2;
      double[] doubleArray8 = new double[7];
      assertFalse(doubleArray8.equals((Object)doubleArray0));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      
      doubleArray8[0] = (double) doubleArray4[4];
      doubleArray8[1] = (double) doubleArray4[2];
      doubleArray8[2] = (double) doubleArray4[2];
      doubleArray8[3] = (double) doubleArray4[4];
      doubleArray8[4] = (double) doubleArray4[3];
      doubleArray8[5] = (double) doubleArray4[5];
      doubleArray8[6] = (double) doubleArray4[1];
      doubleArray7[1] = doubleArray8;
      try { 
        MathArrays.sortInPlace(doubleArray6, mathArrays_OrderDirection0, doubleArray7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-270.16869952061563);
      doubleArray0[1] = (-270.16869952061563);
      doubleArray0[2] = 459.6171887818917;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-270.16869952061563), (-270.16869952061563), 0.0, 0.0, 0.0, 0.0, 0.0, 459.6171887818917}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-3433L);
      doubleArray2[1] = 459.6171887818917;
      doubleArray2[2] = (double) (-9223372036854775808L);
      doubleArray2[3] = (double) 495L;
      doubleArray2[4] = (-2.495856E22);
      doubleArray2[5] = (double) 495L;
      doubleArray2[6] = (double) 0L;
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertArrayEquals(new double[] {(-3433.0), 459.6171887818917, (-9.223372036854776E18), 495.0, (-2.495856E22), 495.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2.4958561704236724E22, double0, 0.01);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double double0 = new Double(1.550548744E7);
      assertEquals(1.550548744E7, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1257.001317006814);
      assertEquals(1257.001317006814, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-900.863F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 395.5358F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 2916.8F;
      float float0 = 867.06744F;
      floatArray0[6] = 867.06744F;
      floatArray0[7] = 1.0F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-900.863F), 0.0F, 395.5358F, Float.NaN, 0.0F, 2916.8F, 867.06744F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((-654.282), (-654.282), 1.34217729E8, (-2059.69807377487), (-852.88399159), (-852.88399159));
      assertEquals((-2.7644684239169885E11), double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-131);
      intArray0[1] = 0;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-131), 0}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[7];
      intArray0[0] = (-2347);
      intArray0[0] = 1339;
      intArray0[2] = 1339;
      intArray0[3] = 1339;
      intArray0[4] = 1339;
      intArray0[5] = (-2347);
      intArray0[6] = 1339;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {1339, 0, 1339, 1339, 1339, (-2347), 1339}, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, 841.6, 1.0, (double) 1339, (double) 1339);
      assertEquals(1793762.6, double0, 0.01);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {1339, 0, 1339, 1339, 1339, (-2347), 1339}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(7, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-720));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-4);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-314.1361388251);
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 459.6171887818917;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (-270.16869952061563);
      doubleArray0[5] = (-270.16869952061563);
      doubleArray0[6] = (double) (-4);
      double[][] doubleArray1 = new double[0][8];
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-314.1361388251), 100.0, 459.6171887818917, 1.34217729E8, (-270.16869952061563), (-270.16869952061563), (-4.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 13
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-4);
      intArray0[1] = 1768;
      intArray0[2] = 134217729;
      intArray0[3] = 98;
      intArray0[4] = 4;
      long[][] longArray0 = new long[9][4];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 98;
      longArray2[1] = (long) (-4);
      longArray2[2] = (long) (-4);
      longArray0[1] = longArray2;
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 725.050968);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = Double.NaN;
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1422.622055711545);
      doubleArray0[3] = 1641.12;
      doubleArray0[4] = (-2092.31284603997);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (-1 >= -1,422.622)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-270.16869952061563);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-270.16869952061563), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-270.16869952061563), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-270.16869952061563);
      doubleArray3[1] = 1.34217729E8;
      doubleArray3[2] = (-314.1361388251);
      doubleArray3[3] = (-314.1361388251);
      doubleArray3[4] = (-270.16869952061563);
      doubleArray3[5] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 15 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.304E19, (-958.0), (-958.0), 1.304E19, (-958.0), (-958.0));
      assertEquals((-2.4984639999999998E22), double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 385;
      intArray0[1] = 385;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      double double1 = MathArrays.distance1(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 155;
      intArray0[0] = 155;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {155}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 155;
      doubleArray0[1] = (double) 155;
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {155}, intArray0);
      assertArrayEquals(new int[] {155}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int1 = 1500;
      int int2 = 2147438956;
      // Undeclared exception!
      MathArrays.buildArray(field0, 1500, 2147438956);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-2059.69807377487));
      assertEquals((-2059.69807377487), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1257.001317006814);
      assertEquals(1257.001317006814, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean2);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-2059.69807377487);
      doubleArray1[2] = (-1.0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-2059.69807377487), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2.0), (-4119.39614754974), (-2.0)}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1 >= -2,059.698)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-270.16869952061563);
      doubleArray0[1] = (-270.16869952061563);
      doubleArray0[2] = 459.6171887818917;
      doubleArray0[4] = (-314.1361388251);
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[7] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-270.169 <= -270.169)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-270.16869952061563), (-270.16869952061563), (-270.16869952061563), 571.63544, 1.34217729E8, 2.0217439756338078E-10);
      assertEquals((-81446.8500886457), double0, 0.01);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 155;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {155}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 100L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {100L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double double2 = MathArrays.linearCombination((double) 0L, 431.0, (double) 155, 6.123233995736766E-17);
      assertEquals(9.491012693391987E-15, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      
      double double4 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double4, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      
      double double5 = MathArrays.linearCombination(1790.4032321230002, 0.0, 3.834E-20, (-270.16869952061563), (double) 100L, (double) 100L, 0.0, (double) 155);
      assertEquals(10000.0, double5, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 459.6171887818917;
      doubleArray0[4] = (-314.1361388251);
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[7] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (459.617 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scale((-2059.69807377487), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 3856.2;
      int[] intArray0 = new int[5];
      intArray0[0] = (-797);
      intArray0[1] = (-797);
      intArray0[2] = (-797);
      intArray0[3] = (-797);
      intArray0[4] = (-797);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-797), (-797), (-797), (-797), (-797)}, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3856.2, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.487027844E7, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, 3856.2, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.487027844E7, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-797);
      doubleArray0[2] = (double) (-797);
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      int int0 = 1339;
      int[] intArray0 = new int[7];
      intArray0[0] = (-2347);
      intArray0[1] = 1339;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 1339;
      doubleArray1[2] = 0.0;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 4356.81756;
      doubleArray0[0] = 4356.81756;
      double double1 = 431.0;
      doubleArray0[1] = 431.0;
      doubleArray0[2] = 431.0;
      double double2 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {4356.81756, 431.0, 431.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      long[] longArray0 = new long[2];
      long long0 = 100L;
      longArray0[0] = 100L;
      longArray0[1] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {100L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[3];
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray2[0] = double2;
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray2[1] = double3;
      Double double4 = new Double(3606.485);
      assertEquals(3606.485, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      
      doubleArray2[2] = double4;
      Double double5 = new Double(0.0);
      assertEquals(0.0, (double)double5, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotNull(double5);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(3, doubleArray2.length);
      
      long[][] longArray0 = new long[4][4];
      long[] longArray1 = new long[5];
      longArray1[0] = (-1L);
      longArray1[1] = (-1572L);
      longArray1[2] = 1350L;
      longArray1[3] = (-852L);
      longArray1[4] = 2245L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-852L);
      longArray2[1] = 2245L;
      longArray2[2] = (-1L);
      longArray2[3] = 2245L;
      longArray2[4] = (-1L);
      longArray2[5] = (-852L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-1L);
      longArray4[1] = 2245L;
      longArray4[2] = (-852L);
      longArray4[3] = 2245L;
      longArray4[4] = (-1572L);
      longArray4[5] = 1350L;
      longArray4[6] = (-852L);
      longArray4[7] = 1350L;
      longArray4[8] = 2245L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 3856.2;
      doubleArray0[2] = (double) (-797);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3856.2, (-797.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.487027844E7, 635209.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3856.2, (-797.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.487027844E7, 635209.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4874134639999999E7, 634412.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      Double[] doubleArray3 = new Double[3];
      doubleArray3[0] = (Double) 0.0;
      doubleArray3[1] = (Double) (-797.0);
      doubleArray3[2] = (Double) 3856.2;
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray1, (-347.00519535));
      assertArrayEquals(new double[] {0.0, 3856.2, (-797.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.487027844E7, 635209.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, (-332.7895298324845), (-14.21566551751553), -0.0}, doubleArray4, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotNull(doubleArray4);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-797);
      intArray0[1] = (-797);
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 4;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 155;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {155}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 155;
      doubleArray0[1] = (double) 155;
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {24025.0, 48050.0, 24025.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {24025.0, 48050.0, 24025.0}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.sortInPlace(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 459.6171887818917;
      doubleArray0[4] = (-314.1361388251);
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 550.41936;
      doubleArray0[7] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (459.617 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 754.063531123;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1036.339701;
      doubleArray0[3] = -0.0;
      doubleArray0[4] = (-1621.74);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 3228.79205;
      doubleArray0[8] = 880.4793191915517;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {3228.79205, 0.0, 1036.339701, 754.063531123, (-1621.74), 0.0, 0.0, -0.0, 880.4793191915517}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3228.79205, 0.0, 1036.339701, 754.063531123, (-1621.74), 0.0, 0.0, -0.0, 880.4793191915517}, doubleArray0, 0.01);
      assertEquals(17, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {3228.79205, 0.0, 1036.339701, 754.063531123, (-1621.74), 0.0, 0.0, -0.0, 880.4793191915517}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 450;
      intArray0[1] = (-1162);
      long[][] longArray0 = new long[2][0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-270.16869952061563);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 459.6171887818917;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4356.81756;
      doubleArray0[1] = 431.0;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2084.4016F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-1230.34F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = Float.POSITIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 2084.4016F, (-1.0F), (-1230.34F), 0.0F, Float.POSITIVE_INFINITY}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 2084.4016F, (-1.0F), (-1230.34F), 0.0F, Float.POSITIVE_INFINITY}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 155;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {155}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 155;
      doubleArray0[1] = (double) 155;
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 1.1780040835833387);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.5890020417916694, 0.5890020417916694}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.5890020417916694, 0.5890020417916694}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4.640607144941738;
      MathArrays.scaleInPlace(4.640607144941738, doubleArray0);
      assertArrayEquals(new double[] {21.535234673684307, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {21.535234673684307, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {21.535234673684307, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Double double0 = new Double(4.640607144941738);
      assertEquals(4.640607144941738, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(21.535234673684307);
      assertEquals(21.535234673684307, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray2 = new Double[4];
      doubleArray2[0] = double1;
      doubleArray2[1] = double0;
      doubleArray2[2] = double0;
      doubleArray2[3] = (Double) 21.535234673684307;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, doubleArray2.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 455.09F;
      floatArray0[2] = Float.NEGATIVE_INFINITY;
      floatArray0[3] = (-899.3583F);
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-899.3583F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-899.3583F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 455.09F, Float.NEGATIVE_INFINITY, (-899.3583F)}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(1, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2084;
      intArray0[1] = 2145760915;
      intArray0[2] = 2147481800;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {2084, 2145760915, 2147481800}, intArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray3 = MathArrays.scale(0.0F, doubleArray0);
      assertArrayEquals(new double[] {21.535234673684307, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long[][] longArray0 = new long[1][9];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 134217708;
      longArray1[1] = (long) 4;
      longArray1[2] = 866L;
      longArray1[3] = (long) 98;
      longArray1[4] = (long) 4;
      longArray1[5] = (long) 4;
      longArray1[6] = (long) 4;
      longArray1[7] = (long) 98;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 866L;
      doubleArray0[2] = (double) 4L;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 4L;
      doubleArray0[6] = (double) 4L;
      doubleArray0[7] = (double) 134217708L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {4.0, 866.0, 4.0, 4.0, 4.0, 4.0, 4.0, 1.34217708E8}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(98L, doubleArray0);
      assertArrayEquals(new double[] {392.0, 84868.0, 392.0, 392.0, 392.0, 392.0, 392.0, 1.3153335384E10}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4.0, 866.0, 4.0, 4.0, 4.0, 4.0, 4.0, 1.34217708E8}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-270.16869952061563);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 459.6171887818917;
      doubleArray0[3] = 6638.0;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1433, (-2146858287));
      assertEquals(1433, objectArray0.length);
      assertNotNull(objectArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1433;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) (-2146858287);
      floatArray0[3] = (float) (-2146858287);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1433.0F, 2.0F, (-2.14685824E9F), (-2.14685824E9F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1433.0F, 2.0F, (-2.14685824E9F), (-2.14685824E9F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      long[][] longArray0 = new long[0][5];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) 6638.0;
      doubleArray1[1] = (Double) 459.6171887818917;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertTrue(boolean2);
      assertEquals(2, doubleArray1.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-49.5799F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-49.5799F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      MathArrays.scaleInPlace(155.0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 155.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(1003.1322, 1.0, 0.0, 0.0, 1443.036, 0.0, 1.0, 1003.1322);
      assertEquals(2006.2644, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 155.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(155.0, double1, 0.01);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "v";
      stringArray0[1] = "O|";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean2);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double(4079.4714725411);
      assertEquals(4079.4714725411, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2398.63624);
      assertEquals(2398.63624, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((-1510.56389444));
      assertEquals((-1510.56389444), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(2014.571697125);
      assertEquals(2014.571697125, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = double2;
      doubleArray0[2] = double3;
      doubleArray0[3] = double1;
      doubleArray0[4] = double2;
      doubleArray0[5] = double3;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      double[] doubleArray1 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-270.16869952061563);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 459.6171887818917;
      doubleArray0[3] = 6638.0;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1433, (-2146858287));
      assertEquals(1433, objectArray0.length);
      assertNotNull(objectArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1433;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) (-2146858287);
      floatArray0[3] = (float) (-2146858287);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1433.0F, 2.0F, (-2.14685824E9F), (-2.14685824E9F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1433.0F, 2.0F, (-2.14685824E9F), (-2.14685824E9F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-270.169 <= 3.142)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1510.56389444);
      doubleArray0[1] = (-1510.56389444);
      doubleArray0[2] = (-1229.6487);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2481.30708007816);
      doubleArray0[5] = (-1374.216557989);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-1,510.564 < -1,229.649)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-4);
      intArray0[1] = 1768;
      intArray0[2] = 134217729;
      intArray0[3] = 105;
      intArray0[4] = 4;
      int[] intArray1 = MathArrays.copyOf(intArray0, 4);
      assertArrayEquals(new int[] {(-4), 1768, 134217729, 105, 4}, intArray0);
      assertArrayEquals(new int[] {(-4), 1768, 134217729, 105}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      long[][] longArray0 = new long[9][4];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[1] = (long) (-4);
      longArray2[2] = (long) (-4);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 1768;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) 134217729;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1768;
      doubleArray0[1] = (double) (-4L);
      doubleArray0[2] = (double) (-4);
      doubleArray0[3] = (double) (-4L);
      doubleArray0[4] = (double) (-4L);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1768.0, (-4.0), (-4.0), (-4.0), (-4.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((-1.0), (double)double1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2362.519743911));
      assertEquals((-2362.519743911), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      assertEquals((-1.0), (double)double4, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(100.0);
      assertEquals(100.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1117.4F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1621.6F);
      floatArray0[5] = (-1492.511F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1117.4F, 1.0F, (-1621.6F), (-1492.511F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-1621.6F);
      doubleArray1[1] = (double) 1.0F;
      doubleArray1[2] = (double) 1117.4F;
      doubleArray1[3] = (double) doubleArray0[3];
      doubleArray1[4] = (double) 1117.4F;
      doubleArray1[5] = (double) 0.0F;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-1621.5999755859375), 1.0, 1117.4000244140625, (-1.0), 1117.4000244140625, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray2, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace((-1.962596), doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1.962596);
      doubleArray2[1] = (-1.962596);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((-1.0), (double)double1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2362.519743911));
      assertEquals((-2362.519743911), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      assertEquals((-1.0), (double)double4, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(100.0);
      assertEquals(100.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1117.4F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1621.6F);
      floatArray0[5] = (-1492.511F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1117.4F, 1.0F, (-1621.6F), (-1492.511F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[7];
      intArray0[0] = (-2347);
      intArray0[0] = 1339;
      intArray0[2] = 1339;
      intArray0[3] = 1339;
      intArray0[4] = 1339;
      intArray0[5] = (-2347);
      intArray0[6] = 1339;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {1339, 0, 1339, 1339, 1339, (-2347), 1339}, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 3856.2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 3856.2}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2, 1500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-270.16869952061563);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 459.6171887818917;
      doubleArray0[3] = 6638.0;
      int int0 = 2;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 1433;
      int int2 = (-2146858287);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1433, (-2146858287));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 311;
      intArray0[2] = 3868;
      intArray0[3] = 4;
      int int0 = 1497;
      intArray0[4] = 1497;
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 311, 3868, 4, 1497}, intArray0);
      assertEquals(0, int1);
      assertEquals(5, intArray0.length);
      assertFalse(int1 == int0);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      long[][] longArray0 = new long[1][9];
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 1299L;
      longArray1[2] = (-1L);
      longArray1[4] = 0L;
      longArray1[5] = 9218868437227405312L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-4);
      intArray0[1] = 1768;
      intArray0[2] = 134217729;
      intArray0[3] = 105;
      intArray0[4] = 4;
      int[] intArray1 = MathArrays.copyOf(intArray0, 4);
      assertArrayEquals(new int[] {(-4), 1768, 134217729, 105, 4}, intArray0);
      assertArrayEquals(new int[] {(-4), 1768, 134217729, 105}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      long[][] longArray0 = new long[9][4];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 105;
      longArray2[1] = (long) (-4);
      longArray2[2] = (long) (-4);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 1768;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) 134217729;
      longArray4[1] = (long) 134217729;
      longArray4[2] = (long) 105;
      longArray4[3] = (long) 4;
      longArray4[4] = (long) 134217729;
      longArray4[5] = (long) 105;
      longArray4[6] = (long) (-4);
      longArray4[7] = 866L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = (long) 105;
      longArray5[1] = (long) 134217729;
      longArray5[2] = (long) 134217729;
      longArray5[3] = (long) 4;
      longArray5[4] = (long) 105;
      longArray5[5] = 866L;
      longArray5[6] = (long) 1768;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = (long) 134217729;
      longArray6[1] = (long) 4;
      longArray6[2] = (long) 105;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = (long) 1768;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray7));
      
      longArray0[7] = longArray8;
      long[] longArray9 = new long[6];
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray2));
      
      longArray9[0] = (long) 134217729;
      longArray9[1] = (long) 1768;
      longArray9[2] = (long) 105;
      longArray9[3] = (long) 134217729;
      longArray9[4] = (long) 105;
      longArray9[5] = (long) 134217729;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2745.317);
      doubleArray0[1] = (-2314.301941086);
      doubleArray0[2] = 987.737961909025;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2314.301941086);
      doubleArray1[1] = (-2314.301941086);
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.141592653589793;
      MathArrays.scaleInPlace(3.141592653589793, doubleArray0);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3.141592653589793;
      doubleArray2[1] = 3.141592653589793;
      doubleArray2[2] = 3.141592653589793;
      doubleArray2[3] = 3.141592653589793;
      doubleArray2[4] = 3.141592653589793;
      doubleArray2[5] = 3.141592653589793;
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray1, 1.34217729E8);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray4 = new double[0][3];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray4);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-3.940510424527919E-20));
      assertArrayEquals(new double[] {-0.0, -0.0, (-3.940510424527919E-20), -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "/<Ky19o*4kCrwy-O0O";
      stringArray0[1] = "^y^MU)$(";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean1);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = (double) 0;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 3.141592653589793, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 792);
      assertArrayEquals(new double[] {0.0, 3.141592653589793, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(792, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 155;
      intArray0[0] = 155;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {155}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      double double1 = 3341.79676495951;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 155;
      doubleArray1[1] = (double) 155;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1948.0);
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (-1245.55660792);
      doubleArray0[4] = (-3432.969);
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = -0.0;
      doubleArray0[8] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1948.0), 1.304E19, (-1245.55660792), (-3432.969), 1.34217729E8, 0.0, -0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.304E19, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1948.0), 1.304E19, (-1245.55660792), (-3432.969), 1.34217729E8, 0.0, -0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1948.0), 1.304E19, (-1245.55660792), (-3432.969), 1.34217729E8, 0.0, -0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double2 = MathArrays.linearCombination((-372.4943), 320.58324043, (-2780.4327571957524), 1.304E19, 6.52E18, (-1229.6487), 159.563, Double.NaN);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1780.51);
      doubleArray1[1] = (-1780.51);
      doubleArray1[2] = 0.0;
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-1780.51), (-1780.51), 0.0}, doubleArray1, 0.01);
      assertEquals(6340431.7202, double0, 0.01);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1620.97604097655;
      doubleArray0[2] = 3341.79676495951;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1620.97604097655, 3341.79676495951}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 2627563.32542001, 1.0833944979624616E7, 1.1167605618293846E7}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1620.97604097655;
      doubleArray2[1] = 3341.79676495951;
      doubleArray2[2] = 100.0;
      doubleArray2[3] = 3341.79676495951;
      doubleArray2[4] = 3341.79676495951;
      doubleArray2[5] = 1620.97604097655;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 3341.79676495951;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 2820.3795492403;
      doubleArray3[3] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {0.0, 1620.97604097655, 3341.79676495951}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 2627563.32542001, 1.0833944979624616E7, 1.1167605618293846E7}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3341.79676495951, 0.0, 2820.3795492403, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(1.1167605618293846E7, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      double[] doubleArray4 = MathArrays.scale(0.0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {1620.97604097655, 3341.79676495951, 100.0, 3341.79676495951, 3341.79676495951, 1620.97604097655}, doubleArray2, 0.01);
      assertEquals(6, doubleArray4.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray4);
      
      double double1 = MathArrays.linearCombination(0.0, 1.0, 1.304E19, 0.0, 1.0E-6, 2820.3795492403, 3341.79676495951, 3341.79676495951);
      assertEquals(1.1167605621114224E7, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 155;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {155}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 155;
      doubleArray0[1] = (double) 155;
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {155}, intArray0);
      assertArrayEquals(new int[] {155}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = Integer.valueOf(1494);
      assertEquals(1494, (int)integer0);
      assertNotNull(integer0);
      
      Double double2 = new Double(155.0);
      assertEquals(155.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(431.8);
      assertEquals(431.8, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      Pair<Object, Integer> pair0 = (Pair<Object, Integer>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      Pair<Double, Object> pair2 = new Pair<Double, Object>(double3, pair1);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair2);
      
      Integer integer1 = new Integer((-465));
      assertEquals((-465), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(integer0).when(field0).getZero();
      int int0 = 1500;
      int int1 = 2;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1500, 2);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      double double0 = 3.141592653589793;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = (double) 0;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 3.141592653589793, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 749;
      int int0 = 311;
      intArray0[1] = 311;
      intArray0[2] = 3868;
      intArray0[3] = 4;
      intArray0[4] = 1497;
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {749, 311, 3868, 4, 1497}, intArray0);
      assertEquals(0, int1);
      assertEquals(5, intArray0.length);
      assertFalse(int1 == int0);
      
      long[][] longArrayArray0 = null;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 754.063531123;
      doubleArray0[0] = 754.063531123;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1036.339701;
      doubleArray0[3] = -0.0;
      doubleArray0[4] = (-1621.74);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 3228.79205;
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 1,036.34)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 155;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {155}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 155;
      doubleArray0[1] = (double) 155;
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {155.0, 155.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {155}, intArray0);
      assertArrayEquals(new int[] {155}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1500, 2);
      assertEquals(1500, objectArray0.length);
      assertNotNull(objectArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1500;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 155;
      floatArray0[4] = (float) 155;
      floatArray0[5] = (float) 155;
      floatArray0[6] = (-2025.3627F);
      floatArray0[7] = (float) 155;
      floatArray0[8] = (float) 155;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1500.0F, 2.0F, 2.0F, 155.0F, 155.0F, 155.0F, (-2025.3627F), 155.0F, 155.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1500.0F, 2.0F, 2.0F, 155.0F, 155.0F, 155.0F, (-2025.3627F), 155.0F, 155.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (155 >= 155)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1619.845473286506;
      doubleArray0[1] = 641.0;
      doubleArray0[2] = 100.0;
      doubleArray0[3] = 641.0;
      doubleArray0[3] = 641.0;
      doubleArray0[5] = 1619.845473286506;
      long[][] longArray0 = new long[0][8];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1619.845473286506, 641.0, 100.0, 641.0, 0.0, 1619.845473286506}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 641.0;
      doubleArray1[1] = 100.0;
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {641.0, 100.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 3856.2;
      doubleArray0[2] = (double) (-797);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3856.2, (-797.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.487027844E7, 635209.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3856.2, (-797.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.487027844E7, 635209.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4874134639999999E7, 634412.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      Double[] doubleArray3 = new Double[3];
      doubleArray3[0] = (Double) 0.0;
      doubleArray3[1] = (Double) (-797.0);
      doubleArray3[2] = (Double) 3856.2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2240.3441688;
      doubleArray0[2] = 2208.11;
      doubleArray0[3] = (-1590.0);
      doubleArray0[4] = (-82.10030138);
      doubleArray0[5] = 431.8;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((-1.0), (double)double1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2362.519743911));
      assertEquals((-2362.519743911), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      assertEquals((-1.0), (double)double4, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(100.0);
      assertEquals(100.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 2820.3795492403;
      doubleArray1[2] = (double) doubleArray0[2];
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1.0);
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 100.0;
      doubleArray2[1] = (double) doubleArray0[1];
      doubleArray2[2] = 100.0;
      doubleArray2[3] = (double) doubleArray0[5];
      doubleArray2[4] = (-2362.519743911);
      doubleArray2[5] = 2820.3795492403;
      doubleArray2[6] = (-1.0);
      doubleArray2[7] = (-2362.519743911);
      double double6 = MathArrays.distance1(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {100.0, (-1.0), 100.0, 100.0, (-2362.519743911), 2820.3795492403, (-1.0), (-2362.519743911)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2820.3795492403, (-2362.519743911), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(7847.4190370623, double6, 0.01);
      assertEquals(8, doubleArray2.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4356.81756;
      doubleArray0[1] = 431.0;
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {4356.81756, 431.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 100L;
      longArray0[1] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {100L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double double1 = MathArrays.linearCombination((double) 100L, Double.NEGATIVE_INFINITY, 0.0, 431.0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-989));
      assertEquals((-989), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(137);
      assertEquals(137, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1869));
      assertEquals((-1869), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1539));
      assertEquals((-1539), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.getInteger("", 1160);
      assertEquals(1160, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(5);
      assertEquals(5, (int)integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2240.3441688;
      doubleArray0[2] = 2208.11;
      doubleArray0[3] = (-1590.0);
      doubleArray0[4] = (-82.10030138);
      doubleArray0[5] = 431.8;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-926.4101414);
      doubleArray1[1] = (-1590.0);
      doubleArray1[2] = (-1590.0);
      doubleArray1[3] = 431.8;
      doubleArray1[4] = 2240.3441688;
      doubleArray1[5] = 2208.11;
      doubleArray1[6] = (-82.10030138);
      doubleArray1[7] = 2240.3441688;
      doubleArray1[8] = (-1590.0);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 2240.3441688, 2208.11, (-1590.0), (-82.10030138), 431.8, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-926.4101414), (-1590.0), (-1590.0), 431.8, 2240.3441688, 2208.11, (-82.10030138), 2240.3441688, (-1590.0)}, doubleArray1, 0.01);
      assertEquals(3830.3441688, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 2240.3441688, 2208.11, (-1590.0), (-82.10030138), 431.8, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3551.926866682766, double1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = (-610.184F);
      floatArray0[0] = (-610.184F);
      floatArray0[1] = 247.36F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-610.184F), 247.36F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      int[] intArray0 = new int[4];
      int int0 = (-2014);
      intArray0[0] = (-2014);
      intArray0[1] = 0;
      intArray0[2] = 1438;
      intArray0[3] = 194;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = (-1780.51);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, (-1780.51)}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 134.88884899138;
      doubleArray2[1] = 134.88884899138;
      doubleArray1[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 134.88884899138;
      doubleArray3[1] = 134.88884899138;
      doubleArray3[2] = 134.88884899138;
      doubleArray3[3] = 134.88884899138;
      doubleArray1[2] = doubleArray3;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-7.4299), (-7.4299), (-7.4299), (-7.4299), (-7.4299), (-7.4299), (-7.4299), (-7.4299));
      assertEquals(220.81365603999998, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 220.81365603999998;
      doubleArray0[1] = (-7.4299);
      doubleArray0[2] = 220.81365603999998;
      doubleArray0[3] = (-7.4299);
      doubleArray0[4] = (-7.4299);
      doubleArray0[5] = (-852.88399159);
      doubleArray0[6] = (-7.4299);
      doubleArray0[7] = (-7.4299);
      doubleArray0[8] = (-7.4299);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {220.81365603999998, (-7.4299), 220.81365603999998, (-7.4299), (-7.4299), (-852.88399159), (-7.4299), (-7.4299), (-7.4299)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      double double0 = 2398.8577079095817;
      doubleArray0[1] = 2398.8577079095817;
      double double1 = (-20.0);
      doubleArray0[2] = (-20.0);
      doubleArray0[3] = 2098.399076522;
      double double2 = 1269.5006;
      doubleArray0[4] = 1269.5006;
      double double3 = (-1.0);
      doubleArray0[5] = (-1.0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1510.56389444);
      doubleArray0[1] = (-1612.27516425);
      doubleArray0[2] = (-1229.6487);
      doubleArray0[3] = 0.0;
      double double0 = (-2481.30708007816);
      doubleArray0[4] = (-2481.30708007816);
      double double1 = (-1374.216557989);
      doubleArray0[5] = (-1374.216557989);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-1,612.275 < -1,229.649)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long[][] longArray0 = new long[3][6];
      long[] longArray1 = new long[5];
      longArray1[0] = 1L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = 10000L;
      long long0 = (-480L);
      longArray1[4] = (-480L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[1] = 1L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-707.59586864287);
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      double double0 = (-63.33075637);
      doubleArray0[1] = (-63.33075637);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 3097.5996344;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = (-1199.612916);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-63.33075637);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 3097.5996344;
      doubleArray1[4] = 3097.5996344;
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = 0.0;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-698.2);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2642.176256793579);
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-698.2), 0.0, 0.0, (-2642.176256793579), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1692.95410575;
      doubleArray0[1] = 2043.15361873;
      doubleArray0[2] = 393.49;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-245.98418);
      doubleArray0[5] = 1813.4988;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1222.895055051;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1692.95410575, 2043.15361873, 393.49, Double.NaN, (-245.98418), 1813.4988, 0.0, 0.0, 1222.895055051}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3385.9082115, 4086.30723746, 786.98, Double.NaN, (-491.96836), 3626.9976, 0.0, 0.0, 2445.790110102}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination((-975.906521986193), 1583.345025643, 1813.4988, 2043.15361873, 1813.4988, (-2292.87340770168), 1222.895055051, 20.0);
      assertEquals((-1973605.373614775), double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1692.95410575, 2043.15361873, 393.49, Double.NaN, (-245.98418), 1813.4988, 0.0, 0.0, 1222.895055051}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3385.9082115, 4086.30723746, 786.98, Double.NaN, (-491.96836), 3626.9976, 0.0, 0.0, 2445.790110102}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5078.86231725, 6129.46085619, 1180.47, Double.NaN, (-737.95254), 5440.4964, 0.0, 0.0, 3668.6851651530005}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 450;
      intArray0[1] = (-1162);
      intArray0[2] = 0;
      intArray0[3] = 134217729;
      intArray0[4] = (-1385);
      intArray0[5] = (-3408);
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 450;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-3408);
      doubleArray0[5] = (double) (-1385);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray1);
      long[][] longArray0 = new long[9][7];
      long[] longArray1 = new long[4];
      longArray1[0] = (long) 134217729;
      longArray1[1] = (long) (-3408);
      longArray1[2] = (long) (-3408);
      longArray1[3] = (long) 134217729;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (long) (-3408);
      longArray2[1] = (-1672L);
      longArray2[2] = (long) (-1385);
      longArray2[3] = (long) 450;
      longArray2[4] = 100L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = (long) 0;
      longArray3[1] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = (long) 0;
      longArray4[1] = (long) (-1385);
      longArray4[2] = (long) 450;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      longArray6[0] = (long) (-1385);
      longArray6[1] = (long) 0;
      longArray6[2] = (long) 0;
      longArray6[3] = (long) 0;
      longArray6[4] = (long) (-1162);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[4];
      longArray7[0] = (long) 134217729;
      longArray7[1] = 4839L;
      longArray7[2] = (long) 134217729;
      longArray7[3] = (long) 134217729;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      longArray0[7] = longArray8;
      long[] longArray9 = new long[4];
      longArray9[0] = 4839L;
      longArray9[1] = (long) (-3408);
      longArray9[2] = (long) 0;
      longArray9[3] = (long) 0;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.141592653589793;
      MathArrays.scaleInPlace(3.141592653589793, doubleArray0);
      MathArrays.copyOf(doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 3.141592653589793;
      doubleArray1[1] = 3.141592653589793;
      doubleArray1[2] = 3.141592653589793;
      doubleArray1[3] = 3.141592653589793;
      doubleArray1[4] = 3.141592653589793;
      doubleArray1[5] = 3.141592653589793;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (3.142 <= 3.142)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-797);
      intArray0[1] = 1339;
      intArray0[2] = (-2347);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1339;
      doubleArray0[1] = (double) (-797);
      doubleArray0[2] = (double) 1339;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1339;
      doubleArray0[6] = (double) (-2347);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-5324.77060425);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-5324.77060425);
      doubleArray1[1] = (-5324.77060425);
      MathArrays.distance1(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      long[][] longArray0 = new long[5][8];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = 4503599627370495L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = 4503599627370495L;
      longArray2[1] = 4503599627370495L;
      longArray2[2] = 4503599627370495L;
      longArray2[3] = 4503599627370495L;
      longArray2[4] = 0L;
      longArray2[5] = 0L;
      longArray2[6] = 0L;
      longArray2[7] = 4503599627370495L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = 0L;
      longArray3[1] = 4503599627370495L;
      longArray3[2] = 4503599627370495L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 4503599627370495L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = 0L;
      longArray4[1] = 1L;
      longArray4[2] = 4503599627370495L;
      longArray4[3] = 0L;
      longArray4[4] = 4503599627370495L;
      longArray4[5] = 0L;
      longArray4[6] = 0L;
      longArray4[7] = 4503599627370495L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1024.5;
      doubleArray0[2] = (-1.0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf(">\"j^%P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.>\"j^%P
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = (-60);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-60));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MathArrays.linearCombination(0.0, (-3631.962), 112.087886, 1176.04);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3631.962);
      doubleArray0[1] = 112.087886;
      doubleArray0[2] = 112.087886;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MathArrays.copyOf(intArray0, 0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-3,631.962 <= 112.088)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1620.97604097655;
      doubleArray0[2] = 3341.79676495951;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 2627563.32542001, 1.0833944979624616E7, 1.1167605618293846E7}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1620.97604097655;
      doubleArray2[1] = 3341.79676495951;
      doubleArray2[2] = 100.0;
      Double[] doubleArray3 = new Double[4];
      doubleArray3[0] = (Double) 0.0;
      doubleArray3[1] = (Double) 1620.97604097655;
      doubleArray3[2] = (Double) 100.0;
      Double double0 = new Double(2042.93657);
      doubleArray3[3] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, false);
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.linearCombination((-1.0), (-1.0), (-1.0), 0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1.0;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-467));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathArrays.linearCombination(5096.400562666376, 5096.400562666376, 0.0, 0.0, 5096.400562666376, 0.0);
      long[][] longArray0 = new long[2][6];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = 9007199254740990L;
      longArray1[2] = (-491L);
      longArray1[3] = (-1043L);
      longArray1[4] = (-1L);
      longArray1[5] = 1645L;
      longArray1[6] = 358L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 358L;
      longArray2[1] = (-1043L);
      longArray2[2] = 0L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -491 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1948.0);
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (-1245.55660792);
      doubleArray0[4] = (-3432.969);
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = -0.0;
      doubleArray0[8] = 0.0;
      MathArrays.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("<xTRG^xz!c:p\"U%5kN>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.<xTRG^xz!c:p\"U%5kN>
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      
      Double[] doubleArray4 = new Double[6];
      doubleArray4[0] = (Double) 0.0;
      doubleArray4[1] = (Double) 0.0;
      doubleArray4[2] = (Double) 0.0;
      doubleArray4[3] = (Double) 0.0;
      doubleArray4[4] = (Double) 0.0;
      doubleArray4[5] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray4, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (double) doubleArray4[1];
      doubleArray5[1] = (double) doubleArray4[5];
      doubleArray5[2] = (double) doubleArray4[0];
      doubleArray5[3] = (double) doubleArray4[3];
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (double) doubleArray4[4];
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (double) doubleArray4[4];
      doubleArray6[1] = (double) doubleArray4[1];
      doubleArray6[2] = (double) doubleArray4[5];
      doubleArray6[3] = (double) doubleArray4[1];
      doubleArray6[4] = (double) doubleArray4[1];
      doubleArray6[5] = (double) doubleArray4[4];
      doubleArray6[6] = (double) doubleArray4[0];
      doubleArray6[7] = (double) doubleArray4[4];
      double double0 = MathArrays.distance1(doubleArray5, doubleArray6);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 439.0;
      doubleArray0[1] = 1597.55533093;
      doubleArray0[2] = 1178.774455726;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 20.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 3.32;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2496.67);
      double double0 = 405.4996575;
      doubleArray0[1] = 405.4996575;
      doubleArray0[2] = 0.0;
      double double1 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-669.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.304E19);
      MathArrays.equals(doubleArray0, doubleArray1);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray2);
      double[] doubleArray4 = MathArrays.scale(405.4996575, doubleArray3);
      double[] doubleArray5 = MathArrays.scale(Double.NaN, doubleArray1);
      double[][] doubleArray6 = new double[4][1];
      doubleArray6[0] = doubleArray3;
      doubleArray6[1] = doubleArray5;
      doubleArray6[2] = doubleArray4;
      doubleArray6[3] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray2, doubleArray6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 11
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2240.3441688;
      doubleArray0[2] = 2208.11;
      doubleArray0[3] = (-1590.0);
      doubleArray0[4] = (-82.10030138);
      doubleArray0[5] = 431.8;
      doubleArray0[6] = 2948.41;
      doubleArray0[7] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[6][8];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      double[] doubleArray1 = new double[0];
      doubleArray0[2] = doubleArray1;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = (-610.184F);
      floatArray0[0] = (-610.184F);
      floatArray0[1] = 247.36F;
      float float1 = 0.0F;
      floatArray0[2] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2014);
      intArray0[1] = 0;
      int int0 = 1438;
      intArray0[2] = 1438;
      int int1 = 194;
      intArray0[3] = 194;
      MathArrays.copyOf(intArray0, 220);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("element {0} is NaN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.element {0} is NaN
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.304E19, (-958.0), (-958.0), 1.304E19, (-958.0), (-958.0));
      assertEquals((-2.4984639999999998E22), double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 389;
      intArray0[1] = (-559);
      intArray0[2] = 0;
      intArray0[3] = 1345;
      intArray0[4] = 3966;
      intArray0[5] = 0;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-270.16869952061563);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 459.6171887818917;
      doubleArray0[3] = 6638.0;
      doubleArray0[4] = (-314.1361388251);
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 550.41936;
      doubleArray0[7] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][4];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double[] doubleArray2 = new double[0];
      try { 
        MathArrays.convolve(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = (double) 0;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MathArrays.copyOf(intArray0, 0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1620.97604097655;
      doubleArray0[2] = 3341.79676495951;
      MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1620.97604097655;
      doubleArray1[1] = 3341.79676495951;
      doubleArray1[2] = 100.0;
      doubleArray1[3] = 3341.79676495951;
      doubleArray1[4] = 3341.79676495951;
      doubleArray1[5] = 1620.97604097655;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 3341.79676495951;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 2820.3795492403;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1620.97604097655;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 155;
      intArray0[0] = 155;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 155;
      doubleArray0[1] = (double) 155;
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.copyOf(intArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 1500;
      int int2 = 2;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1500, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-20.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[7];
      longArray1[0] = (-3433L);
      longArray1[1] = 0L;
      longArray1[2] = 495L;
      longArray1[3] = 1024L;
      longArray1[4] = (-9223372036854775808L);
      longArray1[5] = 4336L;
      longArray1[6] = 0L;
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,433 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-95.354665721);
      doubleArray0[3] = 1152.1442059741892;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 555.97955401819;
      doubleArray0[7] = 20.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly decreasing (-95.355 <= 1,152.144)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 169;
      intArray0[1] = 0;
      intArray0[2] = (-1993);
      intArray0[3] = 150;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-1773);
      intArray0[7] = 199;
      intArray0[8] = 0;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1993);
      doubleArray0[2] = (double) 150;
      doubleArray0[3] = (double) 199;
      doubleArray0[4] = (double) 169;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 169;
      doubleArray3[1] = (-3056.957188826309);
      doubleArray3[2] = 1.0;
      double[][] doubleArray4 = new double[1][4];
      doubleArray4[0] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray3, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 155;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, (-720));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 962;
      int int0 = 3020;
      intArray0[1] = 3020;
      intArray0[2] = (-3957);
      int int1 = 2144136093;
      intArray0[3] = 2144136093;
      intArray0[4] = (-1175);
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3020;
      MathArrays.distance(doubleArray0, doubleArray0);
      int int2 = (-1158);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 3020, (-1158));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 338.84456;
      doubleArray0[1] = (-432.0);
      doubleArray0[2] = (-3.141592653589793);
      doubleArray0[3] = 68.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 68.0;
      doubleArray1[1] = (-3.141592653589793);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = 1L;
      longArray0[0] = 1L;
      long long1 = (-3811L);
      longArray0[1] = (-3811L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,811 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 134.88884899138;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1420.813386);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = null;
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1299.0;
      double double0 = (-1535.224);
      doubleArray0[2] = (-1535.224);
      doubleArray0[3] = (-949.507257333051);
      doubleArray0[4] = (-1658.935076);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      double[] doubleArray3 = new double[0];
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
