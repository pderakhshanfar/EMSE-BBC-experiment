/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 12:20:27 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1531.53388;
      double double0 = (-1518.7);
      doubleArray0[1] = (-1518.7);
      double double1 = (-282.77212123);
      doubleArray0[2] = (-282.77212123);
      double double2 = (-380.01);
      doubleArray0[3] = (-380.01);
      doubleArray0[4] = 476.2;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3152);
      assertArrayEquals(new double[] {1531.53388, (-1518.7), (-282.77212123), (-380.01), 476.2}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(3152, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long[] longArray0 = null;
      long[][] longArray1 = new long[7][3];
      longArray1[0] = null;
      longArray1[1] = null;
      longArray1[2] = null;
      longArray1[3] = null;
      longArray1[4] = null;
      longArray1[5] = null;
      longArray1[6] = null;
      // Undeclared exception!
      try { 
        MathArrays.checkRectangular(longArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-740.4091401534305);
      doubleArray0[1] = 11.416153;
      doubleArray0[2] = (-9.007199254740992E15);
      doubleArray0[3] = (-1352.151819473192);
      doubleArray0[4] = (-620.88579867478);
      doubleArray0[5] = 1313.13318;
      doubleArray0[6] = (-955.627896756);
      doubleArray0[7] = 1823.5;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.6725170580355583E-9);
      assertArrayEquals(new double[] {(-740.4091401534305), 11.416153, (-9.007199254740992E15), (-1352.151819473192), (-620.88579867478), 1313.13318, (-955.627896756), 1823.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0188798096228515E-22, (-4.654722899304509E-24), 3.672517058035347E-9, 5.513146186318739E-22, 2.5315457360675413E-22, (-5.354054980502232E-22), 3.896394042935793E-22, (-7.43498024849682E-22)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {(-740.4091401534305), 11.416153, (-9.007199254740992E15), (-1352.151819473192), (-620.88579867478), 1313.13318, (-955.627896756), 1823.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0188798096228515E-22, (-4.654722899304509E-24), 3.672517058035347E-9, 5.513146186318739E-22, 2.5315457360675413E-22, (-5.354054980502232E-22), 3.896394042935793E-22, (-7.43498024849682E-22)}, doubleArray1, 0.01);
      assertEquals(3.672517058035347E-9, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2014.466);
      doubleArray0[1] = (-30.3);
      doubleArray0[2] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][8];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3.834E-20;
      doubleArray2[1] = 3.834E-20;
      doubleArray2[2] = (-30.3);
      doubleArray2[3] = (-30.3);
      doubleArray2[4] = 3.834E-20;
      doubleArray2[5] = (-64.699557);
      doubleArray2[6] = (-30.3);
      doubleArray1[4] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-0.25);
      doubleArray0[1] = 1473.48767;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 909.92148;
      doubleArray0[4] = (-339.9156873);
      doubleArray0[5] = (-3258.754872031);
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 3.0095696449279785;
      doubleArray0[8] = 1.44888888888888883E18;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-0.25), 1473.48767, 1.304E19, 909.92148, (-339.9156873), (-3258.754872031), 3.834E-20, 3.0095696449279785, 1.44888888888888883E18}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-0.25), 1473.48767, 1.304E19, 909.92148, (-339.9156873), (-3258.754872031), 3.834E-20, 3.0095696449279785, 1.44888888888888883E18}, doubleArray0, 0.01);
      assertEquals(1.312024691125688E19, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "w[g,^Pk^EVQ W";
      stringArray0[1] = "GDMShmvv";
      stringArray0[2] = "";
      stringArray0[3] = "T+Es`?C1[0 ";
      stringArray0[4] = "";
      stringArray0[5] = "INCREASING";
      stringArray0[6] = "8X8P^";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((FieldElement<Double>) null).when(field0).getZero();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3572;
      doubleArray0[1] = (double) 3572;
      doubleArray0[2] = 1.304E19;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3572.0, 3572.0, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7144.0, 7144.0, 2.608E19}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      FieldElement<Double>[] fieldElementArray0 = MathArrays.buildArray(field0, 134217729);
      assertEquals(134217729, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-2489));
      assertEquals((-2489), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2729);
      assertEquals(2729, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertEquals(2729, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(4, integerArray0.length);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(208);
      assertEquals(208, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, integerArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (int)integerArray0[1];
      doubleArray0[1] = (double) (-2489);
      doubleArray0[2] = (double) 208;
      doubleArray0[3] = (double) (-2489);
      doubleArray0[4] = (double) (int)integerArray0[0];
      doubleArray0[5] = (double) 208;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = (double) (int)integerArray0[3];
      doubleArray0[8] = (double) (int)integerArray0[3];
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-758.18704710695));
      assertArrayEquals(new double[] {(-1.586727340149438E-13), 1.4471837118475454E-13, (-1.2093781119497366E-14), 1.4471837118475454E-13, 1.4471837118475454E-13, (-1.2093781119497366E-14), (-758.1870471069503), (-1.2093781119497366E-14), (-1.2093781119497366E-14)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2729.0, (-2489.0), 208.0, (-2489.0), (-2489.0), 208.0, 1.304E19, 208.0, 208.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (int)integerArray0[3];
      floatArray0[2] = (float) (int)integerArray0[1];
      floatArray0[3] = (float) (int)integerArray0[0];
      floatArray0[4] = (float) (int)integerArray0[2];
      floatArray0[5] = (float) 208;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 208.0F, 2729.0F, (-2489.0F), 2729.0F, 208.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.586727340149438E-13), 1.4471837118475454E-13, (-1.2093781119497366E-14), 1.4471837118475454E-13, 1.4471837118475454E-13, (-1.2093781119497366E-14), (-758.1870471069503), (-1.2093781119497366E-14), (-1.2093781119497366E-14)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2729.0, (-2489.0), 208.0, (-2489.0), (-2489.0), 208.0, 1.304E19, 208.0, 208.0}, doubleArray0, 0.01);
      assertEquals((-9.886759094274633E21), double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 208.0F, 2729.0F, (-2489.0F), 2729.0F, 208.0F}, floatArray0, 0.01F);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 2221.55282214;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 9941722.773116395;
      doubleArray0[2] = 1326.13647;
      doubleArray0[3] = 2118.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 9941722.773116395, 1326.13647, 2118.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 4.2114896304858116E10, 5617514.08692, 4485924.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 9941722.773116395, 1326.13647, 2118.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 4.2114896304858116E10, 5617514.08692, 4485924.0}, doubleArray1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 2221.55282214;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NEGATIVE_INFINITY, 0.0, Double.NEGATIVE_INFINITY, 2221.55282214}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      FieldElement<Double>[][] fieldElementArray0 = MathArrays.buildArray(field0, 3572, 3572);
      assertEquals(3572, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-1862.7);
      doubleArray0[1] = 0.0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (-266.7);
      doubleArray0[6] = 2221.55282214;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NEGATIVE_INFINITY, 0.0, (-266.7), 2221.55282214}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 6574.596F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1942.4F;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 6574.596F;
      floatArray1[2] = 6574.596F;
      floatArray1[3] = 2222.37F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 1942.4F;
      floatArray1[6] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, (-1.0F), 6574.596F, 0.0F, 1942.4F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 6574.596F, 6574.596F, 2222.37F, 0.0F, 1942.4F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 181;
      intArray0[1] = 1671;
      intArray0[2] = 1649;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 224;
      intArray1[1] = 181;
      intArray1[2] = 1649;
      intArray1[3] = 181;
      intArray1[4] = 1671;
      intArray1[5] = 1671;
      intArray1[6] = 1671;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {181, 1671, 1649}, intArray0);
      assertArrayEquals(new int[] {224, 181, 1649, 181, 1671, 1671, 1671}, intArray1);
      assertEquals(1533, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(13);
      assertEquals(13, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(289);
      assertEquals(289, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(134217729);
      assertEquals(134217729, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2147483516);
      assertEquals(2147483516, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, integerArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (-203.63);
      doubleArray0[2] = (double) (int)integerArray0[3];
      doubleArray0[3] = (double) (int)integerArray0[1];
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = (double) 2147483516;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {13.0, (-203.63), 2.147483516E9, 289.0, 13.0, 2.147483516E9}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(11, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {13.0, (-203.63), 2.147483516E9, 289.0, 13.0, 2.147483516E9}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(11, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {13.0, (-203.63), 2.147483516E9, 289.0, 13.0, 2.147483516E9}, doubleArray0, 0.01);
      assertEquals(1.1296276210371547E19, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(11, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1518.077342;
      doubleArray0[1] = (-1903.4863480485847);
      doubleArray0[2] = 2.608E18;
      doubleArray0[3] = 20.0;
      doubleArray0[4] = 2.501255867630106E10;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.501255867630106E10;
      doubleArray1[1] = (-1903.4863480485847);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1518.077342, (-1903.4863480485847), 2.608E18, 20.0, 2.501255867630106E10}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.501255867630106E10, (-1903.4863480485847)}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-496L);
      longArray0[1] = 431L;
      longArray0[2] = (-302932621132653753L);
      longArray0[3] = 9154082963658192752L;
      longArray0[4] = (-630L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -496 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 844.872F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 844.872F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.1974215507507324;
      doubleArray0[1] = (-6.032174644509064E-23);
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 334.41213704508;
      doubleArray0[5] = 1116.24359625;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.1974215507507324, (-6.032174644509064E-23), 1.34217729E8, 334.41213704508, 0.0, 1116.24359625}, doubleArray0, 0.01);
      assertEquals(1.3421772900505832E8, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1116.24359625;
      doubleArray1[1] = (-6.032174644509064E-23);
      doubleArray1[2] = (-4605.2);
      doubleArray1[3] = (-6.032174644509064E-23);
      doubleArray1[4] = (-1048.7604174336);
      doubleArray1[5] = (-1048.7604174336);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.1974215507507324, (-6.032174644509064E-23), 1.34217729E8, 334.41213704508, 0.0, 1116.24359625}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1116.24359625, (-6.032174644509064E-23), (-4605.2), (-6.032174644509064E-23), (-1048.7604174336), (-1048.7604174336)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(11, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-4605.2);
      doubleArray3[1] = (-4605.2);
      doubleArray3[2] = 1.1974215507507324;
      doubleArray3[3] = 2179.2652804187605;
      doubleArray3[4] = 1.3421772900505832E8;
      MathArrays.scaleInPlace(3.834E-20, doubleArray3);
      assertArrayEquals(new double[] {(-1.7656336799999997E-16), (-1.7656336799999997E-16), 4.590914225578308E-20, 8.355303085125527E-17, 5.1459077300539355E-12}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(5, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-129);
      intArray0[1] = 1;
      intArray0[2] = (-1718);
      intArray0[3] = 2146832092;
      intArray0[4] = (-1606);
      intArray0[5] = 2144037042;
      intArray0[6] = 1518;
      intArray0[7] = (-2986);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-129), 1, (-1718), 2146832092, (-1606), 2144037042, 1518, (-2986)}, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2144037042;
      intArray1[1] = 1;
      intArray1[2] = 2144037042;
      intArray1[3] = (-1718);
      int int1 = MathArrays.distanceInf(intArray1, intArray0);
      assertArrayEquals(new int[] {(-129), 1, (-1718), 2146832092, (-1606), 2144037042, 1518, (-2986)}, intArray0);
      assertArrayEquals(new int[] {2144037042, 1, 2144037042, (-1718)}, intArray1);
      assertEquals(2146833810, int1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-102.2495495897525);
      doubleArray0[2] = 394.9100646972656;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-102.2495495897525), 394.9100646972656}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 394.9100646972656;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (-102.2495495897525);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 394.9100646972656, Double.NaN, (-102.2495495897525)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 10454.970391307257}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2146761819;
      intArray0[2] = 2362;
      intArray0[3] = 571;
      intArray0[4] = 216;
      intArray0[5] = (-2146289937);
      intArray0[6] = 170;
      intArray0[7] = (-1967);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {1, 2146761819, 2362, 571, 216, (-2146289937), 170, (-1967)}, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 216;
      intArray1[1] = (-1967);
      intArray1[2] = 571;
      intArray1[3] = 2146761819;
      intArray1[4] = 1;
      intArray1[5] = 1;
      intArray1[6] = (-2146289937);
      intArray1[7] = (-1967);
      int int1 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {1, 2146761819, 2362, 571, 216, (-2146289937), 170, (-1967)}, intArray0);
      assertArrayEquals(new int[] {216, (-1967), 571, 2146761819, 1, 1, (-2146289937), (-1967)}, intArray1);
      assertEquals((-3827292), int1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(10, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1594.0F);
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (-1507.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-1839.2041F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1594.0F), Float.NaN, (-1507.0F), 0.0F, (-1.0F), (-1839.2041F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2877.0F;
      floatArray0[1] = 2959.32F;
      floatArray0[2] = (-4929.47F);
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2877.0F, 2959.32F, (-4929.47F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 940;
      intArray0[2] = 68;
      intArray0[3] = 5;
      intArray0[4] = (-3272);
      intArray0[5] = 4;
      intArray0[6] = 16;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1), 940, 68, 5, (-3272), 4, 16}, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1862.7);
      doubleArray0[2] = (-3406.0764981084);
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 1064.925049429642;
      doubleArray0[5] = (-266.7);
      doubleArray0[6] = 2221.55282214;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-1862.7), (-3406.0764981084), Double.NEGATIVE_INFINITY, 1064.925049429642, (-266.7), 2221.55282214}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-1862.7), (-3406.0764981084), Double.NEGATIVE_INFINITY, 1064.925049429642, (-266.7), 2221.55282214}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.linearCombination((-707.113975422599), Double.NaN, (-4.9E-324), 2221.55282214, (-1862.7), (-3406.0764981084));
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, (-1862.7), (-3406.0764981084), Double.NEGATIVE_INFINITY, 1064.925049429642, (-266.7), 2221.55282214}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(13, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {Double.NaN, (-1862.7), (-3406.0764981084), Double.NEGATIVE_INFINITY, 1064.925049429642, (-266.7), 2221.55282214}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(13, doubleArray2.length);
      assertEquals(13, doubleArray3.length);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1064.925049429642;
      doubleArray1[2] = 2221.55282214;
      doubleArray1[3] = 2221.55282214;
      doubleArray1[4] = 1439.43;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-3406.0764981084);
      doubleArray1[7] = (-3406.0764981084);
      doubleArray1[8] = Double.NEGATIVE_INFINITY;
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = 20;
      Integer integer0 = new Integer(20);
      assertEquals(20, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 20;
      floatArray0[1] = (float) 20;
      floatArray0[2] = (float) 20;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) 20;
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) int0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {20.0F, 20.0F, 20.0F, 20.0F, 20.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {20.0F}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      long[][] longArray0 = new long[0][4];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray2.length);
      assertEquals(11, doubleArray1.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = null;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1.986821492305628E-8;
      doubleArray3[1] = 1.9699272335463627E-8;
      doubleArray3[2] = 666.0;
      doubleArray3[3] = 31.809621359679713;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.986821492305628E-8, 1.9699272335463627E-8, 666.0, 31.809621359679713}, doubleArray3, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(4, doubleArray3.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, doubleArray3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1245.7965F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1835.2F;
      floatArray0[3] = (-374.875F);
      floatArray0[4] = (-3.4028235E38F);
      floatArray0[5] = 0.0F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1835.2F;
      floatArray1[1] = 1245.7965F;
      floatArray1[2] = (-3.4028235E38F);
      floatArray1[3] = (-374.875F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1245.7965F, 0.0F, 1835.2F, (-374.875F), (-3.4028235E38F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1835.2F, 1245.7965F, (-3.4028235E38F), (-374.875F)}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "[ZA\"ebku2Ua?OJ.W";
      stringArray0[2] = "Wr}#S7";
      stringArray0[3] = "x";
      stringArray0[4] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 1;
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      int int1 = 948;
      int int2 = 2303;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2303;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 948;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2303.0, 1.0, 1.0, 1.0, 1.0, 948.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance(intArray1, intArray1);
      assertArrayEquals(new int[] {1, 1, 1, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 11 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-298.770776054);
      doubleArray0[4] = (-713.1625308069348);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2.092748054434474));
      assertArrayEquals(new double[] {Double.NaN, 1.0, 0.0, (-298.770776054), (-713.1625308069348)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0020701148535037387, 0.0, (-0.6184898213022245), (-1.4763283479857532)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[][] doubleArray2 = new double[6][2];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = null;
      doubleArray2[3] = null;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 1.0;
      doubleArray3[2] = (-3.9986783938944604E-8);
      doubleArray3[3] = (-18.430862426757812);
      doubleArray2[4] = doubleArray3;
      doubleArray2[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[24];
      doubleArray0[0] = (-16.3972948733033);
      doubleArray0[1] = (-4.503599627370496E15);
      doubleArray0[2] = (-16.3972948733033);
      doubleArray0[3] = 0.07073719799518585;
      doubleArray0[4] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4.503599627370496E15, double0, 0.01);
      assertEquals(24, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(24, doubleArray0.length);
      assertEquals(47, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace((-16.3972948733033), doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(24, doubleArray0.length);
      assertEquals(47, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(24, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2796.845F);
      floatArray0[1] = (-1962.0F);
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray0[1] = (-1962.0F);
      floatArray1[1] = (-2796.845F);
      floatArray1[2] = (-2796.845F);
      floatArray1[3] = (-1962.0F);
      floatArray1[4] = (-1962.0F);
      floatArray1[5] = (-2796.845F);
      floatArray1[6] = (-1962.0F);
      floatArray1[7] = (-1962.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-2796.845F), (-1962.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-2796.845F), (-2796.845F), (-1962.0F), (-1962.0F), (-2796.845F), (-1962.0F), (-1962.0F)}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 2199;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 2199);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, (-690.9), 0.0, (-690.9));
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(10, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      int int0 = 17;
      intArray0[1] = 17;
      int int1 = 342;
      intArray0[2] = 342;
      intArray0[3] = (-2859);
      int int2 = 269;
      intArray0[4] = 269;
      intArray0[5] = 0;
      intArray0[6] = 2303;
      int int3 = 2146847545;
      intArray0[7] = 2146847545;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {1, 17, 342, (-2859), 269, 0, 2303, 2146847545}, intArray0);
      assertArrayEquals(new int[] {1, 17, 342, (-2859), 269, 0, 2303, 2146847545}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3.9339452F;
      doubleArray1[1] = 1.34217729E8;
      doubleArray1[2] = 1.34217729E8;
      doubleArray1[3] = 1.34217729E8;
      doubleArray1[5] = 1.34217729E8;
      doubleArray1[6] = 1.34217729E8;
      doubleArray1[7] = 1.34217729E8;
      doubleArray1[8] = (double) 3.9339452F;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-2.092748054434474);
      doubleArray0[2] = 3.834E-20;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1435.3461F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-3395.067F);
      floatArray0[3] = (-1.4E-45F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-1255.81F);
      floatArray0[6] = 1834.0728F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 1367.4497F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {(-1435.3461F), 0.0F, (-3395.067F), (-1.4E-45F), (-1.0F), (-1255.81F), 1834.0728F, 0.0F, 1367.4497F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 3.834E-20, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.4699556E-39, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 3.834E-20, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.4699556E-39, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.4699556E-39, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, (double[]) null);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      double[][] doubleArray3 = new double[6][8];
      doubleArray3[0] = null;
      doubleArray3[1] = doubleArray0;
      doubleArray3[2] = doubleArray2;
      doubleArray3[3] = doubleArray0;
      doubleArray3[4] = doubleArray0;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray3[5] = doubleArray4;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-5588.04677251688);
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 215.0;
      doubleArray0[4] = 2838.4;
      doubleArray0[5] = 1319.79;
      doubleArray0[6] = 7393372.021596569;
      doubleArray0[7] = 1277.0708;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-5588.04677251688), 3.834E-20, (-1.0), 215.0, 2838.4, 1319.79, 7393372.021596569, 1277.0708}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-5588.04677251688), 3.834E-20, (-1.0), 215.0, 2838.4, 1319.79, 7393372.021596569, 1277.0708}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-5588.04677251688), 3.834E-20, (-1.0), 215.0, 2838.4, 1319.79, 7393372.021596569, 1277.0708}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.7976931348623157E308;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.7976931348623157E308;
      doubleArray2[1] = 1.7976931348623157E308;
      doubleArray2[2] = 1.7976931348623157E308;
      doubleArray2[4] = 1.7976931348623157E308;
      doubleArray0[2] = doubleArray2;
      double double0 = new Double(1.7976931348623157E308);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1.7976931348623157E308, 8.0E298, 1.7976931348623157E308, (-428.36700008));
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1383L;
      longArray0[1] = 1023L;
      longArray0[2] = (-3199L);
      longArray0[3] = (-549L);
      longArray0[4] = 428L;
      longArray0[5] = (-1017L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,199 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = new double[8][0];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = null;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 0.366272509098053;
      doubleArray3[1] = (-1997.18941613609);
      doubleArray3[2] = 1312.29508;
      doubleArray3[3] = 3034.954874350057;
      doubleArray3[4] = 1.34217729E8;
      doubleArray3[5] = 1644.3;
      doubleArray3[6] = (-21.8);
      doubleArray2[3] = doubleArray3;
      doubleArray2[4] = null;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = null;
      doubleArray2[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3375.0;
      doubleArray0[1] = 525092.25715772;
      doubleArray0[2] = 1694.11383538874;
      doubleArray0[3] = 4.3466666666666665E18;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3375.0, 525092.25715772, 1694.11383538874, 4.3466666666666665E18}, doubleArray0, 0.01);
      assertEquals(4.3466666666666665E18, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4.3466666666666665E18;
      doubleArray1[1] = 3375.0;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 8;
      intArray0[2] = 79;
      intArray0[3] = 370;
      intArray0[4] = 5183;
      intArray0[5] = 2991;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {1, 8, 79, 370, 5183, 2991}, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(2.092748054434474, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = new Double((-3032.71547488768));
      assertEquals((-3032.71547488768), double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 912.9312465529435;
      doubleArray0[1] = (-3032.71547488768);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {912.9312465529435, (-3032.71547488768)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1825.862493105887, (-6065.43094977536)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {912.9312465529435, (-3032.71547488768)}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {912.9312465529435, (-3032.71547488768)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1825.862493105887, (-6065.43094977536)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-912.9312465529435), 3032.71547488768}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 6.52E18;
      doubleArray3[1] = 912.9312465529435;
      doubleArray3[2] = 912.9312465529435;
      doubleArray3[3] = 912.9312465529435;
      doubleArray3[4] = 912.9312465529435;
      MathArrays.scaleInPlace(6.52E18, doubleArray3);
      assertArrayEquals(new double[] {4.25104E37, 5.952311727525191E21, 5.952311727525191E21, 5.952311727525191E21, 5.952311727525191E21}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(5, doubleArray3.length);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray3);
      assertArrayEquals(new double[] {912.9312465529435, (-3032.71547488768)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.25104E37, 5.952311727525191E21, 5.952311727525191E21, 5.952311727525191E21, 5.952311727525191E21}, doubleArray3, 0.01);
      assertEquals(4.2510400000000003E37, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float float0 = 0.0F;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = (double) 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathArrays.linearCombination(912.9312465529435, (-3032.71547488768), (-3032.71547488768), 908.58434);
      assertEquals((-5524138.507088222), double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1469);
      intArray0[1] = (-1);
      intArray0[2] = 1933;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1469), (-1), 1933}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.scale(-0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-0.16666666666666666);
      doubleArray0[2] = 4.3466666666666665E18;
      doubleArray0[3] = 958.649278;
      doubleArray0[4] = (-1105.18009416);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {1.0, (-0.16666666666666666), 4.3466666666666665E18, 958.649278, (-1105.18009416)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-0.16666666666666666), 4.3466666666666665E18, 958.649278, (-1105.18009416)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      long[][] longArray0 = new long[0][7];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1105.18009416);
      doubleArray2[1] = 1.0;
      doubleArray2[2] = (-0.16666666666666666);
      doubleArray2[3] = 1117.47;
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-724.6324979782165);
      double[] doubleArray1 = MathArrays.scale((-724.6324979782165), doubleArray0);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {525092.25712615, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 2925, (-2435));
      assertEquals(2925, objectArray0.length);
      assertNotNull(objectArray0);
      
      Field<FieldElement<Object>> field1 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 2925;
      doubleArray2[3] = (double) 2925;
      doubleArray2[4] = (-724.6324979782165);
      doubleArray2[5] = (double) (-2435);
      doubleArray2[6] = (-724.6324979782165);
      doubleArray2[7] = 0.0;
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2925.0, 0.0, 2925.0, (-724.6324979782165), (-2435.0), (-724.6324979782165), 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertEquals(13, doubleArray3.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace((-7098.433), doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[][] doubleArray2 = new double[2][5];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 2198.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 1.0F, 2198.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf(",;:{QOuD9S9<Q%TX[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.,;:{QOuD9S9<Q%TX[
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-724.6324979782165);
      double[] doubleArray1 = MathArrays.scale((-724.6324979782165), doubleArray0);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {525092.25712615, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray2 = MathArrays.scale((-1575.0), doubleArray0);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1141296.184315691, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double2 = MathArrays.linearCombination(0.0, 3.834E-20, 0.0, (-724.6324979782165));
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {525092.25712615, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(11, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray1, 8.24443490245);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {525092.25712615, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {8.24443490245, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray4, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray4.length);
      assertNotNull(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[4] = (double) 0;
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-724.6324979782165);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-724.6324979782165));
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.scale((-724.6324979782165), doubleArray1);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {525092.25712615, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2130303778, (-2576));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-2894.7398);
      doubleArray0[0] = (-2894.7398);
      doubleArray0[1] = 0.8397369786460651;
      double double1 = 1.304E19;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.0;
      double double2 = (-177.2);
      doubleArray0[4] = (-177.2);
      doubleArray0[5] = 1.34217729E8;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2894.7398), 0.8397369786460651, 1.304E19, 1.0, (-177.2), 1.34217729E8}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = (-1L);
      longArray0[2] = (-4704L);
      longArray0[3] = 3939L;
      longArray0[4] = (-2720L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(638.3079953159919, 0.0, 1636.6890007416, 1.304E19, 1.304E19, 638.3079953159919, 0.0, 1501.604752);
      assertEquals(2.9665960828591E22, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, (-1534.4829347317), 4049.256743065, (-715.6023534210225));
      assertEquals((-2897657.6549432585), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.26E18, 1644.3, (-3406.0764981084), 1636.6890007416, 1644.3, 3.26E18, 147889.80891588324, 1.304E19);
      assertEquals(1.9392039442631175E24, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-724.6324979782165);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-724.6324979782165));
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.scale((-724.6324979782165), doubleArray1);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {525092.25712615, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 866.8003849953965;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 866.8003849953965;
      doubleArray3[1] = 866.8003849953965;
      doubleArray3[2] = 866.8003849953965;
      doubleArray3[3] = (-743.2428864751628);
      doubleArray3[4] = 866.8003849953965;
      doubleArray3[5] = 866.8003849953965;
      doubleArray3[6] = 866.8003849953965;
      doubleArray3[7] = 866.8003849953965;
      double double0 = MathArrays.distance1(doubleArray2, doubleArray3);
      assertArrayEquals(new double[] {866.8003849953965}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {866.8003849953965, 866.8003849953965, 866.8003849953965, (-743.2428864751628), 866.8003849953965, 866.8003849953965, 866.8003849953965, 866.8003849953965}, doubleArray3, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(1, doubleArray2.length);
      assertEquals(8, doubleArray3.length);
      
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-743.2428864751628);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 866.8003849953965;
      doubleArray4[4] = 866.8003849953965;
      doubleArray4[5] = 1.0;
      doubleArray4[6] = 866.8003849953965;
      doubleArray4[7] = 866.8003849953965;
      doubleArray4[8] = 866.8003849953965;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray4);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-743.2428864751628), 0.0, 866.8003849953965, 866.8003849953965, 1.0, 866.8003849953965, 866.8003849953965, 866.8003849953965}, doubleArray4, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray4.length);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {866.8003849953965, 866.8003849953965, 866.8003849953965, (-743.2428864751628), 866.8003849953965, 866.8003849953965, 866.8003849953965, 866.8003849953965}, doubleArray3, 0.01);
      assertEquals(1225.84086033071, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(8, doubleArray3.length);
      
      double double2 = MathArrays.safeNorm(doubleArray3);
      assertArrayEquals(new double[] {866.8003849953965, 866.8003849953965, 866.8003849953965, (-743.2428864751628), 866.8003849953965, 866.8003849953965, 866.8003849953965, 866.8003849953965}, doubleArray3, 0.01);
      assertEquals(2410.7696572449854, double2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(8, doubleArray3.length);
      
      try { 
        MathArrays.ebeDivide(doubleArray4, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace((-2291), doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[][] doubleArray2 = new double[9][1];
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-2291);
      doubleArray3[1] = (double) (-2291);
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray1;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) (-2291);
      doubleArray4[1] = (double) (-2291);
      doubleArray4[2] = (double) (-2291);
      doubleArray4[3] = (double) (-2291);
      doubleArray4[4] = (double) (-2291);
      doubleArray2[7] = doubleArray4;
      doubleArray2[8] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 2334.086246369, (-1.0902938113007961E-8), 124.0, 124.0, 2334.086246369, 124.0, 932.6937525);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(2.17333333333333325E18, 3.834E-20, 932.6937525, 932.6937525);
      assertEquals(869917.7192781311, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (double) 3.9339452F;
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 3.9339451789855957}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1.304E19;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1.304E19;
      doubleArray2[5] = 0.0;
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[4][0];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float float0 = 3.9339452F;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 3.9339452F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-4255.3);
      doubleArray0[1] = (double) 3.9339452F;
      doubleArray0[2] = (double) 3.9339452F;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (3.934 >= 3.934)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-724.5283594324906);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-724.5283594324906));
      assertArrayEquals(new double[] {(-724.5283594324906), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-724.5283594324907), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.scale((-724.5283594324906), doubleArray1);
      assertArrayEquals(new double[] {(-724.5283594324906), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-724.5283594324907), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {524941.3436219363, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-724.5283594324906), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-211.28);
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-211.28);
      doubleArray1[1] = (-211.28);
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (-211.28);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {(-211.28), (-211.28), 0.0, (-211.28)}, doubleArray1, 0.01);
      assertEquals(365.9476946231524, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-211.28), (-211.28), 0.0, (-211.28)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 12;
      intArray0[1] = 1699;
      intArray0[2] = 64;
      intArray0[3] = 96;
      intArray0[4] = (-1739);
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 64;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-724.6324979782165);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-724.6324979782165));
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.scale((-724.6324979782165), doubleArray1);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {525092.25712615, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2130303778;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2130303778;
      intArray0[1] = 2;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2141913934;
      intArray1[1] = 2141913934;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertArrayEquals(new int[] {2130303778, 2}, intArray0);
      assertArrayEquals(new int[] {2141913934, 2141913934}, intArray1);
      assertEquals(2.1419453979544027E9, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      double double1 = MathArrays.linearCombination((double) 2, (-1862.73355843511), (-1156.298568298), 727.658141, (double) 2130303778, 3.0095696449279785, 2.1419453979544027E9, (-1720.0));
      assertEquals((-3.6777356320123623E12), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2141913934;
      doubleArray0[1] = (double) 2130303778;
      doubleArray0[2] = 1557.657;
      doubleArray0[3] = 727.658141;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = 727.658141;
      doubleArray0[6] = 727.658141;
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2.141913934E9, 2.130303778E9, 1557.657, 727.658141, 2.0, 727.658141, 727.658141}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1197.64033;
      doubleArray0[1] = (-279.46398);
      doubleArray0[2] = 2291.0;
      doubleArray0[3] = 1545.3;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = (-1574.768074682243);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.834E-20;
      doubleArray1[1] = (-1574.768074682243);
      doubleArray1[2] = (-1574.768074682243);
      doubleArray1[3] = 1197.64033;
      doubleArray1[4] = 1545.3;
      doubleArray1[5] = 2291.0;
      doubleArray1[6] = (-279.46398);
      doubleArray1[7] = (-1574.768074682243);
      doubleArray1[8] = (-279.46398);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1197.64033, (-279.46398), 2291.0, 1545.3, 3.834E-20, (-1574.768074682243)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, (-1574.768074682243), (-1574.768074682243), 1197.64033, 1545.3, 2291.0, (-279.46398), (-1574.768074682243), (-279.46398)}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[6];
      longArray1[0] = 914L;
      longArray1[1] = 1166L;
      longArray1[2] = (-2247L);
      longArray1[3] = 39L;
      longArray1[4] = 841L;
      longArray1[5] = (-276L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1568L;
      longArray2[1] = 914L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Integer integer0 = new Integer(1453122643);
      assertEquals(1453122643, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 195.705284;
      doubleArray1[1] = (double) 1453122643;
      doubleArray1[2] = 1.0E-5;
      doubleArray1[3] = 41.90668756560691;
      doubleArray1[4] = (double) 1453122643;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {195.705284, 1.453122643E9, 1.0E-5, 41.90668756560691, 1.453122643E9, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1644.0);
      doubleArray2[1] = (double) 1453122643;
      doubleArray2[2] = (double) 1453122643;
      doubleArray2[3] = (double) 1453122643;
      doubleArray2[4] = (double) 1453122643;
      doubleArray2[5] = 1.0E-5;
      doubleArray2[6] = 1.0E-5;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = 3.26E18;
      double double1 = 1644.3;
      double double2 = (-3406.0764981084);
      double double3 = (-1.0129027912496858E-9);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-1.0129027912496858E-9), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.linearCombination((double) 1, 0.366272509098053, (double) 1, 0.366272509098053, 805.56001444, 945.0893);
      assertEquals(761326.8827001078, double0, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {1, 0}, intArray0);
      assertArrayEquals(new int[] {1, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 761326.8827001078;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = 945.0893;
      doubleArray3[3] = 761326.8827001078;
      doubleArray3[4] = (double) 1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (761,326.883 >= 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 135);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-2.09274805443447);
      doubleArray0[2] = (-0.8397369786460651);
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-0.8397369786460651), 0.0}, doubleArray0, 0.01);
      assertEquals(0.8397369786460651, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      doubleArray0[3] = (double) (-1.4E-45F);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-724.6324979782165);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-724.6324979782165));
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.scale((-724.6324979782165), doubleArray1);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {525092.25712615, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-484.275094522);
      double double0 = 1.0E-5;
      doubleArray0[1] = 1.0E-5;
      doubleArray0[2] = 51.172598;
      doubleArray0[3] = 1.01;
      doubleArray0[4] = 2001.16975;
      doubleArray0[5] = 2.17333333333333325E18;
      doubleArray0[6] = (-366.962070624);
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2001.16975;
      doubleArray1[1] = 4917.27387632448;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 128;
      Integer integer0 = new Integer(124);
      assertEquals(124, (int)integer0);
      assertNotNull(integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 128;
      integerArray0[1] = (Integer) 128;
      integerArray0[2] = (Integer) 128;
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) 128;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (int)integerArray0[0];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (int)integerArray0[1];
      doubleArray0[3] = (double) (int)integerArray0[1];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (int)integerArray0[2];
      doubleArray1[2] = (double) 128;
      doubleArray1[3] = (double) 2229;
      doubleArray1[4] = (double) (int)integerArray0[4];
      doubleArray1[5] = (double) 128;
      doubleArray1[6] = (double) 128;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (double) (int)integerArray0[4];
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 128;
      intArray1[1] = 2;
      double double1 = MathArrays.distance(intArray1, intArray1);
      assertArrayEquals(new int[] {128, 2}, intArray1);
      assertEquals(0.0, double1, 0.01);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray1.length);
      
      int int0 = MathArrays.distanceInf(intArray1, intArray1);
      assertArrayEquals(new int[] {128, 2}, intArray1);
      assertEquals(0, int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 128;
      double[] doubleArray1 = MathArrays.scale(3.834E-20, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 128.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 4.90752E-18}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray2 = MathArrays.copyOf(intArray1, 0);
      assertArrayEquals(new int[] {128, 2}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-2.092748054434474);
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 0.0;
      int[] intArray0 = new int[3];
      intArray0[0] = 2575;
      intArray0[1] = (-2617);
      intArray0[2] = 274;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {2575, (-2617), 274}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-2.092748054434474);
      doubleArray0[2] = 3.834E-20;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 3.834E-20, 0.0}, doubleArray0, 0.01);
      assertEquals(3.834E-20, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float float0 = 895.7145F;
      float float1 = 119.63093F;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 119.63093F;
      doubleArray0[1] = (double) 119.63093F;
      doubleArray0[2] = (-724.6324979782165);
      doubleArray0[3] = (double) 895.7145F;
      doubleArray0[4] = (double) 119.63093F;
      double double0 = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-724.6324979782165);
      double double1 = Double.NaN;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-427.1925);
      doubleArray0[2] = 3556.5990174669905;
      doubleArray0[3] = 1521.0;
      doubleArray0[4] = 195.705284;
      doubleArray0[5] = 41.90668756560691;
      Integer integer0 = new Integer((-2072));
      assertEquals((-2072), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-427.1925), 0.0, 3556.5990174669905, 1521.0, 195.705284, 41.90668756560691, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(10, doubleArray0.length);
      
      boolean boolean2 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1624.0F);
      floatArray0[1] = 3282.5337F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1624.0F), 3282.5337F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, floatArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-2166);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2166));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.6931470632553101;
      double double0 = 1261.301104014;
      doubleArray2[1] = 1261.301104014;
      doubleArray2[2] = 3556.5990174669905;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      double double1 = MathArrays.distance1(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {0.6931470632553101, 1261.301104014, 3556.5990174669905, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray2.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 3556.5990174669905;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.6931470632553101;
      doubleArray3[7] = 3556.5990174669905;
      doubleArray3[8] = 1261.301104014;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray3, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = 0L;
      longArray0[2] = 4503599627370496L;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 2039L;
      doubleArray0[2] = (double) 4503599627370496L;
      doubleArray0[3] = (double) 4503599627370496L;
      double[][] doubleArray1 = new double[0][6];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2039.0, 4.503599627370496E15, 4.503599627370496E15, Double.NaN}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {2039.0, 4.503599627370496E15, 4.503599627370496E15, Double.NaN}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2039.0, 4.503599627370496E15, 4.503599627370496E15, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4078.0, 9.007199254740992E15, 9.007199254740992E15, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2039.0, 4.503599627370496E15, 4.503599627370496E15, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray3, (-2129670190));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long[][] longArray0 = new long[1][1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.801439877791744E16}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-267.4171));
      assertEquals((-267.4171), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(395.53145387533);
      assertEquals(395.53145387533, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-432.569773823));
      assertEquals((-432.569773823), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(2945.13);
      assertEquals(2945.13, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1409.826205));
      assertEquals((-1409.826205), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(4261.625681);
      assertEquals(4261.625681, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(192.9);
      assertEquals(192.9, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(1.304E19);
      assertEquals(1.304E19, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-427.1925);
      doubleArray0[1] = 738.02780467538;
      doubleArray0[2] = 3556.5990174669905;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = Integer.getInteger("", 130);
      assertEquals(130, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2319);
      assertEquals(2319, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-936));
      assertEquals((-936), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2319);
      assertEquals(2319, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer((int) integerArray0[1]);
      assertEquals(2319, (int)integer4);
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(8, integerArray0.length);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-349));
      assertEquals((-349), (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2319);
      assertEquals(2319, (int)integer6);
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[6]);
      assertEquals(2319, (int)integer7);
      assertTrue(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer3));
      assertEquals(8, integerArray0.length);
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, integerArray0.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-349), 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.2246467991473532E-16;
      doubleArray0[1] = 1.2246467991473532E-16;
      double[] doubleArray1 = MathArrays.scale(1.2246467991473532E-16, doubleArray0);
      assertArrayEquals(new double[] {1.2246467991473532E-16, 1.2246467991473532E-16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4997597826618576E-32, 1.4997597826618576E-32}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.2246467991473532E-16, 1.2246467991473532E-16}, doubleArray0, 0.01);
      assertEquals(1.7319121124709866E-16, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.scale(982.861281605, doubleArray0);
      assertArrayEquals(new double[] {1.2246467991473532E-16, 1.2246467991473532E-16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.2036579225234287E-13, 1.2036579225234287E-13}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = (-3.4028235E38F);
      floatArray1[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-3.4028235E38F), 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1720.693382016425);
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 3282.5337F;
      floatArray0[1] = 3282.5337F;
      floatArray0[2] = 3282.5337F;
      float float0 = 1026.0F;
      floatArray0[3] = 1026.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 3282.5337F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1026.0F;
      floatArray1[3] = 1026.0F;
      floatArray1[4] = 0.0F;
      floatArray1[6] = 3282.5337F;
      floatArray1[7] = 1.0F;
      floatArray1[8] = 3282.5337F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {3282.5337F, 3282.5337F, 3282.5337F, 1026.0F, 0.0F, 3282.5337F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1026.0F, 1026.0F, 0.0F, 0.0F, 3282.5337F, 1.0F, 3282.5337F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 560);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-724.6324979782165);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-724.6324979782165));
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.scale((-724.6324979782165), doubleArray1);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-724.6324979782165), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {525092.25712615, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-609.3F);
      floatArray0[2] = 2526.341F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1654.0F;
      floatArray0[5] = 1438.5442F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-49.09F);
      floatArray0[8] = (-3541.736F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {1.0F, (-609.3F), 2526.341F, 0.0F, 1654.0F, 1438.5442F, 0.0F, (-49.09F), (-3541.736F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 500;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {1, 500}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 500;
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {500.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1000.0, 2.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {500.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1000.0, 2.0}, doubleArray1, 0.01);
      assertEquals(1000.001999998, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      long[][] longArray1 = new long[6][2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = new long[2];
      longArray2[0] = 1299L;
      longArray2[1] = (long) 500;
      longArray1[0] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 500;
      longArray3[1] = 1299L;
      longArray1[1] = longArray3;
      long[] longArray4 = new long[2];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 1299L;
      longArray4[1] = (long) 500;
      longArray1[2] = longArray4;
      long[] longArray5 = new long[6];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 1789L;
      longArray5[1] = (long) 500;
      longArray5[2] = (long) 1;
      longArray5[3] = (long) 1;
      longArray5[4] = (long) 500;
      longArray5[5] = (long) 1;
      longArray1[3] = longArray5;
      long[] longArray6 = new long[5];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = (long) 500;
      longArray6[1] = (long) 500;
      longArray6[2] = (long) 1;
      longArray6[3] = (long) 500;
      longArray6[4] = (long) 500;
      longArray1[4] = longArray6;
      long[] longArray7 = new long[3];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = (long) 500;
      longArray7[1] = (long) 1;
      longArray7[2] = (long) 500;
      longArray1[5] = longArray7;
      try { 
        MathArrays.checkRectangular(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 384.56444052445;
      doubleArray0[2] = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 384.56444052445, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(384.56444052445, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long[][] longArray0 = new long[4][1];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = (-2312L);
      longArray0[2] = 4503599627370496L;
      long[][] longArray1 = new long[3][2];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[2];
      longArray1[0] = 316L;
      longArray1[1] = (-3314L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-3986L);
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(566);
      assertEquals(566, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 566;
      longArray0[1] = (long) (int)integerArray0[0];
      longArray0[2] = (long) (int)integerArray0[0];
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = (long) 566;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {566L, 566L, 566L, 0L, 0L, 566L}, longArray0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1340.0515F;
      floatArray0[2] = 895.7145F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1187.52F;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1187.52F;
      doubleArray0[1] = (double) 119.63093F;
      doubleArray0[2] = 0.07692307692307693;
      doubleArray0[3] = (double) 895.7145F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 119.63093F;
      doubleArray0[7] = (double) 1340.0515F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (0.077 < 895.714)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-427.1925);
      doubleArray0[1] = 738.02780467538;
      doubleArray0[2] = 3556.5990174669905;
      doubleArray0[3] = 1521.0;
      doubleArray0[4] = 195.705284;
      doubleArray0[5] = 0.0;
      Integer integer0 = new Integer((-2072));
      assertEquals((-2072), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(1841.0958204, doubleArray0);
      assertArrayEquals(new double[] {(-427.1925), 738.02780467538, 3556.5990174669905, 1521.0, 195.705284, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-786502.326256227), 1358779.9065268298, 6548039.585897223, 2800306.7428284003, 360312.180402595, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1), (-2486));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int0 = 1;
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      try { 
        MathArrays.checkOrder(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-427.1925);
      doubleArray0[1] = 738.02780467538;
      doubleArray0[2] = 3556.5990174669905;
      doubleArray0[4] = 195.705284;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-20.0);
      doubleArray0[7] = (-903.773511604);
      doubleArray0[8] = 1.0E-5;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-427.1925), 738.02780467538, 3556.5990174669905, 0.0, 195.705284, 0.0, (-20.0), (-903.773511604), 1.0E-5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2147483532;
      intArray0[1] = 1;
      intArray0[2] = (-1071);
      intArray0[3] = 2144671060;
      intArray0[4] = 36;
      intArray0[5] = (-200);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {2147483532, 1, (-1071), 2144671060, 36, (-200)}, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {(-427.1925), 738.02780467538, 3556.5990174669905, 0.0, 195.705284, 0.0, (-20.0), (-903.773511604), 1.0E-5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long[][] longArray0 = new long[0][1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3556.5990174669905;
      doubleArray0[1] = 1521.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3556.5990174669905, 1521.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-3948);
      intArray0[1] = 2147483532;
      intArray0[2] = (-1071);
      intArray0[3] = (-2343);
      intArray0[4] = 219;
      intArray0[5] = (-1071);
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2147483532;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1720.693382016425);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1720.693382016425), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-427.1925);
      doubleArray0[1] = 738.02780467538;
      doubleArray0[2] = 3556.5990174669905;
      doubleArray0[3] = 1521.0;
      doubleArray0[4] = 195.705284;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-20.0);
      doubleArray0[7] = (-903.773511604);
      doubleArray0[8] = 1.0E-5;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-427.1925), 738.02780467538, 3556.5990174669905, 1521.0, 195.705284, 0.0, (-20.0), (-903.773511604), 1.0E-5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[16];
      intArray0[0] = 2147483532;
      intArray0[1] = 1;
      intArray0[2] = (-1071);
      intArray0[3] = 2144671060;
      intArray0[4] = 57;
      intArray0[5] = (-200);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(16, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long[] longArray0 = new long[12];
      longArray0[0] = 0L;
      Integer integer0 = new Integer((-2692));
      assertEquals((-2692), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2692));
      assertEquals((-2692), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-2692));
      assertEquals((-2692), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(2251);
      assertEquals(2251, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(2042);
      assertEquals(2042, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(109);
      assertEquals(109, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      
      Integer integer6 = new Integer((-4342));
      assertEquals((-4342), (int)integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer6;
      integerArray0[2] = integer2;
      integerArray0[3] = integer2;
      integerArray0[4] = integer2;
      integerArray0[5] = integer2;
      Integer integer7 = Integer.getInteger("F8^B.i45469f~rzBL!");
      assertNull(integer7);
      
      integerArray0[6] = null;
      integerArray0[7] = integer3;
      integerArray0[8] = integer5;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-211.28);
      doubleArray0[1] = 2141.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-211.28), 2141.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-422.56), 4282.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.0E-5;
      doubleArray2[1] = 1.0E-5;
      doubleArray2[2] = (-211.28);
      doubleArray2[3] = (-211.28);
      doubleArray2[4] = (-903.773511604);
      doubleArray2[5] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2291);
      intArray0[1] = 35;
      intArray0[2] = 1681;
      intArray0[3] = 175;
      intArray0[4] = 124;
      Integer integer0 = new Integer((-2291));
      assertEquals((-2291), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 175;
      integerArray0[1] = (Integer) (-2291);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, integerArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1681;
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 175;
      doubleArray0[5] = (double) 124;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1681.0, 11.0, 0.0, 175.0, 0.0, 124.0}, doubleArray0, 0.01);
      assertEquals(2871883.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1681.0, 11.0, 0.0, 175.0, 0.0, 124.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1681.0, 11.0, 0.0, 175.0, 0.0, 124.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1681.0, 11.0, 0.0, 175.0, 0.0, 124.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer integer0 = new Integer(738);
      assertEquals(738, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-482));
      assertEquals((-482), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(566);
      assertEquals(566, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(249);
      assertEquals(249, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(2147483532);
      assertEquals(2147483532, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer((-2991));
      assertEquals((-2991), (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      
      Integer integer6 = new Integer(2251);
      assertEquals(2251, (int)integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      
      Integer integer7 = new Integer(2146892115);
      assertEquals(2146892115, (int)integer7);
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertNotNull(integer7);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer2;
      integerArray0[1] = integer0;
      integerArray0[2] = integer3;
      integerArray0[3] = integer2;
      integerArray0[4] = integer0;
      integerArray0[5] = integer7;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer integer0 = new Integer((-31));
      assertEquals((-31), (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[1] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 3486;
      Integer integer0 = new Integer(3486);
      assertEquals(3486, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer integer1 = new Integer((-1258));
      assertEquals((-1258), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      Integer integer2 = Integer.getInteger("", integer0);
      assertEquals(3486, (int)integer2);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[6] = integer2;
      integerArray0[7] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, integerArray0.length);
      
      int int1 = (-3380);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, (-3380), (-3380));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-427.1925);
      doubleArray0[1] = 738.02780467538;
      doubleArray0[2] = 3556.5990174669905;
      doubleArray0[3] = 1521.0;
      doubleArray0[4] = 195.705284;
      doubleArray0[5] = 0.0;
      Integer integer0 = new Integer((-2072));
      assertEquals((-2072), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(1841.0958204, doubleArray0);
      assertArrayEquals(new double[] {(-427.1925), 738.02780467538, 3556.5990174669905, 1521.0, 195.705284, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-786502.326256227), 1358779.9065268298, 6548039.585897223, 2800306.7428284003, 360312.180402595, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1), (-2486));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-427.1925);
      doubleArray0[1] = 738.02780467538;
      doubleArray0[2] = 3556.5990174669905;
      doubleArray0[3] = 1521.0;
      doubleArray0[4] = 195.705284;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-20.0);
      doubleArray0[7] = (-903.773511604);
      doubleArray0[8] = 1.0E-5;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-427.1925), 738.02780467538, 3556.5990174669905, 1521.0, 195.705284, 0.0, (-20.0), (-903.773511604), 1.0E-5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2147483532;
      intArray0[1] = 1;
      intArray0[2] = (-1071);
      intArray0[3] = 2144671060;
      intArray0[4] = 57;
      intArray0[5] = (-200);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {2147483532, 1, (-1071), 2144671060, 57, (-200)}, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[7];
      longArray1[0] = (-1632L);
      longArray1[1] = 1L;
      longArray1[2] = (-1260L);
      longArray1[3] = (-1260L);
      longArray1[5] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-1632L);
      longArray3[1] = 1L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      double double2 = 384.56444052445;
      doubleArray0[1] = 384.56444052445;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double double3 = Double.NaN;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (384.564 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 384.56444052445;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 384.56444052445, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 147889.80891588324, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 384.564)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = 3.26E18;
      double double1 = 1644.3;
      double double2 = (-3406.0764981084);
      double double3 = 1636.6890007416;
      double double4 = 147889.80891588324;
      double double5 = MathArrays.linearCombination(3.26E18, 1644.3, (-3406.0764981084), 1636.6890007416, 1644.3, 3.26E18, 147889.80891588324, 1.304E19);
      assertEquals(1.9392039442631175E24, double5, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      
      double double6 = 2.17333333333333325E18;
      double double7 = MathArrays.linearCombination(1644.3, 2.17333333333333325E18, 2.17333333333333325E18, 1644.3);
      assertEquals(7.147223999999999E21, double7, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1644.3;
      doubleArray0[1] = 7.147223999999999E21;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 2.17333333333333325E18;
      doubleArray0[4] = (-2315.0671747);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1644.3, 7.147223999999999E21, 1.304E19, 2.17333333333333325E18, (-2315.0671747)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2703722.4899999998, 5.108281090617599E43, 1.700416E38, 4.7233777777777774E36, 5359536.023373441}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (1,644.3 <= 7,147,223,999,999,999,000,000)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-4019.0F);
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-4019.0F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      int int0 = 711;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1258.81445515921);
      doubleArray0[3] = 1272.3674;
      doubleArray0[4] = (-2353.489117);
      doubleArray0[5] = (-1131.871415889);
      long[][] longArray0 = new long[4][1];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 3252L;
      longArray3[1] = 3252L;
      longArray3[2] = 3252L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 3252L;
      longArray4[1] = 3252L;
      longArray4[2] = 3252L;
      longArray4[3] = 4398046511103L;
      longArray4[4] = 3252L;
      longArray4[5] = 3252L;
      longArray4[6] = 3252L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 3 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 384.56444052445;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[5] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 384.56444052445, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(384.56444052445, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long[][] longArray0 = new long[4][1];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 166L;
      longArray2[2] = 1725L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1725L;
      longArray3[1] = 0L;
      longArray3[2] = 166L;
      longArray3[3] = 1725L;
      longArray3[4] = 166L;
      longArray3[5] = 1725L;
      longArray3[6] = 1725L;
      longArray3[7] = 0L;
      longArray3[8] = 166L;
      longArray0[2] = longArray3;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-876.5068));
      assertArrayEquals(new double[] {0.0, 384.56444052445, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, (-876.5068000000001), -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.linearCombination(384.56444052445, (double) 166L, (-36.46765), 2141.0, 0.0, (-1674.45175));
      assertEquals((-14239.5415229413), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-14239.5415229413);
      doubleArray2[1] = (double) 1725L;
      doubleArray2[2] = (double) 1725L;
      doubleArray2[3] = (double) 1725L;
      doubleArray2[4] = (double) 0L;
      doubleArray2[5] = (double) 0L;
      doubleArray2[6] = (double) 1725L;
      doubleArray2[7] = (double) 1725L;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {0.0, 384.56444052445, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, (-876.5068000000001), -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-14239.5415229413), 1725.0, 1725.0, 1725.0, 0.0, 0.0, 1725.0, 1725.0}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      double[][] doubleArray0 = new double[2][0];
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(6, stringArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(0.7316888570785522, doubleArray0[0]);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(0.7316888570785522, (-4769.319152513), (-4769.319152513), 2570.62641, (-22.6317970219108), 2570.62641);
      assertEquals((-1.2321805323978763E7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.304E19, 3190.669528, 1.304E19, (-4.813899778443457E-9), (-3.141592653589793), 427.1925);
      assertEquals(4.1606330645057225E22, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 427.1925;
      doubleArray0[1] = 427.1925;
      doubleArray0[2] = 4.1606330645057225E22;
      doubleArray0[3] = (-4.813899778443457E-9);
      doubleArray0[4] = (-4.813899778443457E-9);
      doubleArray0[5] = 427.1925;
      doubleArray0[6] = 427.1925;
      doubleArray0[7] = 3190.669528;
      doubleArray0[8] = 3294198.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {427.1925, 427.1925, 4.1606330645057225E22, (-4.813899778443457E-9), (-4.813899778443457E-9), 427.1925, 427.1925, 3190.669528, 3294198.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {427.1925, 427.1925, 4.1606330645057225E22, (-4.813899778443457E-9), (-4.813899778443457E-9), 427.1925, 427.1925, 3190.669528, 3294198.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.linearCombination(3294198.0, 2039.0, 3629.371350381328, 3629.371350381328);
      assertEquals(6.730042058398969E9, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      long[][] longArray0 = new long[9][6];
      long[] longArray1 = new long[6];
      longArray1[0] = 65L;
      longArray1[1] = 2964L;
      longArray1[2] = (-4496L);
      longArray1[3] = (-1651L);
      longArray1[4] = 394L;
      longArray1[5] = 295L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 2964L;
      longArray2[1] = 2964L;
      longArray2[2] = (-4496L);
      longArray2[3] = (-1651L);
      longArray2[4] = 295L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 295L;
      longArray3[1] = 394L;
      longArray3[2] = 295L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 394L;
      longArray4[1] = 1L;
      longArray4[2] = 65L;
      longArray4[3] = 2964L;
      longArray4[4] = (-4496L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 2964L;
      longArray5[1] = 295L;
      longArray5[2] = (-4496L);
      longArray5[3] = (-1651L);
      longArray5[4] = 2147483648L;
      longArray5[5] = 65L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = 65L;
      longArray6[1] = (-1651L);
      longArray6[2] = 295L;
      longArray6[3] = 394L;
      longArray6[4] = 65L;
      longArray6[5] = 65L;
      longArray6[6] = 2964L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = (-4496L);
      longArray7[1] = 2964L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[3];
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray4));
      
      longArray8[0] = 65L;
      longArray8[1] = 2964L;
      longArray8[2] = (-4035746434778044925L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[3];
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray5));
      
      longArray9[0] = 1L;
      longArray9[1] = (-4035746434778044925L);
      longArray9[2] = 295L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.44888888888888883E18;
      doubleArray0[1] = (-1910.084448671);
      doubleArray0[2] = (-713.5979771367);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {1.44888888888888883E18, (-1910.084448671), (-713.5979771367)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.44888888888888883E18, (-1910.084448671), (-713.5979771367)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,910.084 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long[][] longArray0 = new long[0][1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4929.705362;
      doubleArray0[1] = 1551.8314579893988;
      doubleArray0[2] = 4676.1135116331;
      doubleArray0[3] = 1585.789119563;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {4929.705362, 1551.8314579893988, 4676.1135116331, 1585.789119563}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9859.410724, 3103.6629159787976, 9352.2270232662, 3171.578239126}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-4098);
      int int1 = 102;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-4098), 102);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(566);
      assertEquals(566, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      long long0 = 0L;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 566;
      longArray0[1] = (long) (int)integerArray0[0];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 566L;
      doubleArray1[1] = (double) (int)integerArray0[0];
      doubleArray1[2] = 865.301181200683;
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = (double) 566L;
      doubleArray1[5] = (double) 566;
      doubleArray1[6] = (double) 0L;
      doubleArray1[7] = (double) 566L;
      doubleArray1[8] = (double) (int)integerArray0[0];
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = 1.304E19;
      double double1 = MathArrays.linearCombination(3.26E18, 1644.3, (-3406.0764981084), 1636.6890007416, 1644.3, 3.26E18, 147889.80891588324, 1.304E19);
      assertEquals(1.9392039442631175E24, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(1644.3, 2.17333333333333325E18, 2.17333333333333325E18, 1644.3);
      assertEquals(7.147223999999999E21, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1644.3;
      doubleArray0[1] = 7.147223999999999E21;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 2.17333333333333325E18;
      doubleArray0[4] = (-2315.0671747);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1644.3, 7.147223999999999E21, 1.304E19, 2.17333333333333325E18, (-2315.0671747)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2703722.4899999998, 5.108281090617599E43, 1.700416E38, 4.7233777777777774E36, 5359536.023373441}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-2146750088);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2146750088));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.26E18, 1644.3, (-3406.0764981084), 1636.6890007416, 1644.3, 3.26E18, 147889.80891588324, 1.304E19);
      assertEquals(1.9392039442631175E24, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1644.3, 2.17333333333333325E18, 2.17333333333333325E18, 1644.3);
      assertEquals(7.147223999999999E21, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1644.3;
      doubleArray0[1] = 7.147223999999999E21;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 2.17333333333333325E18;
      doubleArray0[4] = 3.26E18;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1644.3, 7.147223999999999E21, 1.304E19, 2.17333333333333325E18, 3.26E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2703722.4899999998, 5.108281090617599E43, 1.700416E38, 4.7233777777777774E36, 1.06276E37}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = MathArrays.linearCombination(6.283185307179586, (-388.626848893459), 0.0, 6.283185307179586, 0.0, 0.0);
      assertEquals((-2441.814506942883), double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (-2441.814506942883);
      doubleArray0[2] = (-2441.814506942883);
      doubleArray0[3] = (-2441.814506942883);
      doubleArray0[4] = (-388.626848893459);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 6.283185307179586;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = 0L;
      longArray0[2] = 4503599627370496L;
      longArray0[3] = 2039L;
      longArray0[0] = 0L;
      longArray0[5] = 569L;
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double double0 = MathArrays.linearCombination((double) (-2528.7F), (double) (-2528.7F), 1.44888888888888883E18, 1.44888888888888883E18, (double) (-2528.7F), 0.167);
      assertEquals(2.0992790123456787E36, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1636.6890007416;
      doubleArray0[2] = (-1258.81445515921);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BA3becG";
      stringArray0[1] = "$Mu[9";
      stringArray0[2] = "$Mu[9";
      stringArray0[3] = "BA3becG";
      stringArray0[4] = "BA3becG";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = MathArrays.linearCombination(20.0, 3.141592653589793, 99.06895833024886, 20.0, 0.0, 0.0, (-3406.0764981084), (-3406.0764981084));
      assertEquals(1.1603401321986057E7, double0, 0.01);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.1603401321986057E7;
      doubleArray0[3] = 1.1603401321986057E7;
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.1603401321986057E7;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-3406.0764981084);
      doubleArray0[8] = 3.141592653589793;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.1603401321986057E7, 0.0, 1.1603401321986057E7, 0.0, (-3406.0764981084), 3.141592653589793}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(1.1603401321986057E7, (-20.0), 0.0, 6.283185307179586, 0.0, (-1.6463668952860908), 99.06895833024886, 0.0);
      assertEquals((-2.3206802643972114E8), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2295.64;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2295.64, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 691.06;
      doubleArray2[1] = 2295.64;
      doubleArray2[2] = 2295.64;
      doubleArray2[3] = 3.141592653589793;
      doubleArray2[4] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 384.56444052445;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 384.56444052445, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(384.56444052445, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long[][] longArray0 = new long[4][1];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 166L;
      longArray2[2] = 1725L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1725L;
      longArray3[1] = 0L;
      longArray3[2] = 166L;
      longArray3[3] = 1725L;
      longArray3[4] = 166L;
      longArray3[5] = 1725L;
      longArray3[6] = 1725L;
      longArray3[7] = 0L;
      longArray3[8] = 166L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-4496L);
      longArray4[1] = 166L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,496 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2528.7F);
      floatArray0[1] = (-709.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-4019.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-2528.7F), (-709.0F), 0.0F, (-4019.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, 3.834E-20);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1989.541;
      doubleArray0[1] = (-2574.64);
      doubleArray0[2] = 13.4318;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-368.01538);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 18.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-368.01538), Double.NaN, 18.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.0), 0.0, (-736.03076), Double.NaN, 36.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-368.01538), Double.NaN, 18.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.0), 0.0, (-736.03076), Double.NaN, 36.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      long[][] longArray0 = new long[5][3];
      long[] longArray1 = new long[7];
      longArray1[0] = 371L;
      longArray1[1] = 3325L;
      longArray1[2] = (-2850L);
      longArray1[3] = 2160L;
      longArray1[4] = 1L;
      longArray1[5] = 1L;
      longArray1[6] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 2160L;
      longArray2[1] = (-2850L);
      longArray2[2] = 371L;
      longArray2[3] = 2160L;
      longArray2[4] = 1L;
      longArray2[5] = 0L;
      longArray2[6] = 1L;
      longArray2[7] = (-2850L);
      longArray2[8] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[1] = 3325L;
      longArray3[2] = 1L;
      longArray3[3] = 0L;
      longArray3[4] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 771L;
      longArray4[1] = (-2850L);
      longArray4[2] = (-2850L);
      longArray4[3] = 2160L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 1L;
      longArray5[1] = 1L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = 1672.9861F;
      floatArray0[0] = 1672.9861F;
      floatArray0[1] = 0.0F;
      float float1 = (-3311.6152F);
      floatArray0[2] = (-3311.6152F);
      float float2 = 949.0F;
      floatArray0[3] = 949.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1672.9861F, 0.0F, (-3311.6152F), 949.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(6, stringArray0.length);
      
      double[] doubleArray2 = MathArrays.scale(0.7316888570785522, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double double0 = MathArrays.linearCombination(6.283185307179586, (-388.626848893459), 0.0, 6.283185307179586, 0.0, 0.0);
      assertEquals((-2441.814506942883), double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (-2441.814506942883);
      doubleArray0[2] = (-2441.814506942883);
      doubleArray0[3] = (-2441.814506942883);
      doubleArray0[4] = (-388.626848893459);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 6.283185307179586;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-388.626848893459), 0.0, 6.283185307179586, (-2441.814506942883), (-2441.814506942883), (-2441.814506942883), 6.283185307179586}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[3] = (-2291);
      intArray0[1] = 35;
      intArray0[2] = 1681;
      intArray0[3] = 175;
      intArray0[4] = 155;
      intArray0[5] = 2229;
      intArray0[6] = 134217729;
      intArray0[7] = 0;
      intArray0[8] = 515;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 35, 1681, 175, 155, 2229, 134217729, 0, 515}, intArray0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2229;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 35;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][0];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8, 2229.0, 35.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (134,217,729 >= 2,229)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[9][9];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 3101.0;
      doubleArray1[1] = 602.8341873057875;
      doubleArray1[2] = 3934.887257656;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = 967.237;
      doubleArray1[5] = 346.1973418215945;
      doubleArray1[6] = (-1.0);
      doubleArray0[3] = doubleArray1;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      doubleArray0[7] = null;
      doubleArray0[8] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 54;
      intArray0[1] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {54, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, intArray0.length);
      
      double double1 = MathArrays.linearCombination((double) 0, 0.0, 390.5205118, 390.5205118);
      assertEquals(152506.27013653395, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 152506.27013653395;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 152506.27013653395}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 2.3258162430957466E10}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 152506.27013653395}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 2.3258162430957466E10}, doubleArray1, 0.01);
      assertEquals(152506.27013653395, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      long[][] longArray0 = new long[6][6];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 54;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 54;
      longArray2[2] = (long) 54;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) 54;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 0;
      longArray3[1] = (long) 54;
      longArray3[2] = (long) 54;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (long) 54;
      longArray4[1] = (long) 54;
      longArray4[2] = (long) 54;
      longArray4[3] = (long) 54;
      longArray4[4] = (long) 0;
      longArray4[5] = (long) 54;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = (long) 54;
      longArray5[1] = (-2038L);
      longArray5[2] = (long) 54;
      longArray5[3] = (long) 0;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = (long) 54;
      longArray6[1] = (long) 54;
      longArray6[2] = (long) 54;
      longArray6[3] = (long) 54;
      longArray6[4] = (-1669L);
      longArray6[5] = (-2038L);
      longArray6[6] = (-2038L);
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 691.06;
      doubleArray0[5] = (-366.83922);
      doubleArray0[6] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY, 3.834E-20, 0.0, 691.06, (-366.83922), 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1.0, Double.NaN, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY, 3.834E-20, 0.0, 691.06, (-366.83922), 3.141592653589793}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 2);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY, 3.834E-20, 0.0, 691.06, (-366.83922), 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double1 = MathArrays.linearCombination(2128.747676333215, (double) 2, 3.834E-20, 78.1295885139175, 3.834E-20, 0.0);
      assertEquals(4257.49535266643, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 0);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = 0L;
      longArray0[2] = 4503599627370496L;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 2039L;
      doubleArray0[2] = (double) 4503599627370496L;
      doubleArray0[3] = (double) 4503599627370496L;
      double[][] doubleArray1 = new double[0][6];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray2 = MathArrays.scale((-1118.7199184149308), doubleArray0);
      assertArrayEquals(new double[] {(-2281069.9136480438), (-5.0382666077054341E18), (-5.0382666077054341E18), Double.NaN}, doubleArray2, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 691.06;
      doubleArray0[5] = (-366.83922);
      doubleArray0[6] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.scale(1.1603419942819452E7, doubleArray1);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 3.141592653589793;
      doubleArray2[1] = (-366.83922);
      MathArrays.equals(doubleArray0, doubleArray2);
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-2129);
      intArray0[1] = 2326;
      intArray0[2] = 1;
      intArray0[3] = (-2366);
      intArray0[4] = 2081;
      intArray0[5] = 2070;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 3298;
      MathArrays.copyOf(intArray0);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      MathArrays.copyOf(intArray1, 3298);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-2129);
      doubleArray1[1] = (double) (-2129);
      MathArrays.equals(doubleArray1, doubleArray0);
      MathArrays.scale(4103.608058523123, doubleArray1);
      MathArrays.copyOf(doubleArray1, 390);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1571.7211240888);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-1571.7211240888), 6523.5, 0.0, 0.0);
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 0.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(1665.5, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 564.193F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 920.01575F;
      floatArray0[4] = 3626.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-664);
      intArray0[1] = (-516);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-664));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3262.6949;
      doubleArray0[1] = 3262.6949;
      doubleArray0[2] = 3262.6949;
      doubleArray0[3] = 3262.6949;
      doubleArray0[4] = 3262.6949;
      doubleArray0[5] = 3262.6949;
      MathArrays.scaleInPlace(3262.6949, doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[][] longArray0 = new long[5][9];
      long[] longArray1 = new long[9];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 4503599627370496L;
      longArray1[3] = 2039L;
      longArray1[4] = 0L;
      longArray1[5] = 569L;
      longArray1[6] = (-85L);
      longArray1[7] = 0L;
      longArray1[8] = 316L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = 569L;
      longArray3[1] = (-3986L);
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 4503599627370496L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = 0L;
      longArray5[1] = 0L;
      longArray5[2] = 0L;
      longArray5[3] = 316L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 3203L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3203L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 3203L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-746.07334176783);
      doubleArray0[5] = (-3629.371350381328);
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1720.693382016425);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 2358.489011498035;
      doubleArray2[1] = (-1720.693382016425);
      doubleArray2[2] = (-1720.693382016425);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-1720.693382016425);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-1720.693382016425);
      doubleArray2[7] = 0.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2291);
      intArray0[1] = 35;
      intArray0[2] = 1681;
      intArray0[3] = 175;
      intArray0[4] = 124;
      intArray0[5] = 2229;
      intArray0[6] = 134217729;
      intArray0[7] = 0;
      intArray0[8] = 515;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MathArrays.linearCombination((-2353.0770546416), (-2353.0770546416), (-115.12775340547147), Double.NaN, (-2353.0770546416), (-2353.0770546416), (-115.12775340547147), (-115.12775340547147));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-115.12775340547147);
      doubleArray0[1] = (-115.12775340547147);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1.304E19;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-230.25550681094293), (-230.25550681094293), Double.NaN, Double.NaN, Double.NaN, Double.NaN, 2.608E19}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[][] longArray0 = new long[9][8];
      long[] longArray1 = new long[6];
      longArray1[0] = 1305L;
      longArray1[1] = (-2276L);
      longArray1[2] = (-169L);
      longArray1[3] = 0L;
      longArray1[4] = 0L;
      longArray1[5] = (-1201L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = 1305L;
      longArray2[1] = (-2276L);
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = 1305L;
      longArray2[6] = 1305L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = 0L;
      longArray3[1] = (-2276L);
      longArray3[2] = 9007199254740990L;
      longArray3[3] = (-2276L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = (-2276L);
      longArray4[1] = (-1201L);
      longArray4[2] = 9007199254740990L;
      longArray4[3] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      longArray5[0] = (-1201L);
      longArray5[1] = 0L;
      longArray5[2] = 1L;
      longArray5[3] = 0L;
      longArray5[4] = (-1201L);
      longArray5[5] = (-169L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      longArray6[0] = 0L;
      longArray6[1] = (-1201L);
      longArray6[2] = 3466L;
      longArray6[3] = (-169L);
      longArray6[4] = 1305L;
      longArray6[5] = (-2276L);
      longArray6[6] = 1L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[4];
      longArray7[0] = 0L;
      longArray7[1] = (-2276L);
      longArray7[2] = (-2276L);
      longArray7[3] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[5];
      longArray8[0] = 0L;
      longArray8[1] = 0L;
      longArray8[2] = 0L;
      longArray8[3] = (-2276L);
      longArray8[4] = 0L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[6];
      longArray9[0] = 0L;
      longArray9[1] = 0L;
      longArray9[2] = 0L;
      longArray9[3] = 1305L;
      longArray9[4] = 0L;
      longArray9[5] = (-1201L);
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MathArrays.linearCombination(9.5636512, 9.5636512, 9.5636512, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 91.46342427526146;
      doubleArray0[2] = 9.5636512;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 91.46342427526146;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 9.5636512;
      doubleArray0[7] = 91.46342427526146;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2140.5815482302564;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2051.80304566029);
      doubleArray0[5] = 3306.434061;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-4280.358654433063);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(15, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MathArrays.linearCombination((-1.0), (-1.0), (-1.0), (-1.0), (-1.0), 0.0);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 719.2317672832255;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 1.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("dKlMR_0`'I]HfX*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.dKlMR_0`'I]HfX*
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1636.6890007416;
      doubleArray0[2] = (-1258.81445515921);
      doubleArray0[3] = 1272.3674;
      doubleArray0[4] = (-2353.489117);
      doubleArray0[5] = (-1131.871415889);
      doubleArray0[6] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly decreasing (-1,258.814 <= 1,272.367)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = 1693L;
      longArray0[0] = 1693L;
      long long1 = (-280L);
      longArray0[1] = (-280L);
      long long2 = (-37L);
      longArray0[2] = (-37L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -280 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-2312L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (-1089L);
      long long0 = (-938L);
      longArray0[4] = (-938L);
      longArray0[5] = (-255L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,312 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-427.1925);
      doubleArray0[1] = 738.02780467538;
      doubleArray0[2] = 3556.5990174669905;
      doubleArray0[3] = 1521.0;
      doubleArray0[4] = 195.705284;
      doubleArray0[5] = 0.0;
      Integer integer0 = new Integer((-2072));
      Integer integer1 = new Integer((-1));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer2 = new Integer(11);
      integerArray0[3] = integer2;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      integerArray0[6] = integer1;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1.5728316601762895E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-211.28);
      Integer integer0 = new Integer((-828));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[3][7];
      long[] longArray1 = new long[7];
      longArray1[0] = (long) (-828);
      longArray1[1] = (long) (int)integerArray0[1];
      longArray1[2] = (long) (int)integerArray0[3];
      longArray1[3] = (long) (int)integerArray0[2];
      longArray1[4] = (long) (int)integerArray0[6];
      longArray1[5] = (long) (int)integerArray0[6];
      longArray1[6] = (long) (int)integerArray0[4];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = (long) (int)integerArray0[3];
      longArray2[1] = (long) (int)integerArray0[4];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = (long) (int)integerArray0[5];
      longArray3[1] = (-228L);
      longArray3[2] = (long) (int)integerArray0[6];
      longArray3[3] = (long) (int)integerArray0[6];
      longArray3[4] = (long) (int)integerArray0[0];
      longArray3[5] = (-1112L);
      longArray3[6] = (long) (int)integerArray0[5];
      longArray3[7] = (long) (int)integerArray0[4];
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -828 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2291);
      intArray0[1] = 35;
      intArray0[2] = 1681;
      intArray0[3] = 175;
      intArray0[4] = 124;
      intArray0[5] = 2229;
      Integer integer0 = new Integer((-2291));
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 175;
      integerArray0[1] = (Integer) (-2291);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1681;
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) 2229;
      doubleArray0[3] = (double) 175;
      doubleArray0[5] = (double) 124;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7840324.0, double0, 0.01);
      
      MathArrays.scale(Double.NaN, doubleArray0);
      assertArrayEquals(new double[] {1681.0, 11.0, 2229.0, 175.0, 0.0, 124.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      long[][] longArray0 = new long[0][1];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[1];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "= 6Rms c0T_@;H";
      stringArray0[2] = "cannot compute 0-th root of unity, indefinite result";
      stringArray0[3] = "!dT%dk?,VX";
      stringArray0[4] = "&7<9_JWYHX$";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = MathArrays.scale((-1118.7199184149308), doubleArray0);
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {-0.0}, doubleArray1, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      Double double0 = new Double(38.0);
      Double double1 = new Double(2926.484);
      Double double2 = new Double(0.0);
      Double double3 = new Double(384.56444052445);
      Double double4 = new Double(0.0);
      Double[] doubleArray1 = new Double[1];
      doubleArray0[0] = (double) double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      long[][] longArray0 = new long[6][1];
      long[] longArray1 = new long[7];
      longArray1[0] = (-4496L);
      longArray1[1] = 2819561105158720014L;
      longArray1[2] = (-2644281811660520851L);
      longArray1[3] = 0L;
      longArray1[4] = (-280L);
      longArray1[5] = 3203L;
      longArray1[6] = (-4496L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = (-2644281811660520851L);
      longArray2[1] = (-4496L);
      longArray2[2] = (-2644281811660520851L);
      longArray2[3] = 3203L;
      longArray2[4] = (-2644281811660520851L);
      longArray2[5] = 0L;
      longArray2[6] = 3203L;
      longArray2[7] = (-4496L);
      longArray2[8] = (-2644281811660520851L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = 0L;
      longArray3[1] = (-2155L);
      longArray3[2] = (-2644281811660520851L);
      longArray3[3] = 3203L;
      longArray3[4] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = (-280L);
      longArray4[1] = 2819561105158720014L;
      longArray4[2] = 2819561105158720014L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      longArray6[0] = (-2834L);
      longArray6[1] = 2819561105158720014L;
      longArray6[2] = (-4496L);
      longArray6[3] = 3203L;
      longArray6[4] = (-2155L);
      longArray6[5] = (-4496L);
      longArray6[6] = (-2155L);
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(566);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(566);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2251);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2251);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2251);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(566);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[2]);
      integerArray0[7] = integer7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = 1927.3792674;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 1;
      doubleArray1[8] = 1.9392039442631175E24;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      long[][] longArray0 = new long[8][0];
      long[] longArray1 = new long[8];
      longArray1[0] = (-4496L);
      longArray1[1] = 2782L;
      longArray1[2] = 0L;
      longArray1[3] = 332L;
      longArray1[4] = 0L;
      longArray1[5] = 1L;
      longArray1[6] = (-1231L);
      longArray1[7] = 2908L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = 2908L;
      longArray2[1] = 65L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = (-1231L);
      longArray2[5] = 1L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = 1L;
      longArray3[1] = 65L;
      longArray3[2] = 1L;
      longArray3[3] = 65L;
      longArray3[4] = 332L;
      longArray3[5] = 332L;
      longArray3[6] = 2311L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = 0L;
      longArray4[1] = 332L;
      longArray4[2] = 0L;
      longArray4[3] = (-4496L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      longArray5[0] = 2311L;
      longArray5[1] = 426L;
      longArray5[2] = 0L;
      longArray5[3] = 2908L;
      longArray5[4] = 332L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      longArray6[0] = 2908L;
      longArray6[1] = 2311L;
      longArray6[2] = 1L;
      longArray6[3] = 2782L;
      longArray6[4] = 0L;
      longArray6[5] = (-4496L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      longArray0[6] = longArray7;
      long[] longArray8 = new long[8];
      longArray8[0] = 332L;
      longArray8[1] = (-4496L);
      longArray8[2] = 2908L;
      longArray8[3] = 0L;
      longArray8[4] = 332L;
      longArray8[5] = (-4496L);
      longArray8[6] = (-4496L);
      longArray8[7] = 0L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,496 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-211.28);
      doubleArray0[1] = 2141.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-211.28 <= 2,141)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      long[][] longArray0 = new long[0][1];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      MathArrays.checkPositive(doubleArray0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2.68435458E8}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(3113);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, (int) integerArray0[4], 1712236889);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      long[][] longArray0 = new long[0][1];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4929.705362;
      doubleArray0[1] = 1551.8314579893988;
      doubleArray0[2] = 4676.1135116331;
      doubleArray0[3] = 1585.789119563;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-4098);
      int int1 = 102;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-4098), 102);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-723.2689161474175);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2852.5812440413;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-20.0);
      doubleArray0[5] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 384.56444052445;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (384.564 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      int int0 = 711;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 3721);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 80;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 80);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-79.3391218));
      assertArrayEquals(new double[] {(-79.3391218), -0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double double0 = MathArrays.linearCombination(20.0, 3.141592653589793, 100.0, 20.0, 0.0, 0.0, (-3406.0764981084), (-3406.0764981084));
      assertEquals(1.1603419942819452E7, double0, 0.01);
      
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.1603419942819452E7;
      doubleArray0[1] = (-3406.0764981084);
      doubleArray0[2] = 1.1603419942819452E7;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.1603419942819452E7;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-3406.0764981084);
      doubleArray0[8] = 3.141592653589793;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      
      double double1 = MathArrays.linearCombination(1.1603419942819452E7, (-20.0), 0.0, 6.283185307179586, 0.0, 0.0, (-1546.4649871905), 0.0);
      assertEquals((-2.3206839885638905E8), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2295.64;
      doubleArray0[1] = 472.7561330314372;
      doubleArray0[2] = 3951.731;
      doubleArray0[3] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3898.07);
      doubleArray0[1] = (-4145.4188472992);
      doubleArray0[2] = 6671.7;
      doubleArray0[3] = 223.1542;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1410.991120816411;
      doubleArray0[6] = 438.7;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1645.3669191);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 34);
      assertEquals(34, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = (-252.8346868002654);
      doubleArray0[2] = 1010.2208694850281;
      doubleArray0[3] = (-2839.66723404);
      doubleArray0[4] = 425.34687;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1695.34469);
      doubleArray0[7] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
