/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:49:39 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 87.0630965204718;
      doubleArray0[1] = (-808.2281);
      doubleArray0[2] = 4.9E-324;
      doubleArray0[3] = 4.9E-324;
      doubleArray0[4] = (-1348.73143323309);
      doubleArray0[5] = (-1.0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.normalizeArray(doubleArray0, (-1.0));
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-808.2281);
      doubleArray1[1] = (-808.2281);
      doubleArray1[2] = 1574.7666885593967;
      doubleArray1[3] = 4.9E-324;
      doubleArray1[4] = 4.9E-324;
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-808.228 >= -808.228)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      Object object1 = new Object();
      Integer integer1 = new Integer((-1129));
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(object0).when(field0).getZero();
      MathArrays.buildArray(field0, 4227, (-2));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 0.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      MathArrays.copyOf(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 4227;
      floatArray0[1] = (float) (-2);
      floatArray0[2] = (float) (-2);
      floatArray0[3] = (float) (-2);
      floatArray0[4] = (float) (-2);
      floatArray0[5] = (float) (-2);
      double[] doubleArray2 = new double[0];
      MathArrays.scaleInPlace((-2), doubleArray2);
      int[] intArray0 = new int[8];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 4227;
      intArray0[2] = 4227;
      intArray0[3] = (-1129);
      intArray0[4] = 4227;
      intArray0[5] = (-1129);
      intArray0[6] = (-1129);
      intArray0[7] = Integer.MAX_VALUE;
      MathArrays.copyOf(intArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.distance1(doubleArray0, doubleArray0);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 12;
      intArray0[0] = 12;
      intArray0[1] = 1045636244;
      intArray0[2] = 435;
      int[] intArray1 = new int[3];
      intArray1[0] = 1045636244;
      intArray1[1] = 12;
      intArray1[2] = 1045636244;
      MathArrays.distance1(intArray0, intArray1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3642.462834666873;
      doubleArray0[1] = 1448.639293239125;
      doubleArray0[2] = (double) 1045636244;
      doubleArray0[3] = (double) 12;
      MathArrays.distance(doubleArray0, doubleArray0);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 12;
      integerArray0[1] = (Integer) 1045636244;
      integerArray0[2] = (Integer) 12;
      integerArray0[3] = (Integer) 12;
      integerArray0[4] = (Integer) 1045636244;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1441.9987151;
      doubleArray1[1] = (double) 435;
      doubleArray1[2] = (double) int0;
      doubleArray1[3] = 1593.339997;
      MathArrays.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[6];
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = null;
      doubleArray1[5] = null;
      doubleArray1[6] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[34];
      doubleArray0[1] = 3.834E-20;
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) 0.0F;
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = (double) 0.0F;
      doubleArray1[6] = (double) 0.0F;
      doubleArray1[7] = 3.834E-20;
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      MathArrays.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-561.59106F);
      floatArray0[1] = 1499.969F;
      float float0 = 1.0F;
      floatArray0[2] = 1.0F;
      float float1 = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 2443.0F;
      floatArray0[6] = (-755.11F);
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      long[] longArray0 = new long[2];
      long long0 = (-4035746434778044925L);
      longArray0[0] = (-4035746434778044925L);
      long long1 = 1230L;
      longArray0[1] = 1230L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,035,746,434,778,044,925 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-4465.189746461474);
      doubleArray0[2] = 2130.3220361;
      doubleArray0[3] = (-2297.13);
      doubleArray0[4] = 887.17;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, 3.834E-20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1306.43380809276;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 3178.29346875;
      doubleArray0[3] = (-3990.13432457662);
      doubleArray0[4] = 5.041914939880371;
      doubleArray0[5] = 3.6725170580355583E-9;
      doubleArray0[6] = 5.041914939880371;
      doubleArray0[7] = 1513.6172050539337;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1408.5));
      MathArrays.linearCombination(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double(977.671934511);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 756.256F;
      floatArray0[2] = 1214.5632F;
      floatArray0[3] = 1024.11F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1691.677F;
      floatArray0[7] = (-1755.4535F);
      MathArrays.equals((float[]) null, floatArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 270.8F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2330.7458F);
      floatArray0[3] = (-2582.684F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 270.8F;
      floatArray0[7] = (-564.3783F);
      floatArray0[8] = 603.269F;
      MathArrays.equals((float[]) null, floatArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1598);
      intArray0[1] = (-1380);
      intArray0[2] = (-1313);
      intArray0[3] = 2280;
      intArray0[4] = (-2538);
      intArray0[5] = 201;
      intArray0[6] = 1;
      intArray0[7] = 1574;
      MathArrays.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 29.0;
      doubleArray0[1] = 77.0;
      doubleArray0[2] = 3.26E18;
      doubleArray0[3] = (-493.2647129264787);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 4500.521114748777;
      doubleArray0[6] = (-2372.541791488584);
      doubleArray0[7] = 1961.486;
      doubleArray0[8] = (-291.667164885011);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 3.26E18;
      doubleArray1[1] = 4500.521114748777;
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      MathArrays.safeNorm(doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      MathArrays.ebeMultiply(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.ebeAdd(doubleArray1, doubleArray1);
      MathArrays.safeNorm(doubleArray1);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = 436.0;
      doubleArray2[3] = 0.15;
      doubleArray2[4] = 436.0;
      doubleArray2[5] = 436.0;
      int int0 = 158;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int1 = 2146807260;
      // Undeclared exception!
      MathArrays.buildArray(field0, 158, 2146807260);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1846.2052537884504;
      doubleArray1[1] = 1796671.7741656518;
      doubleArray1[2] = (-1233.537287631);
      doubleArray1[3] = (-2446.107077485736);
      doubleArray1[4] = (-836.5299355329815);
      doubleArray1[5] = 1.304E19;
      doubleArray1[6] = (-1167.0);
      doubleArray1[7] = 4.3466666666666665E18;
      MathArrays.safeNorm(doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 43744.75943558405;
      doubleArray0[1] = (-2583.51);
      doubleArray0[2] = (-992.9952991629475);
      doubleArray0[3] = 3215.148435;
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 2095);
      // Undeclared exception!
      MathArrays.convolve(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray1, doubleArray1);
      MathArrays.linearCombination(0.0, 0.0, 0.0, (-441.5723831), (-3126.6524384241197), 0.0, 0.0, (-441.5723831));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 3.834E-20;
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.26E18;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.125;
      doubleArray0[3] = 2389.3810145606;
      doubleArray0[4] = 3742.0176687748785;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 133;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 133);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (-149.708779363);
      doubleArray0[4] = (-1511.64756198);
      doubleArray0[5] = (-916.2);
      doubleArray0[6] = 0.036;
      doubleArray0[7] = (-1034.598904982);
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scale(987.0, doubleArray0);
      MathArrays.scaleInPlace(987.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1682.80984745503);
      doubleArray1[1] = (-1682.80984745503);
      doubleArray1[2] = (-1682.80984745503);
      doubleArray1[3] = (-1682.80984745503);
      doubleArray1[4] = (-1682.80984745503);
      doubleArray1[5] = (-1682.80984745503);
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 17
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1914;
      intArray0[1] = 1;
      intArray0[2] = (-14);
      intArray0[3] = 1017;
      intArray0[4] = 2142396702;
      intArray0[5] = (-32);
      int[] intArray1 = new int[5];
      intArray1[3] = 1914;
      intArray1[1] = (-14);
      intArray1[2] = 2142396702;
      intArray1[3] = (-32);
      intArray1[4] = (-32);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = new Object();
      double double0 = 407.09977562056;
      Double double1 = new Double(407.09977562056);
      int int0 = 4227;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 4227;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      double[][] doubleArray3 = new double[3][1];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray3);
      MathArrays.sortInPlace(doubleArray2, doubleArray3);
      MathArrays.equals(floatArray0, (float[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[0][5];
      MathArrays.checkRectangular(longArray0);
      MathArrays.equals((double[]) null, doubleArray0);
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[6];
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1099.13483);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace((-1.0), doubleArray1);
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2442.170374181;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 2442.170374181;
      doubleArray0[6] = Double.NaN;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 2442.170374181;
      doubleArray1[4] = 2442.170374181;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      MathArrays.distance1(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2825.76F;
      floatArray0[1] = 1598.24F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 61.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 61.0F;
      doubleArray1[1] = (double) 2825.76F;
      doubleArray1[2] = (double) 0.0F;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, (double[]) null);
      MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 87.0630965204718;
      doubleArray0[1] = (-808.2281);
      doubleArray0[2] = 4.9E-324;
      doubleArray0[3] = 3147.2728290154;
      doubleArray0[4] = (-1348.73143323309);
      doubleArray0[5] = (-1.0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.normalizeArray(doubleArray0, (-1.0));
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-808.2281);
      doubleArray1[1] = (-808.2281);
      doubleArray1[2] = 3519.2636138338553;
      doubleArray1[3] = 4.9E-324;
      doubleArray1[4] = 4.9E-324;
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-808.228 >= -808.228)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1310.787564549;
      doubleArray0[1] = 5.669184079525E-24;
      doubleArray0[2] = (-2736.4319875182923);
      doubleArray0[3] = (-649.8307263712966);
      doubleArray0[4] = 1911.90385;
      doubleArray0[5] = (-1719.60667007458);
      doubleArray0[6] = (-1284.9);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.normalizeArray(doubleArray0, 7.824E19);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[2][9];
      long[] longArray1 = new long[1];
      longArray1[0] = 4577762542105553359L;
      longArray0[0] = longArray1;
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      MathArrays.distance(doubleArray0, doubleArray1);
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 4577762542105553359L;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = Double.NaN;
      doubleArray2[5] = Double.NaN;
      doubleArray2[6] = 2442.170374181;
      doubleArray2[7] = Double.NaN;
      doubleArray2[8] = (double) 4577762542105553359L;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2825.76F;
      floatArray0[1] = 1598.24F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 61.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 61.0F;
      doubleArray1[1] = (double) 2825.76F;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) (-1.0F);
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = (double) 0.0F;
      doubleArray1[6] = (double) 0.0F;
      doubleArray1[7] = (double) 1598.24F;
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[0][8];
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 273);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.distance(doubleArray0, doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 2703);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 9007199254740990L;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 9007199254740990L;
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 9007199254740990L;
      floatArray0[1] = (float) 9007199254740990L;
      floatArray0[2] = (float) 9007199254740990L;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      float[] floatArray1 = new float[6];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (float) 9007199254740990L;
      floatArray1[4] = (float) 9007199254740990L;
      floatArray1[5] = 0.0F;
      MathArrays.equals(floatArray0, floatArray1);
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0.0F;
      doubleArray2[1] = (double) (-1.0F);
      doubleArray2[2] = (double) 9.0071993E15F;
      doubleArray2[3] = (double) 9.0071993E15F;
      doubleArray2[4] = (double) 0.0F;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 0.0F;
      doubleArray3[1] = (double) 9.0071993E15F;
      doubleArray3[2] = (double) 0.0F;
      doubleArray3[3] = (double) 0.0F;
      doubleArray3[4] = (double) 9.0071993E15F;
      doubleArray3[5] = (double) 9.0071993E15F;
      doubleArray3[6] = (double) (-1.0F);
      doubleArray3[7] = (double) 0.0F;
      MathArrays.distance(doubleArray2, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[4];
      intArray0[0] = (-919);
      intArray0[1] = 24;
      intArray0[2] = 290;
      intArray0[3] = 13;
      MathArrays.distanceInf(intArray0, intArray0);
      Integer integer0 = new Integer((-2147483647));
      int[] intArray1 = new int[3];
      intArray1[0] = 13;
      intArray1[1] = 290;
      intArray1[2] = 13;
      MathArrays.distance(intArray1, intArray0);
      long[][] longArrayArray0 = null;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      MathArrays.safeNorm(doubleArray1);
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = Double.NaN;
      doubleArray3[2] = 436.0;
      doubleArray3[3] = 0.15;
      doubleArray3[4] = 436.0;
      doubleArray3[5] = 436.0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2492.795F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      float[] floatArray1 = new float[0];
      MathArrays.equals(floatArray0, floatArray1);
      MathArrays.convolve(doubleArray3, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      MathArrays.distance(doubleArray1, doubleArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = Double.NaN;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray3, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray1);
      long[] longArray0 = new long[1];
      long long0 = (-2264L);
      MathArrays.checkNonNegative(longArray0);
      long[][] longArray1 = new long[8][7];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      long[] longArray2 = new long[0];
      longArray1[3] = longArray2;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      try { 
        MathArrays.checkRectangular(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.ebeAdd(doubleArray1, doubleArray1);
      MathArrays.safeNorm(doubleArray1);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = 436.0;
      doubleArray2[3] = 0.15;
      doubleArray2[4] = 436.0;
      doubleArray2[5] = 436.0;
      MathArrays.scale(Double.NaN, doubleArray2);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 158, 2146807260);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.ebeAdd(doubleArray1, doubleArray1);
      MathArrays.safeNorm(doubleArray1);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2626.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.ebeAdd(doubleArray1, doubleArray1);
      MathArrays.distance(doubleArray1, doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 86;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      Double double0 = new Double(0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][0];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 1066.9259;
      doubleArray2[1] = (double) doubleArray0[0];
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
      doubleArray1[5] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      MathArrays.distance(doubleArray1, doubleArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      long[][] longArray1 = new long[6][1];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      MathArrays.checkRectangular(longArray1);
      MathArrays.equals(doubleArray2, doubleArray0);
      MathArrays.checkNonNegative(longArray1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.equals((float[]) null, (float[]) null);
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 403.154;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2442.170374181;
      doubleArray0[7] = Double.NaN;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = null;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      Integer integer0 = new Integer(2147205753);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      int[] intArray0 = new int[1];
      intArray0[0] = 1041;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1114.8605564866928;
      doubleArray0[1] = 0.16666666666745392;
      MathArrays.scaleInPlace(126.8956399408, doubleArray0);
      MathArrays.copyOf(doubleArray0, 0);
      MathArrays.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[9];
      intArray0[0] = 310;
      intArray0[1] = 310;
      intArray0[2] = 1829;
      intArray0[3] = 310;
      intArray0[4] = 1829;
      intArray0[5] = 310;
      intArray0[6] = 1829;
      intArray0[7] = 1829;
      intArray0[8] = (-892);
      int[] intArray1 = new int[9];
      intArray1[0] = 1829;
      intArray1[1] = 310;
      intArray1[2] = 1829;
      intArray1[3] = (-892);
      intArray1[4] = (-892);
      intArray1[5] = 310;
      intArray1[6] = (-892);
      intArray1[7] = 310;
      intArray1[8] = 310;
      MathArrays.distance1(intArray0, intArray1);
      MathArrays.scaleInPlace((-892), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 1004;
      intArray0[2] = (-2319);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(1004, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-486.80563560235);
      doubleArray0[2] = (-1443.412496);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-402.65403293);
      doubleArray0[5] = 4106.0;
      doubleArray0[6] = 0.5000000000042687;
      doubleArray0[7] = 3.834E-20;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 4106.0;
      doubleArray1[2] = 3.834E-20;
      doubleArray1[3] = (-486.80563560235);
      doubleArray1[4] = 4106.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 0.5000000000042687;
      MathArrays.normalizeArray(doubleArray1, 1.0);
      MathArrays.linearCombination(503.540296236, (-402.65403293), 1.0, 533.9271850585938);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-3576.9657);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 0.0;
      MathArrays.distanceInf(doubleArray1, doubleArray2);
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 289;
      intArray0[1] = 289;
      int int1 = 13;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 9.755392680573412E-9;
      doubleArray0[1] = (double) 289;
      double double0 = 1049.73908434278;
      doubleArray0[2] = 1049.73908434278;
      doubleArray0[3] = 169.13549492521332;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1049.73908434278;
      doubleArray1[1] = 1049.73908434278;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MathArrays.linearCombination(1855.3712387345215, Double.NaN, Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double double0 = new Double(134217729);
      Double double1 = new Double(2143.27366517974);
      Double double2 = new Double(763.859273969203);
      Double double3 = new Double(0.0);
      Double double4 = new Double(1967326.680745628);
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      Double double5 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double5;
      doubleArray0[3] = double1;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.distance1(intArray0, intArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1025);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2825.76F;
      floatArray0[1] = 1598.24F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      float[] floatArray1 = new float[3];
      floatArray1[0] = 2825.76F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 61.0F;
      MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      MathArrays.equals(floatArray0, floatArray1);
      double[] doubleArray0 = null;
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      int int0 = (-1802);
      Integer integer0 = new Integer((-1802));
      MathArrays.ebeAdd(doubleArray1, doubleArray1);
      double[] doubleArray2 = new double[6];
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection1, false, false);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      float[] floatArray1 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      try { 
        MathArrays.checkOrder(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = null;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1490.9274F;
      floatArray0[1] = (-1.0F);
      float float0 = (-4316.353F);
      floatArray0[2] = (-4316.353F);
      floatArray0[3] = (-4541.0F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-4316.353F);
      floatArray0[6] = (-2176.0F);
      float[] floatArray1 = new float[7];
      floatArray1[1] = 1.0F;
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (-4541.0F);
      floatArray1[4] = (-2176.0F);
      floatArray1[5] = (-1.0F);
      floatArray1[6] = (-4541.0F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.3812403863518417);
      MathArrays.safeNorm(doubleArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2261.3784;
      doubleArray0[2] = 1983.597705;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 544.5823125;
      doubleArray0[1] = (-7.44321345601866E-11);
      doubleArray0[2] = 2241.281785521;
      doubleArray0[3] = (-90.66311);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1983.597705;
      doubleArray0[6] = (-2361.9);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 544.5823125;
      doubleArray1[1] = (-90.66311);
      doubleArray1[2] = (-2361.9);
      doubleArray1[3] = (-90.66311);
      doubleArray1[4] = (-7.44321345601866E-11);
      doubleArray1[5] = 302.6;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[2];
      intArray0[1] = 115;
      MathArrays.copyOf(intArray0);
      Integer integer0 = new Integer((-1404));
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][6];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 289.0;
      doubleArray2[1] = (-1742.727546434793);
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 289;
      Double double0 = new Double((-1.0));
      double double1 = (-4.9E-324);
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (-1.0);
      doubleArray0[2] = (-4.9E-324);
      doubleArray0[3] = (-4.9E-324);
      Integer integer0 = new Integer(289);
      double[] doubleArray1 = MathArrays.scale((-4.9E-324), doubleArray0);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-4.9E-324);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 12 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2342.25118;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      int int0 = (-1258);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1258));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217757;
      intArray0[1] = 77;
      intArray0[2] = 2;
      Double double0 = new Double(77);
      MathArrays.linearCombination((double) 77, 3346.44178549392, (double) 77, (-473.549107603));
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.linearCombination((double) 77, 1238.186545575, 648.045708842, (double) 134217757, 117.29094, Double.NaN, 3346.44178549392, (double) 77);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 117.29094;
      doubleArray0[1] = 1238.186545575;
      doubleArray0[2] = 2196.69262;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 77;
      doubleArray0[5] = Double.NaN;
      MathArrays.normalizeArray(doubleArray0, 13.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 289;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 289;
      doubleArray0[1] = 9.755392680573412E-9;
      doubleArray0[2] = (double) 13;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      int int0 = new Integer(289);
      MathArrays.ebeAdd(doubleArray1, doubleArray1);
      MathArrays.distance(doubleArray1, doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = 77;
      intArray0[2] = 2;
      Double double0 = new Double(77);
      Double[] doubleArray0 = new Double[8];
      Double double1 = new Double((-4461.0));
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-4.9E-324);
      doubleArray1[1] = (-4461.0);
      doubleArray1[2] = (double) 77;
      doubleArray1[3] = (double) doubleArray0[1];
      doubleArray1[4] = (-4461.0);
      doubleArray1[5] = (double) 77;
      doubleArray1[6] = (double) doubleArray0[1];
      doubleArray1[7] = (double) 134217729;
      MathArrays.distance1(doubleArray1, doubleArray1);
      double[] doubleArray2 = MathArrays.scale(513.7448919, doubleArray1);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.normalizeArray(doubleArray2, 0.0);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 1.34217729E8;
      doubleArray3[1] = (-4461.0);
      doubleArray3[2] = 6.944109568191419E-9;
      doubleArray3[3] = (double) 77;
      doubleArray3[4] = (double) 2;
      doubleArray3[5] = (double) 2;
      doubleArray3[6] = (double) 2;
      doubleArray3[7] = 3140.4718635;
      MathArrays.equals(doubleArray1, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = 77;
      intArray0[2] = 2;
      intArray0[3] = 1377;
      intArray0[4] = 310;
      intArray0[5] = 0;
      intArray0[6] = 1817;
      intArray0[7] = 0;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 310;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1377;
      MathArrays.checkNonNegative(longArray0);
      long[][] longArray1 = new long[1][0];
      longArray1[0] = longArray0;
      MathArrays.checkRectangular(longArray1);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.checkNonNegative(longArray1);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 1377L;
      doubleArray1[1] = (double) 1377;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 134217729;
      doubleArray2[1] = (double) 77;
      doubleArray2[2] = (double) 1817;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 77;
      doubleArray2[5] = (double) 310;
      doubleArray2[6] = (double) 1377;
      doubleArray2[7] = (double) 310;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = 77;
      intArray0[2] = 2;
      intArray0[3] = 1377;
      intArray0[4] = 310;
      intArray0[5] = 0;
      intArray0[6] = 1829;
      intArray0[7] = 0;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 310;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1377;
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-7.44321345601866E-11);
      doubleArray0[2] = (-2893.109716);
      doubleArray0[3] = (-5160.488484401283);
      doubleArray0[4] = 854.0521592;
      doubleArray0[5] = 1271.0838;
      doubleArray0[6] = (-20.0);
      doubleArray0[7] = (-2696.85175);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not strictly decreasing (-5,160.488 <= 854.052)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[3];
      Double double0 = new Double((-431.72));
      Double double1 = new Double((-1243.916));
      Double double2 = new Double((-1393.50293));
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      doubleArray0[2] = double2;
      doubleArray0[3] = double1;
      doubleArray0[4] = double0;
      doubleArray0[5] = double1;
      doubleArray0[6] = double2;
      doubleArray0[7] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.copyOf(intArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) doubleArray0[4];
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (-4461.0);
      doubleArray1[3] = (double) doubleArray0[5];
      doubleArray1[4] = (double) doubleArray0[6];
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      int[] intArray1 = new int[3];
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = 77;
      MathArrays.distanceInf(intArray0, intArray1);
      MathArrays.linearCombination(doubleArray1, doubleArray1);
      MathArrays.ebeSubtract(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float[] floatArray0 = null;
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = 77;
      intArray0[2] = 2;
      Double double0 = new Double(77);
      Double[] doubleArray0 = new Double[8];
      Double double1 = new Double((-4461.0));
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      Double double2 = new Double(134217729);
      doubleArray0[3] = double2;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.copyOf(intArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 134217729;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) doubleArray0[4];
      doubleArray1[3] = (-4461.0);
      doubleArray1[4] = (double) 2;
      doubleArray1[5] = (double) 2;
      doubleArray1[6] = (double) doubleArray0[3];
      doubleArray1[7] = (double) doubleArray0[6];
      doubleArray1[8] = (double) 134217729;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      MathArrays.distance(doubleArray2, doubleArray3);
      MathArrays.checkPositive(doubleArray2);
      MathArrays.copyOf(intArray0, 2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 289;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-86);
      doubleArray0[1] = (double) 289;
      doubleArray0[2] = (double) (-86);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 289;
      doubleArray0[5] = (double) 0;
      long[][] longArray0 = new long[0][1];
      MathArrays.checkRectangular(longArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2626;
      MathArrays.distanceInf(intArray0, intArray0);
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      MathArrays.copyOf(intArray1, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2626;
      doubleArray0[1] = 2983.088;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 922.24366;
      doubleArray0[4] = (double) 2626;
      doubleArray0[5] = (double) 2626;
      doubleArray0[6] = (double) 2626;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray1);
      MathArrays.normalizeArray(doubleArray1, 1.304E19);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2626;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 2626;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 2626;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[2] = (-86);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.linearCombination((double) (-86), 745.8971477422928, 1754.720312, (double) (-86), 0.0, 0.0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-922));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = 77;
      intArray0[2] = 2;
      intArray0[3] = 1377;
      intArray0[4] = 310;
      intArray0[5] = 0;
      intArray0[6] = 1829;
      intArray0[7] = 0;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) 0.0;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2261.3784;
      doubleArray0[2] = 1983.597705;
      doubleArray0[3] = (-682.6554986006);
      Double double0 = new Double((-2679.97142));
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      long[][] longArray1 = new long[8][7];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      MathArrays.checkRectangular(longArray1);
      MathArrays.equals(doubleArray0, doubleArray0);
      long[][] longArray2 = new long[6][3];
      longArray2[0] = longArray0;
      longArray2[1] = longArray0;
      longArray2[2] = longArray0;
      longArray2[3] = longArray0;
      long[] longArray3 = new long[1];
      longArray3[0] = 1425L;
      longArray2[4] = longArray3;
      longArray2[5] = longArray0;
      MathArrays.checkNonNegative(longArray2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[6] = 134217729;
      intArray0[2] = 2;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.linearCombination((double) 134217729, (double) 2, (double) 289, (double) 134217729, 289.0, 289.0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "5vQy&b(m& G<u";
      stringArray0[2] = "BHGy:F@";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "^imS[3t_/MgjC";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.linearCombination(2715.1362215182007, (double) 2, 421.4884736417, (-392.29553));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-86);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-86);
      doubleArray0[3] = (double) 0;
      intArray0[1] = 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double double0 = 9.755392680573412E-9;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 9.755392680573412E-9);
      double[][] doubleArray2 = new double[1][9];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 339);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-771.01400992399);
      int[] intArray0 = new int[3];
      intArray0[0] = 310;
      intArray0[1] = 1829;
      intArray0[2] = (-2119951806);
      int[] intArray1 = new int[1];
      intArray1[0] = (-1314);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = 77;
      intArray0[2] = 2;
      Double double0 = new Double(77);
      Double[] doubleArray0 = new Double[8];
      Double double1 = new Double((-4461.0));
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      Double double2 = new Double(134217729);
      doubleArray0[3] = double2;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.copyOf(intArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 134217729;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) doubleArray0[4];
      doubleArray1[3] = (-4461.0);
      doubleArray1[4] = (double) 2;
      doubleArray1[5] = (double) 2;
      doubleArray1[6] = (double) doubleArray0[3];
      doubleArray1[7] = (double) doubleArray0[6];
      doubleArray1[8] = (double) 134217729;
      MathArrays.ebeDivide(doubleArray1, doubleArray1);
      int[] intArray1 = new int[4];
      intArray1[0] = 77;
      intArray1[1] = 2;
      intArray1[2] = 77;
      intArray1[3] = 77;
      MathArrays.distanceInf(intArray1, intArray1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.safeNorm(doubleArray0);
      Double[] doubleArray1 = new Double[7];
      Double double0 = new Double(7465.199928411737);
      doubleArray1[0] = double0;
      Double double1 = new Double(7465.199928411737);
      doubleArray1[1] = double1;
      Double double2 = new Double((-2267.93679111507));
      doubleArray1[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray1[3] = double3;
      doubleArray1[4] = double3;
      Double double4 = new Double((double) doubleArray1[2]);
      doubleArray1[5] = double4;
      Double double5 = new Double(1.3812403863518417);
      doubleArray1[6] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long[][] longArray0 = new long[6][5];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0L);
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      doubleArray0[2] = double2;
      Double double3 = new Double(0L);
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[2]);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MathArrays.linearCombination((double) 0, 745.8971477422928, 1754.720311592837, (double) 0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[6] = 77;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 77;
      doubleArray0[2] = (double) 77;
      doubleArray0[3] = (double) 134217729;
      doubleArray0[4] = (double) 77;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 31.452726;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = false;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 134217729;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 134217729;
      floatArray0[3] = (float) 134217729;
      floatArray0[5] = (float) 134217729;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (77 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4776.609);
      doubleArray0[1] = 808.2281;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (-2030.0002335);
      doubleArray0[4] = (-1498.94088442896);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[6] = 77;
      intArray0[2] = 2;
      intArray0[3] = 1377;
      intArray0[4] = 310;
      intArray0[5] = 0;
      intArray0[6] = 1829;
      intArray0[7] = 0;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 310;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1377;
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 310.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 3.834E-20;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      double double0 = new Double(0.0);
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2261.3784;
      doubleArray0[2] = 1983.597705;
      doubleArray0[3] = 1983.597705;
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) 1983.597705;
      doubleArray1[1] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      MathArrays.scaleInPlace(5113832.26798656, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-90.66311);
      doubleArray0[1] = (-7.44321345601866E-11);
      doubleArray0[2] = (-2893.109716);
      doubleArray0[3] = (-5160.488484401283);
      doubleArray0[4] = 854.0521592;
      doubleArray0[5] = 1271.0838;
      doubleArray0[6] = (-20.0);
      doubleArray0[7] = (-2696.85175);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-90.663 <= -0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 2585.72508484206;
      doubleArray0[0] = 2585.72508484206;
      double double1 = 838.06273298;
      doubleArray0[1] = 838.06273298;
      double double2 = 769.03811;
      doubleArray0[2] = 769.03811;
      MathArrays.equals(doubleArray0, doubleArray0);
      int int0 = 236;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 236);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      Double double0 = new Double(0L);
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double1 = new Double(2249.07055);
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) doubleArray0[4];
      doubleArray1[1] = (double) doubleArray0[2];
      doubleArray1[2] = (double) doubleArray0[3];
      doubleArray1[3] = (double) doubleArray0[1];
      doubleArray1[4] = (double) doubleArray0[6];
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 6);
      MathArrays.equalsIncludingNaN(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 289;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 289;
      doubleArray0[1] = (double) 289;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3154;
      intArray0[1] = 783;
      intArray0[2] = 1;
      intArray0[3] = (-1490);
      intArray0[4] = (-454);
      int int0 = 80;
      intArray0[5] = 80;
      int[] intArray1 = new int[5];
      intArray1[0] = 3154;
      intArray1[1] = 1;
      intArray1[2] = 80;
      intArray1[3] = 1;
      intArray1[4] = (-1490);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[8][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2261.3784;
      doubleArray0[2] = 1983.597705;
      doubleArray0[3] = (-682.6554986006);
      Double double0 = new Double((-2679.97142));
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) (-682.6554986006);
      doubleArray1[1] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = 0L;
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (-2296.8058283856067);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 3259.8F;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2544.0F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 289;
      intArray0[2] = (-86);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-86);
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[6] = 77;
      intArray0[2] = 2;
      intArray0[3] = 1377;
      intArray0[4] = 310;
      intArray0[5] = 0;
      intArray0[6] = 1829;
      intArray0[7] = 0;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 310;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1377;
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 310.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 289;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-86);
      doubleArray0[1] = (double) 289;
      doubleArray0[2] = (double) (-86);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 289;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 9.755392680573412E-9);
      MathArrays.linearCombination((-1809.8120235), (double) (-86), 9.755392680573412E-9, (-3280.457746055));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= -0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double double0 = new Double(0.0);
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      Double double1 = new Double(1002.2);
      doubleArray1[3] = double1;
      doubleArray1[4] = double0;
      doubleArray1[5] = double0;
      doubleArray1[6] = double0;
      doubleArray1[7] = double0;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-689);
      intArray0[1] = (-1576);
      intArray0[2] = 62;
      intArray0[3] = (-3196);
      intArray0[4] = 2147483055;
      intArray0[5] = (-983);
      intArray0[6] = 6;
      MathArrays.copyOf(intArray0, 186);
      MathArrays.copyOf(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      Double double0 = new Double(0L);
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long[][] longArray0 = new long[5][5];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[3] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      MathArrays.linearCombination((-807.670661235), (double) 0L, (double) 0L, 218.7737026925557);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.9166666666666666;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 218.7737026925557;
      doubleArray0[3] = (double) 0L;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = 77;
      intArray0[2] = 2;
      intArray0[3] = 1377;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 77;
      doubleArray0[2] = (-920.727);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      MathArrays.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.scale(77, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 289;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-86);
      doubleArray0[1] = (double) 289;
      doubleArray0[2] = (double) (-86);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 289;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      MathArrays.normalizeArray(doubleArray0, 9.755392680573412E-9);
      Double[] doubleArray1 = new Double[8];
      Double double0 = new Double(9.755392680573412E-9);
      doubleArray1[0] = double0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) (-86.0);
      Double double1 = new Double(289);
      doubleArray1[4] = double1;
      Double double2 = new Double(0);
      doubleArray1[5] = double2;
      doubleArray1[6] = (Double) 289.0;
      doubleArray1[7] = (Double) (-86.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      Double double0 = new Double(0L);
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double1 = new Double(2249.07055);
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double0;
      MathArrays.linearCombination(1943.775269793, 1340.6537437995, 3.834E-20, (double) 0L);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 289;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-86);
      doubleArray0[1] = (double) 289;
      doubleArray0[2] = (double) (-86);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 289;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (289 >= -86)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 289;
      double[] doubleArray0 = new double[7];
      intArray0[0] = (-86);
      doubleArray0[1] = (double) 289;
      doubleArray0[2] = (double) (-86);
      doubleArray0[3] = (double) 0;
      intArray0[0] = 289;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (289 >= -86)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[6][6];
      double[] doubleArray2 = new double[0];
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray2;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4461.0);
      doubleArray0[1] = (-431.72);
      double double0 = 4593.080814448012;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-431.72);
      doubleArray1[1] = 4937.851452196685;
      doubleArray1[2] = (-1378.8363);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = 77;
      intArray0[2] = 2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 9007199254740990L;
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double(1544.916953286);
      Object object0 = new Object();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn("org.apache.commons.math3.util.MathArrays").when(field0).getZero();
      int int0 = 1;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 4227, 1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[][] longArray0 = new long[5][5];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = 0L;
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 289;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-86);
      doubleArray0[1] = (double) 289;
      doubleArray0[2] = (double) (-86);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 289;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 9.755392680573412E-9);
      MathArrays.linearCombination((-1809.8120235), (double) (-86), 9.755392680573412E-9, (-3280.457746055));
      double[][] doubleArray2 = new double[1][9];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MathArrays.linearCombination(614.4710240550884, (-643.1), 1371.17965, (-643.1), (-1781.69852), 2.17333333333333325E18, 0.4342944622039795, 2.17333333333333325E18);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 9007199254740990L;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 9007199254740990L;
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, 3.834E-20, 1.304E19, (double) 9007199254740990L, (double) 9007199254740990L, 1225.0515, (-0.09088450866185192), 3.834E-20);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.OrderDirection.values();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 9007199254740990L;
      floatArray0[1] = (float) 9007199254740990L;
      floatArray0[2] = (float) 9007199254740990L;
      floatArray0[3] = (float) 9007199254740990L;
      floatArray0[4] = (float) 9007199254740990L;
      floatArray0[5] = (float) 9007199254740990L;
      floatArray0[6] = (float) 9007199254740990L;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3452.91F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 3452.91F;
      floatArray0[5] = 3452.91F;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 617.855;
      doubleArray0[2] = 1.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 3.4028235E38F;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-1.0F);
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = 5.0614674548127384E-8;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) (-1.0F);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1.0;
      doubleArray1[7] = 1.0;
      doubleArray1[8] = (double) 3.4028235E38F;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2086.030424311;
      doubleArray0[2] = (-771.01400992399);
      doubleArray0[3] = 1740.9168717381701;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-771.01400992399);
      doubleArray1[1] = 0.0;
      MathArrays.distance1(doubleArray1, doubleArray0);
      MathArrays.scale(1212.949011, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 144;
      intArray0[1] = 1073741824;
      intArray0[2] = 1005;
      intArray0[3] = (-693);
      intArray0[4] = 212;
      intArray0[5] = 730;
      MathArrays.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 212);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4461.0);
      doubleArray0[1] = (-431.72);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-623), (-623));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long[][] longArray0 = new long[4][9];
      long[] longArray1 = new long[1];
      longArray1[0] = 9007199254740990L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 9007199254740990L;
      longArray2[1] = 9007199254740990L;
      longArray2[2] = 9007199254740990L;
      longArray2[3] = 9007199254740990L;
      longArray2[4] = 9007199254740990L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = (-1L);
      longArray3[1] = (-1L);
      longArray3[2] = (-1L);
      Double double0 = new Double(9007199254740990L);
      Double double1 = new Double(9007199254740990L);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      Double double2 = new Double((-1L));
      doubleArray0[1] = double2;
      Double double3 = new Double(9007199254740990L);
      doubleArray0[2] = double3;
      doubleArray0[3] = double0;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2690.4103;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 2690.4103;
      doubleArray0[3] = 2690.4103;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 2690.4103;
      doubleArray1[1] = (Double) 2690.4103;
      doubleArray1[2] = (Double) Double.NEGATIVE_INFINITY;
      Double double0 = new Double(0.0);
      doubleArray1[3] = double0;
      Double double1 = new Double(1.5);
      doubleArray1[4] = double1;
      doubleArray1[5] = (Double) Double.NEGATIVE_INFINITY;
      doubleArray1[6] = (Double) 2690.4103;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, true);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      Double double0 = new Double(0L);
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double1 = new Double(2249.07055);
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 289;
      intArray0[2] = (-86);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-452.0F);
      floatArray0[1] = (float) (-86);
      floatArray0[2] = (float) 289;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 289;
      floatArray0[5] = (float) 289;
      floatArray0[6] = (float) (-86);
      float[] floatArray1 = new float[7];
      floatArray1[0] = 5568.14F;
      floatArray1[1] = (float) 289;
      floatArray1[2] = (float) 289;
      floatArray1[3] = (float) 0;
      floatArray1[4] = (float) 0;
      floatArray1[5] = (float) 289;
      floatArray1[6] = (float) (-86);
      MathArrays.equals(floatArray0, floatArray1);
      MathArrays.linearCombination(2866.673, (-2321.163062), (-5204.412036590377), (double) (-86), 1059.083146201, (double) (-86.0F), (-153.1273422022), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long[][] longArray0 = new long[5][5];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 0L;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = 1942.4422011514628;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-682.6554986006);
      doubleArray0[1] = 1983.597705;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2261.3784;
      int[] intArray0 = new int[0];
      MathArrays.distance(intArray0, intArray0);
      MathArrays.linearCombination(1082.0257657297896, 5.2240336371356666E-9, 1754.720311592837, 1344.6250590685997, (double) 622, 2052.3132072);
      MathArrays.copyOf(intArray0, 2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0, 933);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.copyOf(intArray0);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 933, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2939.4001925778493;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = 77;
      intArray0[2] = 2;
      intArray0[3] = 1377;
      intArray0[4] = 310;
      intArray0[5] = 0;
      intArray0[6] = 1829;
      intArray0[7] = 0;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 310;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1377;
      MathArrays.checkNonNegative(longArray0);
      long[][] longArray1 = new long[1][0];
      longArray1[0] = longArray0;
      MathArrays.checkRectangular(longArray1);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.linearCombination((double) 0, (double) 310, (double) 1829, (double) 1829);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      long long0 = 1L;
      longArray0[1] = 1L;
      long long1 = (-654L);
      long[][] longArray1 = new long[5][9];
      longArray1[1] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      try { 
        MathArrays.checkRectangular(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double double0 = 6.283185307179586;
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 617.855;
      doubleArray0[2] = 1.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = 0.0F;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-1.0F);
      doubleArray1[1] = 617.855;
      doubleArray1[2] = (double) 3.4028235E38F;
      doubleArray1[3] = (-2174.8034);
      doubleArray1[4] = 617.855;
      MathArrays.convolve(doubleArray1, doubleArray1);
      MathArrays.linearCombination(Double.NaN, (-2441.883), 1.0, (-1539.02709277114), (-2941.8044530468), 1284.8, (double) 0.0F, 1128.6);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[0] = 289;
      intArray0[2] = (-86);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.linearCombination((double) (-86), 745.8971477422928, 1754.720311592837, (double) (-86), 0.0, 0.0);
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-922));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      int int0 = 4227;
      MathArrays.buildArray(field0, 4227, 1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      MathArrays.copyOf(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 4227;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      float float0 = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (float) 1;
      floatArray0[8] = (float) 4227;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      long[][] longArray0 = new long[5][5];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      MathArrays.checkNonNegative(longArray3);
      assertFalse(longArray3.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4461.0);
      doubleArray0[1] = (-431.72);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-431.72), (-4461.0)}, doubleArray0, 0.01);
      
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 3.834E-20;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 0.0);
      MathArrays.linearCombination(0.0, 0.0, (-1382.4023721), (-20.0));
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 0;
      double[][] doubleArray4 = new double[6][2];
      doubleArray4[0] = doubleArray3;
      doubleArray4[1] = doubleArray3;
      doubleArray4[2] = doubleArray2;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 3.834E-20;
      doubleArray5[1] = 27648.047442000003;
      doubleArray5[2] = (double) 0;
      doubleArray5[3] = (-1382.4023721);
      doubleArray5[4] = (double) 0;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = (double) 0;
      doubleArray5[8] = (-1382.4023721);
      doubleArray4[3] = doubleArray5;
      doubleArray4[4] = doubleArray2;
      doubleArray4[5] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray3, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1070.77285;
      doubleArray0[1] = 46.331853668673;
      doubleArray0[2] = (-2658.7520212205);
      doubleArray0[3] = 786.16;
      doubleArray0[4] = (-2424.388537749);
      doubleArray0[5] = 1669.8412111;
      doubleArray0[6] = 0.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.linearCombination(0.0, 4838.926609999, 0.0, 3158.8123, 0.0, Double.POSITIVE_INFINITY);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 9;
      intArray0[1] = (-4650);
      MathArrays.copyOf(intArray0, 9);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,658.752 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 389.151;
      doubleArray0[1] = 2945.210707532;
      doubleArray0[2] = 2945.210707532;
      doubleArray0[3] = (-882.1056265366043);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 1807.15;
      doubleArray0[6] = 389.151;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {389.151, 2945.210707532, 2945.210707532, (-882.1056265366043), Double.NEGATIVE_INFINITY, 1807.15, 389.151}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 1.7976931348623157E308;
      MathArrays.scaleInPlace(1.7976931348623157E308, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 210;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 305;
      intArray0[5] = 1336;
      intArray0[6] = (-1090);
      intArray0[7] = 0;
      intArray0[8] = 2336;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray0, 0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2621), 1037);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long[][] longArray0 = new long[6][8];
      long[] longArray1 = new long[4];
      longArray1[0] = 2086L;
      longArray1[1] = (-552L);
      longArray1[2] = (-1898L);
      longArray1[3] = (-1271L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = (-1271L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = (-1271L);
      longArray3[1] = (-1271L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = (-1898L);
      longArray4[1] = (-552L);
      longArray4[2] = (-552L);
      longArray4[3] = 4503599627370495L;
      longArray4[4] = (-552L);
      longArray4[5] = (-552L);
      longArray4[6] = (-1898L);
      longArray4[7] = (-1271L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      longArray6[0] = 2086L;
      longArray6[1] = (-552L);
      longArray6[2] = 4503599627370495L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -552 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[3];
      double double0 = 2688.0;
      doubleArray0[0] = 2688.0;
      double double1 = (-20.0);
      doubleArray0[1] = (-20.0);
      double double2 = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (2,688 > -20)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1781.0784134);
      doubleArray0[1] = 72.23759876492;
      doubleArray0[2] = (-210.919026196);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-2737.39136822);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[2];
      long long0 = (-9223372036854775808L);
      longArray1[0] = (-9223372036854775808L);
      longArray1[1] = 1L;
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -9,223,372,036,854,775,808 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MathArrays.linearCombination(0.0, 5345.76, 1522.629, 0.0, 5345.76, 0.0, 1522.629, 1522.629);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2346.6134285017283);
      doubleArray0[1] = 2318399.0716409995;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2239.0;
      doubleArray0[4] = 1522.629;
      doubleArray0[5] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1522.629;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2705);
      intArray0[1] = 10;
      intArray0[2] = (-1);
      intArray0[3] = 1963;
      intArray0[4] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long[][] longArray0 = new long[4][2];
      long[] longArray1 = new long[1];
      longArray1[0] = (-1164L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = (-1164L);
      longArray2[1] = (-1164L);
      longArray2[2] = (-1164L);
      longArray2[3] = (-1164L);
      longArray2[4] = (-1164L);
      longArray2[5] = (-1164L);
      longArray2[6] = (-1164L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = (-1164L);
      longArray3[1] = (-1164L);
      longArray3[2] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = (-1164L);
      longArray4[1] = 0L;
      longArray4[2] = (-1164L);
      longArray4[3] = (-1164L);
      longArray4[4] = (-1164L);
      longArray4[5] = (-1164L);
      longArray4[6] = (-1164L);
      longArray4[7] = 0L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 3270.67565472;
      doubleArray0[2] = 100.0;
      MathArrays.copyOf(doubleArray0, 0);
      long[][] longArray0 = new long[7][5];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = (long) 0;
      longArray3[1] = 0L;
      longArray3[2] = (long) 0;
      longArray3[3] = (long) 0;
      longArray3[4] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = (long) 0;
      longArray4[1] = (long) 0;
      longArray4[2] = (long) 0;
      longArray4[3] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = 0L;
      longArray5[1] = (long) 0;
      longArray5[2] = (long) 0;
      longArray5[3] = (long) 0;
      longArray5[4] = (long) 0;
      longArray5[5] = (long) 0;
      longArray5[6] = 0L;
      longArray5[7] = 0L;
      longArray5[8] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      longArray0[6] = longArray7;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      longArray0[2] = (-654L);
      longArray0[3] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -654 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 310.443615072853;
      doubleArray0[3] = 0.0;
      MathArrays.copyOf(doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (310.444 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3452.91F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 276.2F;
      floatArray0[5] = (-473.14908F);
      floatArray0[6] = 3.4028235E38F;
      floatArray0[7] = (-304.0F);
      floatArray0[8] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3.4028235E38F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 3.4028235E38F;
      doubleArray1[1] = (double) (-473.14908F);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 403.154;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-861.684696102);
      doubleArray0[7] = Double.NaN;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (-771.01400992399);
      doubleArray0[3] = 1740.9168717381701;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[4];
      MathArrays.safeNorm(doubleArray1);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-771.01400992399);
      doubleArray2[1] = 0.0;
      MathArrays.distance1(doubleArray2, doubleArray0);
      MathArrays.scale(1212.949011, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 144;
      intArray0[1] = 1073741824;
      intArray0[2] = 1005;
      intArray0[4] = 212;
      intArray0[5] = 730;
      MathArrays.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<String>>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1450.0);
      doubleArray0[3] = (-1181.03659);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = -0.0;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[][] longArray0 = new long[6][5];
      long[] longArray1 = new long[2];
      long long0 = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      int int0 = (-727);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 1245649604, (-727));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-4461.0);
      doubleArray0[0] = (-4461.0);
      double double1 = (-431.72);
      doubleArray0[1] = (-431.72);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-646);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-646), (-646));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = 77;
      intArray0[2] = 2;
      intArray0[3] = 1377;
      intArray0[4] = 310;
      intArray0[5] = 0;
      intArray0[6] = 1829;
      intArray0[7] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 310;
      doubleArray0[3] = (double) 0;
      MathArrays.scaleInPlace(2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 620.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 617.855;
      doubleArray0[2] = 1.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1232.0F;
      floatArray0[6] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, (-1.0));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3350.4555159493;
      doubleArray0[2] = 1709.3927;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2223.994354088);
      doubleArray0[5] = 1.34217729E8;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-658.7415);
      doubleArray0[1] = (-294.84859211);
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 548.4;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 291;
      intArray0[0] = 291;
      int[] intArray1 = new int[6];
      intArray1[0] = 291;
      int int1 = (-2729);
      intArray1[1] = (-2729);
      intArray1[2] = 291;
      intArray1[3] = 291;
      intArray1[4] = 291;
      intArray1[5] = 291;
      MathArrays.distanceInf(intArray0, intArray1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2729);
      doubleArray0[1] = (double) 291;
      double[][] doubleArray1 = new double[4][5];
      double[] doubleArray2 = new double[0];
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1122.47995484272);
      doubleArray0[2] = 3677.4;
      doubleArray0[3] = 0.0;
      MathArrays.copyOf(doubleArray0, 77);
      double double0 = MathArrays.linearCombination(0.0, (-2839.9443), 0.0, 3677.4, 586.935095542595, 1583.7582231411616, 0.0, 0.0);
      assertEquals(929563.2840157283, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 929563.2840157283, 1782.4559513271456, 3677.4, (-738.005));
      assertEquals(1.6541916681420405E9, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 521.4031705765813;
      doubleArray0[2] = 529.625601925;
      doubleArray0[3] = 2936.2124;
      doubleArray0[4] = 122.041;
      doubleArray0[5] = (-0.5);
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 1.5;
      doubleArray0[8] = 0.0;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 529.625601925);
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (529.626 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      long[] longArray0 = new long[2];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1368.065354713;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 1368.065354713;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2736.130709426, 0.0, 2736.130709426}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 192.69218237;
      doubleArray0[4] = (-5987.0);
      double double0 = 0.0;
      doubleArray0[5] = 0.0;
      double double1 = (-1.0);
      doubleArray0[6] = (-1.0);
      MathArrays.copyOf(doubleArray0, 30);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2939.4001925778493;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 5878.800385155699, 0.0, 6.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 521.4031705765813;
      doubleArray0[2] = 529.625601925;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.304E19;
      doubleArray2[1] = 521.4031705765813;
      doubleArray2[2] = 521.4031705765813;
      doubleArray2[3] = 529.625601925;
      doubleArray2[4] = 521.4031705765813;
      doubleArray2[5] = 1.304E19;
      doubleArray2[6] = 2936.2124;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "fAa@eRRxw";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 529.625601925;
      doubleArray3[1] = 2936.2124;
      doubleArray3[2] = 0.07490822288864472;
      doubleArray3[3] = 2936.2124;
      doubleArray3[4] = 2936.2124;
      doubleArray3[5] = 521.4031705765813;
      doubleArray3[6] = 1.304E19;
      doubleArray3[7] = 2936.2124;
      doubleArray3[8] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray3);
      assertEquals(1.8441344853345161E19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2086.030424311;
      doubleArray0[2] = (-771.01400992399);
      doubleArray0[3] = 1740.9168717381701;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("XXs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.XXs
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 165;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1390);
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = (-1074);
      intArray0[7] = 2000;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
      
      double double0 = MathArrays.linearCombination((double) 2000, (double) 1, 2734.15393, 3246.4646728);
      assertEquals(8878334.143742284, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 2734.15393;
      doubleArray0[2] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-92.069433481479);
      doubleArray0[1] = 1368.065354713;
      doubleArray0[2] = 218.7737026925557;
      doubleArray0[3] = 586.06413733134;
      doubleArray0[4] = 6.283185307179586;
      doubleArray0[5] = 0.0;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-92.069 <= 1,368.065)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 289;
      intArray0[2] = (-86);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) (-86), 745.8971477422928, 1754.720311592837, (double) (-86), 0.0, 0.0);
      assertEquals((-215053.10150282117), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[6][6];
      double[] doubleArray2 = new double[0];
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-1378.8363);
      doubleArray3[2] = 4593.080814448012;
      doubleArray3[3] = 4937.851452196685;
      MathArrays.distance1(doubleArray0, doubleArray3);
      MathArrays.linearCombination(Double.NaN, 0.0, 0.0, 0.0, 4593.080814448012, 4937.851452196685, (-1002.992703553), 4937.851452196685);
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = Double.NaN;
      doubleArray4[1] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray4, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      int int0 = 929;
      int int1 = 4066;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 929, 4066);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2839;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2839, 2839);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 2617;
      intArray0[0] = 2617;
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = (-2498);
      intArray0[2] = (-2498);
      int int3 = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int4 = 0;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-808.2281);
      doubleArray0[1] = (-210.210694593517);
      MathArrays.checkOrder(doubleArray0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2261.3784;
      double double0 = 1082.0257657297896;
      doubleArray0[1] = 1082.0257657297896;
      double double1 = 1983.597705;
      doubleArray0[2] = 1983.597705;
      doubleArray0[3] = (-682.6554986006);
      MathArrays.distance(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -682.655 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1814.62706288735);
      doubleArray0[1] = (-2492.1272016);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-4189.6742072);
      doubleArray0[4] = 2165.975496;
      doubleArray0[5] = (-936.0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,814.627 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 4227;
      intArray0[1] = 1269;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
