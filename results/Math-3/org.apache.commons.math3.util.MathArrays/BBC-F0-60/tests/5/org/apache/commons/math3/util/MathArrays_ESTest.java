/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:27:13 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 3.006878488590025;
      doubleArray0[4] = 1362.36318466;
      doubleArray0[5] = 3404.07;
      doubleArray0[6] = 1605.0;
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.scaleInPlace((-374.064799), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 173.60482, Double.NaN, (-447.320964515), (-447.320964515), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.scale(173.60482, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale((-374.064799), doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(1.0708593250394448E-7, (-6435.9), (-6435.9), 7834894.206946518, (-1141.15938987439), 0.0);
      assertEquals((-5.0424595626487785E10), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.scale(Double.NaN, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<String>[] fieldElementArray0 = MathArrays.buildArray(field0, 83);
      assertNotNull(fieldElementArray0);
      assertEquals(83, fieldElementArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, FieldElement<String>>> field0 = (Field<Pair<String, FieldElement<String>>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Pair<String, FieldElement<String>>) null).when(field0).getZero();
      Pair<String, FieldElement<String>>[][] pairArray0 = MathArrays.buildArray(field0, 0, (-3651));
      assertNotNull(pairArray0);
      assertEquals(0, pairArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-3651);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (0 > -3,651)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2420.0F);
      floatArray0[1] = 1858.8F;
      floatArray0[2] = Float.POSITIVE_INFINITY;
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-2420.0F), 1858.8F, Float.POSITIVE_INFINITY, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      try { 
        MathArrays.normalizeArray(doubleArray0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-349.3F);
      floatArray0[1] = Float.POSITIVE_INFINITY;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-349.3F);
      floatArray1[1] = (-349.3F);
      floatArray1[2] = Float.POSITIVE_INFINITY;
      floatArray1[3] = (-349.3F);
      floatArray1[4] = Float.POSITIVE_INFINITY;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-349.3F), Float.POSITIVE_INFINITY}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-349.3F), (-349.3F), Float.POSITIVE_INFINITY, (-349.3F), Float.POSITIVE_INFINITY}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-349.3F);
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[3] = (double) Float.POSITIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-5307.739833895);
      doubleArray0[0] = (-5307.739833895);
      doubleArray0[1] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-5307.739833895), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      float float1 = 0.0F;
      floatArray0[1] = 0.0F;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-5307.739833895), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10615.47966779), 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147032769, 2147032769);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long[][] longArray0 = new long[9][2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(9, longArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-514.201F);
      floatArray0[1] = (-748.26F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3168.74F;
      floatArray0[4] = (-444.1F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-514.201F), (-748.26F), 0.0F, 3168.74F, (-444.1F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3168.74F;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (double) 3168.74F;
      doubleArray0[3] = (double) (-748.26F);
      doubleArray0[4] = (double) (-444.1F);
      doubleArray0[5] = 2988.348302187304;
      doubleArray0[6] = 1.241408E22;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3168.739990234375, 1.304E19, 3168.739990234375, (-748.260009765625), (-444.1000061035156), 2988.348302187304, 1.241408E22}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1.2414086848737607E22, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.608E18;
      int int0 = 451;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 451);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.608E18}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(451, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3818.63);
      doubleArray0[1] = 436.20882817371154;
      doubleArray0[2] = (-108.93464470307185);
      doubleArray0[3] = (-1192.5);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-108.93464470307185);
      doubleArray1[1] = (-1192.5);
      doubleArray1[2] = (-108.93464470307185);
      doubleArray1[3] = 1.44888888889134336E18;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-3818.63), 436.20882817371154, (-108.93464470307185), (-1192.5)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-108.93464470307185), (-1192.5), (-108.93464470307185), 1.44888888889134336E18}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1.727800000002927E21), double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, (double) 0, (-2610.2703530728), 0.0, (-2610.2703530728));
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "DIMENSIONS_MISMATCH_2x2";
      stringArray0[1] = "";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2984.4691);
      doubleArray0[1] = 831.1595336639542;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.366272509098053;
      int[] intArray0 = new int[7];
      intArray0[0] = 161;
      intArray0[1] = 2111085620;
      intArray0[2] = 24888562;
      intArray0[3] = 2147478099;
      intArray0[4] = (-1726);
      intArray0[5] = 1267;
      intArray0[6] = 6;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 6;
      intArray1[1] = (-2147483647);
      intArray1[2] = 2111085620;
      intArray1[3] = 2147478099;
      intArray1[4] = 24888562;
      intArray1[5] = 6;
      intArray1[6] = 6;
      intArray1[7] = 2147478099;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {6, (-2147483647), 2111085620, 2147478099, 24888562, 6, 6, 2147478099}, intArray1);
      assertArrayEquals(new int[] {161, 2111085620, 24888562, 2147478099, (-1726), 1267, 6}, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(7, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals((-2147480505), int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-613.64321609);
      doubleArray1[1] = (-4265.45123059013);
      doubleArray1[2] = 79.828669290394;
      doubleArray1[3] = 1136.300048828125;
      doubleArray1[4] = 2.356194490192345;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[5][3];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = null;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray2[4] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1136.3F);
      floatArray0[3] = 1.4E-45F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1.4E-45F);
      floatArray0[6] = (-1319.7959F);
      floatArray0[7] = Float.POSITIVE_INFINITY;
      floatArray0[8] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-1136.3F), 1.4E-45F, 0.0F, (-1.4E-45F), (-1319.7959F), Float.POSITIVE_INFINITY, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1319.7959F);
      doubleArray0[1] = (double) (-1.4E-45F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (-1136.3F);
      doubleArray0[6] = (double) Float.POSITIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1319.7958984375), (-1.401298464324817E-45), 0.0, (-1.0), 0.0, (-1136.300048828125), Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1319.7958984375), (-1.401298464324817E-45), 0.0, (-1.0), 0.0, (-1136.300048828125), Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.304E19, 112.4725, 1.304E19, 172.27884622480127, 172.27884622480127, 1.304E19, 916.8592816597334, 1.304E19);
      assertEquals(1.791551874238574E22, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[26];
      doubleArray0[3] = 1.791551874238574E22;
      doubleArray0[4] = 112.4725;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 1.304E19;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(26, doubleArray0.length);
      assertEquals(1.7915528233685287E22, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(26, doubleArray0.length);
      assertEquals(26, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(26, doubleArray0.length);
      assertEquals(26, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(26, doubleArray0.length);
      assertEquals(26, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = MathArrays.linearCombination(6.0, 6.0, (-1459.86894575537), 0.07490822288864472, (-1457.580524), 4.9E-324, 4.9E-324, 6.0);
      assertEquals((-73.35618837685405), double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 6.0;
      doubleArray0[1] = (-73.35618837685405);
      doubleArray0[2] = 6.0;
      doubleArray0[3] = 0.07490822288864472;
      doubleArray0[4] = (-1457.580524);
      doubleArray0[5] = (-1457.580524);
      doubleArray0[6] = (-73.35618837685405);
      MathArrays.scaleInPlace(6.0, doubleArray0);
      assertArrayEquals(new double[] {36.0, (-440.1371302611243), 36.0, 0.4494493373318683, (-8745.483144), (-8745.483144), (-440.1371302611243)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-8745.483144), 3.834E-20, 1.0, (-1.0), (-690.021726), 6.0);
      assertEquals((-4141.130356), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4141.130356);
      doubleArray1[1] = 1.34217729E8;
      doubleArray1[2] = (-1459.86894575537);
      doubleArray1[3] = 0.07490822288864472;
      doubleArray1[4] = 3.834E-20;
      doubleArray1[5] = 4.9E-324;
      doubleArray1[6] = (-1457.580524);
      doubleArray1[7] = 6.0;
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {(-4141.130356), 1.34217729E8, (-1459.86894575537), 0.07490822288864472, 3.834E-20, 4.9E-324, (-1457.580524), 6.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.3421772907973891E8, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scale(1.1561078986595622E11, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.scaleInPlace((-374.064799), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 173.60482, Double.NaN, (-447.320964515), (-447.320964515), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.scale(173.60482, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale((-374.064799), doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(1.0708593250394448E-7, (-6435.9), (-6435.9), 7834894.206946518, (-1141.15938987439), 0.0);
      assertEquals((-5.0424595626487785E10), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.scale(Double.NaN, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147079129);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[] floatArray0 = new float[16];
      floatArray0[0] = 471.0F;
      floatArray0[1] = (-1.4E-45F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(16, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 471.0F;
      doubleArray0[1] = (double) 471.0F;
      doubleArray0[2] = (double) 471.0F;
      doubleArray0[3] = (double) (-1.4E-45F);
      doubleArray0[4] = 7.848361555046424E-8;
      doubleArray0[5] = 7.848361555046424E-8;
      MathArrays.scaleInPlace(7.848361555046424E-8, doubleArray0);
      assertArrayEquals(new double[] {3.696578292426865E-5, 3.696578292426865E-5, 3.696578292426865E-5, (-1.0997896994552487E-52), 6.159677909873072E-15, 6.159677909873072E-15}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int int0 = 197;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 197);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Pair<String, FieldElement<String>> pair0 = new Pair<String, FieldElement<String>>("", fieldElement0);
      assertNotNull(pair0);
      
      Field<Pair<String, FieldElement<String>>> field0 = (Field<Pair<String, FieldElement<String>>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Pair<String, FieldElement<String>>) null, pair0).when(field0).getZero();
      int int0 = 2508;
      int int1 = 218;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2508, 218);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, FieldElement<String>>> field0 = (Field<Pair<String, FieldElement<String>>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Pair<String, FieldElement<String>>[][] pairArray0 = MathArrays.buildArray(field0, 2508, 218);
      assertNotNull(pairArray0);
      assertEquals(2508, pairArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 218;
      doubleArray0[1] = (double) 2508;
      doubleArray0[2] = (double) 218;
      doubleArray0[3] = (double) 218;
      doubleArray0[4] = (double) 218;
      doubleArray0[5] = (double) 218;
      doubleArray0[6] = (double) 218;
      doubleArray0[7] = (double) 218;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {218.0, 2508.0, 218.0, 218.0, 218.0, 218.0, 218.0, 218.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {218.0, 2508.0, 218.0, 218.0, 218.0, 218.0, 218.0, 218.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-3967);
      doubleArray0[1] = (double) (-3967);
      doubleArray0[2] = (double) (-3967);
      doubleArray0[3] = (double) (-3967);
      doubleArray0[4] = (double) (-3967);
      doubleArray0[5] = (double) (-3967);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3967.0), (-3967.0), (-3967.0), (-3967.0), (-3967.0), (-3967.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3967.0), (-3967.0), (-3967.0), (-3967.0), (-3967.0), (-3967.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3967.0), (-3967.0), (-3967.0), (-3967.0), (-3967.0), (-3967.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {(-3967.0), (-3967.0), (-3967.0), (-3967.0), (-3967.0), (-3967.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2641.0);
      doubleArray0[1] = (-2641.0);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-2641.0);
      doubleArray0[4] = (-2641.0);
      doubleArray0[5] = (-2641.0);
      doubleArray0[6] = (-2641.0);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.304E19, 112.4725, 1.304E19, 172.27884622480127, 172.27884622480127, (-3020.152206299436), 916.8592816597334, 3.834E-20);
      assertEquals(3.713157554771408E21, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 112.4725;
      doubleArray0[2] = (-3020.152206299436);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 112.4725;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 1.304E19;
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      assertArrayEquals(new double[] {(-1.304E19), (-112.4725), 3020.152206299436, (-3.834E-20), (-112.4725), (-1.304E19), (-1.304E19)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(1.34217729E8, 3.834E-20, 554.0, (-1.304E19), (-0.16666666666666666), 172.27884622480127);
      assertEquals((-7.22416E21), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1.304E19), (-112.4725), 3020.152206299436, (-3.834E-20), (-112.4725), (-1.304E19), (-1.304E19)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(2.258594253069816E19, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.304E19), (-112.4725), 3020.152206299436, (-3.834E-20), (-112.4725), (-1.304E19), (-1.304E19)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 8.861207854822361E12;
      double double0 = MathArrays.linearCombination(1172.4, (-1752.0186973616392), 1725.54455, 1725.54455);
      assertEquals(923437.2732479168, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {8.861207854822361E12, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(8.861207854822361E12, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1677.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-55.10702F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-55.10702F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1.0F;
      floatArray1[4] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1677.0F, 0.0F, (-55.10702F), 1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-55.10702F), 0.0F, 1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-12.46171666);
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {(-12.46171666)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-2300.511);
      doubleArray0[0] = (-2300.511);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2300.511)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2300.511)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2300.511)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int int0 = 0;
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1, 0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-2300.511)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (-2300.511);
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = (double) 0;
      try { 
        MathArrays.linearCombination(doubleArray4, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1787.982F;
      floatArray0[1] = (-864.855F);
      floatArray0[2] = 894.1F;
      floatArray0[3] = (-688.01196F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-3248.0F);
      floatArray0[7] = (-1.0F);
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1787.982F, (-864.855F), 894.1F, (-688.01196F), 0.0F, 0.0F, (-3248.0F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NaN, Double.NaN, (-1.0), 112.4725, 916.8592816597334, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 916.8592816597334;
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(Double.NaN, 3990.02795, Double.NaN, 8.861207854822361E12, 3.834E-20, (-787.027277671579));
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      
      double double3 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 94;
      intArray0[1] = 2521;
      intArray0[2] = (-1868);
      intArray0[3] = 490;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {94, 2521, (-1868), 490}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 976L;
      longArray0[1] = 4499201580859392L;
      longArray0[2] = 945L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {976L, 4499201580859392L, 945L}, longArray0);
      assertEquals(3, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 178;
      intArray0[2] = (-1);
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = 1;
      intArray1[2] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertArrayEquals(new int[] {1, 178, (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), 1, (-1)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(177, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 403.8F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = Float.NaN;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {403.8F, 0.0F, Float.NaN}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (-684.2);
      doubleArray0[6] = (-582.5);
      doubleArray0[1] = (-1564.04913);
      doubleArray0[6] = (-582.5);
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, (-352.4339058101366), (-483.968918067), (-447.320964515), (-447.320964515), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 3284.9075F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-986.873F);
      floatArray0[3] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {3284.9075F, 0.0F, (-986.873F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-1.0F);
      floatArray1[2] = (-986.873F);
      floatArray1[3] = 3284.9075F;
      floatArray1[4] = (-1.0F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {3284.9075F, 0.0F, (-986.873F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-986.873F), 3284.9075F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.scaleInPlace(0.1256551444530487, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double0 = new Double(3.834E-20);
      assertEquals(3.834E-20, double0, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3.834E-20;
      doubleArray2[1] = 8.861207854822361E12;
      doubleArray2[2] = 0.1256551444530487;
      doubleArray2[3] = 1.570420092927703E26;
      doubleArray2[4] = 3.834E-20;
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertArrayEquals(new double[] {3.834E-20, 8.861207854822361E12, 0.1256551444530487, 1.570420092927703E26, 3.834E-20}, doubleArray2, 0.01);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1.570420092927703E26, double1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray4 = MathArrays.ebeMultiply(doubleArray3, doubleArray0);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (-5307.739833895);
      doubleArray0[1] = 0.0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-1.0F);
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (-480.24F);
      floatArray1[4] = (-1.0F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-1.0F), (-480.24F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1538144.0830935156;
      doubleArray0[1] = 899.633477085816;
      doubleArray0[2] = 2.17333333333333325E18;
      doubleArray0[3] = 2918.5217;
      doubleArray0[4] = 2771.4233;
      doubleArray0[5] = 2318.0521;
      doubleArray0[6] = 1.34217729E8;
      doubleArray0[7] = 909.4018665;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {909.4018665, 2.17333333333333325E18, 1538144.0830935156, 2771.4233, 2918.5217, 899.633477085816, 1.34217729E8, 2318.0521}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-5307.739833895);
      doubleArray0[1] = 0.0;
      float[] floatArray0 = new float[6];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 787L;
      longArray0[1] = 2545L;
      longArray0[2] = 2897L;
      longArray0[3] = 3035L;
      longArray0[4] = (-1L);
      longArray0[5] = (-2461L);
      longArray0[6] = 3016L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1255.6F;
      floatArray0[1] = 7.9600277F;
      floatArray0[2] = 1329.971F;
      floatArray0[3] = 1255.6F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1030.322F);
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1255.6F;
      floatArray1[1] = (-1030.322F);
      floatArray1[2] = 1255.6F;
      floatArray1[3] = 7.9600277F;
      floatArray1[4] = 1329.971F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 1329.971F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1255.6F, 7.9600277F, 1329.971F, 1255.6F, 0.0F, (-1030.322F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1255.6F, (-1030.322F), 1255.6F, 7.9600277F, 1329.971F, 0.0F, 0.0F, 1329.971F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, FieldElement<String>>> field0 = (Field<Pair<String, FieldElement<String>>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<String, FieldElement<String>>[][] pairArray0 = MathArrays.buildArray(field0, 1984, (-3967));
      assertNotNull(pairArray0);
      assertEquals(1984, pairArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace((-352.4339058101366), doubleArray1);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double double0 = new Double((-320.958));
      assertNotNull(double0);
      assertEquals((-320.958), (double)double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray2 = MathArrays.scale((-352.4339058101366), doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.scale((-2307.272879159491), doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray3.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 23;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 3;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2679;
      intArray1[1] = 3;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 8.861207854822361E12;
      doubleArray0[1] = 27.49950031;
      doubleArray0[2] = (-3253.88400733817);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "unD&:RMNMd0F0:";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "We)T6";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.linearCombination(0.8109631538391113, 27.49950031, Double.NaN, (-3253.88400733817));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, 4.503599627370496E15, 1172.4, 508.4574286699);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.63E18;
      doubleArray0[1] = 2430268.7311948864;
      doubleArray0[2] = 2039.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-1752.0186973616392);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1725.54455;
      doubleArray0[7] = 4.503599627370496E15;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.63E18, 2430268.7311948864, 2039.0, Double.NaN, (-1752.0186973616392), Double.NaN, 1725.54455, 4.503599627370496E15}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.63E18, 2430268.7311948864, 2039.0, Double.NaN, (-1752.0186973616392), Double.NaN, 1725.54455, 4.503599627370496E15}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, 1.0, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {1.63E18, 2430268.7311948864, 2039.0, Double.NaN, (-1752.0186973616392), Double.NaN, 1725.54455, 4.503599627370496E15}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[10];
      longArray1[0] = (-4484L);
      longArray1[1] = (-3829L);
      longArray1[2] = (-3181L);
      longArray1[3] = (-263L);
      longArray0[0] = longArray1;
      long[][] longArray2 = new long[2][8];
      assertFalse(longArray2.equals((Object)longArray0));
      
      MathArrays.checkRectangular(longArray2);
      assertEquals(2, longArray2.length);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[1][5];
      doubleArray0[0] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 8.861207854822361E12;
      double double0 = MathArrays.linearCombination(223.38739, 8.861207854822361E12, 3.834E-20, 0.0);
      assertEquals(1.9794820949362662E15, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {8.861207854822361E12, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {8.861207854822361E12, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[11];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.9794820949362662E15;
      doubleArray1[2] = 223.38739;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1452.0;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 11 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 8.861207854822361E12;
      double double0 = MathArrays.linearCombination(1172.4, (-1752.0186973616392), 1725.54455, 1725.54455);
      assertEquals(923437.2732479168, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {8.861207854822361E12, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {8.861207854822361E12, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {8.861207854822361E12, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7.852100464636552E25, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {8.861207854822361E12, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {8.861207854822361E12, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-404.92783F);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-404.92783F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-404.92783F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-404.92783F);
      doubleArray0[6] = (double) (-1.0F);
      doubleArray0[7] = (double) (-1.0F);
      doubleArray0[8] = (-1358.3116568774);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-404.9278259277344), (-1.0), (-404.9278259277344), (-1.0), (-404.9278259277344), (-1.0), (-1.0), (-1358.3116568774)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 163966.54421056155, 1.0, 163966.54421056155, 1.0, 163966.54421056155, 1.0, 1.0, 1845010.557209028}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), (-404.9278259277344), (-1.0), (-404.9278259277344), (-1.0), (-404.9278259277344), (-1.0), (-1.0), (-1358.3116568774)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 163966.54421056155, 1.0, 163966.54421056155, 1.0, 163966.54421056155, 1.0, 1.0, 1845010.557209028}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, 164371.4720364893, 2.0, 164371.4720364893, 2.0, 164371.4720364893, 2.0, 2.0, 1846368.8688659053}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-404.92783F);
      doubleArray3[1] = (-1358.3116568774);
      doubleArray3[2] = (double) (-1.0F);
      doubleArray3[3] = (-1358.3116568774);
      doubleArray3[4] = 1.0;
      doubleArray3[5] = (double) (-404.92783F);
      doubleArray3[6] = (double) (-404.92783F);
      doubleArray3[7] = (-1358.3116568774);
      doubleArray3[8] = (double) (-404.92783F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray3);
      assertArrayEquals(new double[] {(-1.0), (-404.9278259277344), (-1.0), (-404.9278259277344), (-1.0), (-404.9278259277344), (-1.0), (-1.0), (-1358.3116568774)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-404.9278259277344), (-1358.3116568774), (-1.0), (-1358.3116568774), 1.0, (-404.9278259277344), (-404.9278259277344), (-1358.3116568774), (-404.9278259277344)}, doubleArray3, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-404.9278259277344), (-1.0), (-404.9278259277344), (-1.0), (-404.9278259277344), (-1.0), (-1.0), (-1358.3116568774)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 163966.54421056155, 1.0, 163966.54421056155, 1.0, 163966.54421056155, 1.0, 1.0, 1845010.557209028}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.linearCombination(0.0, 0.0, (-475.5263), 1452.0);
      assertEquals((-690464.1876), double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(1419.4047726111448, 1.494140625, 3.834E-20, 8.861207854822361E12);
      assertEquals(2120.7903344169376, double0, 0.01);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 8.861207854822361E12;
      doubleArray2[1] = 1452.0;
      doubleArray2[2] = 2120.7903344169376;
      doubleArray2[3] = 1419.4047726111448;
      doubleArray2[4] = 1.494140625;
      doubleArray2[5] = 1.494140625;
      doubleArray2[6] = 3.834E-20;
      doubleArray2[7] = 3.834E-20;
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {8.861207854822361E12, 1452.0, 2120.7903344169376, 1419.4047726111448, 1.494140625, 1.494140625, 3.834E-20, 3.834E-20}, doubleArray2, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8.861207854822361E12, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1.8039355363056153E7;
      doubleArray3[1] = 977.3037539;
      doubleArray3[2] = 1.494140625;
      doubleArray3[3] = 916.8592816597334;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 3.834E-20;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.8039355363056153E7, 977.3037539, 1.494140625, 916.8592816597334, 0.0, 3.834E-20}, doubleArray3, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(6, doubleArray3.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      MathArrays.scaleInPlace(1.0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(6.52E18, 6.52E18, (-1.0), 1953.351666, (-779.0682), 1696.2861334978);
      assertEquals(4.25104E37, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, 1.304E19, Double.NaN, Double.NaN, (-1.0), 112.4725, 2014.55, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2014.55;
      doubleArray0[1] = 2014.55;
      doubleArray0[2] = 1540.818;
      doubleArray0[3] = 2014.55;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2014.55, 2014.55, 1540.818, 2014.55, Double.NaN, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 1540.818;
      doubleArray1[2] = 757.0;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = 1.304E19;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.scaleInPlace((-352.4339058101366), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 173.60482, (-483.968918067), (-447.320964515), (-447.320964515), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.scale(173.60482, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale((-352.4339058101366), doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[10];
      longArray1[0] = (-4484L);
      longArray1[1] = (-3829L);
      longArray1[2] = (-3181L);
      longArray1[3] = (-263L);
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3181L);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3181.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0118761E7}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-3181.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0118761E7}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3181.0)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray2, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-3181.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0118761E7}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3181.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0118761E7}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (double) (-4484L);
      doubleArray4[1] = (double) (-3829L);
      doubleArray4[2] = (double) (-3829L);
      doubleArray4[3] = (double) (-4484L);
      doubleArray4[4] = 2374120.1091239997;
      doubleArray4[5] = (double) (-263L);
      doubleArray4[6] = (double) (-3181L);
      doubleArray4[7] = (double) (-3181L);
      doubleArray4[8] = (double) (-263L);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[1] = doubleArray0;
      int[] intArray0 = new int[1];
      intArray0[0] = 42;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {42}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      Double double1 = new Double((-362.1466146345));
      assertNotNull(double1);
      assertEquals((-362.1466146345), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DECREASING";
      stringArray0[1] = "my";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1394.36820413);
      doubleArray0[1] = (-2262.29204815787);
      doubleArray0[2] = 0.3153223395347595;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-2110.8918);
      doubleArray0[5] = 3104054.9019;
      doubleArray0[6] = (-358.349416);
      doubleArray0[7] = (-444.53);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1394.36820413), (-2262.29204815787), 0.3153223395347595, Double.NaN, (-2110.8918), 3104054.9019, (-358.349416), (-444.53)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1394.36820413), (-2262.29204815787), 0.3153223395347595, Double.NaN, (-2110.8918), 3104054.9019, (-358.349416), (-444.53)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1394.36820413), (-2262.29204815787), 0.3153223395347595, Double.NaN, (-2110.8918), 3104054.9019, (-358.349416), (-444.53)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[10];
      longArray1[0] = (-4484L);
      longArray1[1] = (-3829L);
      longArray1[2] = (-3181L);
      longArray1[3] = (-263L);
      longArray0[0] = longArray1;
      long[][] longArray2 = new long[2][8];
      assertFalse(longArray2.equals((Object)longArray0));
      
      MathArrays.checkRectangular(longArray2);
      assertEquals(2, longArray2.length);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[10];
      longArray1[0] = (-4484L);
      longArray1[1] = (-3829L);
      longArray1[2] = (-3181L);
      longArray1[3] = (-263L);
      longArray0[0] = longArray1;
      long[][] longArray2 = new long[2][8];
      assertFalse(longArray2.equals((Object)longArray0));
      
      MathArrays.checkRectangular(longArray2);
      assertEquals(2, longArray2.length);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 2145234031;
      intArray0[2] = (-426004);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-426004));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-404.92783F);
      floatArray0[1] = (-1.0F);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DECREASING";
      stringArray0[1] = "3>4QJhSPBIT?";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 138.28208947;
      doubleArray1[1] = (double) (-1.0F);
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "omg?8HAJa)&4";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[3] = "";
      stringArray0[4] = "insufficient data for t statistic, needs at least 2, got {0}";
      stringArray0[5] = "<TW";
      stringArray0[6] = "$VALUES";
      stringArray0[7] = "|xL7&|(1`.L&lYV4C";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      String[] stringArray0 = new String[8];
      stringArray0[0] = "s[nis!>GyX'q";
      stringArray0[1] = "/$O(>+[";
      stringArray0[2] = "/$O(>+[";
      stringArray0[3] = "/$O(>+[";
      stringArray0[4] = "/$O(>+[";
      stringArray0[5] = "/$O(>+[";
      stringArray0[6] = "/$O(>+[";
      stringArray0[7] = "/$O(>+[";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(y";
      stringArray0[1] = "(y";
      stringArray0[2] = "/$O(>+[";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(2366.715622089, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2799.0881027482;
      doubleArray0[1] = 909.4018665;
      doubleArray0[2] = (-1.0);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2799.0881027482, 909.4018665, (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(8661906.961740201, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2799.0881027482, 909.4018665, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7834894.206946518, 5090991.890274314, 821413.5785881875, (-1818.803733), 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2799.0881027482;
      doubleArray0[1] = 909.4018665;
      doubleArray0[2] = (-1.0);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2799.0881027482, 909.4018665, (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(8661906.961740201, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-1.0), (-1.0), 1.0, 0.0);
      assertEquals(1.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[10];
      longArray1[0] = (-4484L);
      longArray1[1] = (-3829L);
      longArray1[2] = (-3181L);
      long long0 = (-263L);
      longArray1[3] = (-263L);
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 10
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-5307.739833895);
      doubleArray0[1] = 0.0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-392);
      intArray0[1] = 940;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-392), 940}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-5307.739833895), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2.817210214431572E7, double0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-392);
      longArray0[2] = (-1621L);
      longArray0[3] = (long) (-392);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -392 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (-2L);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-4073.1063), 734.443629, 734.443629, 20.0);
      assertEquals((-2976778.0996947624), double0, 0.01);
      
      double double1 = MathArrays.linearCombination(20.0, 0.0, 734.443629, 734.443629);
      assertEquals(539407.4441786896, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.1666666505023083;
      doubleArray0[1] = 734.443629;
      doubleArray0[2] = (-953.6);
      doubleArray0[3] = 20.0;
      doubleArray0[4] = (-4073.1063);
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.1666666505023083, 734.443629, (-953.6), 20.0, (-4073.1063)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1.8039355363056153E7, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = MathArrays.linearCombination(1.0, 0.0, 0.0, 0.1666666505023083);
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.1666666505023083, 734.443629, (-953.6), 20.0, (-4073.1063)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.1666666505023083, 734.443629, (-953.6), 20.0, (-4073.1063)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1366.47F;
      floatArray0[1] = 1366.47F;
      floatArray0[2] = (-1146.4159F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1366.47F, 1366.47F, (-1146.4159F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4.116164446561962E-8;
      doubleArray1[1] = (double) 1366.47F;
      doubleArray1[2] = (double) 1366.47F;
      doubleArray1[3] = 1.8039355363056153E7;
      doubleArray1[4] = (double) (-1.0F);
      doubleArray1[5] = 1.8039355363056153E7;
      doubleArray1[6] = 20.0;
      doubleArray1[7] = 0.1428571343421936;
      doubleArray1[8] = 9.020709225400982E12;
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(y";
      double double0 = MathArrays.linearCombination(2716.0, (-523.0), 0.0, 1.0, 1336.32354028455, 1.6742014267292946);
      assertEquals((-1418230.7252222837), double0, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-523.0);
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.6742014267292946;
      doubleArray2[3] = 4513.673111197;
      doubleArray2[4] = 1.6742014267292946;
      double double1 = MathArrays.linearCombination(1.6742014267292946, (-1418230.7252222837), 1.6742014267292946, 4513.673111197, 0.0, 0.0, 1.6742014267292946, (-1418230.7252222837));
      assertEquals((-4741251.009234384), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(y";
      stringArray0[1] = "(y";
      stringArray0[2] = "/$O(>+[";
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.scale(0.0, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-3139);
      intArray0[1] = 2;
      intArray0[2] = 1460;
      intArray0[3] = 148;
      intArray0[4] = 2861;
      intArray0[5] = 2128558501;
      intArray0[6] = 3;
      intArray0[7] = (-165);
      int[] intArray1 = MathArrays.copyOf(intArray0, 280);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-3139), 2, 1460, 148, 2861, 2128558501, 3, (-165)}, intArray0);
      assertEquals(280, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 0.0F;
      double[] doubleArray2 = MathArrays.scale(0.0F, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.linearCombination(4603.203073312029, 0.0, (double) 0.0F, 13.07, (double) 0.0F, (-829.786180855));
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      try { 
        MathArrays.ebeSubtract(doubleArray3, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 92L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {92L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-5307.739833895);
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.linearCombination(1.1874850631242536E7, (-2088.74), (-1935.1515351386), (-1935.1515351386));
      assertEquals((-2.4799730696037582E10), double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-5307.739833895), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(5307.739833895, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2.4799730696037582E10);
      doubleArray1[1] = (-1935.1515351386);
      doubleArray1[2] = (-2.4799730696037582E10);
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-404.92783F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-404.92783F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 940;
      intArray0[1] = (-392);
      intArray0[2] = 940;
      intArray0[3] = 940;
      intArray0[4] = (-392);
      intArray0[5] = (-3967);
      intArray0[6] = 940;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {940, (-392), 940, 940, (-392), (-3967), 940}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-392);
      doubleArray1[1] = (double) (-392);
      doubleArray1[2] = (double) (-404.92783F);
      doubleArray1[3] = (double) (-3967);
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(y";
      stringArray0[1] = "(y";
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = 0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 0.0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[4] = (-953.6);
      doubleArray2[5] = (double) 0;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(1540.818, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1419.4047726111448;
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1419.4047726111448;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-684.2);
      doubleArray1[3] = (-582.5);
      doubleArray1[5] = (-1564.04913);
      doubleArray1[6] = (-18.5783082);
      doubleArray1[7] = 2374120.1091239997;
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-404.92783F);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/$O(>+[";
      stringArray0[1] = "/$O(>+[";
      stringArray0[2] = "/$O(>+[";
      stringArray0[3] = "/$O(>+[";
      stringArray0[4] = "/$O(>+[";
      stringArray0[5] = "/$O(>+[";
      stringArray0[6] = "(y";
      double double0 = MathArrays.linearCombination((double) (-404.92783F), (double) (-404.92783F), 1.34217729E8, (-2530.626), 4.3466666666666665E18, (-1210.45951252891));
      assertEquals((-5.26146401479865E21), double0, 0.01);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-404.92783F);
      floatArray1[1] = (-404.92783F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-404.92783F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-404.92783F), (-404.92783F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-404.92783F);
      doubleArray0[1] = (double) (-404.92783F);
      doubleArray0[2] = 7834894.206946518;
      doubleArray0[3] = (double) (-404.92783F);
      doubleArray0[4] = (-5.26146401479865E21);
      doubleArray0[5] = (-2530.626);
      doubleArray0[6] = (double) (-404.92783F);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-404.9278259277344), (-404.9278259277344), 7834894.206946518, (-404.9278259277344), (-5.26146401479865E21), (-2530.626), (-404.9278259277344)}, doubleArray0, 0.01);
      assertEquals(13, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 13 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-297.0), (double) 22.31661F, (double) 22.31661F, (-138.28208947), 280.0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-138.28208947);
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, 1.304E19, Double.NaN, Double.NaN, (-1.0), 112.4725, 2014.55, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2014.55;
      doubleArray0[1] = 2014.55;
      doubleArray0[2] = 1561.435516473784;
      doubleArray0[3] = 2014.55;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      MathArrays.scaleInPlace(1561.435516473784, doubleArray0);
      assertArrayEquals(new double[] {3145589.9197122613, 3145589.9197122613, 2438080.8721057526, 3145589.9197122613, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3145589.9197122613, 3145589.9197122613, 2438080.8721057526, 3145589.9197122613, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.26489511467506516), (-0.26489511467506516), (-0.2053146559748046), (-0.26489511467506516), Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {3145589.9197122613, 3145589.9197122613, 2438080.8721057526, 3145589.9197122613, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.26489511467506516), (-0.26489511467506516), (-0.2053146559748046), (-0.26489511467506516), Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(13, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {3145589.9197122613, 3145589.9197122613, 2438080.8721057526, 3145589.9197122613, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.26489511467506516), (-0.26489511467506516), (-0.2053146559748046), (-0.26489511467506516), Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(13, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1019.7846583915);
      doubleArray0[1] = (-1019.7846583915);
      doubleArray0[2] = (-1019.7846583915);
      doubleArray0[4] = (-1019.7846583915);
      doubleArray0[5] = (-1019.7846583915);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1019.7846583915));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1019.7846583915), (-1019.7846583915), (-1019.7846583915), 0.0, (-1019.7846583915), (-1019.7846583915)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-203.9569316783), (-203.9569316783), (-203.9569316783), 0.0, (-203.9569316783), (-203.9569316783)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1019.7846583915), (-1019.7846583915), (-1019.7846583915), 0.0, (-1019.7846583915), (-1019.7846583915)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1019.7846583915), (-1019.7846583915), (-1019.7846583915), 0.0, (-1019.7846583915), (-1019.7846583915)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1019.7846583915), (-1019.7846583915), (-1019.7846583915), 0.0, (-1019.7846583915), (-1019.7846583915)}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      long[][] longArray0 = new long[2][7];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) 0;
      longArray2[5] = (long) 0;
      longArray2[6] = (long) 0;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2799.0881027482;
      doubleArray0[1] = 909.4018665;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {2799.0881027482, 909.4018665, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2943.1116121785462, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2799.0881027482, 909.4018665, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(8661905.961740201, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      
      int int0 = (-392);
      int int1 = 940;
      int[] intArray0 = new int[0];
      int int2 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2799.0881027482, 909.4018665, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(8661905.961740201, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-404.92783F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-404.92783F);
      doubleArray0[1] = (-1.7168146928204135);
      doubleArray0[2] = (double) (-404.92783F);
      doubleArray0[3] = (double) (-404.92783F);
      doubleArray0[4] = (double) (-404.92783F);
      doubleArray0[5] = (-523.0);
      doubleArray0[6] = 35.3962838;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (-1.717 >= -404.928)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = MathArrays.linearCombination((-953.6), (-953.6), (-953.6), (-352.94144260304995));
      assertEquals(1245917.9196662684, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-1409.0), 0.0, (-953.6), 9.020709225400982E12);
      assertEquals((-8.602148317342377E15), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-523.0);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 20.0;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-523.0), 3.834E-20, 20.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-404.92783F);
      floatArray0[1] = (-1.0F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-404.92783F);
      doubleArray0[1] = (double) (-404.92783F);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 2799.0881027482;
      doubleArray0[0] = 2799.0881027482;
      doubleArray0[1] = 915.7293908685019;
      double double1 = (-1.0);
      doubleArray0[2] = (-1.0);
      Double double2 = new Double(2799.0881027482);
      assertNotNull(double2);
      assertEquals(2799.0881027482, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      double double3 = 0.0;
      double double4 = MathArrays.linearCombination(3708.0, 2331.87921446, (-1.0), 0.0);
      assertEquals(8646608.12721768, double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      
      Double double5 = new Double(2799.0881027482);
      assertNotNull(double5);
      assertEquals(2799.0881027482, (double)double5, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2799.0881027482, 915.7293908685019, (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1019.7846583915);
      doubleArray0[1] = (-1019.7846583915);
      doubleArray0[2] = (-1019.7846583915);
      doubleArray0[3] = (-1019.7846583915);
      doubleArray0[4] = (-1019.7846583915);
      doubleArray0[5] = (-1019.7846583915);
      MathArrays.scaleInPlace((-1019.7846583915), doubleArray0);
      assertArrayEquals(new double[] {1039960.7494906683, 1039960.7494906683, 1039960.7494906683, 1039960.7494906683, 1039960.7494906683, 1039960.7494906683}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1039960.7494906683);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1039960.7494906683, 1039960.7494906683, 1039960.7494906683, 1039960.7494906683, 1039960.7494906683, 1039960.7494906683}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {173326.79158177806, 173326.79158177806, 173326.79158177806, 173326.79158177806, 173326.79158177806, 173326.79158177806}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1039960.7494906683, 1039960.7494906683, 1039960.7494906683, 1039960.7494906683, 1039960.7494906683, 1039960.7494906683}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1039960.7494906683, 1039960.7494906683, 1039960.7494906683, 1039960.7494906683, 1039960.7494906683, 1039960.7494906683}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1039960.7494906683, 1039960.7494906683, 1039960.7494906683, 1039960.7494906683, 1039960.7494906683, 1039960.7494906683}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      long[][] longArray0 = new long[2][7];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) 0;
      longArray2[5] = (long) 0;
      longArray2[6] = (long) 0;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-5307.739833895);
      doubleArray0[1] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-5307.739833895), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      double double0 = MathArrays.linearCombination((double) 0.0F, 0.0, 1393.39946, 5090991.890274314, 258.0127500779757, 1085.0944340562169);
      assertEquals(7.094065318971634E9, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-5307.739833895), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-5307.739833895), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 892.05;
      doubleArray0[1] = 0.24740394949913025;
      double double0 = 3.834E-20;
      double double1 = (-1.9841269659586505E-4);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {892.05, 0.24740394949913025, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {795753.2024999999, 441.39338630139827, 0.06120871422776819, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = (-1254);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int1 = (-1210);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1254), (-1210));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-953.6);
      doubleArray0[0] = (-953.6);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      int[] intArray0 = new int[6];
      intArray0[0] = 824;
      intArray0[1] = 824;
      intArray0[2] = 824;
      intArray0[3] = 824;
      intArray0[4] = 824;
      intArray0[5] = 824;
      int int0 = (-480);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-480));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-1.0), 1.34217729E8, (-1.0), 35.3962838, 1976.66346553, 1393.39946);
      assertEquals((-1.3146348259081256E8), double0, 0.01);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray1, 35.3962838);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {35.3962838, -0.0}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2802);
      intArray0[1] = 0;
      intArray0[4] = (-6035);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {35.3962838, -0.0}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      
      MathArrays.scaleInPlace((-2742.395643008), doubleArray3);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-97070.61447179466), 0.0}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-6035);
      intArray1[1] = (-2802);
      intArray1[2] = 0;
      intArray1[3] = (-6035);
      intArray1[4] = 964;
      intArray1[5] = (-2802);
      int int0 = MathArrays.distance1(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2802), 0, 0, 0, (-6035), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-6035), (-2802), 0, (-6035), 964, (-2802)}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(21871, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2329.5838627);
      doubleArray0[2] = 2515.76036227;
      doubleArray0[3] = 2260.426909385428;
      doubleArray0[4] = (-1626.871143168757);
      doubleArray0[5] = 27.49950031;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-2329.5838627), 2515.76036227, 2260.426909385428, (-1626.871143168757), 27.49950031}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 199;
      intArray0[1] = 0;
      intArray0[2] = (-527);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {199, 0, (-527), 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, int0);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2329.5838627), 2515.76036227, 2260.426909385428, (-1626.871143168757), 27.49950031}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1.951300692538741E7, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-2329.5838627), 2515.76036227, 2260.426909385428, (-1626.871143168757), 27.49950031}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2.3318253779918514E7, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 27.49950031;
      doubleArray2[3] = 2260.426909385428;
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, (-2329.5838627), 2515.76036227, 2260.426909385428, (-1626.871143168757), 27.49950031}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 27.49950031, 2260.426909385428}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(14, doubleArray3.length);
      assertEquals(11, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-5307.739833895);
      doubleArray0[1] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-5307.739833895), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-5307.739833895), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-392);
      intArray0[1] = 940;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-392), 940}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-392), 940}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-5307.739833895), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5307.739833895), 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 940;
      floatArray1[1] = (float) (-392);
      floatArray1[2] = 0.0F;
      floatArray1[3] = 1374.7017F;
      floatArray1[4] = (float) 940;
      floatArray1[5] = 1.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 1.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray1);
      assertArrayEquals(new float[] {940.0F, (-392.0F), 0.0F, 1374.7017F, 940.0F, 1.0F, 0.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2329.5838627);
      doubleArray0[2] = 2515.76036227;
      doubleArray0[3] = 2260.426909385428;
      doubleArray0[4] = (-1626.871143168757);
      doubleArray0[5] = 27.49950031;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-2329.5838627), 2515.76036227, 2260.426909385428, (-1626.871143168757), 27.49950031}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 199;
      intArray0[1] = 0;
      intArray0[2] = (-527);
      intArray0[3] = 193;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 199;
      intArray1[1] = 199;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, (-2329.5838627), 2515.76036227, 2260.426909385428, (-1626.871143168757), 27.49950031}, doubleArray0, 0.01);
      assertEquals(11, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 11
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, 1.304E19, Double.NaN, Double.NaN, (-119.3255428599), 112.4725, 2014.55, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2014.55;
      doubleArray0[1] = 2014.55;
      doubleArray0[2] = 1540.818;
      doubleArray0[3] = 2014.55;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      MathArrays.scaleInPlace(1540.818, doubleArray0);
      assertArrayEquals(new double[] {3104054.9019, 3104054.9019, 2374120.1091239997, 3104054.9019, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[6][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {3104054.9019, 3104054.9019, Double.NaN, Double.NaN, Double.NaN, 3104054.9019, 2374120.1091239997}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double double1 = MathArrays.linearCombination(Double.NaN, 659.35179823, (-523.0), Double.NaN, Double.NaN, 1953.351666);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3104054.9019, 3104054.9019, Double.NaN, Double.NaN, Double.NaN, 3104054.9019, 2374120.1091239997}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {3104054.9019, 3104054.9019, Double.NaN, Double.NaN, Double.NaN, 3104054.9019, 2374120.1091239997}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, 1.0, 1.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1953.351666;
      doubleArray3[1] = 1953.351666;
      doubleArray3[2] = 1.304E19;
      doubleArray3[3] = Double.NaN;
      doubleArray3[4] = Double.NaN;
      doubleArray3[5] = Double.NaN;
      doubleArray3[6] = 1.304E19;
      doubleArray3[7] = 1.7976931348623157E308;
      doubleArray3[8] = (-119.3255428599);
      boolean boolean0 = MathArrays.equals(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {3104054.9019, 3104054.9019, Double.NaN, Double.NaN, Double.NaN, 3104054.9019, 2374120.1091239997}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1953.351666, 1953.351666, 1.304E19, Double.NaN, Double.NaN, Double.NaN, 1.304E19, 1.7976931348623157E308, (-119.3255428599)}, doubleArray3, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "EzW,KT>6lT";
      stringArray0[1] = "EzW,KT>6lT";
      stringArray0[2] = "EzW,KT>6lT";
      stringArray0[3] = "";
      stringArray0[4] = "CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR";
      stringArray0[5] = "(y";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[][] doubleArray0 = new double[5][4];
      double double0 = MathArrays.linearCombination(1.0, 1679.45038123617, 1.0, 1679.45038123617, 1679.45038123617, 1679.45038123617);
      assertEquals(2823912.483796789, double0, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0[0], 2038.942666557);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5), (-0.5)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5), (-0.5)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.5, 1.0, 0.5}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5), (-0.5)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-1.0), 1.34217729E8, (-1.0), 35.3962838, 1976.66346553, 1393.39946);
      assertEquals((-1.3146348259081256E8), double0, 0.01);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray1, 35.3962838);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5), (-0.5)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {17.6981419, 17.6981419}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2802);
      intArray0[1] = 0;
      intArray0[4] = (-6035);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5), (-0.5)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {17.6981419, 17.6981419}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 112.4725;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[4];
      longArray1[0] = 226L;
      longArray1[1] = 0L;
      longArray1[2] = 226L;
      longArray1[3] = 226L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.scaleInPlace((-374.064799), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 173.60482, (-483.968918067), (-447.320964515), (-447.320964515), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.scale(173.60482, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale((-374.064799), doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(1.0708593250394448E-7, (-6435.9), (-6435.9), 7834894.206946518, (-1141.15938987439), 0.0);
      assertEquals((-5.0424595626487785E10), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.scale(Double.NaN, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2147079129);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "(y";
      stringArray0[1] = "";
      stringArray0[2] = "xHN";
      stringArray0[3] = "";
      stringArray0[4] = "`DrS'<emKf|ub";
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2799.0881027482;
      doubleArray0[1] = 909.4018665;
      doubleArray0[2] = (-1.0);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2799.0881027482, 909.4018665, (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(8661906.961740201, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(3708.0, 2331.87921446, 1.0, 0.0);
      assertEquals(8646608.12721768, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2799.0881027482, 909.4018665, (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "xHN";
      stringArray0[1] = "xHN";
      stringArray0[2] = "xHN";
      stringArray0[3] = "xHN";
      stringArray0[4] = "xHN";
      stringArray0[5] = "xHN";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-0.7549819759366188), (-0.24528774832650654), 2.6972426312532377E-4}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2799.0881027482, 909.4018665, (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "(y";
      stringArray0[1] = "";
      stringArray0[2] = "xHN";
      stringArray0[3] = "";
      stringArray0[4] = "`DrS'<emKf|ub";
      stringArray0[5] = "CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR";
      stringArray0[6] = "(y";
      stringArray0[7] = "";
      stringArray0[8] = "(y";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 892.05;
      doubleArray0[1] = 0.24740394949913025;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 668.698;
      int[] intArray0 = new int[9];
      intArray0[0] = 92;
      intArray0[1] = 92;
      intArray0[2] = 2144907389;
      intArray0[3] = 92;
      intArray0[4] = 92;
      intArray0[5] = 92;
      intArray0[6] = 92;
      intArray0[7] = 92;
      intArray0[8] = 92;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {92, 92, 2144907389, 92, 92, 92, 92, 92, 92}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
      
      long[][] longArray0 = new long[5][9];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 92;
      longArray1[1] = 0L;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 92;
      longArray1[5] = (long) 2144907389;
      longArray1[6] = (-153L);
      longArray1[7] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 92;
      longArray2[1] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 92;
      longArray3[1] = (long) 92;
      longArray3[2] = (long) 92;
      longArray3[3] = (long) 92;
      longArray3[4] = (long) 92;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) 92;
      longArray4[1] = (long) 92;
      longArray4[2] = 0L;
      longArray4[3] = (long) 92;
      longArray4[4] = 0L;
      longArray4[5] = (long) 92;
      longArray4[6] = 458L;
      longArray4[7] = (long) 92;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 0L;
      longArray5[1] = (-153L);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -153 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5), (-0.5)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5), (-0.5)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.5, 1.0, 0.5}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5), (-0.5)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      double double0 = MathArrays.linearCombination((-1.0), 1.34217729E8, (-1.0), 35.3962838, 1976.66346553, 1393.39946);
      assertEquals((-1.3146348259081256E8), double0, 0.01);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray1, 35.3962838);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5), (-0.5)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {17.6981419, 17.6981419}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2802);
      intArray0[1] = 0;
      intArray0[4] = (-6035);
      intArray0[3] = (-682);
      intArray0[4] = 0;
      intArray0[5] = (-2003);
      intArray0[6] = (-640);
      intArray0[7] = 52;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-640);
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) (-2003);
      doubleArray4[1] = (-1.0);
      doubleArray4[1] = (double) (-682);
      doubleArray4[3] = (double) 52;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray4);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2003.0), (-682.0), 0.0, 52.0}, doubleArray4, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertEquals(2683.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5), (-0.5)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.5, 1.0, 0.5}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-5307.739833895);
      doubleArray0[0] = (-5307.739833895);
      doubleArray0[1] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-5307.739833895), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      float float1 = 0.0F;
      floatArray0[1] = 0.0F;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-5307.739833895), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10615.47966779), 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2147032769, 2147032769);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, (-2146975532), (-895));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 892.05;
      doubleArray0[1] = 0.24740394949913025;
      double double0 = 3.834E-20;
      double double1 = (-1.9841269659586505E-4);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {892.05, 0.24740394949913025, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {795753.2024999999, 441.39338630139827, 0.06120871422776819, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = (-1254);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = (-1210);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1254), (-1210));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 892.05;
      doubleArray0[1] = 0.24740394949913025;
      doubleArray0[2] = 3.834E-20;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/$O(>+[";
      stringArray0[1] = "org.apache.commons.math3.complex.ComplexField";
      stringArray0[2] = "/$O(>+[";
      stringArray0[3] = "/$O(>+[";
      stringArray0[4] = "/$O(>+[";
      stringArray0[5] = "/$O(>+[";
      stringArray0[6] = "/$O(>+[";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-374.064799);
      MathArrays.scaleInPlace((-374.064799), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(Double.NaN, 173.60482, (-483.968918067), (-430.94219737753724), (-430.94219737753724), Double.NaN);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.scale(173.60482, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale((-374.064799), doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[9][2];
      doubleArray3[0] = doubleArray2;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray0[6] = 173.60482;
      doubleArray4[1] = Double.NaN;
      doubleArray4[2] = Double.NaN;
      doubleArray4[3] = (-483.968918067);
      doubleArray4[4] = Double.NaN;
      doubleArray4[5] = (-430.94219737753724);
      doubleArray4[6] = 173.60482;
      doubleArray3[1] = doubleArray4;
      doubleArray3[2] = doubleArray2;
      doubleArray3[3] = doubleArray0;
      doubleArray3[4] = doubleArray2;
      doubleArray3[5] = doubleArray1;
      doubleArray3[6] = doubleArray2;
      doubleArray3[7] = doubleArray1;
      doubleArray3[8] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(y";
      stringArray0[1] = "(y";
      stringArray0[2] = "/$O(>+[";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "EzW,KT>6lT";
      stringArray0[1] = "";
      stringArray0[2] = "`DrS'<emKf|ub";
      stringArray0[3] = "";
      stringArray0[4] = "CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR";
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-6435.9);
      doubleArray0[1] = 2316.347507347383;
      doubleArray0[2] = 866.917237588;
      doubleArray0[3] = 429.0968199234;
      doubleArray0[5] = 2316.347507347383;
      doubleArray0[7] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-6435.9), 2316.347507347383, 0.0, 2316.347507347383, 866.917237588, 429.0968199234, 0.0, 1.304E19}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-953.6);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (-523.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 643.4471481979621;
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = false;
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = null;
      integerArray0[1] = null;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[3][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<String, FieldElement<String>>>) null, 264, 264);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Field<Integer> field1 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field1, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1064.9420454765;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-530.93);
      doubleArray0[3] = 808.0;
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double(1064.9420454765);
      assertNotNull(double1);
      assertEquals(1064.9420454765, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1962.58962458);
      assertNotNull(double2);
      assertEquals(1962.58962458, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(1064.9420454765);
      assertNotNull(double3);
      assertEquals(1064.9420454765, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      
      Double double4 = new Double(1.494140625);
      assertNotNull(double4);
      assertEquals(1.494140625, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = double0;
      doubleArray1[1] = double3;
      doubleArray1[2] = double3;
      Double double5 = new Double((-2464.0843967247897));
      assertNotNull(double5);
      assertEquals((-2464.0843967247897), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      
      doubleArray1[3] = double5;
      doubleArray1[4] = double1;
      doubleArray1[5] = double4;
      Double double6 = new Double(1.494140625);
      assertNotNull(double6);
      assertEquals(1.494140625, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      
      doubleArray1[6] = double6;
      doubleArray1[7] = double1;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean0);
      
      double double7 = MathArrays.linearCombination(1.34217729E8, 0.0, 1.34217729E8, (double) doubleArray1[5], 3801.15, (double) doubleArray1[7], (double) doubleArray1[4], Double.NaN);
      assertEquals(8, doubleArray1.length);
      assertEquals(Double.NaN, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 112.4725;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-953.6);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (-523.0);
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {(-953.6), 0.0, 3.834E-20, (-523.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-470.774), 1.0, (-470.774), 162.5184393071, 0.0, 0.0, 1.304E19, 1.34217729E8);
      assertEquals(1.75019918616E27, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 4364;
      intArray0[1] = (-543);
      int int0 = 1332;
      intArray0[2] = 1332;
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {4364, (-543), 1332}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.834E-20, 4774.187434, (-6435.9), 4774.187434, (-2543.8019004682883), (-6435.9));
      assertEquals((-1.4354538255256746E7), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-6435.9);
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-1019.7846583915);
      doubleArray0[3] = (-2543.8019004682883);
      doubleArray0[4] = (-2543.8019004682883);
      doubleArray0[0] = (-1.4354538255256746E7);
      doubleArray0[6] = 4774.187434;
      doubleArray0[7] = (-2543.8019004682883);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-1.4354538255256746E7), 3.834E-20, (-1019.7846583915), (-2543.8019004682883), (-2543.8019004682883), 0.0, 4774.187434, (-2543.8019004682883)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.4354538255256746E7), 3.834E-20, (-1019.7846583915), (-2543.8019004682883), (-2543.8019004682883), 0.0, 4774.187434, (-2543.8019004682883)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int0 = (-675);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, (-675));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.scaleInPlace((-374.064799), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 173.60482, (-483.968918067), (-447.320964515), (-447.320964515), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.scale(173.60482, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale((-374.064799), doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double1 = MathArrays.linearCombination(1.0708593250394448E-7, (-6435.9), (-6435.9), 7834894.206946518, (-1141.15938987439), 0.0);
      assertEquals((-5.0424595626487785E10), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      double[] doubleArray4 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      double[] doubleArray5 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertNotNull(doubleArray5);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray5, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray5.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-447.320964515);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 3660.8;
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 173.60482, Double.NaN, 1.304E19, Double.NaN, (-447.320964515));
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale(Double.NaN, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double1 = MathArrays.linearCombination(0.0, 2901.360928269171, 3875.29208, (-1141.15938987439), 0.0, 0.0);
      assertEquals((-4422325.945597855), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-61.0F);
      floatArray0[1] = (-1544.1703F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-3044.188F);
      floatArray0[5] = (-783.69F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-830.08F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-61.0F), (-1544.1703F), 0.0F, 1.0F, (-3044.188F), (-783.69F), 0.0F, (-830.08F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 1442;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int1 = 0;
      intArray0[4] = 0;
      int int2 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 1442, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      integerArray0[0] = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 112.4725;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 3094.79;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {112.4725, 0.0, 0.0, (-1.0), (-1.0), 3094.79}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2366.715622089;
      doubleArray0[1] = (-2590.79803);
      doubleArray0[2] = 5859.8507819;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 4603.203073312029;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 5090991.890274314);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2366.715622089, (-2590.79803), 5859.8507819, Double.NaN, 4603.203073312029}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1176771.5244304838, (-1288189.1338358459), 2913618.1268221303, Double.NaN, 2288791.3728575464}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2366.715622089;
      doubleArray2[1] = 5859.8507819;
      doubleArray2[2] = (-2590.79803);
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = 5090991.890274314;
      doubleArray2[5] = (-2590.79803);
      doubleArray2[6] = Double.NaN;
      try { 
        MathArrays.checkPositive(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,590.798 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-953.6);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      double double0 = (-523.0);
      doubleArray0[3] = (-523.0);
      double double1 = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 643.4471481979621;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -953.6 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2329.5838627);
      doubleArray0[2] = 2515.76036227;
      doubleArray0[3] = 2260.426909385428;
      doubleArray0[4] = (-1626.871143168757);
      doubleArray0[5] = 27.49950031;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-2329.5838627), 2515.76036227, 2260.426909385428, (-1626.871143168757), 27.49950031}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 199;
      intArray0[1] = 0;
      intArray0[2] = (-527);
      intArray0[3] = 193;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 199;
      intArray1[1] = 199;
      intArray1[2] = 199;
      intArray1[3] = 0;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertArrayEquals(new int[] {199, 0, (-527), 193}, intArray0);
      assertArrayEquals(new int[] {199, 199, 199, 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(777.1267592870548, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double1 = MathArrays.distance(intArray1, intArray0);
      assertArrayEquals(new int[] {199, 0, (-527), 193}, intArray0);
      assertArrayEquals(new int[] {199, 199, 199, 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(777.1267592870548, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, (-2329.5838627), 2515.76036227, 2260.426909385428, (-1626.871143168757), 27.49950031}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2329.5838627), 2515.76036227, 2260.426909385428, (-1626.871143168757), 27.49950031}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2060.5696027);
      doubleArray0[1] = (-881.909404595);
      doubleArray0[2] = 712.58056918;
      doubleArray0[3] = 4531.0;
      doubleArray0[4] = (-550.21202);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1798.26);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2060.5696027), (-881.909404595), 712.58056918, 4531.0, (-550.21202), 1.0, 0.0, (-1798.26)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4245947.087571235, 777764.1979131073, 507771.06757289276, 2.0529961E7, 302733.2669524805, 1.0, 0.0, 3233739.0276}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.834E-20, 4774.187434, (-6435.9), 4774.187434, (-2543.8019004682883), (-6435.9));
      assertEquals((-1.4354538255256746E7), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-6435.9);
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-1019.7846583915);
      doubleArray0[3] = (-2543.8019004682883);
      doubleArray0[4] = (-2543.8019004682883);
      doubleArray0[5] = (-1.4354538255256746E7);
      doubleArray0[6] = 4774.187434;
      doubleArray0[7] = (-2543.8019004682883);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-6435.9), 3.834E-20, (-1019.7846583915), (-2543.8019004682883), (-2543.8019004682883), (-1.4354538255256746E7), 4774.187434, (-2543.8019004682883)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-6435.9), 3.834E-20, (-1019.7846583915), (-2543.8019004682883), (-2543.8019004682883), (-1.4354538255256746E7), 4774.187434, (-2543.8019004682883)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int0 = (-675);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, (-675));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-470.774), 1.0, (-470.774), 162.5184393071, 0.0, 0.0, 1.304E19, 1.34217729E8);
      assertEquals(1.75019918616E27, double0, 0.01);
      
      try { 
        MathArrays.convolve(doubleArray1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5), (-0.5)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5), (-0.5)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.5, 1.0, 0.5}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5), (-0.5)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      double double0 = MathArrays.linearCombination((-1.0), 1.34217729E8, (-1.0), 35.3962838, 1976.66346553, 1393.39946);
      assertEquals((-1.3146348259081256E8), double0, 0.01);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray1, 35.3962838);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5), (-0.5)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {17.6981419, 17.6981419}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2802);
      intArray0[1] = 0;
      intArray0[2] = (-6035);
      intArray0[3] = (-682);
      intArray0[4] = 0;
      intArray0[5] = (-2003);
      intArray0[6] = (-640);
      intArray0[7] = 52;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-640);
      intArray1[1] = (-2003);
      intArray1[2] = 92;
      intArray1[3] = 0;
      intArray1[4] = (-2003);
      intArray1[5] = (-2003);
      intArray1[6] = (-6035);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 833.566847883837;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 4752.157967468;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 2913.77;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (13,040,000,000,000,000,000 >= -1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1733.04618906);
      doubleArray0[0] = (-1733.04618906);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1733.04618906), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1733.04618906), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1733.04618906), Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double1 = 2163.04497382;
      double double2 = MathArrays.linearCombination((-1733.04618906), (-1733.04618906), 0.0, 2163.04497382, (-1677.972735), 0.0, (-1733.04618906), 0.0);
      assertEquals(3003449.0934153893, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1677.972735);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 3003449.0934153893;
      doubleArray3[3] = (-1733.04618906);
      doubleArray3[4] = 3003449.0934153893;
      doubleArray3[5] = 3003449.0934153893;
      doubleArray3[6] = (-1733.04618906);
      doubleArray3[7] = 0.0;
      doubleArray3[8] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (3,003,449.093 >= -1,733.046)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2896.68904748;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[3] = (-1276.4986968442697);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-3385.365);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-2605.3617884);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3385.365);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = 2513.847605072433;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0E-5;
      doubleArray0[6] = 2245.90373056;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2245.90373056);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1.0), 3.141592653589793, 2513.847605072433, 0.0, 1.0E-5, 2245.90373056, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-0.4716409544831938), 1.4817037577364796, 1185.6334838816533, 0.0, 4.716409544831938E-6, 1059.2601791586842, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, (-1.0), 3.141592653589793, 2513.847605072433, 0.0, 1.0E-5, 2245.90373056, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-0.4716409544831938), 1.4817037577364796, 1185.6334838816533, 0.0, 4.716409544831938E-6, 1059.2601791586842, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 2.1202569253040418, 2.1202569253040418, 2.1202569253040413, Double.NaN, 2.1202569253040418, 2.1202569253040418, Double.NaN}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0, 181);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, (-1.0), 3.141592653589793, 2513.847605072433, 0.0, 1.0E-5, 2245.90373056, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(181, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(0.0, doubleArray2);
      assertArrayEquals(new double[] {0.0, (-1.0), 3.141592653589793, 2513.847605072433, 0.0, 1.0E-5, 2245.90373056, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-0.4716409544831938), 1.4817037577364796, 1185.6334838816533, 0.0, 4.716409544831938E-6, 1059.2601791586842, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, Double.NaN}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 181;
      intArray0[1] = 181;
      intArray0[2] = 0;
      intArray0[3] = 181;
      intArray0[4] = 181;
      intArray0[5] = 181;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {181, 181, 0, 181, 181, 181}, intArray1);
      assertArrayEquals(new int[] {181, 181, 0, 181, 181, 181}, intArray0);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 66.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "p";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 4429);
      MathArrays.checkOrder(doubleArray1);
      MathArrays.checkOrder(doubleArray1);
      int[] intArray0 = new int[6];
      intArray0[0] = 4429;
      intArray0[1] = 4429;
      intArray0[2] = 4429;
      intArray0[3] = 4429;
      intArray0[4] = 4429;
      intArray0[5] = 4429;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) 4429;
      doubleArray3[1] = (double) 4429;
      doubleArray3[2] = (double) 4429;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 4429;
      doubleArray3[5] = (double) 4429;
      doubleArray3[6] = (double) 4429;
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4,429 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2797.118669);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {(-5594.237338)}, doubleArray1, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2799.0881027482;
      doubleArray0[1] = 909.4018665;
      doubleArray0[2] = (-1.0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.linearCombination(3708.0, 2331.87921446, 1.0, 0.0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.linearCombination(8661906.961740201, 2331.87921446, 0.0, Double.NEGATIVE_INFINITY, 2032.561615531, 0.0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (7,834,894.207 >= 5,090,991.89)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2336.2265810870363;
      doubleArray0[1] = (-1140.69);
      doubleArray0[2] = 3776.6;
      doubleArray0[3] = 532.1730857385254;
      doubleArray0[4] = (-1171.7756380762671);
      double double0 = 780.68863561978;
      doubleArray0[5] = 780.68863561978;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 780.68863561978;
      doubleArray1[1] = (-1140.69);
      doubleArray1[2] = 3776.6;
      doubleArray1[3] = (-1140.69);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      int[] intArray0 = new int[3];
      int int0 = 1801;
      intArray0[0] = 1801;
      intArray0[1] = (-2830);
      int int1 = 0;
      intArray0[2] = 0;
      MathArrays.distance1(intArray0, intArray0);
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2220.4;
      doubleArray0[1] = 401.208;
      doubleArray0[2] = 1370.423;
      doubleArray0[3] = (-897.2668);
      doubleArray0[4] = (-420.0038321829858);
      doubleArray0[5] = (-1362.412328536117);
      doubleArray0[6] = 919.204067;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1663.6392173);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-3497));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.linearCombination(2626.974106410688, 0.0, 0.0, 2626.974106410688, 2626.974106410688, 3650.2);
      MathArrays.distance1(doubleArray1, doubleArray0);
      MathArrays.copyOf(doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("!+SK!O[U)B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.!+SK!O[U)B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (-3.141592653589793));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 128;
      intArray0[1] = (-1214);
      intArray0[2] = 154;
      intArray0[3] = (-575);
      intArray0[4] = (-166);
      intArray0[5] = (-1369);
      intArray0[6] = (-2869);
      intArray0[7] = 309;
      intArray0[8] = 405;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {128, (-1214), 154, (-575), (-166), (-1369), (-2869), 309, 405}, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[][] longArrayArray0 = null;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2684.20684507);
      doubleArray0[1] = 2316.347507347383;
      doubleArray0[2] = 13.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (2,316.348 > 13)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-1730.7297909942);
      doubleArray0[0] = (-1730.7297909942);
      double double1 = 2009.2248479634034;
      doubleArray0[1] = 2009.2248479634034;
      double double2 = 0.0;
      doubleArray0[2] = 0.0;
      double double3 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-20.0);
      double double4 = 1.7976931348623157E308;
      doubleArray0[5] = 1.7976931348623157E308;
      double double5 = 74.25891654;
      doubleArray0[6] = 74.25891654;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,730.73 <= 2,009.225)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-4073.1063), 734.443629, 734.443629, 20.0);
      assertEquals((-2976778.0996947624), double0, 0.01);
      
      double double1 = MathArrays.linearCombination(20.0, 0.0, 734.443629, 734.443629);
      assertEquals(539407.4441786896, double1, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 539407.4441786896;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(539407.4441786896, double2, 0.01);
      
      double double3 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2.9096039083538617E11, double3, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-2035);
      intArray0[3] = (-1662);
      intArray0[4] = (-2945);
      intArray0[5] = (-1411);
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 1765;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MathArrays.OrderDirection.values();
      MathArrays.OrderDirection.values();
      long[][] longArray0 = new long[8][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 1239L;
      longArray2[3] = (-871L);
      longArray2[4] = 3886L;
      longArray2[5] = (-1092L);
      longArray2[6] = (-2387L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = 0L;
      longArray3[1] = (-871L);
      longArray3[2] = 1239L;
      longArray3[3] = (-1092L);
      longArray3[4] = 3886L;
      longArray3[5] = 3886L;
      longArray3[6] = 0L;
      longArray3[7] = (-871L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      longArray6[0] = 3886L;
      longArray6[1] = 226L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[6];
      longArray7[0] = 3886L;
      longArray7[1] = 0L;
      longArray7[2] = 1239L;
      longArray7[3] = 226L;
      longArray7[4] = 0L;
      longArray7[5] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[4];
      longArray8[0] = 0L;
      longArray8[1] = 1239L;
      longArray8[2] = 1239L;
      longArray8[3] = 226L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-5307.739833895);
      doubleArray0[1] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[2];
      intArray0[0] = (-392);
      intArray0[1] = 940;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[5][2];
      long[] longArray1 = new long[2];
      longArray1[0] = (-2L);
      longArray1[1] = (long) (-392);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (long) 940;
      longArray2[1] = (long) (-392);
      longArray2[2] = 0L;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) 940;
      longArray2[5] = (long) 940;
      longArray2[6] = (long) (-392);
      longArray2[7] = (long) 940;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = 0L;
      longArray3[1] = (long) 940;
      longArray3[2] = (long) 940;
      longArray3[3] = 0L;
      longArray3[4] = (long) 0;
      longArray3[5] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = (long) (-392);
      longArray4[1] = (long) 940;
      longArray4[2] = (long) 940;
      longArray4[3] = (-2L);
      longArray4[4] = 0L;
      longArray4[5] = (long) 940;
      longArray4[6] = (-2L);
      longArray4[7] = (long) 940;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      longArray5[0] = (-2L);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "EzW,KT>6lT";
      stringArray0[1] = "";
      stringArray0[2] = "`DrS'<emKf|ub";
      stringArray0[3] = "";
      stringArray0[4] = "CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR";
      stringArray0[5] = "(y";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1481.65446);
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 134.933732;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2963.30892), 2.608E19, 2.0, 0.0, Double.NaN, 269.867464}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1427.17264618);
      MathArrays.checkOrder(doubleArray0);
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-4409.309753793518);
      doubleArray0[1] = 3385.7612445;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 3.141592653589793;
      doubleArray0[4] = 1362.36318466;
      doubleArray0[5] = 3404.07;
      doubleArray0[6] = 1605.0;
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-4409.309753793518), 3385.7612445, (-1.0), 3.141592653589793, 1362.36318466, 3404.07, 1605.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      MathArrays.linearCombination(1.0, (-2.0), (-4042.48689084692), 1854.373017578872);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-2.0);
      doubleArray1[5] = (-2.0);
      doubleArray1[6] = 1854.373017578872;
      MathArrays.linearCombination(doubleArray1, doubleArray1);
      int int0 = 0;
      int int1 = 0;
      int int2 = (-2035);
      int int3 = (-1662);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-2035));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, (-1667.4644595), (-1667.4644595), 0.0, 299.0);
      assertEquals(2780437.723695627, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1667.4644595);
      doubleArray0[2] = 2780437.723695627;
      doubleArray0[3] = 299.0;
      doubleArray0[4] = (-1667.4644595);
      doubleArray0[5] = 299.0;
      doubleArray0[6] = (-1667.4644595);
      doubleArray0[7] = (-1667.4644595);
      MathArrays.scaleInPlace((-1489.81737024), doubleArray0);
      assertArrayEquals(new double[] {-0.0, 2484217.5160209527, (-4.1423444176323104E9), (-445455.39370176), 2484217.5160209527, (-445455.39370176), 2484217.5160209527, 2484217.5160209527}, doubleArray0, 0.01);
  }
}
