/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:41:32 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.041666663879186654;
      doubleArray0[1] = 377.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 215.1048932;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-525.0);
      doubleArray0[6] = 377.0;
      doubleArray0[7] = 3.834E-20;
      doubleArray0[8] = 414063.556687928;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1.0));
      MathArrays.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.5707963267948966;
      doubleArray0[1] = 1.25;
      doubleArray0[2] = 4912.4;
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 1120.54483;
      doubleArray0[5] = 629.1367217;
      doubleArray0[6] = (-47.80074080284);
      doubleArray0[7] = 884.500496948565;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-102.7022284857495);
      doubleArray0[0] = (-102.7022284857495);
      double double1 = 0.01745329052209854;
      doubleArray0[1] = 0.01745329052209854;
      double double2 = 1.86285714285714278E18;
      doubleArray0[2] = 1.86285714285714278E18;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1699);
      double double3 = (-3754.1214402614);
      double[] doubleArray2 = MathArrays.scale((-3754.1214402614), doubleArray1);
      MathArrays.convolve(doubleArray2, doubleArray1);
      int int0 = 2418;
      MathArrays.copyOf(doubleArray2, int0);
      float[] floatArray0 = null;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = double2;
      doubleArray3[1] = double3;
      doubleArray3[2] = double0;
      doubleArray3[3] = double2;
      double double4 = 0.7316888570785522;
      doubleArray3[4] = double4;
      doubleArray3[5] = double1;
      doubleArray3[6] = (double) int0;
      doubleArray3[7] = double2;
      MathArrays.scale(double0, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 6.52E18;
      doubleArray0[1] = 4912.4;
      doubleArray0[2] = 1.5707963267948966;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 926.8;
      doubleArray0[5] = 1033.280184998213;
      doubleArray0[6] = 528.24;
      doubleArray0[7] = 4.503599627370496E15;
      doubleArray0[8] = 1.494140625;
      MathArrays.equals(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-3327);
      intArray0[1] = (-3363);
      intArray0[2] = 2992;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-296);
      intArray0[6] = 2;
      MathArrays.copyOf(intArray0, 9);
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double((-367.35928606578716));
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2141736750, 2141736750);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2177.7287858;
      doubleArray0[1] = (-808.6240718746288);
      doubleArray0[2] = 1356.77;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147482970);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MathArrays.linearCombination(3103.225440405979, 3103.225440405979, (-1144.80229813752), (-1144.80229813752), 3103.225440405979, (-1144.80229813752), 1.304E19, (-515.1));
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-2129);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2129));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 23;
      intArray0[1] = (-135);
      intArray0[2] = 2147016600;
      intArray0[3] = (-2663);
      intArray0[4] = 41;
      intArray0[5] = (-1);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.distance(doubleArray1, doubleArray1);
      int[] intArray1 = new int[6];
      intArray1[0] = 23;
      intArray1[1] = 23;
      intArray1[2] = (-1);
      intArray1[3] = 2147016600;
      intArray1[4] = 0;
      intArray1[5] = (-2663);
      MathArrays.distance1(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1805.4;
      try { 
        MathArrays.convolve(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 178, 178);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 178, 178);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2485.3125F);
      floatArray0[2] = (-2236.4016F);
      floatArray0[3] = (-2928.51F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = Float.NEGATIVE_INFINITY;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 5023.7715958219105;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (-2.6033824355191673E-8);
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) Float.NEGATIVE_INFINITY;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 1108.4367308927;
      doubleArray0[3] = 1675.7;
      doubleArray0[4] = 2.718281828459045;
      doubleArray0[5] = (-387.6612658);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 434.0;
      try { 
        MathArrays.normalizeArray(doubleArray0, 1108.4367308927);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3196.5;
      doubleArray0[2] = 2138.8418912;
      doubleArray0[3] = 5107.3037;
      doubleArray0[4] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      double double0 = 356.8077880627253;
      MathArrays.linearCombination(0.0, 0.0, 0.0, 14.10141944885, 0.0, 356.8077880627253);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1994;
      intArray0[1] = 2146081896;
      intArray0[2] = 867;
      intArray0[3] = 2145564538;
      intArray0[4] = (-1);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2859.21629558726;
      doubleArray0[1] = 2675.1486627802074;
      doubleArray0[2] = 443.26629638671875;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 464.100325251;
      doubleArray0[1] = (-3352.8);
      doubleArray0[2] = (-242.724215165217);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-3352.8);
      MathArrays.normalizeArray(doubleArray0, 2437.0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 6.52E18;
      doubleArray0[1] = 95.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 635.8F;
      floatArray0[2] = (-3580.62F);
      floatArray0[3] = (-3038.594F);
      floatArray0[4] = (-1612.5709F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 3293.1335F;
      floatArray0[7] = (-807.681F);
      floatArray0[8] = (-1.4E-45F);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[2];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.linearCombination(Double.NaN, 2183.888013897, (-1.0), 0.14285714285714285);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      float[] floatArray1 = new float[3];
      floatArray1[0] = 1.0F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-6.032174644509064E-23);
      doubleArray0[3] = 1579.29704;
      doubleArray0[4] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.safeNorm(doubleArray1);
      try { 
        MathArrays.normalizeArray(doubleArray1, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.linearCombination(1319.89334757206, (double) 0, (double) 0, 1.0371567043555936, 0.0, 1.304E19, 1.304E19, 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.0371567043555936;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1.0371567043555936;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 5238.8211453459;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = (double) 0;
      MathArrays.convolve(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float[] floatArray0 = new float[1];
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[0];
      MathArrays.distance(intArray0, intArray1);
      MathArrays.copyOf(intArray1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      long[] longArray0 = new long[4];
      MathArrays.checkNonNegative(longArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1588.7F);
      floatArray0[2] = (-2332.5125F);
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      double double0 = 2878148.3285554964;
      doubleArray0[1] = 2878148.3285554964;
      double double1 = (-1020.241206);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 517.94146287;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 1331.1;
      doubleArray0[2] = 1932.59777448928;
      doubleArray0[3] = 2.356194490192345;
      doubleArray0[4] = 1502.3825536523048;
      doubleArray0[5] = Double.NaN;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1874L;
      Double double0 = new Double(1.44888888888888883E18);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.44888888888888883E18;
      doubleArray0[1] = 1.44888888888888883E18;
      doubleArray0[2] = (double) 1874L;
      doubleArray0[3] = (double) 1874L;
      doubleArray0[4] = (double) 1874L;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 1874L;
      MathArrays.checkPositive(doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-2905);
      intArray0[2] = 0;
      intArray0[3] = 1796;
      intArray0[4] = 211;
      MathArrays.copyOf(intArray0, 0);
      MathArrays.linearCombination(Double.NaN, (double) 1874L, 1874.0, 473.407, 1.44888888888888883E18, 796.756517864503);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 7496.0;
      MathArrays.linearCombination((-1687.334246291288), 683444.1222731583, 7496.0, 271.0);
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-444.82F);
      floatArray0[3] = (-444.82F);
      floatArray0[4] = (-444.82F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-444.82F);
      floatArray0[7] = (-444.82F);
      float[] floatArray1 = new float[7];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-444.82F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      MathArrays.equals(floatArray0, floatArray1);
      MathArrays.linearCombination((double) 0.0F, (double) (-444.82F), (double) 0.0F, (-1076.2479), (-3448.5936), 1.304E19);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0129027912496858E-9);
      doubleArray0[1] = 365.2;
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1687.334246291288);
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 0.9985313415527344;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 1.5707963267948966;
      doubleArray0[5] = 481.89926655964;
      doubleArray0[6] = 81.4791793797353;
      doubleArray0[7] = (-2705.474698);
      doubleArray0[8] = (-1817.5363004514522);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray1 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 6;
      intArray0[1] = (-2147483242);
      intArray0[2] = 146;
      intArray0[3] = 146;
      intArray0[4] = 2;
      intArray0[5] = 134217729;
      intArray0[6] = (-506);
      intArray0[7] = 2140632554;
      intArray0[8] = 2142636055;
      int[] intArray1 = new int[2];
      intArray1[0] = 2;
      intArray1[1] = 2140632554;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-312.451240447023);
      doubleArray0[1] = (-312.451240447023);
      doubleArray0[2] = 3.3995014105163057E38;
      doubleArray0[3] = 3.3995014105163057E38;
      doubleArray0[4] = 2067.0;
      doubleArray0[5] = (-1450.073820292952);
      doubleArray0[6] = 1.86285714285714278E18;
      doubleArray0[7] = (-1.0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-215.5114234);
      doubleArray1[1] = (-215.5114234);
      doubleArray1[2] = 2067.0;
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -215.511 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1487.251410627);
      doubleArray0[1] = 0.4794255495071411;
      doubleArray0[2] = 1.4699556E-39;
      doubleArray0[3] = 2.608E18;
      doubleArray0[4] = (-0.16624879837036133);
      doubleArray0[5] = (-0.05417713522911072);
      doubleArray0[6] = 241.01551;
      doubleArray0[7] = 735.99687920445;
      doubleArray0[8] = 727.3226325703;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.linearCombination((-0.05417713522911072), 2273.5545172686, (-0.05417713522911072), (double) 0.0F, (-0.05417713522911072), 3.834E-20);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-312.451240447023);
      doubleArray0[1] = (-601.04);
      doubleArray0[2] = 3.3995014105163057E38;
      doubleArray0[3] = 1152.94;
      doubleArray0[4] = 2067.0;
      doubleArray0[5] = (-1450.073820292952);
      doubleArray0[6] = 1.86285714285714278E18;
      doubleArray0[7] = (-1.0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.scaleInPlace((-215.5114234), doubleArray0);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 7496.0;
      doubleArray0[1] = (-352.8399961243097);
      doubleArray0[2] = (-348.48295);
      doubleArray0[3] = 916.65837;
      doubleArray0[4] = (-1502.2389745);
      doubleArray0[5] = 4.249376763145383E38;
      doubleArray0[6] = Double.NaN;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "$VALUES";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[4] = "";
      stringArray0[5] = "iYqag";
      stringArray0[6] = "Os$]vj";
      stringArray0[7] = "[Mf1xMV9yv~gi";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-352.8399961243097);
      doubleArray1[1] = (-348.48295);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 9.2188684372274053E18;
      doubleArray0[1] = 9.2188684372274053E18;
      doubleArray0[2] = 9.2188684372274053E18;
      doubleArray0[3] = 9.2188684372274053E18;
      doubleArray0[4] = 9.2188684372274053E18;
      doubleArray0[5] = (-2564.42133);
      doubleArray0[6] = 9.2188684372274053E18;
      doubleArray0[7] = 9.2188684372274053E18;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray1);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-2564.42133);
      MathArrays.equals(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.scaleInPlace(396.4, doubleArray0);
      float[] floatArray0 = new float[0];
      MathArrays.equals((float[]) null, floatArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.scaleInPlace((-190.25648271312), doubleArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      float[] floatArray1 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      MathArrays.scaleInPlace(1868973.3796264962, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-113));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 2146295945;
      intArray0[0] = 2146295945;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      MathArrays.OrderDirection.values();
      MathArrays.distance1(intArray1, intArray1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2146295945;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2146295945;
      doubleArray0[4] = (double) 2146295945;
      doubleArray0[5] = (double) 2146295945;
      doubleArray0[6] = 639.5915230720002;
      doubleArray0[7] = (double) 2146295945;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray1, doubleArray0);
      MathArrays.scaleInPlace((-3185.9525078984016), doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 2146295945, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.linearCombination(0.041666666666666664, 0.041666666666666664, (-549.33692609582), 401.9511, 2.17333333333333325E18, 0.0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1089);
      intArray0[1] = 216;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 216;
      floatArray0[3] = (float) (-1089);
      MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1089);
      doubleArray0[1] = (double) 216;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 216.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (-1089.0F);
      doubleArray0[7] = (double) (-1089);
      doubleArray0[8] = (double) (-1089);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (-1817.5363004514522);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1817.5363004514522));
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      MathArrays.convolve(doubleArray2, doubleArray1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1330.0155F);
      floatArray0[1] = (-81.75F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-273.531F);
      floatArray0[4] = (-3347.8F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1773.3F;
      MathArrays.equals(floatArray0, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-779.7207799575);
      doubleArray0[1] = 2133.6277;
      doubleArray0[2] = 1700.954946995114;
      doubleArray0[3] = (-832.4);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 6.123233995736766E-17;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 2133.6277;
      doubleArray1[1] = 2133.6277;
      doubleArray1[2] = 3303438.2034587516;
      doubleArray1[3] = 6.123233995736766E-17;
      doubleArray1[4] = (-779.7207799575);
      doubleArray1[5] = (-832.4);
      doubleArray1[6] = 1.0;
      doubleArray1[7] = (-779.7207799575);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1948.27130087657);
      doubleArray1[1] = (double) 9218868437227405312L;
      doubleArray1[2] = (double) 9218868437227405312L;
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = (double) 1531L;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 3735.771417;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 6.283185307179586);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      double[] doubleArray3 = MathArrays.scale((-1.0), doubleArray2);
      MathArrays.distance(doubleArray1, doubleArray0);
      MathArrays.linearCombination(doubleArray3, doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1817.5363004514522);
      doubleArray0[1] = (-1817.5363004514522);
      doubleArray0[2] = (-1817.5363004514522);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-191.4433832731721);
      doubleArray1[1] = (-1817.5363004514522);
      doubleArray1[2] = (double) 134217729;
      doubleArray1[3] = (-1817.5363004514522);
      doubleArray1[4] = (double) 134217729;
      MathArrays.equals(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 134217729;
      doubleArray2[1] = (-1817.5363004514522);
      doubleArray2[2] = (double) 134217729;
      doubleArray2[3] = (-191.4433832731721);
      doubleArray2[4] = (-1817.5363004514522);
      doubleArray2[5] = (-1817.5363004514522);
      doubleArray2[6] = (-1817.5363004514522);
      doubleArray2[7] = (-191.4433832731721);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[6];
      longArray0[0] = 9218868437227405312L;
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.copyOf(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[][] doubleArray2 = new double[5][2];
      doubleArray2[0] = doubleArray1;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6by)=";
      stringArray0[1] = "6by)=";
      stringArray0[2] = "6by)=";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      MathArrays.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathArrays.linearCombination(680.5, (-2085.0), (-76.69017), 0.0, (-2085.0), 0.0, 680.5, 35.38244020339558);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, (-1.0), 14.101419448852539, 0.0, 356.8077880627253);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 140;
      floatArray0[1] = (float) 140;
      floatArray0[2] = (float) 140;
      floatArray0[3] = (float) 140;
      floatArray0[4] = (float) 140;
      floatArray0[5] = (float) 140;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 140;
      doubleArray0[1] = 0.9166666666666666;
      doubleArray0[2] = (double) 140.0F;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 140.0F;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = ";U/";
      stringArray0[4] = "FeHWTE/HmCp2Gg@|ds8";
      stringArray0[5] = "";
      stringArray0[6] = "~3f}pn-D+p";
      stringArray0[7] = "X9";
      stringArray0[8] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]u-";
      stringArray0[1] = "i2YCf*NXB XTXjS*q";
      stringArray0[1] = "]u-";
      stringArray0[3] = "i2YCf*NXB XTXjS*q";
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 85);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1817.5363004514522);
      doubleArray0[1] = 742.432;
      int[] intArray0 = new int[5];
      intArray0[0] = 296;
      intArray0[1] = (-164);
      intArray0[2] = (-2525);
      intArray0[3] = (-2146578560);
      intArray0[4] = 1;
      int[] intArray1 = new int[5];
      intArray1[0] = (-164);
      intArray1[1] = (-2525);
      intArray1[2] = (-2525);
      intArray1[3] = (-2146578560);
      intArray1[4] = (-164);
      MathArrays.distanceInf(intArray0, intArray1);
      MathArrays.distance(intArray0, intArray1);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2361;
      doubleArray1[1] = (double) (-2525);
      doubleArray1[2] = (double) (-2146578560);
      doubleArray1[3] = 742.432;
      doubleArray1[4] = (double) (-164);
      doubleArray1[5] = (-1817.5363004514522);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      MathArrays.equals(doubleArray0, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1367.104012;
      doubleArray0[0] = (-1004.577);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      MathArrays.equals((double[]) null, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer(1673);
      Integer integer1 = new Integer(1213);
      Integer integer2 = new Integer(805);
      Integer integer3 = new Integer(1213);
      Integer integer4 = new Integer(1673);
      Integer integer5 = new Integer(1673);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer4;
      integerArray0[1] = integer4;
      Integer integer6 = new Integer((-947));
      integerArray0[2] = integer6;
      integerArray0[3] = integer0;
      integerArray0[4] = integer2;
      integerArray0[5] = integer5;
      integerArray0[6] = integer2;
      integerArray0[7] = integer4;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1367.104012;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1367.104012;
      doubleArray1[3] = (-333.0);
      doubleArray1[4] = (-1004.577);
      MathArrays.linearCombination(doubleArray1, doubleArray1);
      long[][] longArray0 = new long[3][9];
      long[] longArray1 = new long[6];
      longArray1[0] = 529L;
      longArray1[1] = (-3491L);
      longArray1[2] = 4095L;
      longArray1[3] = (-2350L);
      longArray1[4] = 0L;
      longArray1[5] = 168L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = (-3491L);
      longArray3[1] = 529L;
      longArray3[2] = (-2350L);
      longArray3[3] = 4870L;
      longArray3[4] = 4095L;
      longArray3[5] = (-3491L);
      longArray3[6] = 0L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = new Integer(140);
      Integer integer1 = new Integer(134217729);
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      MathArrays.equals((double[]) null, (double[]) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = (double) 134217729;
      doubleArray0[2] = (double) 140;
      doubleArray0[3] = (double) 140;
      doubleArray0[1] = (double) 140;
      doubleArray0[5] = (double) 134217729;
      doubleArray0[6] = (double) 140;
      doubleArray0[7] = (double) 134217729;
      doubleArray0[8] = (double) 140;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(140.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = 0.0;
      double double1 = (-3.141592653589793);
      double double2 = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][0];
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 9.2188684372274053E18;
      MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 9.2188684372274053E18;
      doubleArray1[1] = 9.2188684372274053E18;
      doubleArray1[2] = (-4080.53546638914);
      doubleArray1[3] = 9.2188684372274053E18;
      doubleArray1[4] = 9.2188684372274053E18;
      doubleArray1[5] = (-4080.53546638914);
      doubleArray1[6] = 9.2188684372274053E18;
      doubleArray1[7] = (-4080.53546638914);
      doubleArray1[8] = (-4080.53546638914);
      MathArrays.scaleInPlace((-4080.53546638914), doubleArray1);
      MathArrays.checkPositive(doubleArray0);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 9.2188684372274053E18;
      doubleArray2[1] = (double) (-353);
      doubleArray2[2] = (double) 134217729;
      doubleArray2[3] = (double) (-353);
      doubleArray2[4] = (double) (-1);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1));
      integerArray0[1] = integer0;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-358.46);
      doubleArray0[1] = (double) 1673;
      doubleArray0[2] = (double) 1673;
      doubleArray0[3] = (double) 1673;
      doubleArray0[4] = (double) 1673;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1673;
      doubleArray1[1] = (-358.46);
      doubleArray1[2] = (double) 1673;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 872.0619648169478;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 1700;
      doubleArray1[1] = (double) 1700;
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.linearCombination(1.34217729E8, 3056.64527, 872.0619648169478, 872.0619648169478, (-1.0), 1.9987994582857286E-8, 0.01745329052209854, 0.3153223395347595);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1367.104012;
      doubleArray0[1] = (-1004.577);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1206.0F);
      floatArray0[1] = 1893.345F;
      MathArrays.equals(floatArray0, floatArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 511L;
      MathArrays.checkNonNegative(longArray0);
      long[][] longArray1 = new long[8][2];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 511L;
      doubleArray3[1] = (-3180.176378);
      doubleArray3[2] = (-1004.577);
      MathArrays.linearCombination((double) 511L, 1367.104012, 1367.104012, 511.0, (double) 511L, (double) 1893.345F);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1367.104012;
      doubleArray0[1] = (-1004.577);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      MathArrays.linearCombination((-2260.27303365), (-1004.577), (-1900.46476), (-952.999623), (-2260.27303365), 1367.104012);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 991732.1706114757;
      doubleArray2[1] = (-1900.46476);
      MathArrays.convolve(doubleArray0, doubleArray2);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 2421.762F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 2421.762F;
      floatArray1[3] = 2421.762F;
      floatArray1[4] = 2421.762F;
      floatArray1[5] = 2421.762F;
      floatArray1[6] = 2421.762F;
      floatArray1[7] = 2421.762F;
      floatArray1[8] = 2421.762F;
      MathArrays.equals(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1367.104012;
      doubleArray0[1] = (-1004.577);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.equals((float[]) null, (float[]) null);
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 511L;
      MathArrays.checkNonNegative(longArray0);
      long[][] longArray1 = new long[0][8];
      MathArrays.checkRectangular(longArray1);
      double[] doubleArray2 = new double[0];
      MathArrays.checkPositive(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      MathArrays.convolve(doubleArray0, doubleArray0);
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 511L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.linearCombination(4193.83926398253, 4193.83926398253, (double) 0L, 525.1, 1.7827257129423813E-8, 4193.263686532732, (double) 0L, (-4075.0));
      Integer[] integerArray0 = new Integer[5];
      int int0 = 24;
      Integer integer0 = new Integer(24);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2490));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(24);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(21);
      integerArray0[4] = integer4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1852628642), (int) integerArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[6];
      longArray0[0] = 9218868437227405312L;
      Double double0 = new Double(9218868437227405312L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 9218868437227405312L;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (double) 9218868437227405312L;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) 0L;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, 7733.0, 273.0, 3.834E-20, 1020.267606939353, (-828.592364198), 0.0, 0.0);
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[2];
      MathArrays.linearCombination(1.9987994582857286E-8, 0.01745329052209854, (double) 1673, (-1146.01276009798), 1.9987994582857286E-8, 118.89, (double) 0, 1.9987994582857286E-8);
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (long) 1673;
      longArray2[1] = (long) 1673;
      longArray2[2] = (long) 1673;
      longArray2[3] = (long) 1673;
      longArray2[4] = (long) 1673;
      longArray2[5] = (long) 1673;
      longArray2[6] = (long) 1673;
      longArray2[7] = (long) 1673;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = (long) 1673;
      longArray3[1] = 1L;
      longArray3[2] = (long) 1673;
      longArray3[3] = (long) 1673;
      longArray3[4] = (-959L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = (-893L);
      longArray4[1] = (long) 1673;
      longArray4[2] = (long) 1673;
      longArray4[3] = (long) 1673;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      Double double0 = new Double(409.89);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 409.89;
      doubleArray0[2] = 409.89;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 409.89;
      doubleArray0[6] = 409.89;
      doubleArray0[7] = 409.89;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-123.4683284531917);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 409.89;
      doubleArray1[3] = 840049.0604999999;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 840049.0604999999;
      doubleArray2[1] = (-123.4683284531917);
      doubleArray2[2] = 840049.0604999999;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1.2599210498948732;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      int[] intArray1 = new int[4];
      intArray1[0] = 134217729;
      intArray1[1] = (-1);
      intArray1[2] = (-1);
      intArray1[3] = (-1);
      MathArrays.distance(intArray1, intArray1);
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 6.283185307179586;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 6.283185307179586;
      MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 6.283185307179586;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      MathArrays.scale(0.0, doubleArray0);
      MathArrays.distance(doubleArray2, doubleArray0);
      MathArrays.linearCombination(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1367.104012;
      doubleArray0[1] = (-1004.577);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.linearCombination(1671.186952884826, (-115.244611814), (-2141.73635711128), 1539.449106172355, 1.9868161777724352E-8, 1.9868161777724352E-8);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2421.762F;
      floatArray0[1] = (float) 2102;
      floatArray0[2] = 2421.762F;
      float[] floatArray1 = new float[3];
      floatArray1[0] = 2421.762F;
      floatArray1[1] = 2421.762F;
      floatArray1[2] = 0.0F;
      MathArrays.equals(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[][] longArray0 = new long[1][3];
      long[] longArray1 = new long[6];
      longArray1[0] = 9218868437227405312L;
      longArray1[2] = 2703L;
      longArray1[4] = 1531L;
      longArray1[5] = 1865L;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-3422);
      intArray0[1] = (-848);
      intArray0[2] = 2882;
      int[] intArray1 = new int[4];
      intArray1[0] = (-3422);
      intArray1[1] = (-3422);
      intArray1[2] = 2890;
      intArray1[3] = (-848);
      MathArrays.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1367.104012;
      doubleArray0[1] = (-1004.577);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 221;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 221;
      intArray0[7] = 221;
      intArray0[8] = 0;
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 429;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      double double0 = 1580.1216375852252;
      // Undeclared exception!
      try { 
        MathArrays.scale(1580.1216375852252, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1817.5363004514522);
      doubleArray0[1] = 742.432;
      doubleArray0[2] = 742.432;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1817.5363004514522));
      MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      MathArrays.normalizeArray(doubleArray0, 2.800552834259E-8);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = (-1);
      Integer integer0 = Integer.valueOf((-1));
      integerArray0[0] = integer0;
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = 4294967295L;
      longArray0[2] = 2703L;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) int0;
      longArray0[6] = 1843L;
      longArray0[7] = 1843L;
      longArray0[8] = (long) (-1);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[6];
      longArray0[0] = 9218868437227405312L;
      Double double0 = new Double(9218868437227405312L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-123.4683284531917);
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 9218868437227405312L;
      doubleArray1[1] = (double) 9218868437227405312L;
      doubleArray1[2] = (-123.4683284531917);
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = (double) 9218868437227405312L;
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1367.104012;
      doubleArray0[1] = (-1004.577);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      MathArrays.convolve(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1206.0F);
      floatArray0[1] = 1893.345F;
      MathArrays.equals(floatArray0, floatArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 511L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      long[][] longArray1 = new long[8][2];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      MathArrays.checkRectangular(longArray1);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,004.577 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 511L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      MathArrays.checkNonNegative(longArray0);
      Double double0 = new Double(3.834E-20);
      double[] doubleArray2 = new double[17];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 0L;
      doubleArray2[2] = (double) 0L;
      doubleArray2[3] = (double) 1893.345F;
      doubleArray2[4] = (double) 0L;
      doubleArray2[5] = 872.0619648169478;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, false);
      double[] doubleArray3 = new double[1];
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.0;
      long[] longArray0 = new long[7];
      longArray0[0] = (-1L);
      longArray0[1] = 3126L;
      longArray0[2] = (-397L);
      longArray0[3] = (-2472L);
      longArray0[3] = (-2096L);
      longArray0[5] = (-5940L);
      longArray0[6] = (-1987L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(2143289344);
      Integer integer1 = new Integer(2143289344);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer1);
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>(pair0);
      Field<Pair<Object, Integer>> field0 = (Field<Pair<Object, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      int int0 = (-212);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 157.787F;
      floatArray0[1] = (float) (-212);
      floatArray0[2] = 157.787F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 157.787F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-212);
      longArray0[1] = 2845L;
      longArray0[2] = 1843L;
      longArray0[3] = (-1127L);
      longArray0[4] = (long) (-212);
      longArray0[5] = 1843L;
      longArray0[6] = 1843L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -212 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1367.104012;
      doubleArray0[1] = (-1004.577);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      Integer integer0 = new Integer((-706));
      Integer integer1 = new Integer((-2098));
      Integer integer2 = new Integer(576);
      Integer integer3 = new Integer((-2098));
      Integer integer4 = new Integer(576);
      Integer integer5 = new Integer((-2098));
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer5;
      integerArray0[1] = integer3;
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, false);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,004.577 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1673;
      intArray0[1] = (-333);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 1673;
      integerArray0[2] = (Integer) 1673;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1673;
      intArray0[1] = (-333);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.linearCombination(1.0, 2812.6331573067, 1.4699556E-39, 2.092571258544922, 1347.9, 1347.9, 1.4699556E-39, 1.4699556E-39);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 16;
      double double0 = (-1900.46476);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1900.46476);
      doubleArray0[1] = (-1900.46476);
      doubleArray0[2] = (double) 16;
      doubleArray0[3] = (double) 16;
      doubleArray0[4] = (double) 16;
      doubleArray0[5] = (double) 16;
      doubleArray0[6] = (-1900.46476);
      doubleArray0[7] = (double) 16;
      doubleArray0[8] = (-1900.46476);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 5 and 6 are not increasing (16 > -1,900.465)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      try { 
        MathArrays.normalizeArray(doubleArray0, 742.432);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 891.9555394483244;
      doubleArray0[1] = (-1715.865858);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-1687.0);
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-1995.686776558311);
      double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace((-2856.0), doubleArray1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1165.8);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 891.9555394483244;
      doubleArray0[3] = 1.375;
      doubleArray0[4] = (-2507.444896478472);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long[] longArray0 = new long[0];
      Double double0 = new Double(1L);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (-682.7455F);
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 1L;
      floatArray0[1] = (float) 1L;
      MathArrays.equals(floatArray0, floatArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 2507);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathArrays.linearCombination(3103.225440405979, 3103.225440405979, (-1144.80229813752), (-1144.80229813752), 3103.225440405979, (-1144.80229813752), 1.304E19, (-515.1));
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-2119);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2119));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, (-419.3815906));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-358.46);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-419.3815906);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-706));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(805);
      integerArray0[2] = integer2;
      int int0 = (-24);
      Integer integer3 = new Integer((-24));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-947));
      integerArray0[5] = integer5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1673;
      intArray0[1] = (-333);
      MathArrays.distance(intArray0, intArray0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1367.104012;
      doubleArray0[1] = (-1004.577);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.convolve(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1206.0F);
      floatArray0[1] = 1893.345F;
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 511L;
      MathArrays.checkNonNegative(longArray0);
      double double0 = new Double(1367.104012);
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      MathArrays.checkNonNegative(longArray0);
      Double double0 = new Double(0.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Continued fraction convergents diverged to +/- infinity for value {0}";
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.5707963267948966);
      double[] doubleArray1 = MathArrays.scale((-1.5707963267948966), doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-1090);
      intArray0[2] = 0;
      intArray0[3] = (-1090);
      intArray0[4] = 1544;
      intArray0[5] = 0;
      intArray0[6] = (-459);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = 1580.1216375852252;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 2.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, (-419.3815906));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2102;
      floatArray0[1] = (float) 2102;
      floatArray0[2] = (float) 2102;
      floatArray0[3] = 2421.762F;
      floatArray0[4] = 2421.762F;
      MathArrays.equals(floatArray0, floatArray0);
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.linearCombination(3.834E-20, 0.0, 0.0, 0.5850973129272461, 1615.90177, (-3.141592653589793));
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1978.0;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1978.0;
      doubleArray2[1] = 1978.0;
      doubleArray2[2] = 1978.0;
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1367.104012;
      doubleArray0[1] = (-1004.577);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.linearCombination(1671.186952884826, (-115.244611814), (-2141.73635711128), 1539.449106172355, 1.9868161777724352E-8, 1.9868161777724352E-8);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      int int0 = 2102;
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 0.0;
      MathArrays.linearCombination((-621.645850936154), 0.0, (-2563.1714013841), 873.235849615, 0.0, 0.0, (-3094.591933829), 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1673;
      intArray0[1] = (-333);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 1673;
      integerArray0[1] = (Integer) (-333);
      integerArray0[2] = (Integer) 1673;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, true);
      MathArrays.linearCombination(0.0, (double) 1673, 872.0619648169478, 2657.720153, (-1484.8909007968543), (-1832.39));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1673;
      intArray0[1] = 24;
      intArray0[2] = (-333);
      intArray0[3] = 1673;
      intArray0[4] = (-333);
      MathArrays.distance(intArray0, intArray0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "6by)=";
      stringArray0[1] = "6by)=";
      stringArray0[2] = "6by)=";
      stringArray0[3] = "6by)=";
      stringArray0[4] = "6by)=";
      stringArray0[5] = "6by)=";
      stringArray0[6] = "6by)=";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[8];
      intArray0[0] = 1702;
      intArray0[1] = 2570;
      intArray0[2] = 2570;
      intArray0[3] = 1080;
      intArray0[4] = 1393;
      intArray0[5] = 1702;
      intArray0[6] = 1702;
      intArray0[7] = 1702;
      MathArrays.copyOf(intArray0, 1702);
      MathArrays.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "6by)=";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.0E-5;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.0E-5);
      double[][] doubleArray2 = new double[7][5];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 548.0F;
      floatArray0[1] = 548.0F;
      floatArray0[2] = 548.0F;
      floatArray0[3] = 548.0F;
      floatArray0[4] = 548.0F;
      floatArray0[5] = 548.0F;
      floatArray0[6] = 548.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 548.0F;
      doubleArray3[1] = 1.5;
      MathArrays.distance(doubleArray3, doubleArray0);
      int[] intArray0 = new int[0];
      MathArrays.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-448.673902644);
      doubleArray0[1] = 4481.513;
      doubleArray0[2] = (-2272.51282);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-3.141592653589793);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 6.283185307179586;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      MathArrays.scale(0.0, doubleArray0);
      MathArrays.distance(doubleArray2, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-733);
      int int0 = 30;
      intArray0[1] = 30;
      intArray0[2] = 21;
      intArray0[3] = 1295;
      intArray0[4] = 156;
      intArray0[5] = 23;
      intArray0[6] = 232;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-733));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Integer>> field0 = (Field<Pair<Object, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 132, (-2525));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2525);
      doubleArray0[1] = (double) (-2525);
      doubleArray0[2] = (double) (-212);
      doubleArray0[3] = (double) (-212);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, (-212));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1978.0;
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 54.3;
      doubleArray0[1] = 817.7619648169479;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "NEGATIVE_BRIGHTNESS_EXPONENT";
      stringArray0[2] = "6by)=";
      stringArray0[3] = "UL0h;Vq'p \"%;V1up";
      stringArray0[4] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[6];
      intArray0[0] = 287;
      intArray0[1] = 2570;
      MathArrays.linearCombination((-2993.186771), (-1019.87928628544), (-0.0013888888689039883), (double) 1848, 0.058823529411764705, Double.NEGATIVE_INFINITY, (double) 287, (double) 2570);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = Integer.valueOf((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1327);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(225);
      integerArray0[3] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 1602);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-962.947767);
      doubleArray0[2] = 2645.288;
      MathArrays.convolve(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1206.0F);
      MathArrays.equals(floatArray0, floatArray0);
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 511L;
      longArray0[3] = 511L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 511L;
      longArray0[7] = 511L;
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 134217729;
      intArray0[1] = 10000;
      intArray0[2] = 0;
      intArray0[3] = 2903;
      intArray0[4] = 4830;
      intArray0[7] = 1010;
      intArray0[6] = 134217729;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1367.104012;
      doubleArray0[1] = (-1004.577);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      MathArrays.convolve(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1206.0F);
      floatArray0[1] = 1893.345F;
      MathArrays.equals(floatArray0, floatArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 511L;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.linearCombination(4375.5924083158, (double) 0L, 1675.7, (double) 1893.345F);
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,004.577 <= 1,367.104)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[] longArray0 = new long[7];
      long long0 = 1L;
      longArray0[0] = 1L;
      long long1 = 1577L;
      longArray0[1] = 1577L;
      long long2 = 1L;
      longArray0[2] = 1L;
      long long3 = 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 4549.63;
      doubleArray0[0] = 4549.63;
      doubleArray0[1] = (-962.947767);
      doubleArray0[2] = 2645.288;
      int[] intArray0 = new int[4];
      intArray0[0] = (-333);
      intArray0[1] = (-333);
      intArray0[2] = (-333);
      intArray0[3] = (-333);
      MathArrays.distance(intArray0, intArray0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -962.948 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2657.720153;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1519.26);
      doubleArray1[3] = (-110.6052);
      doubleArray1[4] = 537.0;
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-2118.6684957);
      doubleArray2[1] = 1580.1216375852252;
      doubleArray2[2] = (-1519.26);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 537.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 1580.1216375852252;
      doubleArray2[7] = (-110.6052);
      doubleArray2[8] = 537.0;
      MathArrays.scale((-262.1631235), doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      double[] doubleArray3 = new double[0];
      MathArrays.scale((-262.1631235), doubleArray3);
      MathArrays.normalizeArray(doubleArray2, 891.9555394483244);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "6by)=";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[1];
      intArray0[0] = 1702;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2570);
      int[] intArray2 = new int[5];
      intArray2[0] = 1702;
      intArray2[1] = (-813);
      intArray2[2] = 2570;
      intArray2[3] = 2570;
      intArray2[4] = 346;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[][] longArray0 = new long[0][1];
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[][] longArray0 = new long[1][3];
      long[] longArray1 = new long[6];
      longArray1[0] = 9218868437227405312L;
      longArray1[1] = 0L;
      longArray1[2] = 2703L;
      longArray1[3] = 1531L;
      longArray1[4] = 1531L;
      longArray1[5] = 1865L;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Integer>> field0 = (Field<Pair<Object, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-212);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-212), (-212));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3.834E-20;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 500.65363F;
      floatArray0[1] = (-6.6F);
      floatArray0[2] = (-1.0F);
      float[] floatArray1 = new float[9];
      floatArray1[0] = (-6.6F);
      floatArray1[1] = (-1.0F);
      floatArray1[2] = (-6.6F);
      floatArray1[3] = (-6.6F);
      floatArray1[4] = 500.65363F;
      floatArray1[5] = (-1.0F);
      floatArray1[6] = 500.65363F;
      floatArray1[7] = (-1.0F);
      floatArray1[8] = (-6.6F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = 606.69645;
      MathArrays.linearCombination(0.0, 1.34217729E8, (-2036.00316169498), 1.34217729E8, (-1787.6011104104336), 606.69645, (-1787.6011104104336), 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 606.69645;
      doubleArray0[1] = 606.69645;
      doubleArray0[2] = (-2.732688051307677E11);
      doubleArray0[3] = (-2036.00316169498);
      doubleArray0[4] = (-2.732688051307677E11);
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2.0;
      MathArrays.scale(2.0, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-607);
      intArray0[1] = 0;
      intArray0[2] = (-897);
      intArray0[3] = (-459);
      intArray0[4] = 0;
      intArray0[5] = 1544;
      MathArrays.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1673;
      intArray0[1] = (-333);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 1673;
      integerArray0[1] = (Integer) (-333);
      integerArray0[2] = (Integer) 1673;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1900.0238544);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2414.15);
      doubleArray0[4] = (-395.479894302);
      double[][] doubleArray1 = new double[8][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      double double0 = 1580.1216375852252;
      // Undeclared exception!
      try { 
        MathArrays.scale(1580.1216375852252, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MathArrays.linearCombination(3.834E-20, 0.0, 0.0, 0.5850973129272461, 1615.90177, (-3.141592653589793));
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MathArrays.linearCombination((-2592.47407687), 608.88, 493.950427807, 0.0);
      int[] intArray0 = new int[7];
      intArray0[0] = 165;
      intArray0[1] = 0;
      intArray0[2] = 3068;
      intArray0[3] = (-3452);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 273;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 273;
      doubleArray0[3] = (-2015.38282);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (-1697.0);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = -0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 54.3;
      doubleArray0[1] = 817.7619648169479;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "NEGATIVE_BRIGHTNESS_EXPONENT";
      stringArray0[2] = "6by)=";
      stringArray0[3] = "UL0h;Vq'p \"%;V1up";
      stringArray0[4] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[6];
      intArray0[0] = 287;
      intArray0[1] = 2570;
      intArray0[2] = 1848;
      intArray0[3] = 3014;
      intArray0[4] = (-711);
      intArray0[5] = 1702;
      MathArrays.copyOf(intArray0, 2570);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1978.0;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 234.62;
      doubleArray2[4] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, (-419.3815906));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-358.46);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-419.3815906);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4312.886601;
      doubleArray0[1] = (-1852.16909051);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 20.0;
      doubleArray0[5] = 20.0;
      doubleArray0[6] = (-1386.615642447963);
      doubleArray0[7] = 358.0;
      doubleArray0[8] = (-477.7925279);
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1386.615642447963);
      doubleArray2[1] = (-477.7925279);
      doubleArray2[2] = 4312.886601;
      doubleArray2[3] = 20.0;
      doubleArray2[4] = (-477.7925279);
      doubleArray2[5] = 358.0;
      doubleArray1[5] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1675.7;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3.834E-20;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,675.7 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4549.63;
      doubleArray0[1] = (-962.947767);
      doubleArray0[2] = 2645.288;
      doubleArray0[3] = (-98.778257802);
      doubleArray0[4] = (-2722.94);
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = (-4158.1045340869);
      doubleArray0[7] = 1560.26897458;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 221;
      intArray0[1] = 0;
      intArray0[2] = 0;
      MathArrays.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 1661.91046161;
      MathArrays.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MathArrays.linearCombination(2.0, 2.0, (-3443.7), (-3059.21157298594));
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 2.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.scale(0.902267575263977, doubleArray0);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-372.6770637019);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 309.283;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-372.677 < 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 154;
      intArray0[5] = (-494);
      intArray0[6] = (-920);
      MathArrays.copyOf(intArray0, 1677);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      double double0 = 1636.07899797;
      doubleArray0[1] = 1636.07899797;
      doubleArray0[2] = (-1111.05);
      doubleArray0[3] = 3.141592653589793;
      double double1 = 123.9701697;
      doubleArray0[4] = 123.9701697;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 20.0;
      doubleArray1[1] = -0.0;
      doubleArray1[2] = 2.0;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 301.961735353;
      doubleArray1[6] = 2938.8854717612207;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 134217729;
      intArray0[1] = 10000;
      intArray0[2] = 0;
      intArray0[3] = 2903;
      intArray0[4] = 4830;
      intArray0[5] = 1010;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      MathArrays.copyOf(intArray0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2903;
      doubleArray0[1] = (double) 4830;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2903);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.checkOrder(doubleArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 2903;
      longArray0[3] = (long) 2903;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 0.0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1715.0F;
      floatArray0[1] = (-3107.152F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = 157.515F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = 1843L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1843L;
      doubleArray0[3] = (double) 1843L;
      doubleArray0[4] = (double) 157.515F;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-3107.152F);
      doubleArray1[1] = (double) 1843L;
      doubleArray1[2] = (double) 157.515F;
      doubleArray1[3] = (double) 1715.0F;
      doubleArray1[4] = (double) 1.0F;
      doubleArray1[5] = (double) 1843L;
      doubleArray1[6] = (double) 1843L;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.0E-5;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.0E-5);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[7][5];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 3.834E-20;
      doubleArray3[1] = 3.834E-20;
      doubleArray3[2] = 3.834E-20;
      doubleArray3[3] = 1.0E-5;
      doubleArray3[4] = 1.0E-5;
      doubleArray3[5] = 0.0;
      doubleArray2[3] = doubleArray3;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-507.83);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-20.0);
      doubleArray0[3] = 1945.8890781881;
      doubleArray0[4] = (-1004.329168135846);
      doubleArray0[5] = (-2247.8844960750653);
      doubleArray0[6] = 709.938881732315;
      doubleArray0[7] = (-1125.8671855779148);
      doubleArray0[8] = 1307.732437634;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = (-3962);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-3962), (-3962));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Integer integer0 = new Integer(140);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<Object, Integer>>) null, 2445, 2445);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 16;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 16, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3081.1168154991);
      doubleArray0[1] = (-1.0);
      double double0 = (-3405.132716651104);
      doubleArray0[2] = (-3405.132716651104);
      double double1 = (-675.219852);
      doubleArray0[3] = (-675.219852);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-3405.132716651104);
      doubleArray3[1] = (-3405.132716651104);
      doubleArray3[2] = (-3081.1168154991);
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Continued fraction convergents diverged to +/- infinity for value {0}";
      stringArray0[1] = "";
      stringArray0[2] = "bmF";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.e
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 891.9555394483244;
      doubleArray0[1] = (-1715.865858);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-1687.0);
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-1995.686776558311);
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = (-222.6874474592);
      doubleArray0[8] = 2504.980535;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (891.956 >= -1,715.866)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long[][] longArray0 = new long[9][2];
      long[] longArray1 = new long[7];
      longArray1[0] = 1L;
      longArray1[1] = 1577L;
      longArray1[2] = 1L;
      longArray1[3] = 0L;
      longArray1[4] = 1969L;
      longArray1[5] = 1531L;
      longArray1[6] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = 1969L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = 1969L;
      longArray3[1] = 1L;
      longArray3[2] = 1531L;
      longArray3[3] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = 1L;
      longArray4[1] = 1L;
      longArray4[2] = 9218868437227405312L;
      longArray4[3] = 1969L;
      longArray4[4] = 1L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      longArray5[0] = 1531L;
      longArray5[1] = 1L;
      longArray5[2] = 0L;
      longArray5[3] = 1L;
      longArray5[4] = 1969L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[9];
      longArray6[0] = 1531L;
      longArray6[1] = 4310L;
      longArray6[2] = 9218868437227405312L;
      longArray6[3] = 3126L;
      longArray6[4] = 1531L;
      longArray6[5] = 9218868437227405312L;
      longArray6[6] = 1L;
      longArray6[7] = 1969L;
      longArray6[8] = 9218868437227405312L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      longArray0[6] = longArray7;
      long[] longArray8 = new long[8];
      longArray8[0] = 0L;
      longArray8[1] = 1969L;
      longArray8[2] = 1969L;
      longArray8[3] = 0L;
      longArray8[4] = 1577L;
      longArray8[5] = 1023L;
      longArray8[6] = 1577L;
      longArray8[7] = 0L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[8];
      longArray9[0] = 1531L;
      longArray9[1] = 1L;
      longArray9[2] = (-1L);
      longArray9[3] = 9218868437227405312L;
      longArray9[4] = 1L;
      longArray9[5] = 1531L;
      longArray9[6] = 0L;
      longArray9[7] = 0L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1311.8460019);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1600;
      intArray0[3] = 0;
      intArray0[4] = 2521;
      intArray0[5] = 3000;
      intArray0[6] = 178;
      intArray0[7] = (-2294);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, 1, 1600, 0, 2521, 3000, 178, (-2294)}, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = Integer.valueOf((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1327);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(225);
      integerArray0[3] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      double double0 = MathArrays.linearCombination((double) (-1), 3.834E-20, (double) integerArray0[3], (-817.601921), (-817.601921), (double) integerArray0[2], 0.0, 17.08450533541);
      assertEquals((-1268918.1813919998), double0, 0.01);
  }
}
