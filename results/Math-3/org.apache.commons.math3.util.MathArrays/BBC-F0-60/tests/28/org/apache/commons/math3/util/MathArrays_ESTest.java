/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 16:08:25 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.86285714285714278E18;
      doubleArray0[1] = 1.9699272335463627E-8;
      doubleArray0[2] = (-367.029380698354);
      doubleArray0[3] = (-748.2647);
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = (-2138.7707893);
      doubleArray0[6] = 2.17333333333333325E18;
      doubleArray0[7] = (-2364.376478379201);
      doubleArray0[8] = (-3656.1431);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(2.8624490410261724E18, double0, 0.01);
      assertArrayEquals(new double[] {1.86285714285714278E18, 1.9699272335463627E-8, (-367.029380698354), (-748.2647), 1.34217729E8, (-2138.7707893), 2.17333333333333325E18, (-2364.376478379201), (-3656.1431)}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.86285714285714278E18, 1.9699272335463627E-8, (-367.029380698354), (-748.2647), 1.34217729E8, (-2138.7707893), 2.17333333333333325E18, (-2364.376478379201), (-3656.1431)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.86285714285714278E18, 1.9699272335463627E-8, (-367.029380698354), (-748.2647), 1.34217729E8, (-2138.7707893), 2.17333333333333325E18, (-2364.376478379201), (-3656.1431)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.7257142857142856E18, 3.9398544670927255E-8, (-734.058761396708), (-1496.5294), 2.68435458E8, (-4277.5415786), 4.3466666666666665E18, (-4728.752956758402), (-7312.2862)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(869);
      assertNotNull(integer0);
      assertEquals(869, (int)integer0);
      
      Pair<Integer, String> pair0 = new Pair<Integer, String>(integer0, ">tOZrw1Z`");
      assertNotNull(pair0);
      
      Pair<Object, String> pair1 = new Pair<Object, String>(pair0);
      assertNotNull(pair1);
      
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3127;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3127.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9778129.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 3127, 3127);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-50.877F);
      floatArray0[1] = (-5902.7734F);
      floatArray0[2] = 3078.9592F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-325.4F);
      floatArray0[6] = 4842.0F;
      floatArray0[7] = (-266.4F);
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-5902.7734F);
      floatArray1[1] = 4430.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-50.877F), (-5902.7734F), 3078.9592F, 1.0F, 0.0F, (-325.4F), 4842.0F, (-266.4F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-5902.7734F), 4430.0F}, floatArray1, 0.01F);
      
      boolean boolean1 = MathArrays.equals(floatArray1, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray1.length);
      assertTrue(boolean1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-5902.7734F), 4430.0F}, floatArray1, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-266.4F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (-2472.602);
      doubleArray0[3] = (double) (-5902.7734F);
      doubleArray0[4] = (double) (-325.4F);
      doubleArray0[5] = (double) (-50.877F);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 3078.9592F;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-266.3999938964844), 0.0, (-2472.602), (-5902.7734375), (-325.3999938964844), (-50.87699890136719), 0.0, 3078.959228515625}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {70968.95674804691, 0.0, 6113760.650404, 3.484273425445557E7, 105885.15602783207, 2588.469017209718, 0.0, 9479989.930861533}, doubleArray1, 0.01);
      
      Object[] objectArray0 = MathArrays.buildArray(field0, 0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-325.4F);
      doubleArray2[1] = (double) (-5902.7734F);
      doubleArray2[2] = (double) (-266.4F);
      doubleArray2[3] = 2.0;
      doubleArray2[4] = (double) (-325.4F);
      doubleArray2[5] = (double) 0.0F;
      doubleArray2[6] = (double) (-5902.7734F);
      doubleArray2[7] = (double) 4842.0F;
      try { 
        MathArrays.checkOrder(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-325.4 >= -5,902.773)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1017.7569557);
      doubleArray0[1] = 2.17333333333333325E18;
      doubleArray0[2] = (-683.33);
      doubleArray0[3] = (-1006.4728378);
      doubleArray0[4] = 1.44888888888888883E18;
      doubleArray0[5] = 154.0916160397958;
      doubleArray0[6] = 1179.97;
      doubleArray0[7] = (-3071.3676433888);
      doubleArray0[8] = 2.0217439756338078E-10;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(2.6120215906694676E18, double0, 0.01);
      assertArrayEquals(new double[] {(-1017.7569557), 2.17333333333333325E18, (-683.33), (-1006.4728378), 1.44888888888888883E18, 154.0916160397958, 1179.97, (-3071.3676433888), 2.0217439756338078E-10}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1017.7569557), 2.17333333333333325E18, (-683.33), (-1006.4728378), 1.44888888888888883E18, 154.0916160397958, 1179.97, (-3071.3676433888), 2.0217439756338078E-10}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1335.8229;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 762.62793;
      doubleArray0[3] = 6.52E18;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 2053.6041507;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1.4579163213298629E19, double0, 0.01);
      assertArrayEquals(new double[] {1335.8229, 1.0, 762.62793, 6.52E18, 1.304E19, 2053.6041507}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1335.8229, 1.0, 762.62793, 6.52E18, 1.304E19, 2053.6041507}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 398.4;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {398.4}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2147482821;
      intArray0[1] = (-1114);
      intArray0[2] = 134217729;
      intArray0[3] = 2;
      intArray0[4] = 252;
      intArray0[5] = (-2986);
      intArray0[6] = (-1373);
      intArray0[7] = (-131);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 134217729;
      intArray1[1] = 2;
      intArray1[2] = (-1373);
      intArray1[3] = 2;
      intArray1[4] = 2;
      intArray1[5] = (-1373);
      intArray1[6] = 2;
      intArray1[7] = (-2986);
      intArray1[8] = 2147482821;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertEquals(2013265092, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2147482821, (-1114), 134217729, 2, 252, (-2986), (-1373), (-131)}, intArray0);
      assertArrayEquals(new int[] {134217729, 2, (-1373), 2, 2, (-1373), 2, (-2986), 2147482821}, intArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3988.6;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3988.6;
      doubleArray2[1] = 3988.6;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = 3988.6;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {3988.6, Double.POSITIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {3988.6, Double.POSITIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "C@@vSyd;3RZX1l<gh}";
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN, 1.0, Double.NaN}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-6827.453026);
      doubleArray0[1] = 3983.7861328827994;
      doubleArray0[2] = (-1474.0);
      doubleArray0[3] = (-4.9E-324);
      doubleArray0[4] = (-2167.87581185315);
      doubleArray0[5] = (-783.95346648);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(8364.903546844387, double0, 0.01);
      assertArrayEquals(new double[] {(-6827.453026), 3983.7861328827994, (-1474.0), (-4.9E-324), (-2167.87581185315), (-783.95346648)}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (3,983.786 >= -1,474)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1481.9;
      doubleArray0[1] = 752.53337183246;
      doubleArray0[2] = 781.49738027;
      doubleArray0[3] = (-2641.036);
      doubleArray0[4] = (-0.1428571423679182);
      doubleArray0[5] = 20.465002434066;
      doubleArray0[6] = 843.917451259;
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 885;
      intArray0[1] = 364;
      intArray0[2] = 202;
      intArray0[3] = 55;
      intArray0[4] = 18;
      int int0 = 8388607;
      intArray0[5] = 8388607;
      intArray0[6] = 14;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 8388607;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2876);
      intArray0[1] = (-1514);
      intArray0[2] = 259;
      intArray0[3] = (-3406);
      intArray0[4] = 9;
      intArray0[5] = (-3119);
      intArray0[6] = 2144810217;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-2876), (-1514), 259, (-3406), 9, (-3119), 2144810217}, intArray0);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-3406);
      intArray1[1] = 9;
      intArray1[2] = (-3119);
      intArray1[3] = (-4438);
      intArray1[4] = (-3119);
      intArray1[5] = 2144810217;
      intArray1[6] = (-2876);
      int int0 = MathArrays.distance1(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertEquals((-5331276), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2876), (-1514), 259, (-3406), 9, (-3119), 2144810217}, intArray0);
      assertArrayEquals(new int[] {(-3406), 9, (-3119), (-4438), (-3119), 2144810217, (-2876)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 316.9303345;
      doubleArray0[1] = 1.9699272335463627E-8;
      doubleArray0[2] = 181.796;
      doubleArray0[3] = (-45.51079557969265);
      doubleArray0[4] = 748.285453803334;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 727.3584;
      doubleArray0[7] = 1113.30476636924;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.375);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {316.9303345, 1.9699272335463627E-8, 181.796, (-45.51079557969265), 748.285453803334, Double.NaN, 727.3584, 1113.30476636924}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.14324644797097985, 8.903694227060974E-12, 0.08216831404420914, (-0.020570008930856514), 0.3382107096021139, Double.NaN, 0.32875208164037434, 0.5031924556642754}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {316.9303345, 1.9699272335463627E-8, 181.796, (-45.51079557969265), 748.285453803334, Double.NaN, 727.3584, 1113.30476636924}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.14324644797097985, 8.903694227060974E-12, 0.08216831404420914, (-0.020570008930856514), 0.3382107096021139, Double.NaN, 0.32875208164037434, 0.5031924556642754}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace(Double.NaN, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {316.9303345, 1.9699272335463627E-8, 181.796, (-45.51079557969265), 748.285453803334, Double.NaN, 727.3584, 1113.30476636924}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {316.9303345, 1.9699272335463627E-8, 181.796, (-45.51079557969265), 748.285453803334, Double.NaN, 727.3584, 1113.30476636924}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {316.9303345, 1.9699272335463627E-8, 181.796, (-45.51079557969265), 748.285453803334, Double.NaN, 727.3584, 1113.30476636924}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 1746.17;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.34217729E8, 1746.17}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1334);
      intArray0[1] = (-1045);
      intArray0[2] = (-1138);
      intArray0[3] = 143;
      intArray0[4] = (-1558);
      intArray0[5] = 5299;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1334);
      intArray1[1] = (-1334);
      intArray1[2] = 5299;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = MathArrays.linearCombination((-3372.0), 32.31096, 32.31096, (-1518.6));
      assertEquals((-158019.980976), double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 2231.2374546023057;
      doubleArray0[3] = 2231.2374546023057;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 2231.2374546023057;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 2231.2374546023057, 2231.2374546023057, Double.NEGATIVE_INFINITY, 2231.2374546023057, 1.304E19, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 2231.2374546023057, 2231.2374546023057, Double.NEGATIVE_INFINITY, 2231.2374546023057, 1.304E19, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 2231.2374546023057, 2231.2374546023057, Double.NEGATIVE_INFINITY, 2231.2374546023057, 1.304E19, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(2129.27634429217, 1.34217729E8, 2231.2374546023057, 5129.583543305655);
      assertEquals(2.857980806632455E11, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (\u221E >= \u221E)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination(1.0, (-912.0), 0.0, 2231.2374546023057);
      assertEquals((-912.0), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (\u221E >= \u221E)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      int int1 = MathArrays.distanceInf(intArray1, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray1.length);
      assertEquals(0, int1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 410.9603926506082;
      doubleArray1[2] = 410.9603926506082;
      doubleArray1[3] = 410.9603926506082;
      doubleArray1[4] = 410.9603926506082;
      doubleArray1[5] = 410.9603926506082;
      doubleArray1[6] = 410.9603926506082;
      MathArrays.scaleInPlace(410.9603926506082, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {410.9603926506082, 168888.44432754206, 168888.44432754206, 168888.44432754206, 168888.44432754206, 168888.44432754206, 168888.44432754206}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 134217729;
      intArray0[1] = 765;
      intArray0[2] = 843;
      intArray0[3] = (-1688);
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 134217729;
      intArray1[1] = (-1688);
      intArray1[2] = 134217729;
      intArray1[3] = 765;
      intArray1[4] = 765;
      intArray1[5] = 134217729;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(1.3421688604483198E8, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {134217729, 765, 843, (-1688)}, intArray0);
      assertArrayEquals(new int[] {134217729, (-1688), 134217729, 765, 765, 134217729}, intArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = Double.NaN;
      try { 
        MathArrays.normalizeArray(doubleArray0, 3061.481014111);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 220.0;
      doubleArray0[1] = 220.0;
      double[] doubleArray1 = MathArrays.scale(220.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {220.0, 220.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {48400.0, 48400.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 276.4462F;
      floatArray0[3] = (-958.55F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 3928.0F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-1.0F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 276.4462F;
      floatArray1[5] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 276.4462F, (-958.55F), 0.0F, 0.0F, 0.0F, 3928.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F, 276.4462F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-60.622603938);
      doubleArray0[1] = (-7.44321345601866E-11);
      doubleArray0[2] = (-1248.23081664734);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 549.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-60.622603938), (-7.44321345601866E-11), (-1248.23081664734), Double.NaN, 549.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-60.622603938), (-7.44321345601866E-11), (-1248.23081664734), Double.NaN, 549.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray2, 0.01);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-60.622603938), (-7.44321345601866E-11), (-1248.23081664734), Double.NaN, 549.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-60.622603938), (-7.44321345601866E-11), (-1248.23081664734), Double.NaN, 549.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2707.831F;
      floatArray0[1] = (-203.64F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 5058.551F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-2740.0056F);
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 2707.831F;
      floatArray1[3] = (-1.0F);
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (-1.0F);
      floatArray1[7] = 314.23376F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2707.831F, (-203.64F), (-1.0F), 5058.551F, (-1.0F), 0.0F, 0.0F, (-2740.0056F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2707.831F, (-1.0F), 0.0F, 0.0F, (-1.0F), 314.23376F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[7];
      stringArray0[0] = "q)mt7*,f6qrzlhL";
      stringArray0[1] = "_d\"'i!u&Pn!@SJU";
      stringArray0[2] = "";
      stringArray0[3] = "points {0} and {1} are not strictly decreasing ({2} <= {3})";
      stringArray0[4] = "*Jk-2>VtI7=A<g,O:\"";
      stringArray0[5] = "}Z5]]GgmDzA$F)Je";
      stringArray0[6] = "NAN_NOT_ALLOWED";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1402.972012352;
      doubleArray0[1] = (-290.2);
      doubleArray0[2] = 827.49260828454;
      doubleArray0[3] = 1402.972012352;
      doubleArray0[4] = (-196.4388226);
      doubleArray0[5] = (-3888.895612);
      doubleArray0[6] = 2653.291;
      doubleArray0[7] = 2278.08299102;
      doubleArray0[8] = (-216.8659702811245);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1402.972012352, (-290.2), 827.49260828454, 1402.972012352, (-196.4388226), (-3888.895612), 2653.291, 2278.08299102, (-216.8659702811245)}, doubleArray0, 0.01);
      
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 17 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 412.278413892;
      doubleArray1[1] = (-0.2499999701976776);
      doubleArray1[2] = (-20.0);
      doubleArray1[3] = (-2579.0);
      doubleArray1[4] = (-1659.9);
      doubleArray1[5] = (-45.33);
      doubleArray1[6] = 753.00768143;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {412.278413892, (-0.2499999701976776), (-20.0), (-2579.0), (-1659.9), (-45.33), 753.00768143}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {412.278413892, (-0.2499999701976776), (-20.0), (-2579.0), (-1659.9), (-45.33), 753.00768143}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1069.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3035.426F;
      floatArray0[3] = (-2197.0F);
      floatArray0[4] = (-902.0F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {1069.0F, 0.0F, 3035.426F, (-2197.0F), (-902.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 204864.8644;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {204864.8644, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {204864.8644, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {409729.7288, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 204864.8644;
      doubleArray2[1] = 204864.8644;
      doubleArray2[2] = 204864.8644;
      doubleArray2[3] = 204864.8644;
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 93;
      intArray0[1] = 165;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 165;
      intArray1[1] = 165;
      intArray1[2] = 93;
      intArray1[3] = 165;
      intArray1[4] = 165;
      intArray1[5] = 165;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(72, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {93, 165}, intArray0);
      assertArrayEquals(new int[] {165, 165, 93, 165, 165, 165}, intArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 959.0;
      doubleArray0[1] = 959.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 959.0;
      doubleArray0[4] = 959.0;
      doubleArray0[5] = 959.0;
      doubleArray0[6] = 959.0;
      doubleArray0[7] = 959.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 9.007199254740992E15);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {959.0, 959.0, 3.834E-20, 959.0, 959.0, 959.0, 959.0, 959.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.2867427506772845E15, 1.2867427506772845E15, 5.14428749332295E-8, 1.2867427506772845E15, 1.2867427506772845E15, 1.2867427506772845E15, 1.2867427506772845E15, 1.2867427506772845E15}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {959.0, 959.0, 3.834E-20, 959.0, 959.0, 959.0, 959.0, 959.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.6299605249474366;
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) 260;
      doubleArray0[3] = (double) 11;
      doubleArray0[4] = (double) 11;
      doubleArray0[5] = (double) 260;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.6299605249474366, 11.0, 260.0, 11.0, 11.0, 260.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "w1]";
      stringArray0[1] = "w1]";
      stringArray0[2] = "w1]";
      stringArray0[3] = "w1]";
      stringArray0[4] = "w1]";
      stringArray0[5] = "w1]";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 220;
      intArray0[1] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {220, 1}, intArray0);
      assertArrayEquals(new int[] {220, 1}, intArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2385.0);
      doubleArray0[1] = (double) 220;
      doubleArray0[2] = 1037.87476630914;
      boolean boolean1 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-2385.0), 220.0, 1037.87476630914}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new double[] {(-2385.0), 220.0, 1037.87476630914}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1037.87476630914;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = 1037.87476630914;
      doubleArray1[4] = (-2436.0);
      doubleArray1[5] = (double) 1L;
      doubleArray1[6] = (double) 0.0F;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1037.87476630914, 0.0, 0.0, 1037.87476630914, (-2436.0), 1.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1037.87476630914}, doubleArray2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[][] doubleArray1 = new double[1][4];
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-215.082);
      doubleArray0[1] = (-215.082);
      long[][] longArray0 = new long[3][1];
      long[] longArray1 = new long[2];
      longArray1[1] = 400L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[10];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 1717.114, 0.0, 3.834E-20, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 9193070505571053912L;
      longArray0[1] = (-672L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -672 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(12, doubleArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1668.4570774768954;
      doubleArray1[1] = 452.49134396;
      MathArrays.scaleInPlace(452.49134396, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {754962.3853270942, 204748.41635872703}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1668.4570774768954;
      doubleArray2[1] = 1668.4570774768954;
      doubleArray2[2] = 204748.41635872703;
      doubleArray2[3] = 1668.4570774768954;
      doubleArray2[4] = 1668.4570774768954;
      double double0 = 789.0;
      doubleArray2[5] = 789.0;
      doubleArray2[6] = 452.49134396;
      doubleArray2[7] = 452.49134396;
      doubleArray2[8] = 1668.4570774768954;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 12 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray1);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-357.0);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-357.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-357.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-357.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertEquals((-350.0), double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-357.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3652.781848);
      doubleArray0[2] = 0.0;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-3652.781848), 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, false);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, (-3652.781848), 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-5765.6226714494));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-3652.781848), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-5765.6226714494), 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(0.0, 2562.812961583, 452.62, 1.0, (-1538.442821314), 1.0);
      assertEquals((-1085.822821314), double0, 0.01);
      
      Double[] doubleArray2 = new Double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection2, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2145721894, 2145721894);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 2174.39689979011;
      doubleArray0[0] = 2174.39689979011;
      double double1 = 310.5;
      doubleArray0[1] = 310.5;
      double double2 = (-1282.98);
      doubleArray0[2] = (-1282.98);
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (-785.907);
      double double3 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertArrayEquals(new double[] {2174.39689979011, 310.5, (-1282.98), 1.34217729E8, (-785.907)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = (-1896.69495131);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1494.8805923;
      doubleArray0[2] = (-135.56);
      doubleArray0[3] = 1.63E18;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,494.881 >= -135.56)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1135);
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1135), 0, 0}, intArray0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {(-1135), 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 3.834E-20;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1201.0F;
      long[][] longArray0 = new long[2][7];
      long[] longArray1 = new long[1];
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1L);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 220;
      intArray0[2] = 2146765666;
      intArray0[3] = 220;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 220, 2146765666, 220}, intArray0);
      assertArrayEquals(new int[] {1, 220, 2146765666, 220}, intArray1);
      
      MathArrays.checkNonNegative(longArray1);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 735.8984995906;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {735.8984995906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (735.898 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = MathArrays.scale(0.3333333333333333, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-4318), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-3117.138F);
      floatArray1[1] = (-2990.0F);
      boolean boolean0 = MathArrays.equals(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3117.138F), (-2990.0F)}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 220;
      intArray0[2] = 1;
      intArray0[3] = 9999;
      intArray0[4] = 1;
      intArray0[5] = 220;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 220, 1, 9999, 1, 220}, intArray0);
      assertArrayEquals(new int[] {1, 220, 1, 9999, 1, 220}, intArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 9999;
      longArray0[1] = (long) 220;
      longArray0[2] = (long) 1;
      longArray0[3] = (-1207L);
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 220;
      longArray0[6] = (long) 9999;
      longArray0[7] = (long) 9999;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,207 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 220;
      int int0 = 1;
      intArray0[1] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {220, 1}, intArray0);
      assertArrayEquals(new int[] {220, 1}, intArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 1;
      integerArray0[1] = (Integer) 220;
      integerArray0[2] = (Integer) 1;
      integerArray0[3] = (Integer) 1;
      integerArray0[4] = (Integer) 1;
      Integer integer0 = new Integer(127);
      assertNotNull(integer0);
      assertEquals(127, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[5] = integer0;
      integerArray0[6] = (Integer) 220;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 127;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = 727.434474386;
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = (double) 0.0F;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1, 1}, intArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      MathArrays.checkPositive(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination((double) 1, (double) 1, (-580.33510555139), (double) 1201.0F, (double) 1201.0F, 1.0);
      assertEquals((-695780.4617672195), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1201.0F;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) 1201.0F;
      doubleArray0[3] = (double) 1201.0F;
      doubleArray0[4] = (double) 1201.0F;
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) 1201.0F;
      doubleArray0[7] = (double) (-1L);
      doubleArray0[8] = (double) (-1L);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 1201.0, 1201.0, 1201.0, (-1.0), 1201.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, false);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean1);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 1201.0, 1201.0, 1201.0, (-1.0), 1201.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[7];
      stringArray0[0] = "PvY/>p<e[.!o&DQ";
      stringArray0[1] = "$VALUES";
      stringArray0[2] = "$VALUES";
      stringArray0[3] = "$VALUES";
      stringArray0[4] = "$VALUES";
      stringArray0[5] = "$VALUES";
      stringArray0[6] = "$VALUES";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, stringArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3652.781848);
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-3652.781848), 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = null;
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = 3.834E-20;
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("org.apache.commons.math3.util.MathArrays$2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.org.apache.commons.math3.util.MathArrays$2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.608E18;
      doubleArray0[1] = 1201.0;
      doubleArray0[2] = (-517.7298654805488);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.608E18;
      doubleArray1[1] = (-517.7298654805488);
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (-517.7298654805488);
      doubleArray1[4] = 1201.0;
      doubleArray1[5] = 1201.0;
      doubleArray1[6] = (-517.7298654805488);
      doubleArray1[7] = 2696.5851036123554;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2.608E18, 1201.0, (-517.7298654805488)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.608E18, (-517.7298654805488), Double.NaN, (-517.7298654805488), 1201.0, 1201.0, (-517.7298654805488), 2696.5851036123554}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.801664E36, 1.7819685108267287E21, Double.NaN, Double.NaN, Double.NaN, 3.1322080000000016E21, (-1.3502394891732706E21), 7.032693950221022E21, 3506642.923048946, (-1396102.6429500766)}, doubleArray2, 0.01);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-517.7298654805488);
      doubleArray3[1] = (-517.7298654805488);
      doubleArray3[2] = 1201.0;
      doubleArray3[3] = (-517.7298654805488);
      doubleArray3[4] = 1201.0;
      double double0 = MathArrays.distanceInf(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(5, doubleArray3.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.608E18, (-517.7298654805488), Double.NaN, (-517.7298654805488), 1201.0, 1201.0, (-517.7298654805488), 2696.5851036123554}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-517.7298654805488), (-517.7298654805488), 1201.0, (-517.7298654805488), 1201.0}, doubleArray3, 0.01);
      
      try { 
        MathArrays.ebeSubtract(doubleArray3, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 10
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.902267575263977;
      doubleArray0[1] = (double) (-2990.0F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (0.902 > -2,990)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.902267575263977, 0.902267575263977, (-2990.0), Double.NaN, (-2990.0), 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(Double.NaN, 1.0, (-2990.0), (-1.0), (-196.83), (-196.83), (double) (-2990.0F), 0.0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 547.3;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {547.3}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {547.3}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[8];
      stringArray0[0] = "3";
      stringArray0[1] = "$VALUES";
      stringArray0[2] = "$VALUES";
      stringArray0[3] = "f4rr";
      stringArray0[4] = "3";
      stringArray0[5] = "f4rr";
      stringArray0[7] = "$VALUES";
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray1[1] = "org.apache.commons.math3.util.MathArrays";
      stringArray1[2] = "$VALUES";
      stringArray1[3] = "org.apache.commons.math3.util.MathArrays";
      stringArray1[4] = "org.apache.commons.math3.util.MathArrays";
      stringArray1[5] = "";
      stringArray1[6] = "$VALUES";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray1, mathArrays_OrderDirection0, false);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray1.length);
      assertFalse(boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-215.082);
      doubleArray0[1] = (-1424.20940861);
      doubleArray0[2] = 1.0E-5;
      doubleArray0[4] = (-3852.60762208);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "f4rr";
      stringArray0[1] = "3";
      stringArray0[2] = "f4rr";
      stringArray0[3] = "f4rr";
      stringArray0[4] = "f4rr";
      stringArray0[5] = "$VALUES";
      stringArray0[6] = "f4rr";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-215.082), (-1424.20940861), 1.0E-5, 0.0, (-3852.60762208), 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-215.082);
      doubleArray0[1] = (-1424.20940861);
      long[][] longArray0 = new long[3][1];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = 412L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-1L);
      longArray3[1] = 412L;
      longArray3[2] = (-886L);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-215.082), (-1424.20940861), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {46260.266723999994, 2028372.4395732463, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-215.082);
      doubleArray0[0] = (-215.082);
      double double1 = (-1424.20940861);
      doubleArray0[1] = (-1424.20940861);
      double double2 = 1.0E-5;
      doubleArray0[2] = 1.0E-5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Ubwj31M-";
      stringArray0[1] = "";
      stringArray0[2] = "f4rr";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-215.082), (-1424.20940861), 1.0E-5, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays";
      double double0 = (-3852.60762208);
      double double1 = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int int0 = 746;
      int[] intArray0 = new int[2];
      intArray0[0] = 746;
      intArray0[1] = 746;
      int int1 = (-1085);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1085));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 891.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      try { 
        MathArrays.convolve(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (double) (-2990.0F), (-1071.889132185), (double) (-2990.0F), 1087.139, 300.1221138);
      assertEquals(3531222.9599075685, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0875862700108075, 290.844447, 0.0, 1188.856024, 1087.139, (-1162.087568007), 300.1221138, 3494.2);
      assertEquals((-214638.5525753358), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = MathArrays.linearCombination(459.94, (double) 0, (double) 0, (-3113.46610338867), 201.3495647, (-196.83));
      assertEquals((-39631.634819901), double0, 0.01);
      
      double double1 = MathArrays.linearCombination(3.834E-20, (-3113.46610338867), 0.0, (-3113.46610338867), 1671.512416901, 0.902267575263977, 1.304E19, 201.3495647);
      assertEquals(2.625598323688E21, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3515.146756);
      doubleArray1[1] = 459.94;
      doubleArray1[2] = 94.0;
      doubleArray1[3] = (-644.3);
      doubleArray1[4] = (-1290.724952841);
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = 1.304E19;
      doubleArray1[7] = 397.699;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2990.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-2990.0F)}, floatArray0, 0.01F);
      
      double double0 = 1.545489640972848;
      double[] doubleArray1 = MathArrays.scale(1.545489640972848, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-2990.0F);
      doubleArray2[1] = (double) (-2990.0F);
      doubleArray2[2] = (double) (-2990.0F);
      doubleArray2[3] = (double) (-2990.0F);
      doubleArray2[4] = 1.545489640972848;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-2,990 >= -2,990)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3687.723211789344;
      double[] doubleArray1 = MathArrays.scale(3687.723211789344, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3687.723211789344}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.3599302486769915E7}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1.3595614763558125E7, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3687.723211789344}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.3599302486769915E7}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1404);
      intArray0[1] = 1378;
      intArray0[2] = 178;
      intArray0[3] = 0;
      intArray0[4] = 1941;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {(-1404), 1378, 178, 0, 1941}, intArray0);
      
      long[][] longArray0 = new long[0][6];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.checkOrder(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3687.723211789344}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.3599302486769915E7}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace(0.902267575263977, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3327.3130805458572}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1941;
      doubleArray2[1] = 9.313225746154785E-10;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 2877.9287081143393;
      doubleArray2[4] = (double) 1378;
      doubleArray2[5] = (double) 1378;
      doubleArray2[6] = (double) 1941;
      doubleArray2[7] = (double) 1378;
      double[] doubleArray3 = MathArrays.scale(2735.0242, doubleArray2);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(8, doubleArray3.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {5308681.9722, 2.5471897795796393E-6, 0.0, 7871204.662567454, 3768863.3476, 3768863.3476, 5308681.9722, 3768863.3476}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1941.0, 9.313225746154785E-10, 0.0, 2877.9287081143393, 1378.0, 1378.0, 1941.0, 1378.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 466.481221;
      doubleArray0[1] = (-3652.781848);
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.linearCombination(0.0, 380.58613, (-350.35), 309.10513261);
      assertEquals((-108294.98320991351), double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2928.805485210726;
      doubleArray1[1] = 3.834E-20;
      double[][] doubleArray2 = new double[0][7];
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.834E-20, 2928.805485210726}, doubleArray1, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3682.447550016693, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {466.481221, (-3652.781848), 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {466.481221, (-3652.781848), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 2928.805485210726}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double0 = new Integer(0);
      assertEquals(0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1844.9306873546;
      doubleArray2[1] = 1844.9306873546;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 1844.9306873546;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = 0;
      doubleArray2[6] = 0;
      doubleArray2[7] = 0;
      MathArrays.scaleInPlace(1844.9306873546, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3403769.2411427167, 3403769.2411427167, 0.0, 3403769.2411427167, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[5][9];
      long[] longArray1 = new long[5];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) 0;
      longArray2[5] = (long) 0;
      longArray2[6] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 0;
      longArray3[1] = (long) 0;
      longArray3[2] = (long) 0;
      longArray3[3] = (long) 0;
      longArray3[4] = (long) 0;
      longArray3[5] = (-71L);
      longArray3[6] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 4398046511103L;
      longArray4[1] = (-71L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (long) 0;
      longArray5[1] = (long) 0;
      longArray5[2] = (-71L);
      longArray5[3] = (long) 0;
      longArray5[4] = (-71L);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float[] floatArray0 = new float[3];
      double double0 = 0.902267575263977;
      double double1 = MathArrays.linearCombination(0.0, (double) 0.0F, 0.902267575263977, (double) (-2990.0F), (-196.83), 0.0);
      assertEquals((-2697.7800500392914), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination((-1134.36766246973), (-1134.36766246973), (-6.341887777294477), 0.0, 1.34217729E8, (-1134.36766246973), 2223.42796, 3494.2);
      assertEquals((-1.522431956157542E11), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = 1357952.0;
      // Undeclared exception!
      try { 
        MathArrays.scale(1357952.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-20.0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-20.0), 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-20.0), 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][9];
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1201.0F;
      long[][] longArray0 = new long[2][7];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1L);
      longArray2[1] = (-886L);
      longArray2[2] = 412L;
      longArray2[3] = (-886L);
      longArray2[4] = (-886L);
      longArray2[5] = (-886L);
      longArray2[6] = 412L;
      longArray0[1] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-886L);
      doubleArray0[2] = (double) (-886L);
      doubleArray0[3] = (double) 1201.0F;
      doubleArray0[4] = (double) 412L;
      doubleArray0[5] = (double) 1201.0F;
      doubleArray0[6] = (double) (-886L);
      doubleArray0[7] = (double) 1201.0F;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-886L);
      doubleArray1[1] = (double) 412L;
      doubleArray1[2] = (double) (-886L);
      doubleArray1[3] = (double) (-1L);
      doubleArray1[4] = (double) (-1L);
      doubleArray1[5] = (double) (-886L);
      doubleArray1[6] = (double) 412L;
      doubleArray1[7] = (double) 1201.0F;
      doubleArray1[8] = (double) (-886L);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1201.0F;
      long[][] longArray0 = new long[2][7];
      long[] longArray1 = new long[1];
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-891L);
      doubleArray0[1] = (double) 412L;
      doubleArray0[2] = 459.94;
      doubleArray0[3] = (double) 1201.0F;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) 412L;
      doubleArray0[7] = 3.834E-20;
      doubleArray0[8] = 3.834E-20;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-891.0), 412.0, 3.834E-20, 459.94, 1201.0, (-1.0), 412.0, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(1669.5256223250963, double0, 0.01);
      assertArrayEquals(new double[] {(-891.0), 412.0, 3.834E-20, 459.94, 1201.0, (-1.0), 412.0, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[] floatArray0 = new float[3];
      double double0 = MathArrays.linearCombination(0.0, (double) 0.0F, 0.902267575263977, (double) (-2990.0F), (-196.83), 0.0);
      assertEquals((-2697.7800500392914), double0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) (-2990.0F), (-196.83), 0.0, 1407.90431653173, (-196.83), 3494.2, (-196.83), 3494.2);
      assertEquals((-787005.0719999999), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1201.0F;
      double double0 = MathArrays.linearCombination(0.0, (double) 1201.0F, 0.902267575263977, (double) (-2990.0F), (-196.83), 0.0);
      assertEquals((-2697.7800500392914), double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.3333333333332802;
      doubleArray0[3] = (-293.176);
      doubleArray0[4] = (double) 1201.0F;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2697.7800500392914);
      doubleArray1[1] = 5.206150291559893E-8;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1407.90431653173;
      doubleArray1[4] = (double) 1201.0F;
      doubleArray1[5] = (double) (-2990.0F);
      doubleArray1[6] = (double) (-2990.0F);
      doubleArray1[7] = (double) 1201.0F;
      doubleArray1[8] = (-2697.7800500392914);
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[3] = 1.0E-5;
      double[] doubleArray1 = MathArrays.scale((-1394.874228656418), doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0E-5, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, (-0.01394874228656418), -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0E-5, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, (-0.01394874228656418), -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = (-1577L);
      longArray0[2] = 1788L;
      longArray0[3] = (-980L);
      longArray0[4] = 1044L;
      longArray0[5] = 4208363204685324176L;
      longArray0[6] = (-3059L);
      longArray0[7] = 489L;
      longArray0[8] = 2319L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = MathArrays.linearCombination(2928.805485210726, 466.481221, 0.0, 466.481221);
      assertEquals(1366232.758812597, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 3.834E-20, 3.814697265625E-6, 1366232.758812597);
      assertEquals(5.211764369249714, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      assertEquals(MathArrays.OrderDirection.INCREASING, mathArrays_OrderDirection0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 46;
      intArray0[1] = 46;
      intArray0[2] = 46;
      intArray0[3] = 46;
      intArray0[4] = 46;
      intArray0[5] = 46;
      intArray0[6] = 46;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {46, 46, 46, 46, 46, 46, 46}, intArray0);
      
      long[][] longArray0 = new long[6][2];
      long[] longArray1 = new long[2];
      longArray1[0] = 1349L;
      longArray1[1] = (long) 46;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1349L;
      longArray2[1] = (long) 46;
      longArray2[2] = (-974L);
      longArray2[3] = (long) 46;
      longArray2[4] = (long) 46;
      longArray2[5] = (long) 46;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-3482L);
      longArray3[1] = (-974L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) 46;
      longArray4[1] = (long) 46;
      longArray4[2] = (long) 46;
      longArray4[3] = 1349L;
      longArray4[4] = (-1L);
      longArray4[5] = (long) 0;
      longArray4[6] = (long) 46;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (long) 46;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = (long) 46;
      longArray6[1] = (long) 46;
      longArray6[2] = (long) 46;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 556.9997611;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-1339.2542667553782);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {556.9997611, 0.0, 1.0, 0.0, 1.304E19, (-1339.2542667553782)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {556.9997611, 0.0, 1.0, 0.0, 1.304E19, (-1339.2542667553782)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 361;
      intArray0[1] = 263;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 46;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {361, 263, 0, 0, 0, 46}, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4.116164446561962E-8;
      double double0 = 1.34217729E8;
      doubleArray0[1] = 1.34217729E8;
      double double1 = (-505.2359162919861);
      doubleArray0[2] = (-505.2359162919861);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4.116164446561962E-8, 1.34217729E8, (-505.2359162919861)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1201.0F;
      floatArray0[1] = (-2990.0F);
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1201.0F, (-2990.0F), 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1201.0F;
      doubleArray0[1] = (double) 1201.0F;
      doubleArray0[2] = (double) 1201.0F;
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.scale(1.545489640972848, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1201.0, 1201.0, 1201.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1856.1330588083904, 1856.1330588083904, 1856.1330588083904, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1201.0, 1201.0, 1201.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1856.1330588083904, 1856.1330588083904, 1856.1330588083904, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[2][4];
      long[] longArray1 = new long[2];
      longArray1[0] = 2147483647L;
      longArray1[1] = 2211L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 2211L;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1201.0F;
      floatArray0[1] = (-2990.0F);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "$VALUES";
      stringArray0[1] = "f4rr";
      stringArray0[2] = "$VALUES";
      stringArray0[3] = "f4rr";
      stringArray0[4] = "f4rr";
      stringArray0[5] = "$VALUES";
      stringArray0[6] = "f4rr";
      stringArray0[7] = "$VALUES";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 466.481221;
      doubleArray0[1] = (-3652.781848);
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.linearCombination((-3652.781848), 466.481221, 3.834E-20, 2928.805485210726);
      assertEquals((-1703954.1365016764), double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 466.481221, 3.834E-20);
      assertEquals(1.788489001314E-17, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 466.481221, (-3652.781848)}, doubleArray0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3682.447550016693, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 466.481221, (-3652.781848)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-610);
      intArray0[1] = 3;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-610), 3}, intArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[4] = "";
      stringArray0[5] = "Ubwj31M-";
      stringArray0[6] = "3";
      stringArray0[7] = "$VALUES";
      stringArray0[8] = "f4rr";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1201.0F;
      floatArray0[1] = (-2990.0F);
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1201.0F, (-2990.0F), 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 220;
      intArray0[1] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {220, 1}, intArray0);
      assertArrayEquals(new int[] {220, 1}, intArray1);
      
      long[] longArray0 = new long[1];
      long[][] longArray1 = new long[8][5];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(8, longArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 220;
      doubleArray0[1] = (double) (-2990.0F);
      doubleArray0[2] = (double) (-2990.0F);
      doubleArray0[3] = (-6.341887777294477);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 1201.0F;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {220.0, (-2990.0), (-2990.0), (-6.341887777294477), 0.0, 1201.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 2124.54468566567;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2.0, 2124.54468566567}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(4.0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 8.0, 8498.17874266268}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[3] = 1.0E-5;
      doubleArray0[5] = (-644.3);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0E-5, 0.0, (-644.3), 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0E-5, 0.0, (-644.3), 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(3.834E-20, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0E-5, 0.0, (-644.3), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 3.834E-25, 0.0, (-2.4702461999999996E-17), 0.0}, doubleArray1, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-4179), 1423);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[2];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 767.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 767)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1201.0F;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-423.9);
      doubleArray0[1] = (double) 1201.0F;
      doubleArray0[2] = (double) 1201.0F;
      doubleArray0[3] = (-423.9);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-423.9), 1201.0, 1201.0, (-423.9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-847.8), 2402.0, 2402.0, (-847.8)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 2);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-423.9), 1201.0, 1201.0, (-423.9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-847.8), 2402.0, 2402.0, (-847.8)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-847.8), 2402.0}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1201.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray1, 2.0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-423.9), 1201.0, 1201.0, (-423.9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-847.8), 2402.0, 2402.0, (-847.8)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-0.5454896409728478), 1.545489640972848, 1.545489640972848, (-0.5454896409728478)}, doubleArray3, 0.01);
      
      double double0 = MathArrays.linearCombination((-423.9), 744.5, 466.481221, 1201.0);
      assertEquals(244650.396421, double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {1201.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray3.length);
      assertFalse(boolean2);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {(-423.9), 1201.0, 1201.0, (-423.9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-847.8), 2402.0, 2402.0, (-847.8)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-0.5454896409728478), 1.545489640972848, 1.545489640972848, (-0.5454896409728478)}, doubleArray3, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-423.9), 1201.0, 1201.0, (-423.9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-847.8), 2402.0, 2402.0, (-847.8)}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray4 = MathArrays.scale(685.12757817514, doubleArray3);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(4, doubleArray4.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray3.length);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-373.7299966393538), 1058.857574814494, 1058.857574814494, (-373.7299966393538)}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {(-423.9), 1201.0, 1201.0, (-423.9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-847.8), 2402.0, 2402.0, (-847.8)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-0.5454896409728478), 1.545489640972848, 1.545489640972848, (-0.5454896409728478)}, doubleArray3, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-4179), (-4179));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Double, String>> field0 = (Field<Pair<Double, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-2161);
      int int1 = 5622;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2161), 5622);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 466.481221;
      doubleArray0[1] = (-3652.781848);
      doubleArray0[2] = 0.0;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {466.481221, (-3652.781848), 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (466.481 >= -3,652.782)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3127;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3127.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9778129.0}, doubleArray1, 0.01);
      
      Pair<Object, String>[][] pairArray0 = MathArrays.buildArray(field0, 3127, 3127);
      assertNotNull(pairArray0);
      assertEquals(3127, pairArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, (-4015), 3000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Field<Pair<Double, String>> field0 = (Field<Pair<Double, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-2161);
      int int1 = 5622;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2161), 5622);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[4] = "";
      stringArray0[5] = "Ubwj31M-";
      stringArray0[6] = "";
      stringArray0[7] = "$VALUES";
      stringArray0[8] = "f4rr";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-196.83);
      doubleArray0[1] = (-423.9);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-196.83), (-423.9), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-393.66), (-847.8), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 2);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-196.83), (-423.9), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-196.83), (-423.9)}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2.0F, 2.0F}, floatArray0, 0.01F);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray1, (-20.0));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-196.83), (-423.9), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-393.66), (-847.8), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-6.341887777294477), (-13.658112222705524), 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      double double0 = MathArrays.linearCombination((double) 2.0F, (-20.0), 1133.91, (double) 2.0F);
      assertEquals(2227.82, double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {2.0F, 2.0F}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray3.length);
      assertFalse(boolean2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {(-196.83), (-423.9), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-393.66), (-847.8), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-6.341887777294477), (-13.658112222705524), 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray3.length);
      assertEquals(600.73, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-196.83), (-423.9), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-393.66), (-847.8), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-6.341887777294477), (-13.658112222705524), 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray4 = MathArrays.scale(1133.91, doubleArray2);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray4.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-223187.50530000002), (-480664.449)}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {(-196.83), (-423.9), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-196.83), (-423.9)}, doubleArray2, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2, (-4179));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1201.0F;
      floatArray0[1] = (-2990.0F);
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1201.0F, (-2990.0F), 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1201.0F;
      doubleArray0[1] = (double) 1201.0F;
      doubleArray0[2] = (double) 1201.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 1201.0F;
      doubleArray0[6] = (double) 1201.0F;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1201.0, 1201.0, 1201.0, 0.0, 0.0, 1201.0, 1201.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 365;
      intArray0[1] = (-3561);
      intArray0[2] = 1097;
      intArray0[3] = (-972);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {365, (-3561), 1097, (-972)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1201.0F;
      floatArray0[1] = (-2990.0F);
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1201.0F, (-2990.0F), 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 220;
      intArray0[1] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {220, 1}, intArray0);
      assertArrayEquals(new int[] {220, 1}, intArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = (-2232.220322017);
      doubleArray0[1] = (-5727.81);
      doubleArray0[2] = (-1709.92624);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 820.80143167;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(19, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-1709.92624), 2.0, (-1709.92624), 1.304E19);
      assertEquals((-2.22974381696E22), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(19, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-5727.81);
      doubleArray1[2] = 1.304E19;
      double double2 = new Double(820.80143167);
      assertEquals(820.80143167, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 2124.54468566567;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (2,124.545 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2232.220322017);
      doubleArray0[1] = (-5727.81);
      doubleArray0[2] = (-1709.92624);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 820.80143167;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-2232.220322017), (-5727.81), (-1709.92624), 0.0, 820.80143167}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((-478.093958711704), 820.80143167, 1496.4352061, (-1709.92624));
      assertEquals((-2951214.0311535425), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2232.220322017), (-5727.81), (-1709.92624), 0.0, 820.80143167}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double2 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0.0, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {(-2232.220322017), (-5727.81), (-1709.92624), 0.0, 820.80143167}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2232.220322017), (-5727.81), (-1709.92624), 0.0, 820.80143167}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.scale((-142.0), doubleArray0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-2232.220322017), (-5727.81), (-1709.92624), 0.0, 820.80143167}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {316975.285726414, 813349.02, 242809.52608, -0.0, (-116553.80329714001)}, doubleArray3, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf(")4<dWz9g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.)4<dWz9g
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-1864);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1864));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.986821492305628E-8;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-789.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.986821492305628E-8, 1.0, (-789.0)}, doubleArray0, 0.01);
      
      boolean boolean2 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new double[] {1.986821492305628E-8, 1.0, (-789.0)}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection1, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2928.805485210726;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 466.481221;
      doubleArray0[4] = (-418.0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 134217729;
      intArray0[2] = (-2085);
      intArray0[3] = 1;
      intArray0[4] = 905;
      intArray0[5] = 0;
      intArray0[6] = 1105;
      intArray0[7] = 201;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1), 134217729, (-2085), 1, 905, 0, 1105, 201}, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1201.0F;
      double double0 = MathArrays.linearCombination(0.0, (double) 1201.0F, 0.902267575263977, (double) (-2990.0F), (-196.83), 0.0);
      assertEquals((-2697.7800500392914), double0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) (-2990.0F), (-196.83), 0.0, 1407.90431653173, (-196.83), 3494.2, (-196.83), 3494.2);
      assertEquals((-787005.0719999999), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1213.738102;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1213.738102, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1473160.1802465625, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1471946.4421445625, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1213.738102, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1473160.1802465625, 0.0}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = new Double((-3652.781848));
      assertEquals((-3652.781848), double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3652.781848);
      doubleArray0[1] = (-3652.781848);
      doubleArray0[2] = (-3652.781848);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = (-1975.7156414);
      doubleArray0[5] = (-3652.781848);
      doubleArray0[6] = 2544.5737559896;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3652.781848), (-3652.781848), (-3652.781848), 3.834E-20, (-1975.7156414), (-3652.781848), 2544.5737559896}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-7305.563696), (-7305.563696), (-7305.563696), 7.668E-20, (-3951.4312828), (-7305.563696), 5089.1475119792}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 2);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3652.781848), (-3652.781848), (-3652.781848), 3.834E-20, (-1975.7156414), (-3652.781848), 2544.5737559896}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-7305.563696), (-7305.563696), (-7305.563696), 7.668E-20, (-3951.4312828), (-7305.563696), 5089.1475119792}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-7305.563696), (-7305.563696)}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2.0F, 2.0F}, floatArray0, 0.01F);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray0, (-129.444861));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-3652.781848), (-3652.781848), (-3652.781848), 3.834E-20, (-1975.7156414), (-3652.781848), 2544.5737559896}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-33.67218141431914), (-33.67218141431914), (-33.67218141431914), 3.534269193031195E-22, (-18.212600223239146), (-33.67218141431914), 23.456464880515707}, doubleArray3, 0.01);
      
      double double1 = MathArrays.linearCombination((double) 2, (-129.444861), 3.834E-20, (-3652.781848));
      assertEquals((-258.889722), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {2.0F, 2.0F}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
      assertFalse(boolean2);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-3652.781848), (-3652.781848), (-3652.781848), 3.834E-20, (-1975.7156414), (-3652.781848), 2544.5737559896}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-33.67218141431914), (-33.67218141431914), (-33.67218141431914), 3.534269193031195E-22, (-18.212600223239146), (-33.67218141431914), 23.456464880515707}, doubleArray3, 0.01);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
      assertEquals(18955.058998628567, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-3652.781848), (-3652.781848), (-3652.781848), 3.834E-20, (-1975.7156414), (-3652.781848), 2544.5737559896}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-33.67218141431914), (-33.67218141431914), (-33.67218141431914), 3.534269193031195E-22, (-18.212600223239146), (-33.67218141431914), 23.456464880515707}, doubleArray3, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      try { 
        MathArrays.ebeAdd(doubleArray3, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 466.481221;
      doubleArray0[1] = (-3652.781848);
      doubleArray0[2] = 0.0;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {466.481221, (-3652.781848), 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-3,652.782 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 0.0;
      double double1 = 1125.9;
      double double2 = MathArrays.linearCombination(0.0, 912.0, 912.0, 1125.9);
      assertEquals(1026820.8, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = (-1975.7156414);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 2);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2.0F, 2.0F}, floatArray0, 0.01F);
      
      double double4 = (-129.444861);
      try { 
        MathArrays.normalizeArray(doubleArray2, 912.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1729.04646;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-32.1878523739699);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1729.04646, 0.0, (-32.1878523739699), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1729.04646, 0.0, (-32.1878523739699), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination(1663.96935921, 3690.963562, (-3.356118100840571E-7), (-196.83), 3690.963562, (-32.1878523739699), 5.445647, (-946.2));
      assertEquals(6017693.411751899, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1729.04646, 0.0, (-32.1878523739699), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1729.04646, 0.0, (-32.1878523739699), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1125.9;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1125.9, (-20.0), 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1125.9, (-20.0), 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertArrayEquals(new double[] {0.0, 1125.9, (-20.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[2];
      int int0 = 1;
      intArray0[0] = 1;
      int int1 = 0;
      intArray0[1] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {1, 0}, intArray0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1781.91);
      doubleArray0[1] = 1829.71159;
      doubleArray0[2] = 1155.5565375;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = (-2008.1988327724);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1491.30667856;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1781.91), 1829.71159, 1155.5565375, 0.0, 0.0, 1.34217729E8, (-2008.1988327724), 0.0, 1491.30667856}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1781.91), 1829.71159, 1155.5565375, 0.0, 0.0, 1.34217729E8, (-2008.1988327724), 0.0, 1491.30667856}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(1.0, Double.NaN, (-2008.1988327724), 1.34217729E8, (-3200.3), (-2008.1988327724), 0.0, 1155.5565375);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      double[] doubleArray3 = MathArrays.scale(1.34217729E8, doubleArray2);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      
      double[][] doubleArray4 = new double[9][2];
      doubleArray4[0] = doubleArray1;
      doubleArray4[1] = doubleArray0;
      doubleArray4[2] = doubleArray2;
      doubleArray4[3] = doubleArray3;
      doubleArray4[4] = doubleArray2;
      doubleArray4[5] = doubleArray0;
      doubleArray4[6] = doubleArray2;
      doubleArray4[7] = doubleArray0;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 1.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 1829.71159;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = Double.NaN;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 1.0E-5;
      doubleArray4[8] = doubleArray5;
      try { 
        MathArrays.sortInPlace(doubleArray3, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 69.067252;
      doubleArray0[4] = (-1629.517440311);
      doubleArray0[5] = 1960.07001361022;
      doubleArray0[6] = 2362.8748;
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 69.067252, (-1629.517440311), 1960.07001361022, 2362.8748}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1729.04646;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-32.1878523739699);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-4199.08239811146);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1729.04646, 0.0, (-32.1878523739699), 0.0, 0.0, 0.0, 0.0, (-4199.08239811146)}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][4];
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-32.1878523739699);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (-969.021032);
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {1729.04646, 0.0, 0.0, 0.0, 0.0, (-32.1878523739699), 0.0, (-4199.08239811146)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2928.805485210726;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 466.481221;
      doubleArray0[4] = (-418.0);
      doubleArray0[5] = 3227.044106;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 2928.805485210726, 0.0, 466.481221, (-418.0), 3227.044106, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 735.8984995906;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = (-644.3289597475062);
      doubleArray0[5] = 792.1387786;
      doubleArray0[6] = 3.834E-20;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1584190.2546308998, double0, 0.01);
      assertArrayEquals(new double[] {735.8984995906, 0.0, 0.0, 1.0E-5, (-644.3289597475062), 792.1387786, 3.834E-20}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("org.apache.commons.math3.util.MathArrays$2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.org.apache.commons.math3.util.MathArrays$2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 359.15084514);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1788;
      intArray0[1] = 50;
      intArray0[2] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1788, 50, 0}, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 50;
      doubleArray0[1] = (double) 1788;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 50;
      doubleArray0[4] = (double) 1788;
      doubleArray0[5] = (double) 50;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {50.0, 1788.0, 0.0, 50.0, 1788.0, 50.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1788, 50, 0}, intArray0);
      assertArrayEquals(new int[] {1788, 50, 0}, intArray1);
      
      long[][] longArray0 = new long[8][4];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 50;
      longArray1[1] = (long) 50;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 1788;
      longArray1[4] = (long) 50;
      longArray1[5] = (long) 50;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 1788;
      longArray1[8] = (long) 1788;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 50;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 50;
      longArray2[3] = 1L;
      longArray2[4] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 0;
      longArray3[1] = (long) 0;
      longArray3[2] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) 1788;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = (long) 0;
      longArray5[1] = (long) 0;
      longArray5[2] = (long) 0;
      longArray5[3] = (long) 50;
      longArray5[4] = 1L;
      longArray5[5] = 1023L;
      longArray5[6] = (long) 1788;
      longArray5[7] = 1L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = (long) 0;
      longArray6[1] = 1023L;
      longArray6[2] = (long) 0;
      longArray6[3] = 1023L;
      longArray6[4] = 1023L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[8];
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      
      longArray7[0] = (-5465L);
      longArray7[1] = (long) 1788;
      longArray7[2] = (long) 1788;
      longArray7[3] = (long) 1788;
      longArray7[4] = (long) 0;
      longArray7[5] = (long) 1788;
      longArray7[6] = 0L;
      longArray7[7] = (long) 0;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[8];
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray2));
      
      longArray8[0] = (long) 0;
      longArray8[1] = (long) 0;
      longArray8[2] = (long) 1788;
      longArray8[3] = (long) 0;
      longArray8[4] = (long) 0;
      longArray8[5] = (long) 1788;
      longArray8[6] = 1023L;
      longArray8[7] = 1L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -5,465 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long[][] longArray0 = new long[8][5];
      long[] longArray1 = new long[9];
      longArray1[0] = 0L;
      longArray1[1] = (-930L);
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = 1L;
      longArray1[5] = 0L;
      longArray1[6] = (-2170L);
      longArray1[7] = (-2933L);
      longArray1[8] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-2170L);
      longArray2[1] = 1L;
      longArray2[2] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 0L;
      longArray5[1] = 1L;
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray5[4] = 0L;
      longArray5[5] = (-930L);
      longArray5[6] = 0L;
      longArray5[7] = 101L;
      longArray5[8] = (-2170L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = 0L;
      longArray6[1] = (-2933L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[4];
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray6));
      
      longArray8[0] = (-2170L);
      longArray8[1] = (-930L);
      longArray8[2] = (-930L);
      longArray8[3] = 0L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -930 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1176.6952F);
      floatArray0[2] = -0.0F;
      floatArray0[3] = 1616.8883F;
      floatArray0[4] = 3836.7217F;
      floatArray0[5] = 3307.0F;
      floatArray0[6] = 2407.0F;
      floatArray0[7] = 5578.6724F;
      floatArray0[8] = 260.05154F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-1176.6952F), -0.0F, 1616.8883F, 3836.7217F, 3307.0F, 2407.0F, 5578.6724F, 260.05154F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1616.8883F;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1616.8883056640625}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1616.8883056640625}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1616.8883F;
      doubleArray1[1] = (double) -0.0F;
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertEquals(1616.8883056640625, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1616.8883056640625, -0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1289.1215730932, 2527.032226, 2527.032226, 1.34217729E8);
      assertEquals(3.3917578413529315E11, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination(2527.032226, (-1515.7), 3.3917578413529315E11, 0.0, 0.0, 3.3917578413529315E11);
      assertEquals((-3830222.7449482), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = MathArrays.linearCombination((-3830222.7449482), (-1111.69802727354), 3.3917578413529315E11, 3.834E-20, 1.34217729E8, 0.0, 2527.032226, 0.0);
      assertEquals(4.258051069577157E9, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.0;
      double double2 = (-364.9);
      double double3 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-364.9));
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("%gyst$L\"']#/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.%gyst$L\"']#/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-215.082);
      doubleArray0[1] = (-1424.20940861);
      doubleArray0[2] = 1.0E-5;
      doubleArray0[3] = 2268.9503;
      doubleArray0[4] = (-3852.60762208);
      doubleArray0[5] = 0.0;
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 746);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(746, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-215.082), (-1424.20940861), 1.0E-5, 2268.9503, (-3852.60762208), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-215.082), (-1424.20940861), 1.0E-5, 2268.9503, (-3852.60762208), 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 286.4470625671;
      doubleArray0[1] = 286.4470625671;
      doubleArray0[2] = 0.9375;
      doubleArray0[3] = 1969.423617518604;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {286.4470625671, 286.4470625671, 0.9375, 1969.423617518604}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-17);
      intArray0[1] = (-83);
      intArray0[2] = (-2146423161);
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2146423161);
      intArray1[1] = (-83);
      intArray1[2] = 28;
      intArray1[3] = (-17);
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(3.035500752656104E9, double1, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {(-17), (-83), (-2146423161)}, intArray0);
      assertArrayEquals(new int[] {(-2146423161), (-83), 28, (-17)}, intArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 1456);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "w1]";
      stringArray0[1] = "w1]";
      stringArray0[2] = "w1]";
      stringArray0[3] = "bxQ9&H^[h)n7+}'";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1317.184F);
      floatArray0[3] = Float.NaN;
      floatArray0[4] = 5062.6F;
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new float[] {0.0F, 1.0F, (-1317.184F), Float.NaN, 5062.6F}, floatArray0, 0.01F);
      
      Double[] doubleArray1 = new Double[6];
      Double double0 = new Double(0.0F);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray1[0] = double0;
      Double double1 = new Double((-4528.539877595193));
      assertNotNull(double1);
      assertEquals((-4528.539877595193), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[1] = double1;
      Double double2 = new Double(Float.NaN);
      assertNotNull(double2);
      assertEquals(Double.NaN, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray1[2] = double2;
      Double double3 = new Double(5062.6F);
      assertNotNull(double3);
      assertEquals(5062.60009765625, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray1[3] = double3;
      Double double4 = new Double((-1317.184F));
      assertNotNull(double4);
      assertEquals((-1317.1839599609375), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      
      doubleArray1[4] = double4;
      Double double5 = new Double((-485.07));
      assertNotNull(double5);
      assertEquals((-485.07), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      
      doubleArray1[5] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean3 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(6, doubleArray1.length);
      assertFalse(boolean3);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1201.0F;
      floatArray0[1] = (-2990.0F);
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1201.0F, (-2990.0F), 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 220;
      intArray0[1] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {220, 1}, intArray0);
      assertArrayEquals(new int[] {220, 1}, intArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {1201.0F, (-2990.0F), 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1L;
      floatArray1[1] = (float) 1;
      floatArray1[2] = 1201.0F;
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = (float) 1;
      floatArray2[2] = (float) 220;
      floatArray2[3] = (float) 1;
      floatArray2[4] = (float) 1;
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertEquals(5, floatArray2.length);
      assertEquals(3, floatArray1.length);
      assertFalse(boolean2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertArrayEquals(new float[] {0.0F, 1.0F, 220.0F, 1.0F, 1.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1201.0F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 220.0F;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(48401.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 220.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 735.8984995906;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new int[] {1}, intArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3652.781848);
      doubleArray0[2] = 0.0;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-3652.781848), 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-3652.781848), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-7305.563696), 0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, (-2146167336), (-2146167336));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1306.28F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 4151.62F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-1306.28F), 1.0F, 0.0F, 4151.62F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-1306.28F);
      doubleArray0[2] = (double) (-1306.28F);
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-1306.280029296875), (-1306.280029296875), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1177.0142F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1177.0142F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1896;
      intArray0[2] = 0;
      intArray0[3] = 4575;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 1896, 0, 4575}, intArray0);
      assertArrayEquals(new int[] {0, 1896, 0, 4575}, intArray1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-50.877F);
      floatArray0[1] = (-5902.7734F);
      floatArray0[2] = 3078.9592F;
      floatArray0[3] = 1.0F;
      float float0 = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-325.4F);
      floatArray0[6] = 4842.0F;
      float float1 = (-266.4F);
      floatArray0[7] = (-266.4F);
      float[] floatArray1 = new float[2];
      floatArray1[0] = (-5902.7734F);
      floatArray1[1] = 4430.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      MathArrays.equals(floatArray1, floatArray1);
      MathArrays.OrderDirection.values();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-215.082);
      doubleArray0[1] = (-1424.20940861);
      doubleArray0[2] = 1.0E-5;
      doubleArray0[3] = 2268.9503;
      doubleArray0[4] = (-3852.60762208);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-10.6519014725734);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2268.9503);
      MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 789.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1126.32786165884);
      doubleArray0[3] = (-912.0);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 2231.2374546023057;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, (-900.2984220771524), 0.0, 1.304E19);
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (622,521 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 452.62;
      doubleArray0[1] = 452.62;
      doubleArray0[2] = 452.62;
      double[] doubleArray1 = MathArrays.scale(452.62, doubleArray0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {204864.8644, 204864.8644, 204864.8644}, doubleArray1, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1386.368654;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.32;
      doubleArray0[3] = 1484.209746;
      doubleArray0[4] = (-3339.3726);
      doubleArray0[5] = (-3157.0);
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 3.32)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[6];
      intArray1[0] = (-3384);
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = (-2830);
      intArray1[4] = 26;
      intArray1[5] = 259;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MathArrays.linearCombination(0.0, 2544.5737559896, 0.0, (-3652.781848));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3652.781848);
      doubleArray0[1] = (-3652.781848);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = (-1975.7156414);
      doubleArray0[5] = (-3652.781848);
      doubleArray0[6] = 2544.5737559896;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray1, 2);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, (-129.444861));
      MathArrays.linearCombination((double) 2, (-129.444861), 3.834E-20, 0.0);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      MathArrays.distance1(doubleArray0, doubleArray2);
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 365.4308;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 357.0082;
      doubleArray0[5] = (-1034.6);
      double[] doubleArray1 = new double[2];
      double double0 = (-631.14929394);
      doubleArray1[0] = (-631.14929394);
      doubleArray1[1] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[][] longArray0 = new long[5][6];
      long[] longArray1 = new long[5];
      longArray1[0] = 1L;
      longArray1[1] = (-1246L);
      longArray1[2] = (-1L);
      longArray1[3] = 2619L;
      longArray1[4] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = (-886L);
      longArray3[1] = 1L;
      longArray3[2] = (-1246L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = (-1L);
      longArray4[1] = (-886L);
      longArray4[2] = 1L;
      longArray4[3] = 412L;
      longArray4[4] = (-886L);
      longArray4[5] = 2619L;
      longArray4[6] = (-1246L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      longArray5[0] = (-1246L);
      longArray5[1] = 412L;
      longArray5[2] = (-886L);
      longArray5[3] = 412L;
      longArray5[4] = 412L;
      longArray5[5] = (-1246L);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-196.83);
      doubleArray0[1] = (-423.9);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 2309.266745816299;
      doubleArray0[4] = 3342.603408988;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.linearCombination(814.520402, 0.0, Double.NaN, (-423.9), 3342.603408988, 1.34217729E8, (-423.9), 0.0);
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.equals(doubleArray1, doubleArray0);
      MathArrays.linearCombination(0.0, 3342.603408988, Double.NaN, (-3037.654781));
      MathArrays.linearCombination(Double.NaN, 0.0, 3.834E-20, 0.0);
      double[][] doubleArray2 = new double[1][7];
      doubleArray2[0] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 11
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1125.9;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray1, doubleArray0);
      MathArrays.linearCombination(3894.882426489, 0.0, 0.0, 1633.0783848669812, 1663.96935921, Double.NaN, 0.0, 3894.882426489);
      MathArrays.copyOf(doubleArray1);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3800.1730109137625);
      doubleArray0[1] = 888.281;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = (-1107.9982506623783);
      doubleArray0[5] = (-733.0278045349);
      doubleArray0[6] = 302.86286497995735;
      doubleArray0[7] = 4993.47586;
      doubleArray0[8] = (-1.0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 4993.47586;
      doubleArray1[1] = 888.281;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-3800.1730109137625);
      doubleArray1[4] = (-1107.9982506623783);
      doubleArray1[5] = 6.283185307179586;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 173;
      intArray0[1] = 1426;
      intArray0[2] = 14;
      intArray0[3] = 1833;
      intArray0[4] = 2547;
      intArray0[5] = 823;
      intArray0[6] = (-1942);
      intArray0[7] = 0;
      intArray0[8] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2232.220322017);
      doubleArray0[1] = (-5727.81);
      doubleArray0[2] = (-1709.92624);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 820.80143167;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-1709.92624), 2.0, (-1709.92624), 1.304E19);
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-5727.81);
      doubleArray1[2] = 1.304E19;
      MathArrays.distance1(doubleArray1, doubleArray1);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1402.4);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 785.7735405110797;
      doubleArray0[3] = (-1296.373178347);
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (785.774 >= -1,296.373)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
