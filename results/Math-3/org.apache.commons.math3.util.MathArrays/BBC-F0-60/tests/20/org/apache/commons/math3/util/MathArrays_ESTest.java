/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:54:36 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-56.6635F);
      float float0 = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1.4E-45F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-56.6635F), (-1.0F), 1.4E-45F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-56.6635F);
      doubleArray0[1] = (double) 1.4E-45F;
      doubleArray0[2] = (double) 1.4E-45F;
      doubleArray0[3] = (double) 1.4E-45F;
      doubleArray0[4] = (double) (-56.6635F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) (-1.0F);
      doubleArray0[7] = (double) (-1.0F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(80.15300904373511, double0, 0.01);
      assertArrayEquals(new double[] {(-56.66350173950195), 1.401298464324817E-45, 1.401298464324817E-45, 1.401298464324817E-45, (-56.66350173950195), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 562.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-2682.1555F);
      floatArray0[4] = (-3301.9F);
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 562.0F, (-1.0F), (-2682.1555F), (-3301.9F), 0.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1.0F), 562.0F, (-1.0F), (-2682.1555F), (-3301.9F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(0.0, (double) 0.0F, 0.0, (-1037.35745470124), 0.0, (-2037.61219), 0.0, 4643.783);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "3-)YE2MjMbW3";
      stringArray0[1] = "3-)YE2MjMbW3";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, (-562.1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2445.992F;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 2445.992F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 2445.992F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 2445.992F;
      floatArray1[7] = 2445.992F;
      floatArray1[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2445.992F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 2445.992F, 0.0F, 0.0F, 2445.992F, 0.0F, 2445.992F, 2445.992F, 0.0F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-538);
      intArray0[1] = 2147483537;
      intArray0[2] = 618;
      intArray0[3] = 4902;
      intArray0[4] = (-2883);
      intArray0[5] = 36;
      intArray0[6] = 21;
      intArray0[7] = (-2036);
      intArray0[8] = (-3524);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-538), 2147483537, 618, 4902, (-2883), 36, 21, (-2036), (-3524)}, intArray0);
      assertArrayEquals(new int[] {(-538), 2147483537, 618, 4902, (-2883), 36, 21, (-2036), (-3524)}, intArray1);
      
      MathArrays.scaleInPlace(0.0F, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      doubleArray0[0] = (-1566.30657776);
      doubleArray0[1] = 2203.50762420203;
      doubleArray0[2] = 3.26E18;
      doubleArray0[3] = 0.07073719799518585;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3.26E18, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1566.30657776), 2203.50762420203, 3.26E18, 0.07073719799518585}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "3-)YE2MjMbW3";
      int[] intArray0 = new int[3];
      intArray0[0] = 561;
      intArray0[1] = 2;
      intArray0[2] = (-2144);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2144);
      intArray1[1] = 561;
      intArray1[0] = 561;
      intArray1[3] = 2;
      intArray1[4] = 561;
      intArray1[5] = 561;
      intArray1[6] = (-2144);
      intArray1[7] = (-2144);
      intArray1[8] = (-2144);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(9, intArray1.length);
      assertEquals(2703, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {561, 2, (-2144)}, intArray0);
      assertArrayEquals(new int[] {561, 561, 0, 2, 561, 561, (-2144), (-2144), (-2144)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 716.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 41.585;
      doubleArray0[3] = 2994.844150007904;
      doubleArray0[4] = (-4.9E-324);
      doubleArray0[5] = (-1587.74);
      doubleArray0[6] = (-1331.556);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(3711.7970693179827, double0, 0.01);
      assertArrayEquals(new double[] {716.0, (-1.0), 41.585, 2994.844150007904, (-4.9E-324), (-1587.74), (-1331.556)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 4951.413186;
      doubleArray0[2] = (-2536.0);
      doubleArray0[3] = 0.25534194707870483;
      doubleArray0[4] = 3948.44;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(18, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(18, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.0, (-374.068801681119), 1.0, 1.0531229166855719E65, Double.POSITIVE_INFINITY, (-1898.73), 1.34217729E8, (-374.068801681119));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0531229166855719E65;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 1.0531229166855719E65;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.0531229166855719E65, Double.NEGATIVE_INFINITY, 1.0531229166855719E65, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {1.0531229166855719E65, Double.NEGATIVE_INFINITY, 1.0531229166855719E65, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 24;
      intArray0[1] = (-320);
      intArray0[2] = (-3466);
      intArray0[3] = (-1847);
      intArray0[4] = 32;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {24, (-320), (-3466), (-1847), 32}, intArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(0, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 9;
      intArray0[1] = (-1);
      int int0 = (-212);
      intArray0[2] = (-212);
      int int1 = 0;
      intArray0[3] = 0;
      intArray0[4] = 2140976121;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 199;
      intArray1[1] = 2140976121;
      intArray1[2] = (-212);
      intArray1[3] = (-212);
      intArray1[4] = 0;
      intArray1[5] = 2140976121;
      int int2 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(2140976122, int2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {9, (-1), (-212), 0, 2140976121}, intArray0);
      assertArrayEquals(new int[] {199, 2140976121, (-212), (-212), 0, 2140976121}, intArray1);
      
      int int3 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals((-13014651), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {9, (-1), (-212), 0, 2140976121}, intArray0);
      assertArrayEquals(new int[] {199, 2140976121, (-212), (-212), 0, 2140976121}, intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-4330.476075971313);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 9;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "4p";
      stringArray0[1] = "$VALUES";
      stringArray0[2] = "";
      stringArray0[3] = "Y1uI/Q!ihWWFd;7!}y?";
      stringArray0[4] = "F{r=Y";
      stringArray0[5] = "";
      float[] floatArray0 = new float[9];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = -0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 989.1F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-2297.0762F);
      floatArray0[8] = (-792.2F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, -0.0F, (-1.0F), 0.0F, (-1.0F), 989.1F, 0.0F, (-2297.0762F), (-792.2F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      int int0 = 141;
      Integer integer0 = new Integer(141);
      assertEquals(141, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Pair<Integer, Object> pair0 = new Pair<Integer, Object>(integer0, object0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(pair0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int1 = 2145755986;
      // Undeclared exception!
      MathArrays.buildArray(field0, 141, 2145755986);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "HOLE_BETWEEN_MODELS_TIME_RANGES";
      stringArray0[1] = "C";
      stringArray0[2] = "unable to compute covariances: singular problem";
      stringArray0[3] = ":&";
      stringArray0[4] = "";
      stringArray0[5] = "arithmetic exception";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(519.0116071, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1434.105;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1434.105}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2868.21}, doubleArray1, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1434.105}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2868.21}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1434.105}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2868.21}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2640.3915);
      doubleArray0[1] = 2254.5273971;
      doubleArray0[2] = (-1124.6221724699947);
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2640.3915), 2254.5273971, (-1124.6221724699947)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2640.3915), 2254.5273971, (-1124.6221724699947)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2640.3915), 2254.5273971, (-1124.6221724699947)}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-106.5507934);
      doubleArray1[2] = (double) 0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(106.5507934, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-106.5507934), 0.0}, doubleArray1, 0.01);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      int[] intArray3 = MathArrays.copyOf(intArray2);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray3.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray3);
      
      double double1 = MathArrays.distance(intArray3, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray3.length);
      assertEquals(0.0, double1, 0.01);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray3);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][5];
      doubleArray2[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(12, doubleArray0.length);
      assertEquals(23, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(12, doubleArray0.length);
      assertEquals(23, doubleArray1.length);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertEquals(12, doubleArray0.length);
      assertEquals(23, doubleArray1.length);
      assertEquals(23, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 12 != 23
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-20.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-20.0), 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(20.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-20.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      MathArrays.checkOrder(doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-20.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-791.6);
      doubleArray0[1] = 279.1191361265831;
      doubleArray0[2] = 39.8588352;
      doubleArray0[3] = (-4.813899778443457E-9);
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (279.119 > 39.859)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 420;
      doubleArray0[1] = 1250.334552008594;
      MathArrays.checkPositive(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {420.0, 1250.334552008594}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {420.0, 1250.334552008594}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1250.334552008594;
      doubleArray2[1] = (double) 420;
      doubleArray2[2] = (double) 420;
      doubleArray2[3] = 1250.334552008594;
      doubleArray2[4] = 1250.334552008594;
      doubleArray2[5] = 1250.334552008594;
      doubleArray2[6] = (double) 420;
      doubleArray2[7] = 1250.334552008594;
      doubleArray2[8] = 1250.334552008594;
      doubleArray1[3] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 420;
      doubleArray0[1] = 1.7976931348623157E308;
      MathArrays.checkPositive(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {420.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {420.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2305.1272307121344);
      doubleArray0[1] = (-3906.20162);
      doubleArray0[2] = (-2067.8043);
      doubleArray0[3] = (-709.93);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-709.93);
      doubleArray1[1] = (-3906.20162);
      doubleArray1[2] = (-3906.20162);
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long[][] longArray0 = new long[2][2];
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = (-1900);
      intArray0[3] = 1079;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1079;
      intArray1[1] = (-1137);
      intArray1[2] = 0;
      intArray1[3] = 1;
      intArray1[4] = 1;
      intArray1[5] = 1262;
      intArray1[6] = 1;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertEquals(1900, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, 0, (-1900), 1079}, intArray0);
      assertArrayEquals(new int[] {1079, (-1137), 0, 1, 1, 1262, 1}, intArray1);
      
      int[] intArray2 = MathArrays.copyOf(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {1, 0, (-1900), 1079}, intArray0);
      assertArrayEquals(new int[] {1, 0, (-1900), 1079}, intArray2);
      
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertEquals(2688.2963006335444, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {1, 0, (-1900), 1079}, intArray0);
      assertArrayEquals(new int[] {1079, (-1137), 0, 1, 1, 1262, 1}, intArray1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = new float[7];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.925681159240093E-8;
      doubleArray0[1] = (-0.7900653324419121);
      doubleArray0[2] = 2823.043242794926;
      doubleArray0[3] = 85.78939640522003;
      doubleArray0[4] = 0.9808930158615112;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {2.925681159240093E-8, (-0.7900653324419121), 2823.043242794926, 85.78939640522003, 0.9808930158615112}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1503);
      assertEquals(5, doubleArray0.length);
      assertEquals(1503, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.925681159240093E-8, (-0.7900653324419121), 2823.043242794926, 85.78939640522003, 0.9808930158615112}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(57.2957763671875, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray1, (-2147));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double(278.417780552445);
      assertEquals(278.417780552445, (double)double0, 0.01);
      assertNotNull(double0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-3906.20162);
      doubleArray0[2] = 420.0;
      doubleArray0[3] = 284.22748891763;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (1 > -3,906.202)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-2138.13);
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = (-1628.99358);
      doubleArray0[4] = (-1263.83678294);
      doubleArray0[5] = (-1093.728);
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (0 > -2,138.13)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = null;
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      String[] stringArray0 = new String[4];
      stringArray0[0] = "E,x:0l~>$s|AVI/8r";
      stringArray0[1] = "E,x:0l~>$s|AVI/8r";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4549.586976;
      doubleArray0[1] = 57854.86470936681;
      doubleArray0[2] = 3855.18;
      doubleArray0[3] = 290.787847600873;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 2617.9819920304662;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3855.18;
      doubleArray1[1] = 1.34217729E8;
      doubleArray1[2] = 290.787847600873;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      int int0 = 141;
      Integer integer0 = new Integer(141);
      assertEquals(141, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Pair<Integer, Object> pair0 = new Pair<Integer, Object>(integer0, object0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(pair0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0).when(field0).getZero();
      int int1 = 159;
      int int2 = 657;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 159, 657);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 134217729;
      intArray0[0] = 134217729;
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1994, (-1));
      assertEquals(1994, objectArray0.length);
      assertNotNull(objectArray0);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 420, 1);
      assertEquals(420, objectArray0.length);
      assertNotNull(objectArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-1870.58);
      doubleArray0[4] = 3817.647717;
      doubleArray0[5] = (-3068.0);
      doubleArray0[6] = 749.7768621;
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = Double.NaN;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.304E19);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, Double.NaN, (-1870.58), 3817.647717, (-3068.0), 749.7768621, 1.304E19, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.3421772899861854E8, 0.0, Double.NaN, (-1870.5799999807464), 3817.6477169607056, (-3067.9999999684214), 749.7768620922827, 1.3039999999865782E19, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-219.02713909328662), 1057.3897137479, (-75.6061676099803), 830.0960398405638, (double) 1641.6F, 2131.0, 1616.301544322, 2131.0);
      assertEquals(6648230.714694376, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 420;
      doubleArray0[1] = 1250.334552008594;
      MathArrays.checkPositive(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {420.0, 1250.334552008594}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {420.0, 1250.334552008594}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      long[][] longArray0 = new long[3][6];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 420;
      longArray1[1] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 908L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = 2780L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray3[1] = 908L;
      longArray3[2] = 2780L;
      longArray3[3] = 0L;
      longArray3[4] = 4294967295L;
      longArray3[5] = (-2085L);
      longArray3[6] = 0L;
      longArray3[7] = 0L;
      longArray3[8] = 908L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.linearCombination(0.3936265707015991, (double) 0.0F, 0.3936265707015991, (double) 6, 2131.0, 1616.301544322, 0.875, (double) 0.0F);
      assertEquals(3444340.952709606, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = 1616.301544322;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = 2131.0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,616.302 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 831.0960398405638;
      double[] doubleArray1 = MathArrays.scale(831.0960398405638, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {831.0960398405638}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {690720.6274386679}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 831.0960398405638;
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, 831.0960398405638);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-1.0), 831.0960398405638}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.0012046798828147), 832.0972445204466}, doubleArray3, 0.01);
      
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 831.0960398405638;
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = 831.0960398405638;
      doubleArray4[3] = 831.0960398405638;
      doubleArray4[4] = (-2903.637);
      doubleArray4[5] = (-1.0);
      doubleArray4[6] = 831.0960398405638;
      doubleArray4[7] = (-1.0);
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 126.95258724636;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 126.95258724636;
      doubleArray0[3] = (-57.4606027322);
      doubleArray0[4] = 61.6068;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {126.95258724636, 0.0, 126.95258724636, (-57.4606027322), 61.6068, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {126.95258724636, 0.0, 126.95258724636, (-57.4606027322), 61.6068, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {126.95258724636, 0.0, 126.95258724636, (-57.4606027322), 61.6068, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 1025);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.32, (-528.24029481), 0.0, (-528.24029481), (-528.24029481), Double.POSITIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-960.2F);
      floatArray0[2] = 2066.4727F;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2145685378;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2145685378;
      doubleArray0[1] = (double) 2145685378;
      doubleArray0[2] = (double) 2145685378;
      doubleArray0[3] = (double) 2145685378;
      doubleArray0[4] = (-366.02763883);
      doubleArray0[5] = (double) 2145685378;
      doubleArray0[6] = (double) 2145685378;
      doubleArray0[7] = (double) 2145685378;
      double[][] doubleArray1 = new double[7][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = null;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1641.6F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1289.0305F;
      floatArray0[3] = 1664.7542F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1641.6F, 0.0F, 1289.0305F, 1664.7542F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {1641.6F, 0.0F, 1289.0305F, 1664.7542F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1116.0);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 420;
      intArray0[0] = 420;
      intArray0[1] = 420;
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][7];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
      doubleArray1[5] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray3[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 58.67529909;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray3, doubleArray4);
      assertEquals(8, doubleArray3.length);
      assertEquals(3, doubleArray4.length);
      assertFalse(boolean0);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 58.67529909}, doubleArray4, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray3, doubleArray3);
      assertEquals(8, doubleArray3.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray4);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, doubleArray4.length);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 58.67529909}, doubleArray4, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 168;
      intArray0[1] = 6;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {168, 6}, intArray0);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(Double.NaN, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3921.21);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3921.21);
      doubleArray1[1] = (-3921.21);
      doubleArray1[2] = (-3921.21);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-3921.21), (-3921.21), (-3921.21)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.53758878641E7, 1.53758878641E7, 1.53758878641E7}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-620);
      intArray0[1] = 390;
      intArray0[2] = (-620);
      intArray0[3] = (-620);
      intArray0[4] = (-620);
      intArray0[5] = 390;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-620), 390, (-620), (-620), (-620), 390}, intArray0);
      assertArrayEquals(new int[] {(-620), 390, (-620), (-620), (-620), 390}, intArray1);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-314.5415357466495);
      doubleArray3[1] = (double) 390;
      doubleArray3[2] = (double) (-620);
      doubleArray3[3] = (double) 390;
      doubleArray3[4] = (double) (-620);
      doubleArray3[5] = (double) (-620);
      doubleArray3[6] = 1616.301544322;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2536.0);
      doubleArray0[1] = 2579.36;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1365.46820098);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-79862.25455916212), 81227.72276014212, 0.0, 0.0}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[0][8];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-79862.25455916212), 81227.72276014212, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-79862.25455916212), 81227.72276014212, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[][] doubleArray2 = new double[7][7];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-79862.25455916212), 0.0, 81227.72276014212, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 420;
      intArray0[0] = 420;
      intArray0[1] = 420;
      double double0 = 1643.4231000986;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1643.4231000986;
      doubleArray0[1] = 1643.4231000986;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1643.4231000986, 1643.4231000986, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1643.4231000986, 1643.4231000986, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = new Integer((-1658));
      assertEquals((-1658), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1658));
      assertEquals((-1658), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, integerArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (int)integerArray0[0];
      doubleArray0[1] = (double) (int)integerArray0[3];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1658.0), (-1658.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2748964.0, 2748964.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-74.0111536545595);
      doubleArray0[1] = (-240.53038209209);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1365.46820098);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-74.0111536545595), (-240.53038209209), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {321.2926286293246, 1044.175572350675, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[1][1];
      long[] longArray1 = new long[2];
      longArray1[0] = (-1L);
      long long0 = 3180L;
      longArray1[1] = 3180L;
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long[][] longArray0 = new long[3][4];
      long[] longArray1 = new long[6];
      longArray1[0] = (-1L);
      longArray1[1] = (-1131L);
      longArray1[2] = (-1L);
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      MathArrays.checkRectangular(longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-1131L);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1279164.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1131.0), 0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1422);
      doubleArray0[1] = (double) (-76);
      doubleArray0[2] = (double) 64;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 321, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      int int0 = (-1);
      intArray0[0] = (-1);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 0}, intArray0);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 420;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 420;
      doubleArray0[1] = 1250.334552008594;
      MathArrays.checkPositive(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {420.0, 1250.334552008594}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = Float.POSITIVE_INFINITY;
      floatArray0[1] = 3699.0247F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (-4967.131F);
      floatArray0[4] = 537.61F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-883.79596F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {Float.POSITIVE_INFINITY, 3699.0247F, Float.NaN, (-4967.131F), 537.61F, (-1.0F), 0.0F, (-883.79596F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 134217729;
      intArray0[1] = 134217729;
      intArray0[2] = 6;
      intArray0[3] = 6;
      int[] intArray1 = MathArrays.copyOf(intArray0, 6);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {134217729, 134217729, 6, 6}, intArray0);
      assertArrayEquals(new int[] {134217729, 134217729, 6, 6, 0, 0}, intArray1);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 889, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.5F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1048.0F;
      floatArray0[4] = (-166.85648F);
      floatArray0[5] = 9.0F;
      floatArray0[6] = Float.NaN;
      floatArray0[7] = (-1.0F);
      floatArray0[8] = (-1628.6F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.5F, 0.0F, 0.0F, 1048.0F, (-166.85648F), 9.0F, Float.NaN, (-1.0F), (-1628.6F)}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-2644281811660520851L);
      longArray0[1] = 4607182418800017408L;
      longArray0[2] = (-3319L);
      longArray0[3] = (-1454L);
      longArray0[4] = 0L;
      longArray0[5] = (-1873L);
      longArray0[6] = (-2481L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,644,281,811,660,520,851 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = (-528.24029481);
      doubleArray0[2] = 3.32;
      doubleArray0[3] = (-528.24029481);
      doubleArray0[4] = (-528.24029481);
      doubleArray0[5] = (-547.9959);
      doubleArray0[6] = (-528.24029481);
      doubleArray0[7] = 3.32;
      long[][] longArray0 = new long[3][4];
      long[] longArray1 = new long[4];
      longArray1[0] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[3] = 0L;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray0[2] = longArray3;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (-1084.0F);
      floatArray0[3] = (float) 0L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1084.0F), 0.0F}, floatArray0, 0.01F);
      
      MathArrays.checkNonNegative(longArray3);
      assertEquals(6, longArray3.length);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray3);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3921.21);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3921.21), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      int int0 = 3;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-74.0111536545595);
      doubleArray0[1] = (-240.53038209209);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-74.0111536545595), (-240.53038209209), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1630.451F;
      floatArray0[3] = 2152.62F;
      floatArray0[4] = 4352.574F;
      floatArray0[5] = 1505.0F;
      floatArray0[6] = 261.7063F;
      floatArray0[7] = (-1.0F);
      floatArray0[8] = 633.1156F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1630.451F, 2152.62F, 4352.574F, 1505.0F, 261.7063F, (-1.0F), 633.1156F}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "grBr9b3+MG";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      
      double double0 = MathArrays.linearCombination((-240.53038209209), (-74.0111536545595), (-74.0111536545595), (-240.53038209209), (-240.53038209209), 1616.301544322, 2131.0, (-240.53038209209));
      assertEquals((-865736.0101348344), double0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-74.0111536545595);
      doubleArray1[1] = 1616.301544322;
      doubleArray1[2] = (-74.0111536545595);
      doubleArray1[3] = 1616.301544322;
      doubleArray1[4] = 2131.0;
      doubleArray1[5] = (-865736.0101348344);
      doubleArray1[6] = 1616.301544322;
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,616.302 >= -74.011)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2536.0);
      doubleArray0[1] = 2579.36;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1365.4682);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-79862.25450184479), 81227.72270184479, 0.0, 0.0}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[0][8];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-79862.25450184479), 81227.72270184479, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-79862.25450184479), 81227.72270184479, 0.0, 0.0}, doubleArray2, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(1.2975922629445219E10, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-79862.25450184479), 81227.72270184479, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-79862.25450184479), 81227.72270184479, 0.0, 0.0}, doubleArray2, 0.01);
      
      MathArrays.scaleInPlace(3.834E-20, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-9.723024E-17), 9.88926624E-17, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-9.723024E-17), 9.88926624E-17, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.4537195704576E-33, 9.779758676560375E-33, 0.0, 0.0}, doubleArray3, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int int0 = 0;
      int int1 = 894;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 894;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 894;
      doubleArray0[4] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (894 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      double double0 = (-74.0111536545595);
      doubleArray0[0] = (-74.0111536545595);
      double double1 = (-240.53038209209);
      doubleArray0[1] = (-74.0111536545595);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-74.011 <= -74.011)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = (-528.24029481);
      doubleArray0[2] = 3.32;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3.32, (-528.24029481), 3.32, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1317.761609276497;
      doubleArray1[1] = 3.32;
      doubleArray1[2] = 3.32;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1317.761609276497, 3.32, 3.32}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1317.761609276497, 3.32, 3.32}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray3.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1317.761609276497, 3.32, 3.32}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2635.523218552994, 6.64, 6.64}, doubleArray3, 0.01);
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2434.27;
      doubleArray0[1] = 2434.27;
      doubleArray0[2] = 2434.27;
      doubleArray0[3] = 2434.27;
      doubleArray0[4] = 2434.27;
      doubleArray0[5] = 2434.27;
      doubleArray0[6] = 2434.27;
      doubleArray0[7] = 2434.27;
      doubleArray0[8] = 2434.27;
      double[] doubleArray1 = MathArrays.scale(2434.27, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2434.27, 2434.27, 2434.27, 2434.27, 2434.27, 2434.27, 2434.27, 2434.27, 2434.27}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5925670.4329, 5925670.4329, 5925670.4329, 5925670.4329, 5925670.4329, 5925670.4329, 5925670.4329, 5925670.4329, 5925670.4329}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2434.27, 2434.27, 2434.27, 2434.27, 2434.27, 2434.27, 2434.27, 2434.27, 2434.27}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5925670.4329, 5925670.4329, 5925670.4329, 5925670.4329, 5925670.4329, 5925670.4329, 5925670.4329, 5925670.4329, 5925670.4329}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2434.27, 2434.27, 2434.27, 2434.27, 2434.27, 2434.27, 2434.27, 2434.27, 2434.27}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5925670.4329, 5925670.4329, 5925670.4329, 5925670.4329, 5925670.4329, 5925670.4329, 5925670.4329, 5925670.4329, 5925670.4329}, doubleArray1, 0.01);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 134217729;
      int[] intArray1 = MathArrays.copyOf(intArray0, 6);
      assertEquals(2, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), 134217729}, intArray0);
      assertArrayEquals(new int[] {(-1), 134217729, 0, 0, 0, 0}, intArray1);
      
      int int0 = MathArrays.distance1(intArray1, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(0, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), 134217729}, intArray0);
      assertArrayEquals(new int[] {(-1), 134217729, 0, 0, 0, 0}, intArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2536.0);
      doubleArray0[1] = 2579.36;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[0][8];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      MathArrays.scaleInPlace(3.834E-20, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-9.723024E-17), 9.88926624E-17, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-628);
      intArray0[1] = 3570;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {(-628), 3570}, intArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(2630.890918232539, Double.NaN, 2630.890918232539, 1656.48574504);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2589);
      intArray0[1] = 2;
      intArray0[2] = (-1207);
      intArray0[3] = 0;
      intArray0[4] = (-2454);
      int[] intArray1 = MathArrays.copyOf(intArray0, 7);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2589), 2, (-1207), 0, (-2454)}, intArray0);
      assertArrayEquals(new int[] {(-2589), 2, (-1207), 0, (-2454), 0, 0}, intArray1);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 134217729, 271);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(2630.890918232539, Double.NaN, 2630.890918232539, 1656.531403167151);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2589);
      intArray0[1] = 2;
      intArray0[2] = (-1181);
      intArray0[3] = 13;
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 13);
      assertEquals(5, intArray0.length);
      assertEquals(13, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2589), 2, (-1181), 13, 0}, intArray0);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2783.505552468186;
      doubleArray0[1] = 2497.640955236;
      doubleArray0[2] = 683.9800056743759;
      doubleArray0[3] = 2497.640955236;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2783.505552468186, 2497.640955236, 683.9800056743759, 2497.640955236, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2783.505552468186, 2497.640955236, 683.9800056743759, 2497.640955236, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2783.505552468186, 2497.640955236, 683.9800056743759, 2497.640955236, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2783.505552468186, 2497.640955236, 683.9800056743759, 2497.640955236, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2783.505552468186, 2497.640955236, 683.9800056743759, 2497.640955236, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5567.011104936372, 4995.281910472, 1367.9600113487518, 4995.281910472, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {2783.505552468186, 2497.640955236, 683.9800056743759, 2497.640955236, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2783.505552468186, 2497.640955236, 683.9800056743759, 2497.640955236, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5567.011104936372, 4995.281910472, 1367.9600113487518, 4995.281910472, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.5, 0.5, 0.5, 0.5, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      
      double[][] doubleArray4 = new double[6][4];
      doubleArray4[0] = doubleArray1;
      doubleArray4[1] = doubleArray3;
      doubleArray4[2] = doubleArray3;
      doubleArray4[3] = doubleArray0;
      doubleArray4[4] = doubleArray0;
      doubleArray4[5] = doubleArray3;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 683.9800056743759);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-74.0111536545595);
      doubleArray0[1] = (-240.53038209209);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "grBr9b3+MG";
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((-240.53038209209), (-74.0111536545595), (-74.0111536545595), (-240.53038209209), (-240.53038209209), 1616.301544322, 2131.0, (-240.53038209209));
      assertEquals((-865736.0101348344), double0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-74.0111536545595);
      doubleArray1[1] = 1616.301544322;
      doubleArray1[2] = (-74.0111536545595);
      doubleArray1[3] = 1616.301544322;
      doubleArray1[4] = 2131.0;
      doubleArray1[5] = (-865736.0101348344);
      doubleArray1[6] = 1616.301544322;
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,616.302 >= -74.011)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.0), (-2.0)}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1131L);
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1131.0F), Float.NaN, (-1.0F), (-1.0F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4080.895);
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) (-1.0F);
      doubleArray1[3] = (double) (-1.0F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4080.895), 0.0, (-1.0), (-1.0)}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination((-240.53038209209), 182.146969989, (-101.0), 3.834E-20, 0.0, (-9.007199254740992E15));
      assertEquals((-43811.88028837062), double0, 0.01);
      
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2147482975);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-4411);
      intArray0[1] = 260;
      intArray0[2] = 3772;
      intArray0[3] = (-1);
      intArray0[4] = 759;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-4411), 260, 3772, (-1), 759}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 260;
      doubleArray0[2] = (double) 3772;
      doubleArray0[3] = 1730.83212727;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 260.0, 3772.0, 1730.83212727}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 520.0, 7544.0, 3461.66425454}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 260.0, 3772.0, 1730.83212727}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 520.0, 7544.0, 3461.66425454}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace(0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 260.0, 3772.0, 1730.83212727}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 3772;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 260;
      floatArray0[3] = (float) (-4411);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (-2270.1702F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {3772.0F, (-1.0F), 260.0F, (-4411.0F), (-1.0F), (-2270.1702F)}, floatArray0, 0.01F);
      
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 260.0, 3772.0, 1730.83212727}, doubleArray0, 0.01);
      
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 759;
      floatArray1[1] = (-485.3027F);
      floatArray1[2] = (-2270.1702F);
      floatArray1[3] = (float) (-1);
      floatArray1[4] = (float) 260;
      floatArray1[5] = (float) 3772;
      floatArray1[6] = (float) 759;
      floatArray1[7] = 0.0F;
      floatArray1[8] = (float) 0;
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {759.0F, (-485.3027F), (-2270.1702F), (-1.0F), 260.0F, 3772.0F, 759.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {3772.0F, (-1.0F), 260.0F, (-4411.0F), (-1.0F), (-2270.1702F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 894;
      intArray0[2] = 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-74.0111536545595);
      doubleArray0[1] = (-240.53038209209);
      doubleArray0[2] = 1725.15822350237;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "EULER_ANGLES_SINGULARITY";
      stringArray0[1] = "EULER_ANGLES_SINGULARITY";
      int[] intArray0 = new int[2];
      intArray0[0] = 894;
      intArray0[1] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {894, 0}, intArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -74.011 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-121.096078529767), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "CBq~$ki58`!=]i";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(85);
      assertEquals(85, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 0}, intArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "E,x:0l~>$s|AVI/8r";
      stringArray0[1] = "org.apache.com(ons.math3.utilZMathArrays$2";
      stringArray0[2] = "org.apache.com(ons.math3.utilZMathArrays$2";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[4] = "org.apache.com(ons.math3.utilZMathArrays$2";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[6] = "EULER_ANGLES_SINGULARITY";
      stringArray0[7] = "org.apache.com(ons.math3.utilZMathArrays$2";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray1, 0.01);
      
      MathArrays.checkOrder(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      assertEquals(MathArrays.OrderDirection.DECREASING, mathArrays_OrderDirection0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[2][4];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2536.0);
      doubleArray0[1] = 2579.36;
      long long0 = 1L;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 124.56677;
      doubleArray0[1] = 1317.761609276497;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4677.562980480552);
      doubleArray1[1] = (-1596.81494140625);
      doubleArray1[2] = (-4677.562980480552);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-4677.562980480552);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 124.56677;
      doubleArray1[8] = 1317.761609276497;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-4677.562980480552);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2783.505552468186;
      doubleArray0[1] = 2497.640955236;
      doubleArray0[2] = 684.0;
      doubleArray0[3] = 2497.640955236;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2783.505552468186, 2497.640955236, 684.0, 2497.640955236, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2783.505552468186, 2497.640955236, 684.0, 2497.640955236, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2783.505552468186, 2497.640955236, 684.0, 2497.640955236, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2783.505552468186, 2497.640955236, 684.0, 2497.640955236, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2783.505552468186, 2497.640955236, 684.0, 2497.640955236, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5567.011104936372, 4995.281910472, 1368.0, 4995.281910472, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {2783.505552468186, 2497.640955236, 684.0, 2497.640955236, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2783.505552468186, 2497.640955236, 684.0, 2497.640955236, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5567.011104936372, 4995.281910472, 1368.0, 4995.281910472, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.5, 0.5, 0.5, 0.5, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      
      double[][] doubleArray4 = new double[6][4];
      doubleArray4[0] = doubleArray1;
      doubleArray4[1] = doubleArray3;
      doubleArray4[2] = doubleArray3;
      doubleArray4[3] = doubleArray0;
      doubleArray4[4] = doubleArray0;
      doubleArray4[5] = doubleArray3;
      MathArrays.sortInPlace(doubleArray3, doubleArray4);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertEquals(6, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {2783.505552468186, 2497.640955236, 684.0, 2497.640955236, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2783.505552468186, 2497.640955236, 684.0, 2497.640955236, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5567.011104936372, 4995.281910472, 1368.0, 4995.281910472, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.5, 0.5, 0.5, 0.5, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(13, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 13 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3921.21);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 653.2545475776163;
      doubleArray0[3] = (-20.0);
      doubleArray0[4] = (-2203.50762420203);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3921.21), 1.304E19, 653.2545475776163, (-20.0), (-2203.50762420203), 0.0, 2.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3921.21), 1.304E19, 653.2545475776163, (-20.0), (-2203.50762420203), 0.0, 2.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[13];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.304E19;
      doubleArray2[1] = (-2203.50762420203);
      doubleArray2[2] = 653.2545475776163;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 13
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = (-2608.0);
      // Undeclared exception!
      try { 
        MathArrays.scale((-2608.0), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((-3551.115), 4.48650632899734, 492.06246996688, (-1.0));
      assertEquals((-16424.162392464266), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 4.48650632899734;
      doubleArray1[2] = (-16424.162392464266);
      double double2 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(0.0, double2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 4.48650632899734, (-16424.162392464266)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 4.48650632899734, (-16424.162392464266)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 420;
      intArray0[1] = 2135;
      intArray0[2] = (-1540);
      intArray0[3] = 74;
      intArray0[4] = 0;
      intArray0[5] = 2145880340;
      intArray0[6] = 894;
      intArray0[7] = 0;
      intArray0[8] = (-441);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {420, 2135, (-1540), 74, 0, 2145880340, 894, 0, (-441)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1.0F);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(608.9616, (-354.0209152), 608.9616, 0.0, Double.POSITIVE_INFINITY, 1752.834360342537);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<Object, Object>[] pairArray0 = MathArrays.buildArray(field0, 0);
      assertEquals(0, pairArray0.length);
      assertNotNull(pairArray0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 608.9616;
      doubleArray1[1] = (double) 1.0F;
      doubleArray1[2] = (double) (-1.0F);
      doubleArray1[3] = (double) 0.0F;
      boolean boolean2 = MathArrays.equals(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {608.9616, 1.0, (-1.0), 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4.3466666666666665E18;
      doubleArray0[1] = 1.63E18;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {4.3466666666666665E18, 1.63E18}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {4.3466666666666665E18, 1.63E18}, doubleArray0, 0.01);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new double[] {4.3466666666666665E18, 1.63E18}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (4,346,666,666,666,666,500 >= 1,630,000,000,000,000,000)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2536.0);
      doubleArray0[1] = 2579.36;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3617.235686211226, double0, 0.01);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((-2536.0), (-2536.0), 0.0, 3.6725170580355583E-9);
      assertEquals(6431296.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][5];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {2579.36, 0.0, 0.0, (-2536.0)}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 76;
      intArray0[1] = 76;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {76, 76}, intArray0);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 889;
      intArray1[1] = 0;
      intArray1[2] = 2567;
      intArray1[3] = 308;
      intArray1[4] = 2567;
      intArray1[5] = 308;
      intArray1[6] = 2567;
      intArray1[7] = 889;
      intArray1[8] = 2567;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-74.0111536545595);
      doubleArray0[1] = (-240.53038209209);
      doubleArray0[2] = 1725.15822350237;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (float) 0L;
      floatArray1[2] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F)}, floatArray1, 0.01F);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-74.0111536545595), (-240.53038209209), 1725.15822350237, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(830.8693, (-464.3694), (double) (-1.0F), (-240.53038209209), 3.834E-20, 3124.0976047);
      assertEquals((-385589.7479373279), double0, 0.01);
      
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1530);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(1.34217729E8, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 855.27144334648;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 855.27144334648;
      doubleArray1[1] = 855.27144334648;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 855.27144334648;
      doubleArray1[4] = 855.27144334648;
      doubleArray1[5] = 855.27144334648;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {855.27144334648}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {855.27144334648, 855.27144334648, 0.0, 855.27144334648, 855.27144334648, 855.27144334648}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 4314.37F;
      floatArray0[1] = (-986.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.4E-45F;
      floatArray0[4] = 885.6476F;
      floatArray0[5] = 1151.9308F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1638.9277F;
      floatArray0[8] = (-3.4028235E38F);
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-986.0F);
      floatArray1[2] = 4314.37F;
      floatArray1[3] = (-986.0F);
      floatArray1[4] = 0.0F;
      floatArray1[5] = 1638.9277F;
      floatArray1[6] = 4314.37F;
      floatArray1[7] = 1151.9308F;
      floatArray1[8] = 1.4E-45F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, (-986.0F), 4314.37F, (-986.0F), 0.0F, 1638.9277F, 4314.37F, 1151.9308F, 1.4E-45F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {4314.37F, (-986.0F), 0.0F, 1.4E-45F, 885.6476F, 1151.9308F, 0.0F, 1638.9277F, (-3.4028235E38F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2536.0);
      doubleArray0[1] = 2579.36;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1365.46820098);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-79862.25455916212), 81227.72276014212, 0.0, 0.0}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[0][8];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-79862.25455916212), 81227.72276014212, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-79862.25455916212), 81227.72276014212, 0.0, 0.0}, doubleArray2, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(1.297592264807092E10, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-79862.25455916212), 81227.72276014212, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-79862.25455916212), 81227.72276014212, 0.0, 0.0}, doubleArray2, 0.01);
      
      MathArrays.scaleInPlace(3.834E-20, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-9.723024E-17), 9.88926624E-17, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = null;
      Integer integer0 = new Integer(11);
      assertEquals(11, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[0] = integer0;
      integerArray0[2] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2536.0);
      doubleArray0[1] = 2579.36;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1365.46820098);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-79862.25455916212), 81227.72276014212, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(78648.36276014212, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-79862.25455916212), 81227.72276014212, 0.0, 0.0}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = 1164L;
      longArray0[3] = (long) (-76);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -76 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-240.53038209209);
      doubleArray0[2] = 1725.15822350237;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1741.845504293426, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-240.53038209209), 1725.15822350237, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(1741.845504293426, 1741.845504293426, 1.34217729E8, 1741.845504293426);
      assertEquals(2.3378958188088422E11, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2536.0);
      doubleArray0[1] = 2579.36;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1365.46820098);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-79862.25455916212), 81227.72276014212, 0.0, 0.0}, doubleArray1, 0.01);
      
      Integer integer0 = new Integer(2045222521);
      assertEquals(2045222521, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertEquals(2045222521, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(1185);
      assertEquals(1185, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(4);
      assertEquals(4, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer2;
      integerArray0[1] = integer2;
      integerArray0[2] = integer0;
      integerArray0[3] = integer3;
      integerArray0[4] = integer2;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, integerArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.37797970327241E9, 6.59794294479851E9, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-79862.25455916212), 81227.72276014212, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (int)integerArray0[4];
      double double0 = MathArrays.distance1(doubleArray3, doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(6.37797851827241E9, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.37797970327241E9, 6.59794294479851E9, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1185.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-79862.25455916212), 81227.72276014212, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      double double0 = (-20.0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray1, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      longArray0[1] = (-1131L);
      longArray0[2] = (-1232L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = null;
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double0 = MathArrays.linearCombination((double) (-1.0F), (-240.53038209209), (double) (-1131L), (double) 0.0F, 830.8693, 3.834E-20);
      assertEquals(240.53038209209, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147482975);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-780.652561);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-780.652561)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-780.652561)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-723);
      intArray0[1] = (-723);
      intArray0[2] = (-723);
      intArray0[3] = (-723);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {(-723), (-723), (-723), (-723)}, intArray0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[2] = "EULER_ANGLES_SINGULARITY";
      stringArray0[3] = "EULER_ANGLES_SINGULARITY";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$2";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3498));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3921.21);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 652.1614001098;
      doubleArray0[3] = (-20.0);
      doubleArray0[4] = (-2203.50762420203);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[20];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-20.0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertEquals(20, doubleArray1.length);
      assertEquals(20, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = new double[1][7];
      doubleArray3[0] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 20
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-74.0111536545595);
      doubleArray0[1] = (-240.53038209209);
      doubleArray0[2] = 1725.15822350237;
      int[] intArray0 = new int[1];
      intArray0[0] = (-723);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-723)}, intArray0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "EULER_ANGLES_SINGULARITY";
      stringArray0[1] = "EULER_ANGLES_SINGULARITY";
      stringArray0[2] = "EULER_ANGLES_SINGULARITY";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$2";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-74.0111536545595), (-240.53038209209), 1725.15822350237, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-825));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1643.4231000986;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1643.4231000986;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-74.0111536545595);
      doubleArray0[1] = (-240.53038209209);
      doubleArray0[2] = 1725.15822350237;
      int[] intArray0 = new int[1];
      intArray0[0] = (-723);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-723)}, intArray0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "EULER_ANGLES_SINGULARITY";
      stringArray0[1] = "EULER_ANGLES_SINGULARITY";
      stringArray0[2] = "EULER_ANGLES_SINGULARITY";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$2";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-825));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2783.505552468186;
      doubleArray0[1] = 2497.640955236;
      doubleArray0[2] = 684.14565742117;
      doubleArray0[3] = 1.5495331790810098;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-4677.562980480552);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {2783.505552468186, 2497.640955236, 684.14565742117, 1.5495331790810098, (-1.0), 0.0, (-4677.562980480552)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = 10000L;
      longArray0[2] = 0L;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-1L);
      doubleArray2[1] = (double) 0L;
      doubleArray2[2] = 1.5495331790810098;
      doubleArray2[3] = 2497.640955236;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (double) (-1L);
      doubleArray1[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 2497.640955236;
      doubleArray3[2] = (double) 0L;
      doubleArray3[3] = (double) 10000L;
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 420;
      intArray0[1] = 2135;
      intArray0[2] = (-1540);
      intArray0[3] = 74;
      intArray0[4] = 0;
      intArray0[5] = 2145880340;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 2135;
      Integer integer0 = new Integer((-1540));
      assertEquals((-1540), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 420;
      integerArray0[5] = (Integer) (-1540);
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[6] = integer1;
      integerArray0[7] = (Integer) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, integerArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (int)integerArray0[0];
      doubleArray0[1] = (double) 420;
      doubleArray0[2] = (double) (int)integerArray0[5];
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2135.0, 420.0, (-1540.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4558225.0, 176400.0, 2371600.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(7105210.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2135.0, 420.0, (-1540.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4558225.0, 176400.0, 2371600.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-74.0111536545595);
      doubleArray0[1] = (-240.53038209209);
      doubleArray0[2] = 1725.15822350237;
      int[] intArray0 = new int[1];
      intArray0[0] = (-723);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-723)}, intArray0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "EULER_ANGLES_SINGULARITY";
      stringArray0[1] = "EULER_ANGLES_SINGULARITY";
      stringArray0[2] = "EULER_ANGLES_SINGULARITY";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$2";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-825));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      longArray0[1] = (-1131L);
      longArray0[2] = (-1232L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(546);
      assertEquals(546, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(4);
      assertEquals(4, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 0}, intArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "org.apache.com(ons.math3.utilZMathArrays$2";
      stringArray0[2] = "org.apache.com(ons.math3.utilZMathArrays$2";
      stringArray0[3] = "org.apache.com(ons.math3.utilZMathArrays$2";
      stringArray0[4] = "org.apache.com(ons.math3.utilZMathArrays$2";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[7] = "org.apache.com(ons.math3.utilZMathArrays$2";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1.700416E38, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, (-1.0), (-1.0), 0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1.700416E38, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {1.304E19, (-1.0), (-1.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = (-528.24029481);
      doubleArray0[2] = 3.32;
      doubleArray0[3] = (-528.24029481);
      doubleArray0[4] = (-528.24029481);
      doubleArray0[5] = (-547.9959);
      doubleArray0[6] = (-528.24029481);
      doubleArray0[7] = 3.32;
      long[][] longArray0 = new long[3][4];
      long[] longArray1 = new long[4];
      longArray1[0] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray0[2] = longArray3;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (-1084.0F);
      floatArray0[3] = (float) 0L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1084.0F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-2049);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2049), (-2049));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 2045222521;
      intArray0[4] = 134217729;
      int[] intArray1 = MathArrays.copyOf(intArray0, 6);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), (-1), (-1), 2045222521, 134217729}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), 2045222521, 134217729, 0}, intArray1);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1509.5607F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1509.5607F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1643.4231000986;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1643.4231000986;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.32, (-528.24029481), 0.0, (-528.24029481), (-528.24029481), Double.POSITIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-960.2F);
      floatArray0[2] = 2066.4727F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-960.2F), 2066.4727F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2066.4727F;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-528.24029481);
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 3.32;
      doubleArray0[7] = (double) 2066.4727F;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long[][] longArray0 = new long[2][2];
      long[] longArray1 = new long[1];
      longArray1[0] = 159L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 0, 606551742);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-74.0111536545595);
      doubleArray0[1] = (-240.53038209209);
      doubleArray0[2] = 1725.15822350237;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-5821.2);
      doubleArray0[5] = 20.0;
      doubleArray0[6] = 536.51279;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(3.721411882552608E7, double0, 0.01);
      assertArrayEquals(new double[] {(-74.0111536545595), (-240.53038209209), 1725.15822350237, 0.0, (-5821.2), 20.0, 536.51279}, doubleArray0, 0.01);
      
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1395), 1873);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.2589241721220806E7;
      doubleArray0[1] = (-1352.3006);
      doubleArray0[2] = (-747.269217714);
      doubleArray0[3] = (-543.62440396);
      doubleArray0[4] = (-76.0);
      doubleArray0[5] = (-3337.8782514);
      doubleArray0[6] = (-76.0);
      doubleArray0[7] = 1.34217729E8;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.2589241721220806E7, (-1352.3006), (-747.269217714), (-543.62440396), (-76.0), (-3337.8782514), (-76.0), 1.34217729E8}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[9][3];
      long[] longArray1 = new long[6];
      longArray1[0] = 6722166367014452318L;
      longArray1[1] = 411L;
      longArray1[2] = (-1326L);
      longArray1[3] = (-1L);
      longArray1[4] = (-897L);
      longArray1[5] = 309L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-901L);
      longArray2[1] = (-897L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 411L;
      longArray3[1] = 411L;
      longArray3[2] = (-901L);
      longArray3[3] = (-1L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-897L);
      longArray4[1] = 6722166367014452318L;
      longArray4[2] = 411L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (-1L);
      longArray5[1] = (-1326L);
      longArray5[2] = 411L;
      longArray5[3] = (-1L);
      longArray5[4] = (-901L);
      longArray5[5] = (-897L);
      longArray5[6] = (-1L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = 309L;
      longArray6[1] = 6722166367014452318L;
      longArray6[2] = 309L;
      longArray6[3] = (-901L);
      longArray6[4] = 6722166367014452318L;
      longArray6[5] = (-897L);
      longArray6[6] = (-1326L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray1));
      
      longArray0[6] = longArray7;
      long[] longArray8 = new long[8];
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray6));
      
      longArray8[0] = (-1L);
      longArray8[1] = (-901L);
      longArray8[2] = (-262L);
      longArray8[3] = (-1326L);
      longArray8[4] = 309L;
      longArray8[5] = 309L;
      longArray8[6] = 411L;
      longArray8[7] = 411L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[2];
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray8));
      
      longArray9[0] = (-1326L);
      longArray9[1] = (-262L);
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      longArray0[1] = (-1131L);
      longArray0[2] = (-1232L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = null;
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double0 = MathArrays.linearCombination((double) (-1.0F), (-240.53038209209), (double) (-1131L), (double) 0.0F, 830.8693, 3.834E-20);
      assertEquals(240.53038209209, double0, 0.01);
      
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2147482975);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2298;
      intArray0[1] = 3;
      intArray0[2] = (-4470);
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2298;
      floatArray0[1] = (float) 3;
      double double1 = MathArrays.linearCombination(Double.NaN, 1.304E19, 920.644678599, (-739.2724917771966), (-2602.196), (double) 3.0F, (double) 3.0F, (-2256.7415967));
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1.0F);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(608.9616, (-354.0209152), 608.9616, 0.0, Double.POSITIVE_INFINITY, 1752.834360342537);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double double1 = MathArrays.linearCombination((double) 1.0F, 1713.98382, Double.NaN, 608.9616, 0.0, 2565.977563322354, (-394.80956), 0.0);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Pair<Object, Object>[] pairArray0 = MathArrays.buildArray(field0, 0);
      assertEquals(0, pairArray0.length);
      assertNotNull(pairArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.304E19, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(1.304E19, 0.0, 1.304E19, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2536.0);
      doubleArray0[1] = (-2536.0);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-2536.0), (-2536.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 2579.36;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1338.40828366755);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 10.28415333;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1397.96);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(1935.3900535033324, double0, 0.01);
      assertArrayEquals(new double[] {(-1338.40828366755), 0.0, 0.0, 10.28415333, 3.834E-20, 0.0, (-1397.96), 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1338.40828366755), 0.0, 0.0, 10.28415333, 3.834E-20, 0.0, (-1397.96), 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination((-1338.40828366755), (-0.12502530217170715), 0.0, (-1528.873609360258), 0.0, 1586.6874603, 0.0, 0.0);
      assertEquals(167.33490009465137, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-74.0111536545595);
      doubleArray0[1] = (-240.53038209209);
      doubleArray0[2] = 1725.15822350237;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-5821.2);
      doubleArray0[5] = 20.0;
      doubleArray0[6] = 536.51279;
      int[] intArray0 = new int[6];
      intArray0[0] = 665;
      intArray0[1] = 87;
      intArray0[2] = 1;
      intArray0[3] = (-1170);
      intArray0[4] = 0;
      intArray0[5] = 1226;
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2536.0);
      doubleArray0[1] = 2579.36;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1365.46820098);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-79862.25455916212), 81227.72276014212, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 321;
      intArray0[2] = 724;
      intArray0[3] = (-76);
      intArray0[4] = 0;
      intArray0[5] = 321;
      intArray0[6] = 64;
      intArray0[7] = 64;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 321, 724, (-76), 0, 321, 64, 64}, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[3][4];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2579.36, 0.0, 0.0, (-2536.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-79862.25455916212), 81227.72276014212, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2536.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-2,536 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-270.67794892), 0.0, 0.0, 0.0, 1.0);
      assertEquals(0.0, double0, 0.01);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1476));
      assertEquals((-1476), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[3] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.getInteger((String) null, integer1);
      assertEquals(0, (int)integer2);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[1] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals(0, (int)integer3);
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[2] = integer3;
      Integer integer4 = new Integer(0);
      assertEquals(0, (int)integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      integerArray0[3] = integer4;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double double1 = MathArrays.linearCombination(20.0, 1.0, (double) 0, 2707.0);
      assertEquals(20.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3921.21);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 652.1614001098;
      doubleArray0[3] = (-20.0);
      doubleArray0[4] = (-2203.50762420203);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3921.21), 1.304E19, 652.1614001098, (-20.0), (-2203.50762420203), 0.0, 2.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3921.21), 1.304E19, 652.1614001098, (-20.0), (-2203.50762420203), 0.0, 2.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.304E19, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-3921.21), 1.304E19, 652.1614001098, (-20.0), (-2203.50762420203), 0.0, 2.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (13,040,000,000,000,000,000 >= 652.161)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, (-847));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long[][] longArray0 = new long[3][4];
      long[] longArray1 = new long[6];
      longArray1[0] = (-1L);
      longArray1[1] = (-1131L);
      longArray1[2] = (-1232L);
      longArray1[3] = 0L;
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = (-1232L);
      longArray3[3] = 0L;
      longArray3[4] = (-1L);
      longArray3[5] = 0L;
      longArray3[6] = 0L;
      longArray3[7] = 0L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 3 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-804.34);
      doubleArray0[3] = (-764.736971031);
      doubleArray0[4] = 1268.29233125;
      doubleArray0[5] = 1891.1587;
      doubleArray0[6] = Double.NaN;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-804.34), (-764.736971031), 1268.29233125, 1891.1587, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 782.337630377704;
      doubleArray0[2] = (-2017.432808859759);
      doubleArray0[3] = 4124.063867677486;
      doubleArray0[4] = (-2555.774331881358);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 3358.900131;
      doubleArray0[7] = 0.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(3.950418261638718E7, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 782.337630377704, (-2017.432808859759), 4124.063867677486, (-2555.774331881358), 3.834E-20, 3358.900131, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 782.337630377704, (-2017.432808859759), 4124.063867677486, (-2555.774331881358), 3.834E-20, 3358.900131, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2536.0);
      doubleArray0[1] = 2579.36;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3617.235686211226, double0, 0.01);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1672.585195293;
      doubleArray1[1] = 2579.36;
      double double1 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(4208.585195293, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2536.0), 2579.36, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1672.585195293, 2579.36}, doubleArray1, 0.01);
      
      double double2 = MathArrays.linearCombination((-1491.879), (-3899.187527), 0.0, 3.141592653589793, 3617.235686211226, (-3899.187527), 0.0, 0.0);
      assertEquals((-8287164.281300866), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1787.12189;
      doubleArray0[1] = 893.376;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1787.12189, 893.376, 0.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "INDEX_LARGER_THAN_MAX";
      stringArray0[1] = "PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD";
      stringArray0[2] = "OUT_OF_RANGE_LEFT";
      stringArray0[3] = "oH-9";
      stringArray0[4] = "&hgu?DX";
      stringArray0[5] = "grBr9b3+MG";
      stringArray0[6] = "INCREASING";
      stringArray0[7] = "oSt5uj>]t";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = 3.141592653589793;
      double double1 = MathArrays.linearCombination(0.0, 476.2, 476.2, 0.0, 3.141592653589793, 1.0E-5, 0.0, 2914.223023486581);
      assertEquals(3.1415926535897935E-5, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("Nbq7>B*lf$m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.Nbq7>B*lf$m
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 963.9208171;
      double double2 = MathArrays.linearCombination(0.0, 0.0, (-1.0), 0.0, 963.9208171, (-1.0));
      assertEquals((-963.9208171), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf(",NtSjlJu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.,NtSjlJu
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 509.9822;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][7];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.34217729E8;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 509.9822;
      doubleArray2[3] = 509.9822;
      doubleArray2[4] = 509.9822;
      doubleArray2[5] = 781.98110624722;
      doubleArray2[6] = 509.9822;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.34217729E8;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 781.98110624722;
      doubleArray3[3] = 781.98110624722;
      doubleArray3[4] = 509.9822;
      doubleArray1[4] = doubleArray3;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1861.09F;
      floatArray0[1] = (-1261.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1861.09F, (-1261.0F), 0.0F, 0.0F, 0.0F, 3.4028235E38F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-74.0111536545595);
      doubleArray0[0] = (-74.0111536545595);
      double double1 = (-240.53038209209);
      doubleArray0[1] = (-240.53038209209);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "grBr9b3+MG";
      long[] longArray0 = new long[3];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      int int0 = 195;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 195, (-2862));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-2049);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2049), (-2049));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2780L;
      longArray0[1] = (-2085L);
      longArray0[2] = (-3344L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,085 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 126.952587246364;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0862796731225;
      doubleArray0[3] = (-57.4606027322);
      doubleArray0[4] = 61.6068;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {126.952587246364, 0.0, 0.0862796731225, (-57.4606027322), 61.6068}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 34.03081638973;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 434.0855470204;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(435.4186015734185, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 34.03081638973, 0.0, 434.0855470204, 0.0, (-1.0)}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, (-1.0), 1.34217729E8, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.34217729E8;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1.34217729E8;
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = 2;
      intArray0[1] = 160;
      intArray0[2] = 63;
      intArray0[3] = (-1355);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-189));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-783.632339028);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1530;
      intArray0[2] = 3202;
      intArray0[3] = 1921;
      intArray0[4] = 364;
      intArray0[5] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 1530, 3202, 1921, 364, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1530, 3202, 1921, 364, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("X+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.X+
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1.0F);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3921.21);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3921.21), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-3921.21), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-3921.21), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-3921.21), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3921.21);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 652.1614001098;
      doubleArray0[3] = (-20.0);
      doubleArray0[4] = (-2203.50762420203);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2066.4727F;
      floatArray0[1] = 2066.4727F;
      floatArray0[2] = 2066.4727F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2066.4727F, 2066.4727F, 2066.4727F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-780.652561);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-780.652561)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-780.652561)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 195;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {195}, intArray0);
      assertArrayEquals(new int[] {195}, intArray1);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-780.652561)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-780.652561)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {609418.4209958587}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-780.652561)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1.0F);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(608.9616, (-354.0209152), 608.9616, 0.0, Double.POSITIVE_INFINITY, 1752.834360342537);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 1398.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-139.28863);
      doubleArray0[4] = (-3027.0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,796 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      try { 
        MathArrays.normalizeArray(doubleArray1, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MathArrays.linearCombination((-7.0), (-739.2724917771966), (-739.2724917771966), 239.35994);
      MathArrays.linearCombination((-544.059753), (-544.059753), 1385.11008188028, (-544.059753), 0.0, 2022.39793722177, 3.834E-20, (-739.2724917771966));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-171777.3118329999);
      doubleArray0[1] = (-739.2724917771966);
      doubleArray0[2] = (-739.2724917771966);
      doubleArray0[3] = (-544.059753);
      doubleArray0[4] = (-379.0);
      doubleArray0[5] = 1385.11008188028;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 3.834E-20;
      doubleArray0[8] = 1.304E19;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (-739.272 >= -739.272)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2724.0;
      doubleArray0[1] = 2497.640955236;
      doubleArray0[2] = 684.14565742117;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-4677.562980480552);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = 10000L;
      longArray0[2] = 0L;
      longArray0[3] = 1164L;
      longArray0[4] = 1L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1672.57);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 2151.359694095547;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1848.8762628898983);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2857.0;
      doubleArray0[7] = 6.283185307179586;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 437);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertEquals(437, doubleArray2.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 437;
      intArray0[1] = 437;
      intArray0[2] = 437;
      intArray0[3] = 437;
      intArray0[4] = 437;
      intArray0[5] = 437;
      intArray0[6] = 437;
      intArray0[7] = 437;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2);
      assertArrayEquals(new int[] {437, 437}, intArray1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1338.40828366755);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 10.28415333;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1397.96);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[][] doubleArray2 = new double[7][7];
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (-1338.40828366755);
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 3.834E-20;
      doubleArray4[3] = 10.28415333;
      doubleArray4[4] = (-1397.96);
      doubleArray4[5] = 10.28415333;
      doubleArray2[4] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = Double.NaN;
      doubleArray2[5] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = 3.834E-20;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = Double.NaN;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = 10.28415333;
      doubleArray6[7] = 0.0;
      doubleArray2[6] = doubleArray6;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      long[][] longArray0 = new long[8][6];
      long[] longArray1 = new long[5];
      longArray1[0] = 0L;
      longArray1[1] = 4717L;
      longArray1[2] = 9007199254740990L;
      longArray1[3] = (-3080L);
      longArray1[4] = 100L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 9007199254740990L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = 9007199254740990L;
      longArray3[1] = 9007199254740990L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 9007199254740990L;
      longArray3[5] = 4717L;
      longArray3[6] = (-3080L);
      longArray3[7] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = 100L;
      longArray4[1] = 4717L;
      longArray4[2] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      longArray5[0] = 4717L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      longArray6[0] = 0L;
      longArray6[1] = 0L;
      longArray6[2] = 4717L;
      longArray6[3] = 0L;
      longArray6[4] = 0L;
      longArray6[5] = (-3080L);
      longArray6[6] = (-3080L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      longArray7[0] = 0L;
      longArray7[1] = 9007199254740990L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[6];
      longArray8[0] = 0L;
      longArray8[1] = 0L;
      longArray8[2] = 0L;
      longArray8[3] = 319L;
      longArray8[4] = 774L;
      longArray8[5] = 100L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,080 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 1.0E-5;
      doubleArray0[2] = 2271.410459;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1606.616931714041);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 147);
      assertEquals(147, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 124.56677;
      doubleArray0[1] = 1317.761609276497;
      doubleArray0[2] = 1.0;
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      double[] doubleArray3 = new double[0];
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-270.67794892), 0.0, 0.0, 0.0, 1.0);
      assertEquals(0.0, double0, 0.01);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1476));
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      Integer integer2 = Integer.getInteger((String) null, integer1);
      integerArray0[1] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[2] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[3] = integer4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-841);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-3073);
      intArray0[4] = 233;
      intArray0[5] = 49;
      intArray0[6] = 1435;
      MathArrays.distance(intArray0, intArray0);
      long[][] longArray0 = new long[4][2];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) (-3073);
      longArray1[2] = (long) 1435;
      longArray1[3] = (long) 0;
      longArray1[4] = 0L;
      longArray1[5] = (long) (-841);
      longArray1[6] = (long) (-3073);
      longArray1[7] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = 0L;
      longArray3[1] = (long) 233;
      longArray3[2] = (long) (-841);
      longArray3[3] = (long) 0;
      longArray3[4] = (long) (-841);
      longArray3[5] = (long) (-3073);
      longArray3[6] = (long) 1435;
      longArray3[7] = (long) 0;
      longArray3[8] = (long) 233;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      longArray4[0] = (long) (-841);
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,073 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2298;
      intArray0[1] = 3;
      intArray0[2] = (-4470);
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2298;
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) 2298;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-74.0111536545595);
      doubleArray0[1] = (-240.53038209209);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "grBr9b3+MG";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.linearCombination((-240.53038209209), (-74.0111536545595), (-74.0111536545595), (-240.53038209209), (-240.53038209209), 1616.301544322, 2131.0, (-240.53038209209));
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-74.0111536545595);
      doubleArray1[1] = 1616.301544322;
      doubleArray1[2] = (-74.0111536545595);
      doubleArray1[3] = 1616.301544322;
      doubleArray1[4] = 2131.0;
      doubleArray1[5] = (-865736.0101348344);
      doubleArray1[6] = 1616.301544322;
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,616.302 >= -74.011)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      float[] floatArray0 = new float[1];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      MathArrays.linearCombination((-240.53038209209), 3.834E-20, 3.834E-20, 830.8693, (double) (-1232L), (double) 0L);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<Object, Object>>) null, (-3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.0;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2298;
      intArray0[1] = 3;
      intArray0[2] = (-4470);
      intArray0[3] = 825;
      intArray0[4] = (-723);
      intArray0[5] = 0;
      intArray0[6] = 431;
      intArray0[7] = 0;
      intArray0[8] = 285;
      MathArrays.distance(intArray0, intArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EULER_ANGLES_SINGULARITY";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 431);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
