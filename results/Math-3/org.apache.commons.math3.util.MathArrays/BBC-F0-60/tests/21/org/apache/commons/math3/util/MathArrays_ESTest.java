/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:54:40 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double((-1021.75799));
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      MathArrays.buildArray(field0, 0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1021.75799);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-1683.268720114);
      doubleArray0[3] = (-2026.1080563931487);
      doubleArray0[4] = 7453.9729935;
      doubleArray0[5] = (-1923.4207798517);
      doubleArray0[6] = 4573.86996;
      doubleArray0[7] = (-2432.333084);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      MathArrays.distance(intArray0, intArray0);
      MathArrays.safeNorm(doubleArray1);
      int[] intArray1 = new int[7];
      intArray1[0] = 15;
      intArray1[1] = (-4867);
      intArray1[2] = 85;
      intArray1[3] = (-1224);
      intArray1[4] = 1;
      intArray1[5] = 0;
      intArray1[6] = 2147483451;
      MathArrays.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double(0.16666666666666666);
      Object object0 = new Object();
      Object object1 = new Object();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(double0).when(field0).getZero();
      int int0 = 294;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 294, 294);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 294, 294);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.17333333333333325E18;
      doubleArray0[1] = 678.159;
      doubleArray0[2] = 3081.674701;
      doubleArray0[3] = 3.7513463950054824E7;
      doubleArray0[4] = (-3468.4251707999997);
      doubleArray0[5] = 2244.9137097262;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        MathArrays.normalizeArray((double[]) null, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2.17333333333442893E18;
      doubleArray0[2] = 5.0614674548127384E-8;
      doubleArray0[3] = 2297.697374701;
      doubleArray0[4] = 3.26E18;
      doubleArray0[5] = 222.5504023625;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (2,173,333,333,334,428,930 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1128.2262F;
      MathArrays.equals(floatArray0, (float[]) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1128.2262F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double(1532.0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      Field<Pair<Integer, Double>> field0 = (Field<Pair<Integer, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      int int0 = 1481;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1481);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distance(intArray0, (int[]) null);
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 364.0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-2244.48083862);
      doubleArray0[2] = 685.1411577199;
      doubleArray0[3] = (-2611.9111281052);
      doubleArray0[4] = 3076.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-3382.0838415);
      doubleArray0[7] = 6.283185307179586;
      doubleArray0[8] = 2778.08348334;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][7];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = null;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = null;
      doubleArray1[8] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1181.008;
      doubleArray0[1] = 1181.008;
      doubleArray0[2] = (-1432.095);
      doubleArray0[3] = (-957.26796173436);
      doubleArray0[4] = (-1432.095);
      doubleArray0[5] = (-1065.9);
      doubleArray0[6] = 1.34217729E8;
      doubleArray0[7] = 1307.653938289;
      double[][] doubleArray1 = new double[2][3];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long[][] longArray0 = new long[36][8];
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2147483551;
      intArray0[1] = 251;
      intArray0[2] = 64;
      intArray0[3] = 8;
      intArray0[4] = 2;
      intArray0[5] = 243;
      intArray0[6] = 112;
      intArray0[7] = 244;
      intArray0[8] = 612;
      MathArrays.copyOf(intArray0);
      int[] intArray1 = new int[4];
      intArray1[0] = 8;
      intArray1[1] = 612;
      intArray1[2] = 251;
      intArray1[3] = (-2817);
      MathArrays.distance1(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1961.94288614018;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 429.0;
      doubleArray0[3] = 0.041666666666666664;
      doubleArray0[4] = (-307.63);
      doubleArray0[5] = (-749.2442563522976);
      doubleArray0[6] = 587.7106171;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 587.7106171;
      doubleArray1[1] = 0.041666666666666664;
      doubleArray1[2] = (-307.63);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 587.7106171;
      doubleArray1[5] = 1961.94288614018;
      doubleArray1[6] = (-749.2442563522976);
      MathArrays.linearCombination(doubleArray1, doubleArray0);
      MathArrays.distanceInf(doubleArray1, doubleArray0);
      MathArrays.linearCombination(587.7106171, 2745.4788232555, (-749.2442563522976), 1617.0860796366096, (-307.63), 1961.94288614018, (-1453.30664044756), 429.0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-635.9F);
      floatArray0[1] = 0.0F;
      MathArrays.equals((float[]) null, floatArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 2.925681159240093E-8;
      doubleArray2[1] = 1111.0;
      doubleArray2[2] = 6251.0;
      doubleArray2[3] = 186.9492;
      try { 
        MathArrays.convolve(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 2000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      MathArrays.distance1(doubleArray0, doubleArray1);
      MathArrays.safeNorm(doubleArray1);
      long[][] longArray0 = new long[2][2];
      long[] longArray1 = new long[2];
      longArray1[0] = (-105L);
      longArray1[1] = 9223372036854775807L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = (-105L);
      longArray2[1] = 9223372036854775807L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -105 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = null;
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 2096.8654592437;
      doubleArray2[1] = 2096.8654592437;
      doubleArray1[2] = doubleArray2;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-238.9613F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-418.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-848.5F);
      floatArray0[5] = 4296.48F;
      floatArray0[6] = (-1161.9408F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = 905.23640149;
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = 913.54;
      doubleArray1[4] = 4441.871802;
      doubleArray1[5] = 381.9114357;
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = (-133.797482196613);
      MathArrays.normalizeArray(doubleArray1, 905.23640149);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long[][] longArray0 = new long[18][8];
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 6;
      intArray0[1] = 251;
      int[] intArray1 = new int[6];
      intArray1[0] = 251;
      intArray1[1] = 6;
      intArray1[2] = 6;
      intArray1[3] = 251;
      intArray1[4] = 6;
      intArray1[5] = 251;
      MathArrays.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 698, (-4410));
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2);
      double double0 = 0.4804528512994608;
      MathArrays.linearCombination((double) 2, 3.834E-20, 3.834E-20, 3.834E-20, 0.4804528512994608, 0.3333333333332802, (double) 2, (double) 2);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 4.0;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-589.2696);
      doubleArray0[3] = 1.7976931348623157E308;
      double double0 = (-1624.4697958);
      doubleArray0[4] = (-1624.4697958);
      doubleArray0[5] = (-676.80671248);
      doubleArray0[6] = 0.8414709568023682;
      MathArrays.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.5F;
      floatArray0[5] = 2035.0F;
      floatArray0[6] = 21.0F;
      floatArray0[7] = (-54.1015F);
      floatArray0[8] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      Integer[] integerArray0 = new Integer[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[4];
      intArray0[0] = 306;
      intArray0[1] = (-1043);
      intArray0[2] = (-575);
      intArray0[3] = (-2560);
      int[] intArray1 = new int[6];
      intArray1[0] = (-575);
      intArray1[1] = 306;
      intArray1[2] = (-1043);
      intArray1[3] = 11;
      intArray1[4] = 306;
      intArray1[5] = (-1043);
      MathArrays.distance(intArray0, intArray1);
      MathArrays.equals(doubleArray1, doubleArray0);
      MathArrays.distanceInf(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.copyOf(doubleArray0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1004.0F;
      floatArray0[1] = 329.161F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      float[] floatArray1 = new float[8];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1004.0F;
      floatArray1[3] = 1.0F;
      floatArray1[4] = 1004.0F;
      floatArray1[5] = 1.0F;
      floatArray1[6] = 329.161F;
      floatArray1[7] = 329.161F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.6931470632553101;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 3465.666552895529;
      doubleArray0[4] = (-3.940510424527919E-20);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-2250);
      intArray0[1] = 1743;
      intArray0[2] = 603;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 0.19999954104423523;
      doubleArray1[4] = (double) (-2250);
      try { 
        MathArrays.normalizeArray(doubleArray1, 1743);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.5574076175689697;
      doubleArray1[1] = (-154.0);
      doubleArray1[2] = 1799.9941535;
      doubleArray1[3] = 1.34217729E8;
      doubleArray1[4] = (-156.44);
      doubleArray1[5] = (-1784.7570992069484);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 4.0;
      doubleArray1[8] = 0.036;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.6931470632553101;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 3465.666552895529;
      doubleArray0[4] = (-3.940510424527919E-20);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-2250);
      intArray0[1] = 1743;
      intArray0[2] = 603;
      intArray0[3] = 2030;
      intArray0[4] = (-1);
      intArray0[5] = 281;
      intArray0[6] = (-203);
      MathArrays.copyOf(intArray0, 603);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[1] = Double.NaN;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      try { 
        MathArrays.normalizeArray(doubleArray0, (-761.5219));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long[] longArray0 = new long[3];
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 943;
      intArray0[1] = 943;
      intArray0[2] = 943;
      intArray0[3] = 943;
      intArray0[4] = 943;
      intArray0[5] = 943;
      MathArrays.copyOf(intArray0, 944);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 943);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long[] longArray0 = new long[13];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      long[][] longArray1 = new long[8][7];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      MathArrays.checkRectangular(longArray1);
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(0L, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = null;
      MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[1] = Double.NaN;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[14];
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) (-2367);
      longArray1[1] = 9193070505571053912L;
      longArray1[2] = (long) (-2367);
      longArray1[3] = 9193070505571053912L;
      longArray1[4] = (long) 2;
      longArray1[5] = (long) 2;
      longArray1[6] = (long) 2;
      longArray1[7] = 9193070505571053912L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = 9193070505571053912L;
      longArray2[1] = (long) (-2367);
      longArray2[2] = (long) (-2367);
      longArray2[3] = 9193070505571053912L;
      longArray2[4] = 9193070505571053912L;
      longArray2[5] = (-1357L);
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2058.41084751);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace((-576.749975133), doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[0];
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2736.9150570216343);
      doubleArray0[1] = (-605.240252937652);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.25;
      doubleArray1[1] = 181478.42551848726;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 6.283185307179586;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace((-576.749975133), doubleArray0);
      Double double0 = new Double((-1.0));
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = new float[8];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.0F;
      MathArrays.equals(floatArray0, floatArray1);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,623.827 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-3584);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      long[][] longArray0 = new long[3][7];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) (-2);
      longArray1[1] = (long) 0;
      longArray1[2] = (long) (-3584);
      longArray1[3] = (long) (-3584);
      longArray1[4] = (long) (-2);
      longArray1[5] = (long) (-3584);
      longArray1[6] = 9193070505571053912L;
      longArray1[7] = (long) (-2);
      longArray1[8] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = 9193070505571053912L;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) (-2);
      longArray2[3] = (long) (-3584);
      longArray2[4] = (long) (-2);
      longArray2[5] = (long) (-3584);
      longArray2[6] = 9193070505571053912L;
      longArray2[7] = (long) (-2);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = (long) 0;
      longArray3[1] = 9193070505571053912L;
      longArray3[2] = (long) 0;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1928.701;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1086.78F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      float[] floatArray1 = new float[3];
      floatArray1[0] = (-3334.0F);
      floatArray1[1] = 1086.78F;
      floatArray1[2] = 0.0F;
      MathArrays.equals(floatArray0, floatArray1);
      int int0 = 600;
      int int1 = 311;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Double>>) null, 600, 311);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 6.283185307179586;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace((-576.749975133), doubleArray0);
      MathArrays.convolve(doubleArray1, doubleArray1);
      MathArrays.distance(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1701.40958746063);
      doubleArray0[1] = 3713.27872;
      doubleArray0[2] = (-1328.5071132948271);
      doubleArray0[3] = 1099.27566467791;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 5186.9172193781305;
      doubleArray0[6] = 1079.43277585;
      doubleArray0[7] = (-0.9174505304341734);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      float[] floatArray1 = new float[3];
      floatArray1[0] = (float) 299;
      floatArray1[1] = 1080.1F;
      floatArray1[2] = 1080.1F;
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) (-424);
      longArray1[1] = (long) (-3545);
      longArray1[2] = 1L;
      longArray1[3] = (-1L);
      longArray1[4] = (long) (-3545);
      longArray1[5] = (-1L);
      longArray1[6] = (-4349L);
      longArray1[7] = (long) (-3545);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      MathArrays.linearCombination((double) (-3545L), 511.01733923, 1906.559, (double) (-4349L), 572.631576, (double) (-4349L), 410.125508888, 410.125508888);
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 32768;
      intArray0[1] = (-1675);
      intArray0[2] = 11;
      intArray0[3] = (-1);
      intArray0[4] = 134217729;
      intArray0[5] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      MathArrays.linearCombination((double) 0, 123.0, (-178.5639753495211), (-1939.42));
      MathArrays.copyOf(intArray1);
      MathArrays.linearCombination((double) 0, (double) (-1), (-1813.47937426698), (double) 0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.scaleInPlace(89401.0, doubleArray0);
      Double double0 = new Double(89401.0);
      MathArrays.linearCombination((-286.0), 2736.9150570216343, 0.0, (-2882.0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = new Integer(2);
      MathArrays.linearCombination(58.46636, 240.452392952417, 5186.9172193781305, (-3208.02969), (double) (-16), 1.34217729E8);
      float[] floatArray0 = new float[9];
      floatArray0[5] = 2454.6833F;
      floatArray0[1] = (float) (-16);
      floatArray0[2] = (float) (-16);
      floatArray0[3] = (-2616.9F);
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) (-2367);
      floatArray0[7] = 0.0F;
      floatArray0[8] = (float) 2;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-2367);
      intArray0[1] = (-2367);
      intArray0[2] = 2;
      int[] intArray1 = new int[8];
      intArray1[0] = 1819;
      intArray1[1] = (-2367);
      intArray1[2] = 2;
      intArray1[3] = (-2367);
      intArray1[4] = 2;
      intArray1[5] = (-16);
      intArray1[6] = (-16);
      intArray1[7] = (-16);
      MathArrays.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.equals((float[]) null, (float[]) null);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Double>>) null, 1826, 1826);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-424);
      intArray0[1] = (-424);
      MathArrays.distanceInf(intArray0, intArray0);
      long[][] longArray0 = new long[3][1];
      long[] longArray1 = new long[5];
      longArray1[0] = (long) (-424);
      longArray1[1] = (long) (-424);
      longArray1[2] = (long) 0;
      longArray1[3] = (long) (-424);
      longArray1[4] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (long) (-424);
      longArray2[1] = 1L;
      longArray2[2] = (long) (-424);
      longArray2[3] = (long) 0;
      longArray2[4] = (long) (-424);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = (-1L);
      longArray3[1] = 1L;
      longArray3[2] = 1L;
      longArray3[3] = (long) (-424);
      longArray3[4] = 1L;
      longArray0[2] = longArray3;
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][4];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.copyOf(doubleArray0);
      Integer[] integerArray0 = new Integer[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(885.43462, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      int int0 = (-1285);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1285);
      floatArray0[1] = (float) (-1285);
      floatArray0[2] = (float) (-1285);
      floatArray0[3] = (float) (-1285);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (-1285);
      floatArray0[6] = (float) (-1285);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.checkPositive(doubleArray0);
      double[] doubleArray2 = new double[0];
      MathArrays.ebeDivide(doubleArray1, doubleArray2);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      long[][] longArray0 = new long[1][9];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 0;
      longArray1[1] = 1L;
      longArray1[2] = (-1L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      MathArrays.linearCombination((double) 0L, (double) 0L, 2199.8008832207634, 30.28224989787558, (double) 0, 2779.15164544903, (double) 1L, (double) 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2060.97359;
      doubleArray0[1] = 4438.9;
      doubleArray0[2] = 2199.8008832207634;
      doubleArray0[3] = 30.28224989787558;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (-5.207000323380292E-8);
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = 3203.777;
      MathArrays.equals(doubleArray0, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 1071.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 3252.51640453;
      doubleArray2[1] = 1646.8342164974379;
      doubleArray2[1] = 1646.8342164974379;
      doubleArray2[3] = 1646.8342164974379;
      doubleArray2[4] = 3252.51640453;
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-2736.9150570216343);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      long[][] longArray0 = new long[0][8];
      MathArrays.checkRectangular(longArray0);
      MathArrays.linearCombination(1869.1545, 1.304E19, (-1407.860203101), (-1407.860203101), (-3956.12031), 0.25, Double.NaN, (-3956.12031));
      MathArrays.equals((double[]) null, doubleArray1);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 3203.777;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = 9.755392680573412E-9;
      doubleArray2[3] = (-1407.860203101);
      doubleArray2[4] = (-464.98877330372346);
      doubleArray2[5] = (-3956.12031);
      doubleArray2[6] = Double.NaN;
      try { 
        MathArrays.normalizeArray(doubleArray2, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2736.9150570216343);
      doubleArray0[1] = (-605.240252937652);
      doubleArray0[2] = 3138.5502;
      doubleArray0[3] = 3252.51640453;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-605.240252937652);
      doubleArray1[1] = (-2736.9150570216343);
      doubleArray1[2] = 3252.51640453;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 3138.5502;
      doubleArray1[5] = 3138.5502;
      doubleArray1[6] = 3252.51640453;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.scale(2691.08941612, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = (-913.54);
      int[] intArray0 = new int[8];
      intArray0[0] = 278;
      intArray0[1] = (-424);
      intArray0[2] = (-424);
      intArray0[3] = (-424);
      intArray0[4] = 278;
      intArray0[5] = (-424);
      intArray0[6] = (-424);
      intArray0[7] = (-424);
      int[] intArray1 = new int[2];
      intArray1[0] = (-424);
      intArray1[1] = 278;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Integer integer0 = new Integer(3);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = 1.34217729E8;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = (double) (-2367);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      double[] doubleArray2 = MathArrays.scale((-3.356118100840571E-7), doubleArray0);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 3;
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) 3;
      floatArray0[4] = (float) (-2367);
      floatArray0[5] = 3.0F;
      MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 2068.785694499674);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 272;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1923.3251);
      doubleArray0[1] = (double) 272;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-1923.3251);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1923.3251);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 1.304E19;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = 0.0;
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-424);
      intArray0[1] = (-424);
      MathArrays.distanceInf(intArray0, intArray0);
      long[][] longArray0 = new long[3][1];
      long[] longArray1 = new long[5];
      longArray1[0] = (long) (-424);
      longArray1[1] = (long) (-424);
      longArray1[2] = (long) 0;
      longArray1[3] = (long) (-424);
      longArray1[4] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (long) (-424);
      longArray2[1] = 1L;
      longArray2[2] = (long) (-424);
      longArray2[3] = (long) 0;
      longArray2[4] = (long) (-424);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = (-1L);
      longArray3[1] = 1L;
      longArray3[2] = 1L;
      longArray3[3] = (long) (-424);
      longArray3[4] = 1L;
      longArray0[2] = longArray3;
      MathArrays.checkRectangular(longArray0);
      MathArrays.linearCombination((double) 1L, 3203.777, (double) (-424L), (double) 1L, (-0.1428571423679182), 3203.777, 299.0, (-43.3388));
      MathArrays.equals((double[]) null, (double[]) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-424L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-424);
      doubleArray0[3] = (double) (-1L);
      MathArrays.normalizeArray(doubleArray0, 0L);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-0.19676485170351782);
      MathArrays.normalizeArray(doubleArray0, 19.0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MathArrays.linearCombination(2432.39023, 2432.39023, 2779.15164544903, (-286.0), (-123.69792), (-913.54), 2779.15164544903, (-123.69792));
      MathArrays.linearCombination(367.656349, 2779.15164544903, (-2044.3967633687), (-913.54), (-123.69792), (-913.54));
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-1.0F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.linearCombination(367.656349, (-2141.5830963679), 56.8, (-913.54), 2.2497132711643753, (-1503.34557937), (-424.0), 913.54);
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = new Integer((-2367));
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-2367);
      doubleArray1[1] = (-913.54);
      doubleArray1[2] = (double) (-2367);
      doubleArray1[3] = (double) (-2367);
      doubleArray1[4] = (-913.54);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.safeNorm(doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 410.125508888;
      doubleArray0[0] = 410.125508888;
      MathArrays.checkPositive(doubleArray0);
      int int0 = 406;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 406);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 406 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.checkOrder(doubleArray1);
      double[] doubleArray2 = new double[0];
      MathArrays.safeNorm(doubleArray2);
      MathArrays.safeNorm(doubleArray2);
      long[][] longArray0 = new long[0][1];
      MathArrays.checkRectangular(longArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
      MathArrays.equals(doubleArray0, doubleArray0);
      Integer integer0 = new Integer((-1));
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      int int0 = 4;
      Integer integer1 = new Integer(4);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2142492336);
      integerArray0[2] = integer2;
      integerArray0[3] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[5];
      intArray0[0] = int0;
      intArray0[1] = 2142492336;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      MathArrays.copyOf(intArray0, 2756);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 278;
      intArray0[2] = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 278;
      doubleArray0[1] = (double) 278;
      doubleArray0[2] = (double) (-3545);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 278;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 278;
      doubleArray1[3] = (-1.7168146928204135);
      doubleArray1[4] = (double) 278;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 278;
      doubleArray1[7] = (double) 0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      MathArrays.linearCombination(3.7513463950054824E7, 278.0, 3.7513463950054824E7, 0.0, 278.0, 3252.51640453, 1.633123935319537E16, (double) 278);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 463.52;
      double double0 = Double.POSITIVE_INFINITY;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[2];
      intArray0[0] = (-424);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 728.79035;
      doubleArray1[1] = 19.0;
      MathArrays.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2736.9150570216343);
      doubleArray0[1] = (-605.240252937652);
      doubleArray0[2] = 3138.5502;
      doubleArray0[3] = 3252.51640453;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-1798.2401148575452);
      doubleArray0[6] = 1646.8342164974379;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 19.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.safeNorm(doubleArray0);
      Integer integer0 = new Integer(130);
      MathArrays.scaleInPlace((-480.6932), doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-480.6932);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 130;
      MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1285), (-1285));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      double double0 = 1.34217729E8;
      doubleArray0[0] = 1.34217729E8;
      MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
      MathArrays.copyOf(doubleArray0);
      Integer[] integerArray0 = new Integer[6];
      int int0 = 16;
      Integer integer0 = new Integer(16);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(16);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = Integer.valueOf(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1164);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(6.283185307179586, doubleArray0);
      MathArrays.linearCombination((-576.749975133), 0.0, Double.NaN, 0.0, Double.NaN, (-2240.13006724));
      MathArrays.linearCombination((-0.05417713522911072), 241.7585515, 0.9166666666666666, (-605.240252937652));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 463.52;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-773.7706928);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      Double double0 = new Double(651.09);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1045;
      intArray0[2] = 104;
      intArray0[3] = 2;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      Integer.getInteger("org.apache.commons.math3.util.MathArrays$1");
      Integer integer0 = new Integer(0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-356.96176F);
      floatArray0[1] = (-356.96176F);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (-991.8F);
      floatArray0[4] = (-991.8F);
      floatArray0[5] = (float) 0;
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, (-1304));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[2];
      intArray0[0] = (-424);
      intArray0[1] = (-424);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.copyOf(doubleArray0);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-424);
      integerArray0[1] = (Integer) (-424);
      Integer integer0 = new Integer(278);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (int)integerArray0[0];
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-424);
      MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Double>> field0 = (Field<Pair<Integer, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 1481);
      MathArrays.linearCombination((double) 1481, (double) 1481, (double) 1481, 841.139, (double) 1481, (double) 1481);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1481;
      doubleArray0[1] = (double) 1481;
      double[] doubleArray1 = MathArrays.scale(5632448.859, doubleArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1481;
      floatArray0[1] = (float) 1481;
      floatArray0[2] = (float) 1481;
      floatArray0[3] = (float) 1481;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.distance1(doubleArray1, doubleArray1);
      MathArrays.linearCombination(3046791.927, (double) 1481.0F, (-1.0), (-2285.329), 3046791.927, 5.669184079525E-24);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.safeNorm(doubleArray0);
      Integer integer0 = new Integer(130);
      Integer.getInteger((String) null);
      Integer integer1 = new Integer(0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 19.0;
      double[][] doubleArray2 = new double[0][3];
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 130;
      floatArray0[6] = (float) 130;
      floatArray0[2] = (float) 130;
      floatArray0[3] = (float) 130;
      floatArray0[4] = (-991.8F);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 130;
      floatArray0[7] = (-356.96176F);
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (-991.8F);
      floatArray1[3] = (-1370.8142F);
      floatArray1[4] = (float) 0;
      floatArray1[5] = (float) 130;
      floatArray1[6] = (-356.96176F);
      floatArray1[7] = (-991.8F);
      floatArray1[8] = (float) 0;
      MathArrays.equals(floatArray0, floatArray1);
      MathArrays.ebeDivide(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("4[wdb^47v2%WT:4`adp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.4[wdb^47v2%WT:4`adp
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 272;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 4040.9517F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) 0;
      floatArray0[5] = 1943.7386F;
      floatArray0[6] = (float) 0;
      floatArray0[7] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 754, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 272;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 272;
      doubleArray1[1] = (double) 272;
      doubleArray1[2] = (-773.7706928);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-773.7706928);
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1096.756700484;
      doubleArray1[8] = (double) 272;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      MathArrays.scaleInPlace((-4287.5), doubleArray1);
      Double double0 = new Double((-2099.43416852407));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(885.43462, doubleArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1285), 1823);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-773.7706928);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-814));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2615);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1906));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2615);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[0]);
      integerArray0[5] = integer5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("5~)<?nIDU5iLQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.5~)<?nIDU5iLQ
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[2];
      intArray0[0] = 278;
      intArray0[1] = 2040109465;
      MathArrays.copyOf(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 278;
      integerArray0[1] = (Integer) 2040109465;
      integerArray0[2] = (Integer) 2040109465;
      Integer integer0 = new Integer(278);
      integerArray0[3] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[4] = integer1;
      integerArray0[5] = (Integer) 278;
      integerArray0[6] = (Integer) 278;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      MathArrays.copyOf(intArray0, (int) integerArray0[3]);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      MathArrays.scale(2657.3084641, doubleArray1);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3203.777;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale(0, doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray0);
      double[] doubleArray2 = new double[3];
      doubleArray2[2] = (double) 3553;
      double[][] doubleArray3 = new double[6][8];
      doubleArray3[0] = doubleArray0;
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 161, 299);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.checkOrder(doubleArray1);
      double[] doubleArray2 = new double[0];
      MathArrays.safeNorm(doubleArray2);
      MathArrays.safeNorm(doubleArray2);
      double[][] doubleArray3 = new double[7][8];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray0;
      doubleArray3[4] = doubleArray0;
      doubleArray3[5] = doubleArray0;
      doubleArray3[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, doubleArray3);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      double[] doubleArray4 = MathArrays.copyOf(doubleArray2);
      MathArrays.copyOf(doubleArray0);
      MathArrays.scale(0.0, doubleArray4);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-773.7706928);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      Double double0 = new Double((-10.755998479629934));
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.linearCombination(Double.NaN, Double.NaN, (double) 0L, Double.NaN, (-1116.3302978221066), (-4124.706103), 3559661.03980096, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.safeNorm(doubleArray0);
      Integer integer0 = new Integer(130);
      Integer.getInteger((String) null);
      Integer integer1 = new Integer(0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[1];
      double[][] doubleArray2 = new double[0][3];
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 130;
      floatArray0[1] = (float) 130;
      floatArray0[2] = (float) 130;
      floatArray0[3] = (float) 130;
      floatArray0[4] = (-991.8F);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 130;
      floatArray0[7] = (-356.96176F);
      floatArray0[8] = (float) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false, true);
      MathArrays.scaleInPlace(0.0F, doubleArray0);
      MathArrays.linearCombination(3.834E-20, (-2963.933277), 39.47841760435743, (-773.7706928));
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2261.3F);
      floatArray0[2] = 1261.5F;
      floatArray0[3] = 1.4E-45F;
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1.4E-45F;
      floatArray1[1] = (-2261.3F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = 1261.5F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2261.3F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 1.4E-45F;
      doubleArray0[3] = (double) 1.4E-45F;
      doubleArray0[4] = (double) 1261.5F;
      doubleArray0[5] = (double) (-2261.3F);
      doubleArray0[6] = (double) 1.4E-45F;
      doubleArray0[7] = (double) 1.4E-45F;
      doubleArray0[8] = (double) 1261.5F;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MathArrays.linearCombination(2432.39023, 2432.39023, 2779.15164544903, (-286.0), (-123.69792), (-913.54), 2779.15164544903, (-123.69792));
      MathArrays.linearCombination(367.656349, 2779.15164544903, (-2044.3967633687), (-913.54), (-123.69792), (-913.54));
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2616.875F);
      floatArray0[1] = (-1.0F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 463.52;
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      double double1 = 0.0;
      doubleArray0[2] = 0.0;
      double double2 = (-773.7706928);
      doubleArray0[3] = (-773.7706928);
      doubleArray0[4] = 0.0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 243;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 754, 243);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 463.52;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-773.7706928);
      doubleArray0[4] = 0.0;
      MathArrays.scale(0.0, doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-155.7F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.linearCombination((double) 0.0F, 0.7214844226837158, 0.0, (-380.023284), 105.86747898891484, 2.0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 3L;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-773.7706928);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      Double double0 = new Double((-10.755998479629934));
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(8.0, (double) 3L, Double.NaN, (-10.755998479629934), (double) 3L, (-4044.3337957626), Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 272;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double double0 = 1096.756700484;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 272;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (-773.7706928);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-773.7706928);
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1096.756700484;
      doubleArray1[8] = (double) 272;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      double double1 = (-4287.5);
      MathArrays.scaleInPlace((-4287.5), doubleArray1);
      Double double2 = new Double((-2099.43416852407));
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1832);
      MathArrays.distance1(doubleArray0, doubleArray1);
      MathArrays.equals(doubleArray1, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection.values();
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1832;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 272;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 272;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (-773.7706928);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-773.7706928);
      doubleArray1[5] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][9];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      long[][] longArray0 = new long[6][2];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 272;
      longArray1[1] = (long) 272;
      longArray1[2] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 272;
      longArray2[2] = (long) 272;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = (long) 0;
      longArray3[1] = (long) 0;
      longArray3[2] = (long) 0;
      longArray3[3] = (long) 272;
      longArray3[4] = (long) 0;
      longArray3[5] = (long) 0;
      longArray3[6] = (long) 272;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = (long) 0;
      longArray5[1] = (long) 272;
      longArray5[2] = (long) 272;
      longArray5[3] = (long) 0;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      longArray6[0] = (long) 0;
      longArray6[1] = (long) 272;
      longArray6[2] = (long) 272;
      longArray0[5] = longArray6;
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 272;
      intArray0[0] = 272;
      MathArrays.distance1(intArray0, intArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 272;
      MathArrays.checkNonNegative(longArray0);
      double double0 = Double.NaN;
      double double1 = (-773.7706928);
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      int[] intArray0 = new int[3];
      intArray0[0] = 951;
      intArray0[1] = 3287;
      intArray0[2] = (-1);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3203.777;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.scaleInPlace(951, doubleArray0);
      Double double0 = new Double(0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 3287;
      floatArray0[2] = (float) 951;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.checkPositive(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-3545);
      intArray0[1] = 278;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 719;
      doubleArray0[1] = (double) 719;
      doubleArray0[2] = (double) 278;
      doubleArray0[3] = (double) (-3545);
      doubleArray0[4] = (double) (-3545);
      doubleArray0[5] = (double) 278;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.scale(719, doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 278;
      MathArrays.equals(doubleArray1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3203.777;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 3553;
      intArray0[1] = 299;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (double) 299;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (double) 299;
      doubleArray1[4] = (double) 3553;
      doubleArray1[5] = (double) 299;
      doubleArray1[6] = (double) 299;
      doubleArray1[7] = Double.NaN;
      doubleArray1[8] = (double) 0;
      MathArrays.safeNorm(doubleArray1);
      double[][] doubleArray2 = new double[5][2];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 272;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1096.756700484;
      MathArrays.copyOf(doubleArray0, 0);
      long[][] longArray0 = new long[6][1];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 272;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = (long) 272;
      longArray2[1] = 0L;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 272;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2736.9150570216343);
      doubleArray0[1] = (-605.240252937652);
      doubleArray0[2] = 3138.5502;
      doubleArray0[3] = 3252.51640453;
      doubleArray0[4] = 1.304E19;
      Integer integer0 = Integer.getInteger("", 1832);
      Integer integer1 = new Integer((-235));
      Integer integer2 = new Integer(1882);
      Integer integer3 = new Integer(2);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3203.777;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 3547;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      MathArrays.scale(632.4838634, doubleArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 299;
      MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.linearCombination((double) 130, 0.16666666666745392, 0.16666666666745392, (double) 130, (double) 130, 1.2599210498948732, 485.1496076724, 1.2599210498948732);
      MathArrays.linearCombination(1.2599210498948732, 0.16666666666745392, 1626.96, 1626.96, (-2044.3967633687), 1626.96);
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) 130;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = new float[2];
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (-1.0F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.safeNorm(doubleArray0);
      Integer integer0 = new Integer(130);
      Integer.getInteger((String) null);
      Integer integer1 = new Integer(0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 19.0;
      double[][] doubleArray2 = new double[0][3];
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 130;
      floatArray0[1] = (float) 130;
      floatArray0[2] = (float) 130;
      floatArray0[3] = (float) 130;
      floatArray0[4] = (-991.8F);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 130;
      floatArray0[7] = (-356.96176F);
      floatArray0[8] = (float) 0;
      MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 130, (-1304));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.checkOrder(doubleArray1);
      double[] doubleArray2 = new double[0];
      MathArrays.safeNorm(doubleArray2);
      MathArrays.safeNorm(doubleArray2);
      double[][] doubleArray3 = new double[7][8];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray0;
      doubleArray3[4] = doubleArray0;
      doubleArray3[5] = doubleArray0;
      doubleArray3[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, doubleArray3);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 1.34217729E8;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 1.34217729E8;
      doubleArray4[4] = 1.34217729E8;
      doubleArray4[5] = 1.34217729E8;
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray4, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[2];
      intArray0[0] = (-424);
      intArray0[1] = (-424);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.copyOf(doubleArray0);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-424);
      integerArray0[1] = (Integer) (-424);
      Integer integer0 = new Integer(278);
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) (-424);
      integerArray0[4] = (Integer) (-424);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3203.777;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 3553;
      intArray0[1] = 299;
      intArray0[2] = 299;
      intArray0[3] = 1275;
      intArray0[4] = 0;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray1 = MathArrays.scale(3553, doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray0);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (-1102.5347);
      double[][] doubleArray3 = new double[6][8];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray0;
      doubleArray3[2] = doubleArray0;
      MathArrays.linearCombination((double) 299, Double.NaN, (double) 299, 2258.0581075419);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 272;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 272;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (-773.7706928);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-773.7706928);
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1096.756700484;
      doubleArray1[8] = (double) 272;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      MathArrays.scaleInPlace((-4287.5), doubleArray1);
      Double double0 = new Double((-2099.43416852407));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      double double0 = 1.304E19;
      Double double1 = new Double(1.304E19);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3203.777;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 3553;
      intArray0[1] = 299;
      intArray0[2] = 299;
      intArray0[3] = 1275;
      intArray0[4] = 0;
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.linearCombination((double) 1275, 451.3689155615557, (-2025.1), (double) 299, (double) 1275, (double) 1275, (double) 1275, 3972.18653);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      MathArrays.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 2640);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, (-1), (-1285));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.linearCombination(0.0, 2891.5090131169, (-1.0), (-1467.39729), (-1060.7), 1178.767430264782);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = (-1.0);
      doubleArray1[8] = (-1248851.2159918542);
      MathArrays.convolve(doubleArray1, doubleArray1);
      int[] intArray0 = new int[3];
      intArray0[0] = (-16);
      intArray0[1] = (-16);
      intArray0[2] = 0;
      MathArrays.distance1(intArray0, intArray0);
      Field<Pair<String, String>> field0 = (Field<Pair<String, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1818);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MathArrays.linearCombination(3919.8061606, (-103.7154453), (-1.0), 0.0, (-103.7154453), (-1.0));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "kk";
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.convolve(doubleArray1, doubleArray1);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-2142860631);
      intArray0[2] = (-16);
      intArray0[3] = (-1418);
      MathArrays.linearCombination((double) (-16), 579.5859507079, (-2627.4), (-3066.1857392128));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = (-424);
      int[] intArray0 = new int[2];
      intArray0[0] = (-424);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.copyOf(doubleArray0);
      float float0 = (-356.96176F);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      int int1 = 134217729;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 1795, 134217729);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2736.9150570216343);
      doubleArray0[1] = (-605.240252937652);
      doubleArray0[2] = 3138.5502;
      doubleArray0[3] = 3252.51640453;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-1798.2401148575452);
      doubleArray0[6] = 1646.8342164974379;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 19.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 952, 952);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 6.283185307179586;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace((-576.749975133), doubleArray0);
      MathArrays.linearCombination((-576.749975133), (-576.749975133), 0.0, (-2240.13006724), (-576.749975133), (-2240.13006724));
      double[][] doubleArray2 = new double[2][2];
      doubleArray2[0] = doubleArray0;
      int[] intArray0 = new int[8];
      intArray0[0] = (-213);
      intArray0[1] = 1445;
      intArray0[2] = 126;
      intArray0[3] = 0;
      intArray0[4] = 608;
      intArray0[5] = 1825;
      intArray0[6] = (-1018);
      intArray0[7] = 2147483632;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, false);
      MathArrays.copyOf(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MathArrays.linearCombination(3919.8061606, (-103.7154453), (-1.0), 0.0, (-103.7154453), (-1.0));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "#w@6;+VQd&V";
      stringArray0[2] = "v:>Yo,>/";
      stringArray0[3] = "";
      stringArray0[4] = "+QgqyE";
      stringArray0[5] = "*]C`Tf`a:F-OOx`?";
      stringArray0[6] = "DECREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[0];
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 766.8445F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 672.3F;
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 9.007199254740992E15;
      doubleArray1[4] = (-1455.3);
      doubleArray1[6] = (-759.1048078854793);
      doubleArray1[8] = 1.0;
      MathArrays.equals(doubleArray0, doubleArray1);
      int int0 = 3000;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 3000);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3,000 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-3545);
      int int1 = 719;
      MathArrays.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 272;
      int[] intArray1 = new int[4];
      intArray1[1] = 272;
      intArray1[2] = 272;
      intArray1[3] = 272;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1558.5454565440389;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 6.283185307179586;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(378.7040553211645, doubleArray1);
      MathArrays.linearCombination((-1122.54058), (-3947.8953), (-2171.483970871595), (-2171.483970871595), (-2171.483970871595), (-3508.8781));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[5][5];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-576.749975133), 0.003, 2801.9319, 0.06076429227455135);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      double double0 = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 441.105084;
      double double1 = (-814.08259383);
      doubleArray0[3] = (-814.08259383);
      doubleArray0[4] = (-3.141592653589793);
      doubleArray0[5] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-1 < 441.105)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 463.52;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 3865;
      intArray0[1] = 530;
      intArray0[2] = 237;
      intArray0[3] = 237;
      intArray0[4] = (-1089);
      intArray0[5] = 237;
      intArray0[6] = (-1);
      intArray0[7] = 0;
      intArray0[8] = 0;
      MathArrays.copyOf(intArray0, 1);
      MathArrays.distance1(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      long[][] longArray1 = new long[8][7];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(11);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(11);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3214));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-179));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2147055561);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2146741218);
      integerArray0[5] = integer5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MathArrays.linearCombination(3919.8061606, (-103.7154453), (-1.0), 0.0, (-103.7154453), (-1.0));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "#w@6;+VQd&V";
      stringArray0[2] = "v:>Yo,>/";
      stringArray0[3] = "";
      stringArray0[4] = "+QgqyE";
      stringArray0[5] = "*]C`Tf`a:F-OOx`?";
      stringArray0[6] = "DECREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-406440.7259910123);
      doubleArray0[1] = (-406440.7259910123);
      doubleArray0[2] = (-103.7154453);
      doubleArray0[3] = 2958.4;
      doubleArray0[4] = 3919.8061606;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-103.7154453);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[1];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-406440.7259910123);
      doubleArray1[1] = (-103.7154453);
      doubleArray1[2] = (-406440.7259910123);
      doubleArray1[3] = 3919.8061606;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 3919.8061606;
      doubleArray1[7] = (-406440.7259910123);
      doubleArray1[8] = 3919.8061606;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = 1256L;
      longArray0[0] = 1256L;
      long long1 = (-1657L);
      longArray0[1] = (-1657L);
      longArray0[2] = 2047L;
      longArray0[3] = (-2644281811660520851L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,657 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      MathArrays.safeNorm(doubleArray1);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.copyOf(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3185.077180705488;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2451.26F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 2696.4675F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 930.433F;
      floatArray0[7] = (-834.8741F);
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 255;
      intArray0[2] = 0;
      intArray0[3] = 2754;
      intArray0[4] = 0;
      intArray0[5] = 19;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) (-2451.26F);
      doubleArray0[2] = 850.5028;
      doubleArray0[3] = (double) 0;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 1.0F;
      doubleArray1[1] = (double) 19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (1 < 19)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      try { 
        MathArrays.normalizeArray(doubleArray0, (-357.93991));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long[][] longArray0 = new long[6][0];
      long[] longArray1 = new long[1];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (-1L);
      longArray2[1] = (-1L);
      longArray2[2] = (-1L);
      longArray2[3] = (-1L);
      longArray2[4] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = (-1L);
      longArray3[1] = (-702L);
      longArray3[2] = (-1634L);
      longArray3[3] = (-1L);
      longArray3[4] = (-1L);
      longArray3[5] = (-1L);
      longArray3[6] = (-1L);
      longArray3[7] = (-1L);
      longArray3[8] = (-1L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = (-2057L);
      longArray4[1] = (-656L);
      longArray4[2] = (-1634L);
      longArray4[3] = (-1L);
      longArray4[4] = (-1634L);
      longArray4[5] = (-1L);
      longArray4[6] = (-1634L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      longArray6[0] = (-2057L);
      longArray6[1] = (-1L);
      longArray6[2] = (-656L);
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Integer.getInteger("org.apache.commons.math3.util.MathArrays$1", 1108);
      Integer integer0 = new Integer((-606));
      Integer integer1 = new Integer((-2719));
      Integer integer2 = new Integer(2147483467);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[7];
      Integer integer3 = new Integer(138);
      integerArray0[0] = integer3;
      integerArray0[1] = integer1;
      Integer integer4 = new Integer(235);
      integerArray0[2] = integer4;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer2;
      integerArray0[6] = integer0;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) integerArray0[1];
      intArray0[1] = (int) integerArray0[1];
      intArray0[2] = (int) integerArray0[1];
      intArray0[3] = (int) integerArray0[6];
      intArray0[4] = (-2719);
      intArray0[5] = 1108;
      intArray0[6] = (-606);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      MathArrays.safeNorm(doubleArray0);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(443);
      integerArray0[0] = integer0;
      Integer.getInteger((String) null);
      integerArray0[1] = null;
      Integer integer1 = new Integer(0);
      integerArray0[2] = integer1;
      MathArrays.linearCombination((-2416.2693979028), (-794.23635915467), 1.0, (-2416.2693979028));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.safeNorm(doubleArray0);
      Integer integer0 = new Integer(145);
      Integer.getInteger((String) null);
      Integer integer1 = new Integer(0);
      Integer.getInteger("", 2661);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(138);
      Integer integer4 = new Integer(145);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[14];
      integerArray0[0] = integer1;
      integerArray0[1] = integer3;
      integerArray0[2] = integer1;
      integerArray0[3] = integer4;
      integerArray0[4] = integer2;
      integerArray0[6] = null;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
      MathArrays.equals(doubleArray0, doubleArray0);
      double double0 = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      MathArrays.scaleInPlace(1.34217729E8, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("y@1VmC?)Hs\"G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.y@1VmC?)Hs\"G
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MathArrays.linearCombination(3919.8061606, (-103.7154453), (-1.0), 0.0, (-103.7154453), (-1.0));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "#w@6;+VQd&V";
      stringArray0[2] = "v:>Yo,>/";
      stringArray0[3] = "";
      stringArray0[4] = "+QgqyE";
      stringArray0[5] = "*]C`Tf`a:F-OOx`?";
      stringArray0[6] = "DECREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[0];
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 766.8445F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 672.3F;
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 579.5859507079;
      doubleArray0[1] = (-2099.43416852407);
      doubleArray0[2] = (-411.0);
      doubleArray0[3] = 1.0;
      Integer integer0 = new Integer(1576);
      Integer.getInteger((String) null);
      Integer integer1 = new Integer(683);
      Integer.getInteger("w{~iDH-/z5o4A}Z*?QO", 1576);
      Integer integer2 = new Integer((-892));
      Integer integer3 = new Integer(1576);
      Integer integer4 = new Integer(1099);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = null;
      integerArray0[2] = integer1;
      integerArray0[3] = null;
      integerArray0[4] = null;
      integerArray0[5] = null;
      integerArray0[6] = integer2;
      integerArray0[7] = integer0;
      integerArray0[8] = integer4;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      MathArrays.safeNorm(doubleArray0);
      int int0 = 443;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1.0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1 >= -1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3203.777;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 3553;
      intArray0[1] = 299;
      intArray0[2] = 299;
      intArray0[3] = 1275;
      intArray0[4] = 0;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray1 = MathArrays.scale(3553, doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray0);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (-1102.5347);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[6][8];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray0;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray0;
      doubleArray3[5] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      long[][] longArray1 = new long[8][7];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      MathArrays.checkRectangular(longArray1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 463.52;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      double double0 = 2.2497132711643753;
      doubleArray0[2] = 2.2497132711643753;
      double double1 = (-773.7706928);
      doubleArray0[3] = (-773.7706928);
      double double2 = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 2.25)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 136.525246966179;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 1932.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = -0.0;
      doubleArray0[6] = 1932.515;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3101.901915);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1912));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MathArrays.linearCombination((-3413.94898670857), (-4905.5281839), (-3413.94898670857), (-4905.5281839));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3012.9;
      int int0 = 1;
      MathArrays.copyOf(doubleArray0, 1);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 6.283185307179586;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double double0 = (-576.749975133);
      MathArrays.scaleInPlace((-576.749975133), doubleArray0);
      MathArrays.linearCombination((-576.749975133), (-576.749975133), 0.0, (-2240.13006724), (-576.749975133), (-2240.13006724));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[2][2];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 6.283185307179586;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double double0 = (-576.749975133);
      MathArrays.scaleInPlace((-576.749975133), doubleArray0);
      double double1 = 0.0;
      MathArrays.linearCombination((-576.749975133), (-576.749975133), 0.0, (-2240.13006724), (-576.749975133), (-2240.13006724));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[2][2];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 463.52;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      double double1 = (-773.7706928);
      doubleArray0[3] = (-773.7706928);
      double double2 = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (463.52 <= \u221E)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-2107);
      intArray0[0] = (-2107);
      int int1 = (-1);
      intArray0[1] = (-1);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2107));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 441.105084;
      doubleArray0[3] = (-814.08259383);
      doubleArray0[4] = (-3.141592653589793);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-2063.15);
      doubleArray0[7] = (-1677.2971688260232);
      doubleArray0[8] = (-182.84123458491);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 237;
      intArray0[1] = 0;
      intArray0[2] = 3865;
      intArray0[3] = 530;
      intArray0[4] = 0;
      MathArrays.copyOf(intArray0, 0);
      MathArrays.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1692.70744498358);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,692.707 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1001.6197);
      double double1 = Double.NaN;
      doubleArray0[2] = Double.NaN;
      double double2 = 1.34217729E8;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-535.3799668735);
      doubleArray0[1] = (-102.68547);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 364.0;
      doubleArray0[6] = 1511.32999993511;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (286,631.709 >= 10,544.306)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[1];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 808.91674;
      doubleArray0[1] = 5.669184079525E-24;
      doubleArray0[2] = 4308.437079561339;
      doubleArray0[3] = 1099.27566467791;
      doubleArray0[4] = 0.16666666666666666;
      doubleArray0[5] = (-1356.273776);
      doubleArray0[6] = (-1.0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distanceInf(intArray0, intArray0);
      Integer integer0 = new Integer((-3584));
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      MathArrays.scale(4.3466666666666665E18, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-937.2941817049);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1445.29;
      doubleArray0[3] = (-3.141592653589793);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      MathArrays.ebeDivide(doubleArray1, doubleArray1);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-937.2941817049);
      doubleArray2[2] = 1445.29;
      doubleArray2[3] = (-937.2941817049);
      doubleArray2[4] = (-937.2941817049);
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 579.5859507079;
      doubleArray0[1] = (-2099.43416852407);
      doubleArray0[2] = (-411.0);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 2667.3114693;
      doubleArray0[5] = 5015.47;
      doubleArray0[6] = 0.07426303208877294;
      doubleArray0[7] = 575.767702425346;
      doubleArray0[8] = 0.0;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (579.586 >= -2,099.434)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4044.3337957626);
      doubleArray0[1] = 3972.18653;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-171.6);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (3,972.187 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 579.5859507079;
      doubleArray0[1] = (-2099.43416852407);
      doubleArray0[2] = (-411.0);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 2667.3114693;
      doubleArray0[5] = 5015.47;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 575.767702425346;
      doubleArray0[8] = 0.0;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (579.586 >= -2,099.434)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.checkOrder(doubleArray1);
      double[] doubleArray2 = new double[0];
      MathArrays.safeNorm(doubleArray2);
      MathArrays.safeNorm(doubleArray2);
      double[][] doubleArray3 = new double[7][8];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray0;
      doubleArray3[4] = doubleArray0;
      doubleArray3[5] = doubleArray2;
      doubleArray3[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2736.9150570216343);
      doubleArray0[1] = (-605.240252937652);
      doubleArray0[2] = 3138.5502;
      doubleArray0[3] = 3252.51640453;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-1798.2401148575452);
      doubleArray0[6] = 1646.8342164974379;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 19.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.copyOf(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2432.39023);
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 451.3689155615557;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      int int0 = 0;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 0);
      MathArrays.ebeSubtract(doubleArray2, doubleArray2);
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[][] doubleArray1 = new double[5][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[1];
      double double0 = (-804.113322317862);
      doubleArray2[0] = (-804.113322317862);
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double double0 = 1910.78;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1910.78;
      MathArrays.scaleInPlace(1910.78, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf(",fa1t_@{b;DnE{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.,fa1t_@{b;DnE{
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1533.0928696064);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2542.84459874);
      doubleArray0[5] = 2362.73006;
      doubleArray0[6] = (-1989.0);
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-983);
      intArray0[3] = 134217729;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 272;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1096.756700484;
      MathArrays.copyOf(doubleArray0, 0);
      long[][] longArray0 = new long[6][1];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 272;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = (long) 272;
      longArray2[1] = 0L;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 272;
      longArray2[4] = (long) 272;
      longArray2[5] = (long) 272;
      longArray2[6] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = (long) 0;
      longArray3[1] = (long) 272;
      longArray3[2] = (long) 272;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      longArray4[0] = (long) 272;
      longArray4[1] = (long) 0;
      longArray4[2] = (long) 0;
      longArray4[3] = 0L;
      longArray4[4] = (long) 272;
      longArray4[5] = (long) 0;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      longArray5[0] = (long) 272;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = (long) 0;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-357.93991);
      doubleArray0[1] = 2004.774126497438;
      MathArrays.normalizeArray(doubleArray0, (-357.93991));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-856.0);
      doubleArray0[2] = 1322.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-20.0);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 2770.748187234244;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 20.0;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1744L);
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,744 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2891.5090131169;
      doubleArray0[1] = 1886.7064;
      doubleArray0[2] = 0.0;
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Lbt1Q~@[]vD:";
      stringArray0[1] = "";
      stringArray0[2] = ";4>vYM";
      stringArray0[3] = "[?#j";
      stringArray0[4] = "bFRE/L+T0'<xcea\u0003";
      stringArray0[5] = "NOT_POSITIVE_MEAN";
      stringArray0[6] = "QNCZ";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (2,891.509 > 1,886.706)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1937.5);
      doubleArray0[3] = 472.251539500263;
      doubleArray0[4] = 1778.7202781;
      doubleArray0[5] = (-852.0);
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1832);
      MathArrays.distance1(doubleArray0, doubleArray1);
      MathArrays.equals(doubleArray1, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection.values();
      long[][] longArray0 = new long[5][7];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 1832;
      longArray1[1] = (long) 1832;
      longArray1[2] = (long) 1832;
      longArray1[3] = (long) 1832;
      longArray1[4] = (long) 1832;
      longArray1[5] = (long) 1832;
      longArray1[6] = (long) 1832;
      longArray1[7] = (long) 1832;
      longArray1[8] = (long) 1832;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = (long) 1832;
      longArray2[1] = 0L;
      longArray2[2] = (long) 1832;
      longArray2[3] = (long) 1832;
      longArray2[4] = (long) 1832;
      longArray2[5] = (long) 1832;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = (long) 1832;
      longArray3[1] = (long) 1832;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray4[4] = (long) 1832;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      longArray5[0] = 0L;
      longArray5[1] = 0L;
      longArray5[2] = 0L;
      longArray5[3] = (long) 1832;
      longArray5[4] = (-986L);
      longArray5[5] = 0L;
      longArray5[6] = 0L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      long[][] longArray0 = new long[6][0];
      long[] longArray1 = new long[1];
      longArray1[0] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (-1L);
      longArray2[1] = (-1L);
      longArray2[2] = (-1L);
      longArray2[3] = (-1L);
      longArray2[4] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = (-1L);
      longArray3[1] = (-702L);
      longArray3[2] = (-1634L);
      longArray3[3] = (-1L);
      longArray3[4] = (-1L);
      longArray3[5] = (-1L);
      longArray3[6] = (-1L);
      longArray3[7] = (-1L);
      longArray3[8] = (-1L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = (-2057L);
      longArray4[1] = (-656L);
      longArray4[2] = (-1634L);
      longArray4[3] = (-1L);
      longArray4[4] = (-1634L);
      longArray4[5] = (-1L);
      longArray4[6] = (-1634L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      longArray5[0] = (-2057L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      longArray6[0] = (-2057L);
      longArray6[1] = (-1L);
      longArray6[2] = (-656L);
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-3545);
      intArray0[1] = 278;
      intArray0[2] = 719;
      intArray0[3] = 3566;
      intArray0[4] = (-424);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3566;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {3566.0, Double.NEGATIVE_INFINITY}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 278;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      
      int[] intArray1 = new int[3];
      intArray1[0] = 3566;
      intArray1[1] = (-424);
      intArray1[2] = (-424);
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {3566, (-424), (-424)}, intArray2);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      double double0 = 1.304E19;
      double double1 = (-1135.536372634512);
      double double2 = (-792.1122381032139);
      MathArrays.linearCombination(1.304E19, (-1135.536372634512), 0.0, (-792.1122381032139), (-792.1122381032139), 1.304E19);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("NON_CONVERGENT_CONTINUED_FRACTION");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.NON_CONVERGENT_CONTINUED_FRACTION
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1603.256924), 1.0, 0.0, 146.06131225, 1.0, 2774.117, (-1603.256924), 146.06131225);
      assertEquals((-233002.9501173385), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 616;
      intArray0[1] = 299;
      intArray0[2] = 3553;
      intArray0[3] = 0;
      intArray0[4] = 1275;
      intArray0[5] = (-205);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray1 = MathArrays.scale((-4920.55), doubleArray0);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 299;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (-4920.55);
      doubleArray2[3] = (double) 1275;
      MathArrays.equals(doubleArray2, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[4][4];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray2;
      doubleArray3[3] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
