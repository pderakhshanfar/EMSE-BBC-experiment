/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 06:16:46 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 3548.818;
      doubleArray1[1] = 1558.0;
      doubleArray1[2] = 2.608E18;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 405.25853;
      doubleArray1[5] = 94.4865526073;
      doubleArray1[6] = 537.0;
      doubleArray1[7] = (-75.853483999298);
      MathArrays.equals(doubleArray0, doubleArray1);
      long[][] longArray0 = new long[4][9];
      longArray0[0] = null;
      longArray0[1] = null;
      longArray0[2] = null;
      longArray0[3] = null;
      // Undeclared exception!
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0).when(field0).getZero();
      double[] doubleArray0 = new double[0];
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.buildArray(field0, 163);
      MathArrays.copyOf(doubleArray0, 163);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0).when(field0).getZero();
      int int0 = 2145351195;
      int int1 = (-184);
      // Undeclared exception!
      MathArrays.buildArray(field0, 2145351195, (-184));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-8.0E298);
      doubleArray0[1] = 1.304E19;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Z%bTymA^][~r";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.26E18;
      doubleArray0[1] = (-2780.9);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 4190.072290907;
      doubleArray0[4] = 1383.284001941047;
      doubleArray0[5] = 689.574241116;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 2.6670937881135714E32;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      int[] intArray0 = new int[8];
      intArray0[0] = (-182);
      intArray0[1] = 330;
      intArray0[2] = 5693;
      intArray0[3] = 796;
      intArray0[4] = 1073741824;
      intArray0[5] = (-1);
      intArray0[6] = 48;
      intArray0[7] = 0;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 330;
      doubleArray0[1] = (-844.281355);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][6];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 32768);
      MathArrays.convolve(doubleArray0, doubleArray0);
      // Undeclared exception!
      MathArrays.ebeSubtract(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[1];
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-928);
      intArray0[1] = 11;
      intArray0[2] = 787;
      intArray0[3] = (-31);
      intArray0[4] = 127;
      intArray0[5] = 2147259075;
      int[] intArray1 = new int[6];
      intArray1[0] = 2147259075;
      intArray1[1] = 11;
      intArray1[2] = 11;
      intArray1[3] = 2147259075;
      intArray1[4] = 2147259075;
      intArray1[5] = (-928);
      MathArrays.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3182.4349684);
      doubleArray0[1] = (-3210.7238228706);
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-1996.239613);
      doubleArray0[5] = 0.3153223395347595;
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-907.01203);
      doubleArray0[1] = (-1.0);
      MathArrays.equals(doubleArray0, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1521);
      intArray0[1] = (-1521);
      intArray0[2] = 710;
      intArray0[3] = (-1521);
      intArray0[4] = (-1521);
      intArray0[5] = 1493;
      intArray0[6] = (-1521);
      intArray0[7] = (-1521);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.buildArray(field0, 1493, (-1521));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1.304E19;
      doubleArray2[1] = (double) 1493;
      doubleArray2[2] = (double) (-1521);
      doubleArray2[3] = 1.304E19;
      doubleArray2[4] = 1.304E19;
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1493;
      int int1 = (-1521);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1493, (-1521));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1412.518981);
      doubleArray1[1] = 0.6409968137741089;
      doubleArray1[2] = (-1673.9);
      MathArrays.equalsIncludingNaN(doubleArray1, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 997.8645283234591;
      doubleArray0[0] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-1347.7737508538557);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      float[] floatArray0 = new float[8];
      floatArray0[0] = 4320.748F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2700.3171F);
      floatArray0[3] = 685.5369F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 1278.7445F;
      floatArray0[7] = (-1912.09F);
      MathArrays.equals(floatArray0, floatArray0);
      float[] floatArray1 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray1, floatArray1);
      int[] intArray0 = new int[4];
      intArray0[0] = 232;
      intArray0[1] = (-2721);
      intArray0[2] = (-59);
      intArray0[3] = 214;
      int[] intArray1 = new int[2];
      intArray1[0] = (-59);
      intArray1[1] = 214;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      MathArrays.copyOf(doubleArray2);
      MathArrays.linearCombination(1963.1784351061892, 1.34217729E8, 0.1256551444530487, 0.1256551444530487);
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 196687.303396;
      doubleArray3[1] = 0.1256551444530487;
      doubleArray3[2] = (double) (-247.42416F);
      doubleArray3[3] = (double) (-247.42416F);
      doubleArray3[4] = (double) (-247.42416F);
      doubleArray3[5] = 0.1256551444530487;
      doubleArray3[6] = (-0.49999999999999994);
      doubleArray3[7] = 196687.303396;
      doubleArray3[8] = 516.0755763124916;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, true, false);
      try { 
        MathArrays.checkOrder(doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (196,687.303 >= 0.126)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "P$s!ZmL{Zf)>IkeQT)";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      int[] intArray0 = new int[7];
      intArray0[0] = 12;
      intArray0[1] = 1330;
      intArray0[2] = 134217729;
      intArray0[3] = (-217);
      intArray0[4] = (-284);
      intArray0[5] = 6;
      intArray0[6] = (-2623);
      int[] intArray1 = new int[5];
      intArray1[0] = (-284);
      intArray1[1] = 1330;
      intArray1[2] = (-217);
      int int0 = 2117;
      intArray1[3] = 2117;
      intArray1[4] = (-284);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.9841269659586505E-4);
      doubleArray0[1] = 2635.988813794981;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 8987.039714589999;
      doubleArray0[4] = (-36.9);
      doubleArray0[5] = (-1.0);
      MathArrays.safeNorm(doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 314.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-2754.609F);
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-390.9F);
      floatArray1[1] = (-2754.609F);
      floatArray1[2] = (-2754.609F);
      floatArray1[3] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.linearCombination(0.0, 0.0, 0.6409968137741089, 0.0, 1.0, 0.0);
      MathArrays.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2961.7;
      doubleArray0[1] = 1539.305674645836;
      doubleArray0[2] = 144.7391510122408;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 164.54524069;
      doubleArray0[5] = 0.0;
      int[] intArray0 = new int[2];
      intArray0[0] = 2147477084;
      intArray0[1] = (-470);
      MathArrays.copyOf(intArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(579.8200000000002, doubleArray1);
      double double0 = MathArrays.linearCombination(0.0, 164.54524069, (-3546.018848398067), 0.99, Double.NaN, 4088.517209, 4088.517209, (double) 2147477084);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.normalizeArray(doubleArray1, 0.19999999999923582);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 4761.775F;
      floatArray0[1] = 4761.775F;
      floatArray0[2] = Float.POSITIVE_INFINITY;
      floatArray0[4] = Float.POSITIVE_INFINITY;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4761.775F;
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 4761.775F;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray1, doubleArray1);
      MathArrays.ebeMultiply(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(509.98988908312, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1734.9058503545764);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 4761.775F;
      floatArray0[1] = 4761.775F;
      floatArray0[2] = Float.POSITIVE_INFINITY;
      floatArray0[4] = Float.POSITIVE_INFINITY;
      floatArray0[4] = 878.8F;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) Float.POSITIVE_INFINITY;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = (double) Float.POSITIVE_INFINITY;
      doubleArray1[3] = (-1734.9058503545764);
      try { 
        MathArrays.normalizeArray(doubleArray1, Float.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.7168146928204135);
      doubleArray0[1] = (-2.1453442227867146E9);
      doubleArray0[2] = 472.1573995;
      doubleArray0[4] = 0.9489846229553223;
      doubleArray0[5] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 890.323350214);
      MathArrays.linearCombination(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      MathArrays.ebeAdd(doubleArray1, doubleArray2);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray1, doubleArray1);
      MathArrays.linearCombination(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-600);
      intArray0[0] = (-600);
      int int1 = 138;
      intArray0[1] = 138;
      int[] intArray1 = new int[6];
      intArray1[0] = 138;
      intArray1[1] = (-600);
      intArray1[2] = (-600);
      intArray1[3] = 138;
      intArray1[4] = 138;
      intArray1[5] = (-600);
      MathArrays.distanceInf(intArray0, intArray1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 138;
      doubleArray0[1] = (double) (-600);
      doubleArray0[2] = (double) 738;
      doubleArray0[3] = (double) (-600);
      doubleArray0[4] = (double) 138;
      doubleArray0[5] = (double) (-600);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-600));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale((-1.0), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 433;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 433);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1608.0F);
      floatArray0[1] = (-1896.0F);
      floatArray0[2] = 1.0F;
      float[] floatArray1 = new float[4];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-1608.0F);
      floatArray1[2] = 1.0F;
      floatArray1[3] = (-1608.0F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, 2.092571258544922, 674.73, 2.092571258544922, 1554.0, 1554.0);
      MathArrays.linearCombination(1479.846, 1.01, 3.834E-20, (-3282.19), 2.092571258544922, 0.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1734.9058503545764);
      MathArrays.normalizeArray(doubleArray0, (-1734.9058503545764));
      long[] longArray0 = new long[5];
      longArray0[0] = 484L;
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1253);
      intArray0[1] = (-2501);
      intArray0[2] = 1075;
      intArray0[3] = 0;
      intArray0[4] = 51;
      intArray0[5] = 0;
      intArray0[6] = 1230;
      MathArrays.copyOf(intArray0, 0);
      long[][] longArray1 = new long[0][5];
      MathArrays.checkRectangular(longArray1);
      MathArrays.checkNonNegative(longArray1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "P$s!ZmL{Zf)>IkeQT)";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      int[] intArray0 = new int[2];
      intArray0[0] = 400;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1734.9058503545764);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 4761.775F;
      floatArray0[1] = (-290.0F);
      floatArray0[2] = Float.POSITIVE_INFINITY;
      float float0 = (-246.29163F);
      floatArray0[3] = (-246.29163F);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) Float.POSITIVE_INFINITY;
      doubleArray2[1] = (-1734.9058503545764);
      MathArrays.ebeSubtract(doubleArray2, doubleArray2);
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-1734.9058503545764);
      doubleArray3[1] = (-1734.9058503545764);
      doubleArray3[2] = (-1734.9058503545764);
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 14 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1734.9058503545764);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 4761.775F;
      floatArray0[1] = (-290.0F);
      floatArray0[2] = Float.POSITIVE_INFINITY;
      floatArray0[3] = (-246.29163F);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) Float.POSITIVE_INFINITY;
      doubleArray1[1] = (-1734.9058503545764);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      MathArrays.copyOf(doubleArray1);
      MathArrays.linearCombination(Double.POSITIVE_INFINITY, 0.041666663879186654, 0.041666663879186654, 196687.303396);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      MathArrays.ebeAdd(doubleArray1, doubleArray2);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2147482934);
      Integer integer1 = Integer.getInteger("WD}", integer0);
      integerArray0[0] = integer1;
      Integer integer2 = new Integer(261);
      integerArray0[1] = integer2;
      Integer integer3 = new Integer(140);
      integerArray0[2] = integer3;
      Integer integer4 = Integer.getInteger("WD}", integer3);
      integerArray0[3] = integer4;
      Integer integer5 = new Integer(261);
      integerArray0[4] = integer5;
      Integer integer6 = new Integer(2);
      integerArray0[5] = integer6;
      Integer integer7 = new Integer(25);
      integerArray0[6] = integer7;
      Integer integer8 = new Integer(2);
      integerArray0[7] = integer8;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      MathArrays.copyOf(doubleArray2);
      MathArrays.linearCombination(0.0, (-7.800414592973399E-9), (-1559.0), (-207.196));
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.ebeAdd(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1734.9058503545764);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1734.9058503545764));
      MathArrays.OrderDirection.values();
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[8][0];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1734.9058503545764);
      doubleArray0[1] = (double) 9218868437227405312L;
      doubleArray0[2] = (-1734.9058503545764);
      doubleArray0[3] = (double) 9218868437227405312L;
      doubleArray0[4] = (double) 9218868437227405312L;
      doubleArray0[5] = (double) 9218868437227405312L;
      doubleArray0[6] = (double) 9218868437227405312L;
      doubleArray0[7] = 117.573;
      MathArrays.normalizeArray(doubleArray0, -0.0);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2094.6748F);
      floatArray0[1] = 351.363F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 781.6F;
      float[] floatArray1 = new float[1];
      floatArray1[0] = (-2094.6748F);
      MathArrays.equals(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[1];
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      MathArrays.equals(floatArray0, (float[]) null);
      long[][] longArray0 = new long[9][4];
      long[] longArray1 = new long[5];
      longArray1[0] = (-1888L);
      longArray1[1] = 155L;
      longArray1[2] = (-4035746434778044925L);
      longArray1[3] = (-1073741824L);
      longArray1[4] = 513L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = (-4035746434778044925L);
      longArray2[1] = 513L;
      longArray2[2] = (-1073741824L);
      longArray2[3] = (-4035746434778044925L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = 513L;
      longArray3[1] = 513L;
      longArray3[2] = (-1073741824L);
      longArray3[3] = 513L;
      longArray3[4] = (-1888L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = (-4035746434778044925L);
      longArray4[1] = (-4035746434778044925L);
      longArray4[2] = (-4035746434778044925L);
      longArray4[3] = (-4035746434778044925L);
      longArray4[4] = 155L;
      longArray4[5] = (-4035746434778044925L);
      longArray4[6] = 3952090531849364496L;
      longArray4[7] = 155L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = (-4035746434778044925L);
      longArray5[1] = (-1888L);
      longArray5[2] = 3216L;
      longArray5[3] = 513L;
      longArray5[4] = 155L;
      longArray5[5] = (-1073741824L);
      longArray5[6] = 3952090531849364496L;
      longArray5[7] = 513L;
      longArray5[8] = (-4035746434778044925L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = 513L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[3];
      longArray7[0] = (-4035746434778044925L);
      longArray7[1] = (-1888L);
      longArray7[2] = (-1888L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      longArray0[7] = longArray8;
      long[] longArray9 = new long[3];
      longArray9[0] = (-4035746434778044925L);
      longArray9[1] = 3952090531849364496L;
      longArray9[2] = 155L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,888 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 242, 242);
      MathArrays.linearCombination(0.0, (double) 242, 26192.846102211, 1.0, 1.0, 0.0);
      MathArrays.linearCombination((double) 242, (-3282.19), 26192.846102211, (double) 242, 592.5, (-1159.409286));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[][] longArray0 = new long[1][3];
      MathArrays.checkRectangular(longArray0);
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "-6mFkK>";
      stringArray0[3] = ",1G|a>`]Wd";
      stringArray0[4] = "FtM+,BLN'Krwu3f\"87t";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[7];
      intArray1[0] = (-1046);
      intArray1[1] = 859;
      intArray1[2] = (-1);
      intArray1[3] = (-747);
      intArray1[4] = (-398);
      intArray1[5] = 1;
      intArray1[6] = 303;
      MathArrays.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      int[] intArray0 = new int[5];
      intArray0[0] = (-2145338309);
      intArray0[1] = 1665;
      intArray0[2] = (-2810);
      intArray0[3] = 1661;
      intArray0[4] = 1687;
      MathArrays.copyOf(intArray0);
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1159.409286);
      doubleArray0[2] = (-1000.0);
      doubleArray0[3] = 2732.549215;
      doubleArray0[4] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 1677);
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray2);
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-1159.409286);
      MathArrays.equalsIncludingNaN(doubleArray4, doubleArray1);
      MathArrays.distance1(doubleArray0, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.4105060504335012;
      int[] intArray0 = new int[8];
      intArray0[0] = 4014;
      intArray0[1] = 4014;
      intArray0[2] = 1;
      intArray0[3] = (-1621);
      intArray0[4] = 4014;
      intArray0[5] = 4014;
      intArray0[6] = (-1901);
      intArray0[7] = (-1621);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      MathArrays.ebeMultiply(doubleArray2, doubleArray0);
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-3388.1130996);
      doubleArray3[1] = 1409.024544184;
      doubleArray3[2] = (-1691.099875);
      doubleArray3[3] = 3379.318855115201;
      doubleArray3[4] = (-395.1);
      doubleArray3[5] = (-3059.78);
      doubleArray3[6] = (-1459.77768860389);
      doubleArray3[7] = 1908.56352;
      doubleArray3[8] = 0.5850973129272461;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 9218868437227405312L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1159.409286);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(369.7597036087, doubleArray0);
      MathArrays.linearCombination(3.408766060956805E21, 9.3142857142857139E17, 0.0, Double.POSITIVE_INFINITY, (-1443.78350648), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 6.043265259338072E-23;
      doubleArray0[1] = (-0.16666666666666666);
      doubleArray0[2] = 2463.42593;
      doubleArray0[3] = (-1000.0);
      doubleArray0[4] = 3181.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-1000.0);
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      long[][] longArray0 = new long[2][4];
      long[] longArray1 = new long[1];
      longArray1[0] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = 1L;
      longArray2[1] = 1L;
      longArray2[2] = 1L;
      longArray2[3] = 1L;
      longArray2[4] = 1L;
      longArray2[5] = 1L;
      longArray2[6] = 1L;
      longArray2[7] = 1L;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 1L;
      doubleArray2[1] = (double) 1L;
      doubleArray2[2] = (double) 1L;
      doubleArray2[3] = (double) 1L;
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-593.2374095656);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 553.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][3];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long[][] longArray0 = new long[1][3];
      long[] longArray1 = new long[5];
      longArray1[0] = 9218868437227405312L;
      longArray1[1] = 9218868437227405312L;
      longArray1[1] = 9218868437227405312L;
      longArray1[0] = 9218868437227405312L;
      longArray1[4] = 9218868437227405312L;
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 9218868437227405312L;
      doubleArray0[1] = (double) 9218868437227405312L;
      doubleArray0[2] = (double) 9218868437227405312L;
      doubleArray0[3] = (double) 9218868437227405312L;
      doubleArray0[4] = 675.745230018;
      doubleArray0[5] = 0.041666663879186654;
      doubleArray0[6] = (double) 9218868437227405312L;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[2];
      intArray0[0] = (-3315);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-3315);
      floatArray0[1] = (float) (-3315);
      floatArray0[2] = (float) (-3315);
      floatArray0[3] = (float) (-3315);
      floatArray0[4] = (float) (-3315);
      floatArray0[5] = (float) (-3315);
      floatArray0[6] = (float) (-3315);
      floatArray0[7] = (float) (-3315);
      floatArray0[8] = (float) (-3315);
      float[] floatArray1 = new float[7];
      floatArray1[0] = (float) (-3315);
      floatArray1[1] = (float) (-3315);
      floatArray1[2] = (float) (-3315);
      floatArray1[3] = (float) (-3315);
      floatArray1[4] = (float) (-3315);
      floatArray1[5] = (float) (-3315);
      floatArray1[6] = (float) (-3315);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.equals(floatArray1, floatArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      MathArrays.distance1(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.4105060504335012;
      int int0 = 4007;
      int int1 = (-1259);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.4105060504335012;
      float[] floatArray0 = new float[2];
      doubleArray0[1] = (double) 4007;
      floatArray0[1] = (float) 4007;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray1 = new double[4];
      MathArrays.copyOf(doubleArray1);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      MathArrays.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(509.98988908312, doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.ebeMultiply(doubleArray2, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-246.29163F);
      floatArray0[1] = 2016.4731F;
      floatArray0[2] = Float.POSITIVE_INFINITY;
      floatArray0[3] = 4761.775F;
      floatArray0[4] = (-290.0F);
      floatArray0[5] = 3555.37F;
      floatArray0[6] = (-246.29163F);
      floatArray0[7] = (-290.0F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-246.29163F);
      doubleArray0[2] = Double.NaN;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray1);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (-246.29163F);
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = (double) (-246.29163F);
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = Double.NaN;
      doubleArray2[5] = (double) (-246.29163F);
      doubleArray2[6] = Double.NaN;
      doubleArray2[7] = Double.NaN;
      doubleArray2[8] = (double) Float.POSITIVE_INFINITY;
      MathArrays.safeNorm(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      int[] intArray0 = new int[7];
      MathArrays.copyOf(intArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 4007;
      floatArray0[1] = (float) 4007;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.equals((float[]) null, floatArray0);
      MathArrays.copyOf(doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.4105060504335012;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 4007;
      floatArray0[1] = (float) 4007;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray1 = new double[0];
      MathArrays.copyOf(doubleArray1);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-90.3019909);
      doubleArray0[1] = (-90.3019909);
      doubleArray0[2] = (-1734.9058503545764);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 4761.775F;
      floatArray0[1] = (-290.0F);
      floatArray0[2] = Float.POSITIVE_INFINITY;
      floatArray0[3] = (-246.29163F);
      floatArray0[4] = 878.8F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) Float.POSITIVE_INFINITY;
      doubleArray1[1] = (-675.745230018);
      doubleArray1[2] = (double) (-246.29163F);
      doubleArray1[3] = (-1734.9058503545764);
      doubleArray1[4] = (double) Float.POSITIVE_INFINITY;
      doubleArray1[5] = (double) 878.8F;
      doubleArray1[6] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray1);
      float[] floatArray1 = new float[3];
      floatArray1[0] = (-246.29163F);
      floatArray1[1] = Float.POSITIVE_INFINITY;
      floatArray1[2] = 4761.775F;
      boolean boolean0 = MathArrays.equals(floatArray1, floatArray0);
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      double double1 = MathArrays.distance1(doubleArray1, doubleArray2);
      assertEquals(double1, double0, 0.01);
      assertEquals(7, doubleArray2.length);
      assertEquals(Double.NaN, double1, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray2, 4761.775F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3150.6013;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "k4C$s,[|~#H";
      stringArray0[1] = "k4C$s,[|~#H";
      stringArray0[2] = "hs0Jr@-H_g";
      stringArray0[3] = "hs0Jr@-H_g";
      stringArray0[4] = "k4C$s,[|~#H";
      stringArray0[5] = "hs0Jr@-H_g";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = 1985;
      int int0 = new Integer(3);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3829.470566032159;
      doubleArray0[3] = (double) 2016.4731F;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 2016.4731F;
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, 1.5246242E7, 51.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 3829.470566032159;
      doubleArray2[1] = 3829.470566032159;
      doubleArray2[2] = 3829.470566032159;
      doubleArray2[3] = 3829.470566032159;
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3829.470566032159;
      doubleArray0[3] = (double) 2016.4731F;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 2016.4731F;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray1);
      MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-1.0), (-1.0), 0.0, 0.0, 4.455505956692757, 0.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.4105060504335012;
      doubleArray0[1] = 0.4105060504335012;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      MathArrays.scale(0.4105060504335012, doubleArray1);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1914.7352830160794;
      doubleArray0[2] = 516.0755763124916;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      MathArrays.copyOf(doubleArray1);
      MathArrays.linearCombination((-2812.0), 1061.6881, 0.0, 1.304E19);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,914.735 >= 516.076)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) (-1L);
      doubleArray0[7] = (double) (-1L);
      doubleArray0[8] = (double) (-1L);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.linearCombination((-1.0), 0.0, 2987.1759385600003, (-1.0), (-3045.05191982308), 2.8284271247461903);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 9218868437227405312L;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.4105060504335012;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2761.0F);
      floatArray0[1] = 2.4089046F;
      MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) (-2761.0F);
      doubleArray2[1] = (double) (-2761.0F);
      doubleArray2[2] = (double) 0;
      MathArrays.ebeSubtract(doubleArray1, doubleArray2);
      MathArrays.safeNorm(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 9218868437227405312L;
      longArray0[1] = 9218868437227405312L;
      longArray0[2] = 9218868437227405312L;
      longArray0[3] = 9218868437227405312L;
      longArray0[4] = 9218868437227405312L;
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0, 618);
      int[] intArray1 = new int[6];
      intArray1[0] = 618;
      intArray1[1] = 618;
      intArray1[2] = 618;
      intArray1[3] = 618;
      intArray1[4] = 618;
      intArray1[5] = 618;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1185.655;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2658.6506F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2658.6506F);
      floatArray0[3] = 3183.9F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 2060.6558F;
      floatArray0[6] = 12.45F;
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      int[] intArray0 = new int[2];
      intArray0[0] = (-1621);
      intArray0[1] = (-1621);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.linearCombination(533.575568846429, 1709.9, (double) (-1621), 104.0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray1[1], doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-934), (-1073741823));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2501.8009547);
      doubleArray0[1] = (-1931.74102771087);
      doubleArray0[2] = 595.3476717072;
      doubleArray0[3] = 2.479773539153719E-5;
      doubleArray0[4] = 0.875;
      doubleArray0[5] = (-1662.4599881709);
      doubleArray0[6] = 2896.581038231705;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2896.581038231705;
      doubleArray1[1] = 908.444826577;
      doubleArray1[2] = 2896.581038231705;
      doubleArray1[3] = 0.875;
      doubleArray1[4] = (-1931.74102771087);
      doubleArray1[5] = 595.3476717072;
      doubleArray1[6] = 2.479773539153719E-5;
      doubleArray1[7] = (-1662.4599881709);
      doubleArray1[8] = 0.875;
      MathArrays.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1159.409286);
      doubleArray1[2] = 0.0;
      MathArrays.convolve(doubleArray0, doubleArray1);
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "|>";
      stringArray0[1] = "|>";
      stringArray0[2] = "p";
      stringArray0[3] = "|>";
      stringArray0[4] = "|>";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(509.98988908312, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.scale(509.98988908312, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3150.6013206;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2016.4731F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 2206.5774F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-146.0F);
      floatArray0[7] = 399.07F;
      MathArrays.linearCombination(1.633123935319537E16, 403.3250159496395, 1572.411019, (double) (-146.0F), 403.3250159496395, (double) 0.0F, 1572.411019, 3343.60540086);
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 513L;
      longArray0[2] = 526L;
      longArray0[3] = 526L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1572.411019;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[0] = 1914.7352830160794;
      doubleArray0[2] = 516.0755763124916;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      Double double0 = new Double(516.0755763124916);
      int[] intArray0 = new int[9];
      intArray0[0] = 493;
      intArray0[1] = 828;
      intArray0[2] = 7;
      intArray0[3] = 831;
      intArray0[4] = (-1);
      intArray0[5] = 831;
      intArray0[6] = (-1567);
      intArray0[7] = 1;
      intArray0[8] = 828;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      int[] intArray0 = new int[2];
      intArray0[0] = (-1621);
      intArray0[1] = (-1621);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.linearCombination(533.575568846429, 1709.9, (double) (-1621), 104.0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-934), (-1073741823));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-90.3019909);
      doubleArray0[1] = (-90.3019909);
      int int0 = 823;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 823);
      MathArrays.linearCombination((-90.3019909), (-20.0), (double) 0, (-1681.0), (-2518.139838173052), (-2518.139838173052), (-2027.768793974009), (-2027.768793974009));
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 14);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      // Undeclared exception!
      MathArrays.convolve(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      longArray0[2] = (-1365L);
      long[] longArray1 = new long[8];
      longArray1[0] = 0L;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "p";
      stringArray0[1] = "-G)iU";
      stringArray0[2] = "p";
      stringArray0[3] = "p";
      stringArray0[4] = "p";
      stringArray0[5] = "p";
      stringArray0[6] = "p";
      stringArray0[7] = "p";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1160L;
      doubleArray0[1] = (double) 1160L;
      doubleArray0[2] = (double) 1160L;
      doubleArray0[3] = (double) 1160L;
      doubleArray0[4] = (double) 1160L;
      doubleArray0[5] = (double) 1160L;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 1160L;
      doubleArray0[8] = (double) 1160L;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 17 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-704.435354370672);
      doubleArray0[0] = (-704.435354370672);
      double double1 = 969.33615866;
      doubleArray0[1] = 969.33615866;
      double double2 = (-2821.988883605766);
      doubleArray0[2] = (-2821.988883605766);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-704.435354370672);
      doubleArray1[1] = (-704.435354370672);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 969.33615866;
      doubleArray2[1] = (-704.435354370672);
      doubleArray2[2] = (-2821.988883605766);
      doubleArray2[3] = (-2821.988883605766);
      doubleArray2[4] = (-704.435354370672);
      doubleArray2[5] = (-2821.988883605766);
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MathArrays.OrderDirection.values();
      MathArrays.linearCombination((-1.0), (-2017.853123), (-5450.47769771879), (-2017.853123), (-5450.47769771879), (-5450.47769771879));
      double[] doubleArray0 = new double[9];
      doubleArray0[7] = (-5450.47769771879);
      doubleArray0[1] = (-5450.47769771879);
      doubleArray0[2] = 4.070798843063664E7;
      doubleArray0[3] = (-1.0);
      doubleArray0[5] = (-5450.47769771879);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-5450.47769771879);
      doubleArray0[8] = (-2017.853123);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1734.9058503545764);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 4761.775F;
      floatArray0[1] = (-290.0F);
      floatArray0[2] = Float.POSITIVE_INFINITY;
      floatArray0[3] = (-246.29163F);
      floatArray0[4] = 878.8F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) Float.POSITIVE_INFINITY;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = (double) (-246.29163F);
      doubleArray1[3] = (-1734.9058503545764);
      doubleArray1[4] = (double) Float.POSITIVE_INFINITY;
      doubleArray1[5] = (double) 878.8F;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      int int0 = 7;
      int int1 = (-1);
      int int2 = 831;
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int[] intArray1 = new int[1];
      intArray1[0] = 828;
      MathArrays.distance(intArray0, intArray1);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 24;
      intArray0[2] = 134217729;
      intArray0[3] = 3216;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "DECREASING";
      stringArray0[2] = "3+ETr";
      stringArray0[3] = "GQOkjx7<Xha";
      stringArray0[4] = "`odm9_:.7Hn+f,,";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      long[][] longArray0 = new long[3][7];
      long[] longArray1 = new long[1];
      longArray1[0] = 1023L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = 1023L;
      longArray2[1] = 1023L;
      longArray2[3] = 1023L;
      longArray2[4] = 1023L;
      longArray2[5] = 1023L;
      longArray2[6] = 1023L;
      longArray2[7] = 1023L;
      longArray2[8] = 1023L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 760;
      intArray0[2] = 824;
      intArray0[3] = (-428);
      intArray0[4] = 828;
      intArray0[5] = 515;
      MathArrays.copyOf(intArray0, 824);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3150.6013206;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      int int0 = (-470);
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(509.98988908312, doubleArray0);
      int int1 = 9;
      MathArrays.copyOf(doubleArray0, 9);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      double double0 = new Double(3.834E-20);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 904.22697688;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 2082.94896168;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2844.89153202481));
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(509.98988908312, doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      longArray0[2] = (-1365L);
      long[] longArray1 = new long[8];
      longArray1[0] = 0L;
      longArray1[1] = (-1365L);
      longArray1[2] = 1160L;
      longArray1[3] = (-1L);
      longArray1[4] = (-1L);
      longArray1[5] = (-1L);
      longArray1[6] = 0L;
      longArray1[7] = (-1L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) 1160L;
      doubleArray0[3] = (double) (-1365L);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2.0), (-2.0), 2320.0, (-2730.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) (-1365L);
      doubleArray2[1] = (double) 0L;
      doubleArray2[2] = (double) (-1L);
      doubleArray2[3] = (double) 0L;
      doubleArray2[4] = (double) 1160L;
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {1863225.0, 0.0, 2730.0, 0.0, (-3166799.0), 0.0, (-2320.0), 0.0, 1345600.0}, doubleArray3, 0.01);
      assertEquals(9, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1185.655;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2610.2186484408);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 6.283185307179586;
      doubleArray0[6] = 0.0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1jJ";
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 3599.913845729;
      doubleArray1[1] = 1185.655;
      doubleArray1[2] = 1185.655;
      doubleArray1[3] = 1.304E19;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "|>";
      stringArray0[1] = "|>";
      stringArray0[2] = "p";
      stringArray0[3] = "|>";
      stringArray0[4] = "|>";
      stringArray0[5] = "SIMPLE_MESSAGE";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-90.3019909);
      doubleArray0[1] = (-90.3019909);
      doubleArray0[2] = (-1734.9058503545764);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SIMPLE_MESSAGE";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 24;
      intArray0[2] = 134217729;
      intArray0[3] = 3216;
      intArray0[4] = (-1005);
      intArray0[5] = 150;
      intArray0[6] = 4007;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MathArrays.OrderDirection.values();
      MathArrays.linearCombination((-1.0), (-2017.853123), (-5450.47769771879), (-2017.853123), (-5450.47769771879), (-5450.47769771879));
      double[] doubleArray0 = new double[9];
      doubleArray0[7] = (-5450.47769771879);
      doubleArray0[1] = (-5450.47769771879);
      doubleArray0[2] = 4.070798843063664E7;
      doubleArray0[3] = (-1.0);
      doubleArray0[5] = (-5450.47769771879);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-5450.47769771879);
      doubleArray0[8] = (-2017.853123);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-5450.47769771879), (-5450.47769771879), (-2017.853123), 0.0, (-5450.47769771879), (-1.0), 0.0, 4.070798843063664E7, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 24;
      intArray0[2] = 134217729;
      intArray0[3] = 3216;
      intArray0[4] = (-1005);
      intArray0[5] = 150;
      MathArrays.linearCombination(196687.303396, (double) (-1005), 1.2599210498948732, (double) 3216, 0.16666666666666666, (-1400.990504), (-1400.990504), (double) 150);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 24;
      floatArray0[1] = (float) 24;
      MathArrays.equals(floatArray0, floatArray0);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-704.435354370672);
      doubleArray0[1] = 969.33615866;
      doubleArray0[2] = (-2821.988883605766);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-704.435354370672);
      doubleArray1[1] = (-704.435354370672);
      doubleArray1[2] = (-704.435354370672);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-704.435354370672);
      doubleArray1[6] = 0.0;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, (-704.435354370672));
      MathArrays.distance1(doubleArray3, doubleArray3);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("TANGENT_TABLE_B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.TANGENT_TABLE_B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.copyOf(doubleArray0);
      long[][] longArray0 = new long[5][8];
      long[] longArray1 = new long[2];
      longArray1[0] = (-827L);
      longArray1[1] = 1174L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (-827L);
      longArray2[1] = (-827L);
      longArray2[2] = (-827L);
      longArray2[3] = 1174L;
      longArray2[4] = (-827L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = (-827L);
      longArray3[1] = 1174L;
      longArray3[2] = 1174L;
      longArray3[3] = 1174L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      longArray4[0] = 1174L;
      longArray4[1] = (-827L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      longArray5[0] = 1174L;
      longArray5[1] = 1174L;
      longArray5[2] = (-2622L);
      longArray5[3] = 1174L;
      longArray5[4] = 1174L;
      longArray5[5] = 1174L;
      longArray5[6] = (-827L);
      longArray5[7] = 1174L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      double double0 = 1185.655;
      doubleArray0[1] = 1185.655;
      doubleArray0[2] = (-1.0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2961.7;
      doubleArray0[1] = 1539.305674645836;
      doubleArray0[2] = 144.7391510122408;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 164.54524069;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|>";
      stringArray0[1] = "|>";
      stringArray0[2] = "";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not decreasing (0 < 164.545)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(509.98988908312, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      
      MathArrays.linearCombination(4088.517209, (double) (-470), 0.99, 0.99, 579.8200000000002, 100.0, Double.NaN, 1.0);
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[2];
      intArray0[0] = (-470);
      intArray0[1] = 2147477084;
      MathArrays.copyOf(intArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace((-793.5147241936095), doubleArray1);
      double double0 = MathArrays.linearCombination(0.99, 0.99, 1.34217729E8, 3.834E-20, Double.NaN, 2956.4, 969.33615866, (double) 2147477084);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1185.655;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2610.2186484408);
      doubleArray0[4] = 0.0;
      doubleArray0[1] = 2.7075889163583335;
      doubleArray0[6] = 0.0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1jJ";
      stringArray0[1] = "7F";
      stringArray0[2] = "";
      stringArray0[3] = "YbB'X3JR7H/oa!";
      stringArray0[4] = "k4C$s,[|~#H";
      int[] intArray0 = new int[8];
      intArray0[0] = (-490);
      intArray0[1] = (-490);
      intArray0[2] = 4007;
      intArray0[3] = 4007;
      intArray0[4] = 150;
      intArray0[5] = 150;
      intArray0[6] = (-490);
      intArray0[7] = 4007;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2086.4688F;
      floatArray0[1] = (-1919.15F);
      floatArray0[2] = 600.66473F;
      floatArray0[3] = 2758.221F;
      floatArray0[4] = 461.0F;
      floatArray0[5] = 992.35F;
      MathArrays.equals(floatArray0, floatArray0);
      double[][] doubleArray0 = new double[7][1];
      doubleArray0[0] = null;
      double[] doubleArray1 = new double[0];
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0[3], doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.linearCombination(0.0, 0.0, (double) 0, (-2370.4));
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray1);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1944, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-90.3019909);
      doubleArray0[1] = (-90.3019909);
      doubleArray0[2] = (-1745.0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "|>";
      stringArray0[1] = "SIMPLE_MESSAGE";
      stringArray0[2] = "p";
      stringArray0[3] = "|>";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      int[] intArray0 = new int[2];
      intArray0[0] = (-1621);
      intArray0[1] = (-1621);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.linearCombination(533.575568846429, 1709.9, (double) (-1621), 104.0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-934), (-1073741823));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1159.409286);
      doubleArray0[1] = 2304.0028561011;
      doubleArray0[2] = (-1000.0);
      doubleArray0[3] = 2732.549215;
      doubleArray0[4] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray0);
      int int0 = 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      MathArrays.linearCombination((-20.0), (-1000.0), 0.0, 2276.8249951733906, 2732.549215, 0.0, (double) 0, (-860.96764968));
      int int1 = 1677;
      MathArrays.copyOf(doubleArray1, 1677);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 1914.7352830160794;
      doubleArray0[2] = 516.0755763124916;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      MathArrays.copyOf(doubleArray1);
      MathArrays.linearCombination((-2812.0), 1061.6881, 1.7976931348623157E308, 1.304E19);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 >= 1,914.735)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1185.655;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2610.2186484408);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "|>";
      stringArray0[1] = "|>";
      stringArray0[2] = "SIMPLE_MESSAGE";
      stringArray0[3] = "|>";
      stringArray0[4] = "SIMPLE_MESSAGE";
      stringArray0[5] = "SIMPLE_MESSAGE";
      stringArray0[6] = "|>";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[1] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 969.33615866;
      doubleArray0[5] = 0.0;
      MathArrays.scale(0.0, doubleArray0);
      long[][] longArray0 = new long[2][3];
      long[] longArray1 = new long[1];
      longArray1[0] = 3477L;
      longArray0[0] = longArray1;
      longArray0[1] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-1095);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1095));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "=Fi!!4O:T_ux";
      stringArray0[1] = "";
      stringArray0[2] = "SIMPLE_MESSAGE";
      stringArray0[3] = "|>";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1185.655;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2610.2186484408);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 6.283185307179586;
      doubleArray0[6] = 0.0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1jJ";
      stringArray0[1] = "7F";
      stringArray0[2] = "";
      stringArray0[3] = "YbB'X3JR7H/oa!";
      stringArray0[4] = "k4C$s,[|~#H";
      stringArray0[5] = "hs0Jr@-H_g";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 7;
      intArray0[3] = 1400;
      intArray0[4] = 1985;
      intArray0[5] = 134217729;
      intArray0[6] = 3;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double double0 = 0.0;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 75);
      MathArrays.copyOf(doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      MathArrays.copyOf(doubleArray0);
      MathArrays.linearCombination(135.0, 0.0, 135.0, 2366.2);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, true);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("j*%Noi;qWQ(>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.j*%Noi;qWQ(>
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-90.3019909);
      doubleArray0[1] = (-90.3019909);
      doubleArray0[2] = (-1745.0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1621);
      intArray0[1] = 3041;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.linearCombination(104.0, (double) 0, (-90.3019909), (-2604.586));
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 72);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long[][] longArray0 = new long[2][4];
      long[] longArray1 = new long[3];
      longArray1[2] = (-1L);
      longArray1[1] = (-1L);
      longArray1[2] = (-1365L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = 0L;
      longArray2[1] = (-1365L);
      longArray2[2] = 1023L;
      longArray2[3] = (-1L);
      longArray2[4] = (-1L);
      longArray2[5] = 0L;
      longArray2[6] = 0L;
      longArray2[7] = (-1L);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1762, 1221);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-90.3019909);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1745.0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[4][6];
      doubleArray1[0] = doubleArray0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-543));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = MathArrays.linearCombination(20.0, 20.0, 20.0, (-2017.853123), (-1.0), (-1.0));
      assertEquals((-39956.06246), double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 20.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 20.0;
      doubleArray1[2] = (-39956.06246);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-39956.06246);
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(21.0, double1, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1762);
      intArray0[2] = 2326;
      intArray0[3] = (-51);
      intArray0[4] = 219;
      intArray0[5] = 0;
      intArray0[6] = 2201;
      intArray0[7] = 284;
      intArray0[8] = 48;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1386.2035572730433);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 2292.81806044;
      doubleArray0[4] = (-455.586);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-1386.2035572730433);
      doubleArray1[2] = 2292.81806044;
      doubleArray1[3] = (-455.586);
      doubleArray1[4] = 2292.81806044;
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-1.0);
      double[] doubleArray4 = MathArrays.copyOf(doubleArray3);
      MathArrays.equalsIncludingNaN(doubleArray4, doubleArray2);
      MathArrays.linearCombination((-455.586), (-455.586), (-108.713), 100.0);
      MathArrays.linearCombination(2292.81806044, 3.834E-20, 2292.81806044, (-1.0), 0.0, 0.0);
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 196687.303396;
      doubleArray5[1] = 100.0;
      doubleArray5[2] = (-1386.2035572730433);
      doubleArray5[3] = 2292.81806044;
      doubleArray5[4] = (-108.713);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray5, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-1,386.204 < 2,292.818)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 1.0, 1.0, 0.0, 0.0, 3623.0, 1.304E19, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 1914.7352830160794;
      doubleArray0[2] = 516.0755763124916;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray1);
      MathArrays.linearCombination(0.0, 0.0, 516.0755763124916, (-1114.53603), (-1282.0), 1875.903803129686, (-970.8808004), (-1114.53603));
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      long long0 = 513L;
      longArray0[1] = 513L;
      long long1 = (-612L);
      longArray0[2] = (-612L);
      long long2 = 526L;
      longArray0[3] = 526L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -612 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-90.3019909);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1745.0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][6];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-1745.0);
      doubleArray2[1] = (-1745.0);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray1[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-90.3019909);
      doubleArray3[1] = 0.0;
      doubleArray1[2] = doubleArray3;
      doubleArray1[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1109.5;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 726.5747;
      MathArrays.copyOf(doubleArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 756.0705F;
      floatArray0[2] = 1920.3624F;
      floatArray0[3] = 430.43F;
      floatArray0[4] = (-413.5F);
      floatArray0[5] = 169.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.linearCombination((double) 169.0F, 2242.097297141, 1148.6608, 813.0);
      MathArrays.linearCombination((double) 1920.3624F, 1237.77575649, (-1352.0), 0.0, 709.94, 0.0, (double) 3.4028235E38F, (double) 3.4028235E38F);
      int[] intArray0 = new int[7];
      intArray0[0] = (-738);
      intArray0[1] = 212;
      intArray0[2] = 134217729;
      intArray0[3] = 39;
      intArray0[4] = 0;
      intArray0[5] = 183;
      intArray0[6] = 1550;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[1] = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-207.9809458052713);
      doubleArray0[1] = (-207.9809458052713);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-207.9809458052713);
      doubleArray0[4] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.scale((-207.9809458052713), doubleArray0);
      assertArrayEquals(new double[] {43256.07381805519, 43256.07381805519, -0.0, 43256.07381805519, Double.NEGATIVE_INFINITY}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-207.9809458052713);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1.304E19;
      doubleArray2[3] = (-207.9809458052713);
      doubleArray2[4] = (-207.9809458052713);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection.values();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1679);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-5256);
      intArray0[4] = (-5270);
      intArray0[5] = 2935;
      intArray0[6] = 760;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 594.0;
      doubleArray0[1] = 0.0;
      double double0 = 1.304E19;
      doubleArray0[2] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.checkOrder(doubleArray0);
      int[] intArray0 = new int[2];
      int int0 = 194;
      intArray0[0] = 194;
      intArray0[1] = 0;
      int int1 = (-2876);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2876));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 203;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 203);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-704.435354370672);
      MathArrays.safeNorm(doubleArray0);
      int int0 = 837;
      Field<Integer> field0 = null;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 837, 837);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.4105060504335;
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 635.1714F;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = Float.NaN;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.OrderDirection.values();
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-2146246551);
      intArray0[1] = 2146881741;
      intArray0[2] = 1;
      intArray0[3] = 2824;
      intArray0[4] = 2183;
      intArray0[5] = 219;
      intArray0[6] = (-199);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 1908.56352;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray3);
      MathArrays.copyOf(doubleArray1, 0);
      MathArrays.copyOf(doubleArray2, 1001);
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray2, doubleArray1);
      double[] doubleArray5 = MathArrays.convolve(doubleArray2, doubleArray3);
      MathArrays.ebeSubtract(doubleArray3, doubleArray4);
      try { 
        MathArrays.ebeMultiply(doubleArray3, doubleArray5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 11
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.equals((double[]) null, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2086.4688F;
      floatArray0[1] = (-1919.15F);
      floatArray0[2] = 600.66473F;
      floatArray0[3] = 2758.221F;
      floatArray0[4] = 461.0F;
      floatArray0[5] = 992.35F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[7][1];
      doubleArray0[0] = null;
      double[] doubleArray1 = new double[0];
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2086.4688F;
      floatArray0[1] = (-1919.15F);
      floatArray0[2] = 600.66473F;
      floatArray0[3] = 2758.221F;
      floatArray0[4] = 461.0F;
      floatArray0[5] = 992.35F;
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 3041;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.linearCombination(0.0, (-2604.586), 0.0, 0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1919.15F);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 461.0F;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 461.0F;
      doubleArray0[5] = (double) 461.0F;
      doubleArray0[6] = (double) 600.66473F;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 82, (-2835));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double double0 = MathArrays.linearCombination(4426.22, (-3846.4), 4426.22, 0.0);
      assertEquals((-1.7025012608000003E7), double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4426.22;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3846.4);
      doubleArray0[3] = 0.0;
      MathArrays.normalizeArray(doubleArray0, -0.0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = (-627.0F);
      floatArray0[2] = 1080.636F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 202.3F;
      floatArray0[5] = 1031.8888F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      double double0 = 3.834E-20;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 3.834E-20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-367.3754859998121), (-259.96475), (-427.04653516567157), 2417.425560217494, (-367.3754859998121), 809.524597764469, 809.524597764469, (-259.96475));
      assertEquals((-1444695.8853469586), double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-259.96475);
      doubleArray0[1] = (-427.04653516567157);
      doubleArray0[2] = (-427.04653516567157);
      doubleArray0[3] = (-427.04653516567157);
      doubleArray0[4] = 2417.425560217494;
      doubleArray0[5] = (-259.96475);
      doubleArray0[6] = 2417.425560217494;
      double[][] doubleArray1 = new double[0][4];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-427.04653516567157), (-427.04653516567157), (-427.04653516567157), (-259.96475), (-259.96475), 2417.425560217494, 2417.425560217494}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 268;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 1237;
      intArray0[4] = 0;
      intArray0[5] = 185;
      intArray0[6] = 4410;
      intArray0[7] = 2277;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {268, 0, (-1), 1237, 0, 185, 4410, 2277}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 268;
      doubleArray0[2] = (double) 4410;
      doubleArray0[3] = (double) 0;
      double[][] doubleArray1 = new double[8][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 268.0, 4410.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray1);
      MathArrays.linearCombination(0.0, (-543.2002306), 0.0, 169.0);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, true);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("j*%Noi;qWQ(>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.j*%Noi;qWQ(>
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1647.929401515597;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[5][2];
      long[] longArray1 = new long[8];
      longArray1[0] = 100L;
      longArray1[1] = 0L;
      longArray1[2] = (-389L);
      longArray1[3] = (-1L);
      longArray1[4] = 1L;
      longArray1[5] = 3039L;
      longArray1[6] = 1L;
      longArray1[7] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = 3039L;
      longArray2[1] = 1L;
      longArray2[2] = 1L;
      longArray2[3] = 1L;
      longArray2[4] = 3039L;
      longArray2[5] = 1L;
      longArray2[6] = 0L;
      longArray2[7] = 100L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = 9218868437227405312L;
      longArray3[1] = 1L;
      longArray3[2] = 0L;
      longArray3[3] = (-1L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = 100L;
      longArray4[1] = 100L;
      longArray4[2] = 1L;
      longArray4[3] = (-1L);
      longArray4[4] = (-1L);
      longArray4[5] = (-389L);
      longArray4[6] = 2975L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      longArray5[0] = 1L;
      longArray5[1] = 1L;
      longArray5[2] = 3039L;
      longArray5[3] = 9218868437227405312L;
      longArray5[4] = (-1L);
      longArray5[5] = (-389L);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3114.71388;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1134.0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-157.5288356378991);
      doubleArray0[1] = (-157.5288356378991);
      doubleArray0[2] = (-157.5288356378991);
      doubleArray0[3] = (-157.5288356378991);
      doubleArray0[4] = (-157.5288356378991);
      doubleArray0[5] = (-157.5288356378991);
      MathArrays.scaleInPlace((-157.5288356378991), doubleArray0);
      double[][] doubleArray1 = new double[4][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (24,815.334 <= 24,815.334)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3150.6013206;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-617);
      intArray0[3] = 116;
      intArray0[4] = 239;
      int[] intArray1 = MathArrays.copyOf(intArray0, 116);
      assertEquals(116, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2961.7;
      doubleArray0[1] = 1539.305674645836;
      doubleArray0[2] = 144.7391510122408;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 164.54524069;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-268);
      intArray0[2] = 1996;
      intArray0[3] = 0;
      intArray0[4] = (-2077);
      intArray0[5] = 0;
      intArray0[6] = 1643;
      intArray0[7] = 134217729;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2016.4731F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 2206.5774F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-146.0F);
      floatArray0[7] = 399.07F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2392.2131734;
      doubleArray0[1] = 3.32;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 1437.03788349;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.902267575263977;
      doubleArray0[2] = (-2009.93);
      doubleArray0[3] = 1405777.7790249998;
      doubleArray0[4] = (-6.032174644509064E-23);
      doubleArray0[5] = (-572.5);
      doubleArray0[6] = 0.6409968137741089;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, (-6.032174644509064E-23));
      long[] longArray0 = new long[3];
      longArray0[0] = 179L;
      longArray0[1] = 0L;
      longArray0[2] = 484L;
      MathArrays.checkNonNegative(longArray0);
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertEquals(6.043271937372466E-23, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray2, doubleArray1);
      assertEquals(6.054377740526836E-23, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 4007;
      floatArray0[1] = (float) 4007;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 470.18548757733083;
      doubleArray0[4] = 102.98529581149;
      doubleArray0[5] = 24.151740547;
      doubleArray0[6] = (-1546.5693460672);
      doubleArray0[7] = 0.0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (13,040,000,000,000,000,000 >= 470.185)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "=Fi!!4O:T_ux";
      stringArray0[1] = "";
      stringArray0[2] = "SIMPLE_MESSAGE";
      stringArray0[3] = "|>";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1185.655;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2610.2186484408);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 6.283185307179586;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 969.33615866;
      doubleArray0[5] = 0.0;
      MathArrays.scale(0.0, doubleArray0);
      long[][] longArray0 = new long[2][3];
      long[] longArray1 = new long[1];
      longArray1[0] = 3477L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = 3477L;
      longArray2[1] = 3477L;
      longArray2[2] = 3477L;
      longArray2[3] = 3477L;
      longArray2[4] = 3477L;
      longArray2[5] = 0L;
      longArray2[6] = 3477L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.ebeDivide(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      longArray0[2] = (-1349L);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "|>";
      stringArray0[1] = "SIMPLE_MESSAGE";
      stringArray0[2] = "|>";
      stringArray0[3] = "SIMPLE_MESSAGE";
      stringArray0[4] = "SIMPLE_MESSAGE";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Integer>>) null, 134217729, (-1383));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-3638);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3638));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2956.4;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2956.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-5020.2);
      doubleArray0[1] = 1004.74339340928;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-724);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2421);
      intArray0[6] = (-2510);
      intArray0[7] = (-1864);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distance(intArray0, intArray0);
      MathArrays.OrderDirection.values();
      long[][] longArray0 = new long[4][4];
      long[] longArray1 = new long[7];
      longArray1[0] = 1160L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = (-199L);
      longArray1[5] = 0L;
      longArray1[6] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = 0L;
      longArray2[1] = (-199L);
      longArray2[2] = 0L;
      longArray2[3] = (-199L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = (-199L);
      longArray3[1] = 0L;
      longArray3[2] = (-199L);
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray3[6] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      longArray4[0] = (-199L);
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray4[4] = 0L;
      longArray4[5] = 0L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -199 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1159.409286);
      doubleArray0[1] = 2304.0028561011;
      doubleArray0[2] = (-1000.0);
      doubleArray0[3] = 2732.549215;
      doubleArray0[4] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      MathArrays.linearCombination((-20.0), (-1000.0), 0.0, 2276.8249951733906, 2732.549215, 0.0, (double) 0, (-860.96764968));
      MathArrays.copyOf(doubleArray1, 1677);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = null;
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.copyOf(doubleArray0, 0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-20 < 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
