/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:46:23 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146957383, 2146957383);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Pair<String, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 0, 99);
      assertNotNull(pairArray0);
      assertEquals(0, pairArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 99;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {99.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray1);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {99.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 3051;
      intArray0[1] = 1439;
      intArray0[2] = 0;
      intArray0[3] = 99;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3051, 1439, 0, 99}, intArray1);
      assertArrayEquals(new int[] {3051, 1439, 0, 99}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[4][7];
      doubleArray2[0] = null;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = null;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 3051;
      doubleArray3[1] = 3694.1353663;
      doubleArray3[2] = (double) 99;
      doubleArray2[3] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.3333333134651184;
      doubleArray0[2] = 1.375;
      doubleArray0[3] = 2.800552834259E-8;
      doubleArray0[4] = 739.80613333;
      doubleArray0[5] = (-248.17246);
      doubleArray0[6] = 959.848;
      doubleArray0[7] = (-2893.65508);
      doubleArray0[8] = 919.330962;
      double[][] doubleArray1 = new double[5][6];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 9.755392680573412E-9;
      doubleArray2[1] = 959.848;
      doubleArray2[2] = 0.3333333134651184;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 3097;
      intArray0[1] = (-2689);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3097, (-2689)}, intArray0);
      assertArrayEquals(new int[] {3097, (-2689)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1481.44423);
      doubleArray0[1] = (double) (-2689);
      doubleArray0[2] = (double) 3097;
      doubleArray0[3] = (double) (-2689);
      doubleArray0[4] = (double) (-2689);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1481.44423), (-2689.0), 3097.0, (-2689.0), (-2689.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1481.44423), (-2689.0), 3097.0, (-2689.0), (-2689.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1481.44423, 2689.0, (-3097.0), 2689.0, 2689.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double0 = MathArrays.linearCombination(doubleArray2, doubleArray0);
      assertEquals((-3.3478249006600294E7), double0, 0.01);
      assertArrayEquals(new double[] {(-1481.44423), (-2689.0), 3097.0, (-2689.0), (-2689.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1481.44423, 2689.0, (-3097.0), 2689.0, 2689.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 3097;
      floatArray0[1] = (float) 3097;
      floatArray0[2] = (float) 3097;
      floatArray0[3] = 3355.804F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {3097.0F, 3097.0F, 3097.0F, 3355.804F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 3097);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1928.88664;
      doubleArray0[1] = (-0.16666666666666666);
      doubleArray0[2] = 1384.39;
      doubleArray0[3] = (-704.741);
      doubleArray0[4] = 1969.96542052863;
      doubleArray0[5] = (-1694.40628);
      doubleArray0[6] = 13.07;
      doubleArray0[7] = 1.63E18;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.63E18, double0, 0.01);
      assertArrayEquals(new double[] {1928.88664, (-0.16666666666666666), 1384.39, (-704.741), 1969.96542052863, (-1694.40628), 13.07, 1.63E18}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<String, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 273, (-150));
      assertNotNull(pairArray0);
      assertEquals(273, pairArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 0, (double) 0, (double) 0, (-1538.6), (double) 0, (-3697.72));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 1333;
      intArray0[0] = 1333;
      intArray0[1] = 0;
      int int1 = (-2198);
      intArray0[2] = (-2198);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1333;
      intArray1[1] = (-2198);
      intArray1[2] = 1333;
      intArray1[3] = 0;
      intArray1[4] = (-2198);
      int int2 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(5729, int2);
      assertArrayEquals(new int[] {1333, 0, (-2198)}, intArray0);
      assertArrayEquals(new int[] {1333, (-2198), 1333, 0, (-2198)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1333;
      doubleArray0[2] = (double) (-2198);
      doubleArray0[3] = (double) 1333;
      doubleArray0[4] = (double) (-2198);
      doubleArray0[5] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1,333)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1589;
      intArray0[1] = (-2098);
      intArray0[2] = 265;
      intArray0[3] = 1;
      intArray0[4] = 2147006912;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1589;
      intArray1[1] = 2147006912;
      intArray1[2] = 2147006912;
      intArray1[3] = 2147006912;
      intArray1[4] = (-2098);
      intArray1[5] = 1589;
      intArray1[6] = (-2098);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals((-1903014), int0);
      assertArrayEquals(new int[] {1589, (-2098), 265, 1, 2147006912}, intArray0);
      assertArrayEquals(new int[] {1589, 2147006912, 2147006912, 2147006912, (-2098), 1589, (-2098)}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 150.6518987899;
      doubleArray0[2] = 0.16666666666666666;
      doubleArray0[3] = 1571.85297390392;
      doubleArray0[4] = (-1966.766);
      doubleArray0[5] = (-3384.8946649989807);
      doubleArray0[6] = (-439.00645782);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4244.034030949752, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 150.6518987899, 0.16666666666666666, 1571.85297390392, (-1966.766), (-3384.8946649989807), (-439.00645782)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 150.6518987899, 0.16666666666666666, 1571.85297390392, (-1966.766), (-3384.8946649989807), (-439.00645782)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 27;
      intArray0[0] = 27;
      intArray0[1] = 27;
      intArray0[2] = 1338;
      intArray0[3] = 205;
      int int1 = 6;
      intArray0[4] = 6;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 205;
      intArray1[2] = 1338;
      intArray1[3] = 27;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.6931470632553101;
      doubleArray0[1] = 3373.1071567269055;
      doubleArray0[2] = (-3.940510424527919E-20);
      doubleArray0[3] = (-1635.77);
      doubleArray0[4] = 168.2574081;
      doubleArray0[5] = 347.44198227312;
      doubleArray0[6] = 1.2246467991473532E-16;
      doubleArray0[7] = 3595.133465;
      doubleArray0[8] = (-2.5857668567479893E-8);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = 3553.0F;
      floatArray0[4] = 2885.1833F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 2885.1833F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 2532.561F;
      floatArray1[5] = 3.4028235E38F;
      floatArray1[6] = 3.4028235E38F;
      floatArray1[7] = 3553.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 3.4028235E38F, 3553.0F, 2885.1833F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2885.1833F, 0.0F, 0.0F, 0.0F, 2532.561F, 3.4028235E38F, 3.4028235E38F, 3553.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 3.4028235E38F, 3553.0F, 2885.1833F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2885.1833F, 0.0F, 0.0F, 0.0F, 2532.561F, 3.4028235E38F, 3.4028235E38F, 3553.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 3.4028235E38F, 3553.0F, 2885.1833F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = Float.POSITIVE_INFINITY;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1029.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-1317.2F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F, Float.POSITIVE_INFINITY, 0.0F, 1.0F, 1029.0F, 0.0F, 0.0F, (-1317.2F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 1.0F, Float.POSITIVE_INFINITY, 0.0F, 1.0F, 1029.0F, 0.0F, 0.0F, (-1317.2F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean2);
      assertArrayEquals(new float[] {0.0F, 1.0F, Float.POSITIVE_INFINITY, 0.0F, 1.0F, 1029.0F, 0.0F, 0.0F, (-1317.2F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray1 = MathArrays.scale((-2266.81045), doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 686.6163156422083;
      doubleArray0[3] = (-606.461977501358);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 686.6163156422083, 0.0, (-606.461977501358)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (686.616 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "%c.6&-";
      stringArray0[2] = "3jJ-h2)DYLtB";
      stringArray0[3] = "!=%J";
      stringArray0[4] = "statistics constructed from external moments cannot be incremented";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2934);
      doubleArray0[1] = (double) (-2934);
      doubleArray0[3] = (double) (-2934);
      doubleArray0[4] = (double) (-2934);
      doubleArray0[6] = (double) (-2934);
      doubleArray0[8] = 0.8109631538391113;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2934.0), (-2934.0), 0.0, (-2934.0), (-2934.0), 0.0, (-2934.0), 0.0, 0.8109631538391113}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.convolve(doubleArray1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.scale(0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float[] floatArray0 = new float[1];
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-222.64602416);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (-1303.4545998098756);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (-1303.4545998098756);
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (-222.64602416);
      doubleArray1[4] = (-1303.4545998098756);
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = (double) 0L;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Pair<String, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 0, 99);
      assertNotNull(pairArray0);
      assertEquals(0, pairArray0.length);
      
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 2601811.36;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1303.4545998098756);
      doubleArray0[1] = (-1303.4545998098756);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.scaleInPlace((-1303.4545998098756), doubleArray1);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.214561405877562E9), (-4.429122811755124E9), (-2.214561405877562E9)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) 0;
      floatArray1[3] = (float) 0;
      floatArray1[4] = (float) 0;
      floatArray1[5] = (float) 0;
      floatArray1[6] = (float) 0;
      floatArray1[7] = (float) 0;
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean2);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean3 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = 4398046511103L;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 4398046511103L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2147483587);
      assertEquals(2147483587, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 436;
      intArray0[1] = 2147483587;
      intArray0[2] = 2147483587;
      intArray0[3] = 2147483587;
      intArray0[4] = 2147483587;
      intArray0[5] = 2147483587;
      intArray0[6] = 2147483587;
      intArray0[7] = 2147483587;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {436, 2147483587, 2147483587, 2147483587, 2147483587, 2147483587, 2147483587, 2147483587}, intArray0);
      assertEquals(8, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {436, 2147483587, 2147483587, 2147483587, 2147483587, 2147483587, 2147483587, 2147483587}, intArray0);
      assertArrayEquals(new int[] {436, 2147483587, 2147483587, 2147483587, 2147483587, 2147483587, 2147483587, 2147483587}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 436;
      intArray2[2] = 436;
      intArray2[3] = 2147483587;
      intArray2[4] = 436;
      intArray2[5] = 436;
      intArray2[6] = 9;
      intArray2[7] = 2147483587;
      double double0 = MathArrays.distance(intArray2, intArray0);
      assertEquals(4.801918497131685E9, double0, 0.01);
      assertArrayEquals(new int[] {436, 2147483587, 2147483587, 2147483587, 2147483587, 2147483587, 2147483587, 2147483587}, intArray0);
      assertArrayEquals(new int[] {0, 436, 436, 2147483587, 436, 436, 9, 2147483587}, intArray2);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = ">vvt-e!{";
      stringArray0[1] = "";
      stringArray0[2] = "b0/.;w>x5";
      stringArray0[3] = "slt/lcV`";
      stringArray0[4] = "!D";
      stringArray0[5] = "tw%6\"~n%";
      stringArray0[6] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.07073719799518585;
      doubleArray0[1] = 219.535557151693;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 2724.58152864;
      doubleArray0[4] = 1.9699272335463627E-8;
      doubleArray0[5] = (-684.6872);
      doubleArray0[6] = 1900.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {0.07073719799518585, 219.535557151693, 1.304E19, 2724.58152864, 1.9699272335463627E-8, (-684.6872), 1900.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.07073719799518585, 219.535557151693, 1.304E19, 2724.58152864, 1.9699272335463627E-8, (-684.6872), 1900.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1.700416E38, double1, 0.01);
      assertArrayEquals(new double[] {0.07073719799518585, 219.535557151693, 1.304E19, 2724.58152864, 1.9699272335463627E-8, (-684.6872), 1900.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.07073719799518585, 219.535557151693, 1.304E19, 2724.58152864, 1.9699272335463627E-8, (-684.6872), 1900.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.07073719799518585, 219.535557151693, 1.304E19, 2724.58152864, 1.9699272335463627E-8, (-684.6872), 1900.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 22;
      intArray0[1] = 0;
      intArray0[2] = 1040;
      intArray0[3] = (-262);
      intArray0[4] = 5;
      intArray0[5] = (-774);
      intArray0[6] = 2147480284;
      intArray0[7] = (-3097);
      intArray0[8] = (-2147483647);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {22, 0, 1040, (-262), 5, (-774), 2147480284, (-3097), (-2147483647)}, intArray1);
      assertArrayEquals(new int[] {22, 0, 1040, (-262), 5, (-774), 2147480284, (-3097), (-2147483647)}, intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = 1732.4388F;
      floatArray0[6] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1732.4388F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1732.4388F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = 1512.847F;
      floatArray1[2] = (float) 0;
      floatArray1[3] = (float) 0;
      floatArray1[4] = 1732.4388F;
      floatArray1[5] = 1732.4388F;
      floatArray1[6] = 1732.4388F;
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1732.4388F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1512.847F, 0.0F, 0.0F, 1732.4388F, 1732.4388F, 1732.4388F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathArrays.linearCombination(422.325338985287, 0.0, 0.0, (-2405.25), (-651.0), 1.304E19, (-2405.25), 607.0792005);
      assertEquals((-8.489040000000002E21), double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-1719.4028068), Double.POSITIVE_INFINITY, (-2405.25), Double.POSITIVE_INFINITY, 199.95, 1206.4);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-3160.889), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1530.43);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 769.0;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1530.43), (-1.0), 769.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1530.43), (-1.0), 769.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1334.0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1530.43), (-1.0), 769.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.7450911136402285, -0.0, 2670.739793048415, 1.7450911136402285, (-1341.9750663893358), 1.7450911136402285, -0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale(3.141592653589793, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1530.43), (-1.0), 769.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.7450911136402285, -0.0, 2670.739793048415, 1.7450911136402285, (-1341.9750663893358), 1.7450911136402285, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5.482365422456973, -0.0, 8390.376513490824, 5.482365422456973, (-4215.939009869412), 5.482365422456973, -0.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1470.252902026353;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = Double.NaN;
      doubleArray3[3] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.scaleInPlace(2769.4293952053, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2769.4293952053;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 2769.4293952053;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      intArray0[0] = 99;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {99}, intArray0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 99;
      floatArray0[1] = 1.4E-45F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {99.0F, 1.4E-45F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 250.4334409574047;
      doubleArray0[1] = (double) 99;
      doubleArray0[2] = (double) 99;
      doubleArray0[3] = (double) 1.4E-45F;
      doubleArray0[4] = (double) 99.0F;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double1 = MathArrays.linearCombination(1.34217729E8, (-979.426649733523), Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 349.7801962963);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(Double.NaN, double2, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3104.1);
      doubleArray0[1] = (-3104.1);
      doubleArray0[3] = (-3104.1);
      doubleArray0[4] = (-3104.1);
      doubleArray0[5] = (-3104.1);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Integer integer0 = new Integer(235);
      assertEquals(235, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3612.34;
      doubleArray1[1] = (double) (-3438);
      doubleArray1[2] = (double) (-3438);
      doubleArray1[3] = 3612.34;
      doubleArray1[4] = (double) 235;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-3438));
      assertEquals((-3438), (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-3438);
      doubleArray0[1] = (double) (-3438);
      doubleArray0[2] = (double) (-3438);
      doubleArray0[3] = (double) (-3438);
      doubleArray0[1] = (double) (-3438);
      doubleArray0[5] = (double) (-3438);
      doubleArray0[6] = (double) (-3438);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-3438.0), (-3438.0), (-3438.0), (-3438.0), 0.0, (-3438.0), (-3438.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-3438.0), (-3438.0), (-3438.0), (-3438.0), 0.0, (-3438.0), (-3438.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3104.1);
      doubleArray0[1] = (-3104.1);
      doubleArray0[3] = (-3104.1);
      doubleArray0[4] = (-3104.1);
      doubleArray0[5] = (-3104.1);
      MathArrays.scaleInPlace((-3104.1), doubleArray0);
      assertArrayEquals(new double[] {9635436.809999999, 9635436.809999999, -0.0, 9635436.809999999, 9635436.809999999, 9635436.809999999, -0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      long[][] longArray0 = new long[2][7];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = 928L;
      longArray1[2] = (-1120L);
      longArray1[3] = (-5322L);
      longArray1[4] = 1604L;
      longArray1[5] = 3303L;
      longArray1[6] = 718L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,120 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      double double0 = MathArrays.linearCombination((double) 0, (double) 0, (double) 0, (double) 0, (-1.0), (double) 0, (-1530.43), 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.0, double1, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.0, double2, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      double double1 = MathArrays.distance1(doubleArray2, doubleArray3);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(6, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      
      double double2 = MathArrays.linearCombination((-268.0), (-2488.072), 0.0, 4113.374397740833, 0.0, 3140.317279042, (-0.2499999997677497), (-2488.072));
      assertEquals(667425.3139994221, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2173.484865211);
      doubleArray0[1] = (-651.0);
      doubleArray0[3] = (-651.0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2173.484865211), (-651.0), 0.0, (-651.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2173.484865211), (-651.0), 0.0, (-651.0)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-651.0);
      doubleArray2[1] = (-651.0);
      doubleArray2[2] = (-651.0);
      doubleArray2[4] = (-651.0);
      doubleArray2[5] = (-651.0);
      doubleArray2[6] = (-651.0);
      doubleArray2[7] = (-651.0);
      doubleArray2[8] = (-651.0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2173.484865211), (-651.0), 0.0, (-651.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2173.484865211), (-651.0), 0.0, (-651.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-651.0), (-651.0), (-651.0), 0.0, (-651.0), (-651.0), (-651.0), (-651.0), (-651.0)}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-2173.484865211), (-651.0), 0.0, (-651.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2173.484865211), (-651.0), 0.0, (-651.0)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-651.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-651.0)}, doubleArray3, 0.01);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean2);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[12];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-3438);
      intArray1[2] = (-3438);
      intArray1[3] = 0;
      int int0 = MathArrays.distanceInf(intArray1, intArray0);
      assertEquals(3438, int0);
      assertArrayEquals(new int[] {0, (-3438), (-3438), 0}, intArray1);
      assertEquals(12, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, (-3438), (-3438), 0}, intArray1);
      assertArrayEquals(new int[] {0, (-3438), (-3438), 0}, intArray2);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(1.2350918994921822E13, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray2);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2140277327;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2140277327);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-2559.229689594064);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1303.4545998098756);
      doubleArray0[1] = (-1303.4545998098756);
      doubleArray0[0] = (-1303.4545998098756);
      doubleArray0[3] = (-1303.4545998098756);
      doubleArray0[4] = (-1303.4545998098756);
      doubleArray0[5] = (-1303.4545998098756);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756), 0.0, (-1303.4545998098756), (-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756), 0.0, (-1303.4545998098756), (-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1885.97;
      doubleArray2[1] = (-1303.4545998098756);
      doubleArray2[2] = (-1303.4545998098756);
      doubleArray2[3] = (-1303.4545998098756);
      doubleArray2[4] = (-1303.4545998098756);
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 7596.1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = 3452.714923;
      double double3 = MathArrays.linearCombination(2979.378299, 0.0, 0.0, 3452.714923);
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 3452.714923);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 7596.1;
      doubleArray1[2] = 3612.34;
      doubleArray1[3] = 3612.34;
      doubleArray1[4] = 3612.34;
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {7596.1, 0.0, 3612.34, 3612.34, 3612.34}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination((-535.495106052107), 3612.34, 3612.34, 7596.1);
      assertEquals(2.5505305482603732E7, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 7596.1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = (-2173.484865211);
      double double1 = (-651.0);
      double double2 = 422.325338985287;
      double double3 = MathArrays.linearCombination((-2173.484865211), (-2173.484865211), (-2173.484865211), (-651.0), (-651.0), 0.0, 422.325338985287, (-2173.484865211));
      assertEquals(5221057.374074013, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, (-1966));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 99;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {99.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "RG,{[}";
      stringArray0[1] = "RG,{[}";
      stringArray0[2] = "TD";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {99.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {99.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {99.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9801.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection1, true, false);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {99.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9801.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = 1L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 1L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1L;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-4221.9087529);
      doubleArray1[2] = (double) 1L;
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = 1442.64758;
      doubleArray1[5] = (double) 0L;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(4222.9087529, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-4221.9087529), 1.0, 0.0, 1442.64758, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 3303L;
      longArray0[1] = 3303L;
      longArray0[2] = 1844L;
      longArray0[3] = 3303L;
      longArray0[4] = 3303L;
      longArray0[5] = 3303L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {3303L, 3303L, 1844L, 3303L, 3303L, 3303L}, longArray0);
      assertEquals(6, longArray0.length);
      
      double double0 = MathArrays.linearCombination(3397987.787531046, 1.0, 0.1111111111111111, 344.68770198658, 0.0, 2131.665581556957);
      assertEquals(3398026.0861646, double0, 0.01);
      
      MathArrays.scaleInPlace(720.744146, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1303.4545998098756);
      doubleArray0[1] = (-1303.4545998098756);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.8865802510525337E12, 1.1546321004210135E13, 2.8865802510525337E12}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 340;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.8865802510525337E12, 1.1546321004210135E13, 2.8865802510525337E12}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean1 = MathArrays.equals(doubleArray2, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.8865802510525337E12, 1.1546321004210135E13, 2.8865802510525337E12}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Double[] doubleArray3 = new Double[8];
      doubleArray3[0] = (Double) (-1303.4545998098756);
      doubleArray3[1] = (Double) (-1303.4545998098756);
      doubleArray3[2] = (Double) (-1303.4545998098756);
      doubleArray3[3] = (Double) (-1303.4545998098756);
      doubleArray3[4] = (Double) (-1303.4545998098756);
      doubleArray3[5] = (Double) (-1303.4545998098756);
      doubleArray3[6] = (Double) (-1303.4545998098756);
      doubleArray3[7] = (Double) (-1303.4545998098756);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection1, false);
      assertTrue(boolean2);
      assertEquals(8, doubleArray3.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[12];
      int int0 = 1;
      intArray0[0] = 1;
      intArray0[1] = 1;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.linearCombination(Double.POSITIVE_INFINITY, 0.0, 5.0, (-1216.5191), Double.POSITIVE_INFINITY, 1.1730463525082348E-7, 1024.0, 1.1730463525082348E-7);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1303.4545998098756);
      doubleArray0[1] = (-1303.4545998098756);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.8865802510525337E12, 1.1546321004210135E13, 2.8865802510525337E12}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 340;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (11,546,321,004,210.135 >= 2,886,580,251,052.534)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-2559.229689594064);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-\u221E < 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 1;
      intArray0[1] = 1;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (int)integer0;
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1;
      boolean boolean0 = false;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "QH^ $A";
      stringArray0[2] = "";
      stringArray0[3] = "D8}j_XDEeqM&@cn*F5";
      stringArray0[4] = "JqD*FcI''Y2b";
      stringArray0[5] = "LXkeI/]eX^npdU";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = (-2173.484865211);
      double double1 = 422.325338985287;
      double double2 = MathArrays.linearCombination((-2173.484865211), (-2173.484865211), (-2173.484865211), (-651.0), (-651.0), 0.0, 422.325338985287, (-2173.484865211));
      assertEquals(5221057.374074013, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "TD";
      stringArray0[1] = "TD";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 6;
      intArray0[1] = 6;
      Integer integer0 = new Integer(6);
      assertEquals(6, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (int)integer0;
      doubleArray0[1] = (double) 6;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {6.0, 6.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 6;
      doubleArray2[1] = (double) 6;
      doubleArray2[2] = (double) (int)integer0;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 6;
      doubleArray3[1] = (double) 6;
      doubleArray3[2] = (double) 6;
      doubleArray3[3] = (double) 6;
      doubleArray3[4] = (double) 6;
      doubleArray3[5] = (double) 6;
      doubleArray3[6] = (double) 6;
      doubleArray3[7] = (double) 6;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray3);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {6.0, 6.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      
      double double0 = MathArrays.linearCombination(0.0, 4206.9609204186, (-4780.62875866498), 396.0);
      assertEquals((-1893128.988431332), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Pair<String, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 0, 99);
      assertNotNull(pairArray0);
      assertEquals(0, pairArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 99;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 99;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {99.0, 0.0, 99.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {99.0, 0.0, 99.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(99.0, 1.625, 0.0, 0.0);
      assertEquals(160.875, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 4360.8);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {99.0, 0.0, 99.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2180.4, 0.0, 2180.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale(2078.0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {99.0, 0.0, 99.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2180.4, 0.0, 2180.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4530871.2, 0.0, 4530871.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2173.484865211), (-2173.484865211), (-2173.484865211), (-651.0), (-651.0), 0.0, 422.325338985287, (-2173.484865211));
      assertEquals(5221057.374074013, double0, 0.01);
      
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 194.83852F;
      floatArray0[1] = 1447.8318F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.4E-45F;
      floatArray0[4] = 1229.368F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 194.83852F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {194.83852F, 1447.8318F, 0.0F, 1.4E-45F, 1229.368F, (-1.0F), 194.83852F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = (-2173.484865211);
      double double1 = (-651.0);
      double double2 = 422.325338985287;
      double double3 = MathArrays.linearCombination((-2173.484865211), (-2173.484865211), (-2173.484865211), (-651.0), (-651.0), 0.0, 422.325338985287, (-2173.484865211));
      assertEquals(5221057.374074013, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 3303L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {3303L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0L;
      doubleArray2[1] = (double) 0L;
      doubleArray2[2] = (double) 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-2559.229689594064);
      int[] intArray0 = new int[7];
      intArray0[0] = 2164;
      intArray0[1] = 1911;
      intArray0[2] = 1;
      intArray0[3] = (-2771);
      intArray0[4] = (-1189);
      intArray0[5] = (-1);
      intArray0[6] = 2138;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = (-1082);
      intArray1[2] = 2138;
      intArray1[3] = 2138;
      intArray1[4] = 1911;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 7596.1;
      doubleArray0[2] = 3612.34;
      int[] intArray0 = new int[7];
      intArray0[0] = (-1611);
      intArray0[1] = 152;
      intArray0[2] = 360;
      intArray0[3] = 4302;
      intArray0[4] = 11;
      intArray0[5] = 1186;
      intArray0[6] = Integer.MAX_VALUE;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1611), 152, 360, 4302, 11, 1186, Integer.MAX_VALUE}, intArray0);
      assertEquals(7, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1611), 152, 360, 4302, 11, 1186, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {(-1611), 152, 360, 4302, 11, 1186, Integer.MAX_VALUE}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray1 = MathArrays.scale(1.44888888888888883E18, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.1005904888888889E22, 5.233879288888889E21}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.1005904888888889E22, 5.233879288888889E21}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 6.901840490797547E-19, 6.901840490797546E-19}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.1005904888888889E22, 5.233879288888889E21}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      double double0 = MathArrays.distance(intArray1, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1611), 152, 360, 4302, 11, 1186, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {(-1611), 152, 360, 4302, 11, 1186, Integer.MAX_VALUE}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 7596.1, 3612.34}, doubleArray3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.1005904888888889E22, 5.233879288888889E21}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 6.901840490797547E-19, 6.901840490797546E-19}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(1.0250850563691379E26, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.1005904888888889E22, 5.233879288888889E21}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[8];
      longArray1[0] = (-1L);
      longArray1[1] = (-138L);
      longArray1[2] = 4503599627370495L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-138L);
      doubleArray0[1] = (double) (-138L);
      double[] doubleArray1 = MathArrays.scale(4503599627370495L, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-138.0), (-138.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-6.2149674857712832E17), (-6.2149674857712832E17)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination((double) (-138L), 0.0, (-138.0), 444.0, 1000.0937054144, (double) (-138L), (double) 4503599627370495L, 0.0);
      assertEquals((-199284.9313471872), double0, 0.01);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[][] doubleArray1 = new double[5][4];
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2173.484865211), (-2173.484865211), (-2173.484865211), (-651.0), (-651.0), 0.0, 422.325338985287, (-2173.484865211));
      assertEquals(5221057.374074013, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "TD";
      stringArray0[1] = "TD";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1303.4545998098756);
      doubleArray0[1] = (-1303.4545998098756);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.8865802510525337E12, 1.1546321004210135E13, 2.8865802510525337E12}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 340;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-2554);
      floatArray0[1] = (float) 340;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 340;
      floatArray0[4] = (float) 340;
      floatArray0[5] = (float) 340;
      floatArray0[6] = (float) (-2554);
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (float) (-2554);
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-2554.0F), 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2554.0F), 340.0F, 0.0F, 340.0F, 340.0F, 340.0F, (-2554.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("ae6rf|OPL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.ae6rf|OPL
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = 452.0;
      float float0 = (-1.0F);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      int int0 = 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.j
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1.0F);
      doubleArray2[1] = (double) (-1.0F);
      doubleArray2[2] = (double) (-1.0F);
      doubleArray2[3] = (double) (-1.0F);
      doubleArray2[4] = (double) (-1.0F);
      doubleArray2[5] = (double) (-1.0F);
      doubleArray2[6] = 452.0;
      doubleArray2[7] = 452.0;
      doubleArray2[8] = 452.0;
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2, 1213);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), 452.0, 452.0, 452.0}, doubleArray2, 0.01);
      assertEquals(1213, doubleArray3.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1106.35873);
      doubleArray0[1] = 1.34217729E8;
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,106.359 <= 134,217,729)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = (-22);
      Class<FieldElement> class0 = FieldElement.class;
      int int1 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      Pair<String, Integer> pair0 = new Pair<String, Integer>("", integer0);
      assertNotNull(pair0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      Pair<String, Integer> pair1 = new Pair<String, Integer>(pair0);
      assertNotNull(pair1);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(pair1.equals((Object)pair0));
      
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      int int2 = 29;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 29, 29);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-2559.229689594064);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2559.229689594064), Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(1328.217, 1309.3543501635697, Double.NaN, 700.918500931294);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 1309.3543501635697);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-2559.229689594064);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (-1825.938273710608);
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-2559.229689594064), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-1825.938273710608), Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2559.229689594064), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-1825.938273710608), Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2559.229689594064), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-1825.938273710608), Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2559.229689594064), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-1825.938273710608), Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, (-2559.229689594064), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-1825.938273710608), Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2559.229689594064), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-1825.938273710608), Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 4);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, (-2559.229689594064), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-1825.938273710608), Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2559.229689594064), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-1825.938273710608), Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2559.229689594064), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {4, 4, 4, 4}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 4;
      intArray1[1] = 4;
      int int0 = MathArrays.distance1(intArray1, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {4, 4}, intArray1);
      assertArrayEquals(new int[] {4, 4, 4, 4}, intArray0);
      assertEquals(2, intArray1.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = 1403.88698533;
      doubleArray1[0] = 1403.88698533;
      doubleArray1[1] = 3612.34;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2173.484865211), (-2173.484865211), (-2173.484865211), (-651.0), (-651.0), 0.0, 422.325338985287, (-2173.484865211));
      assertEquals(5221057.374074013, double0, 0.01);
      
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.4E-45F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 194.83852F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.4E-45F, 0.0F, 194.83852F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 7596.1;
      doubleArray0[2] = 3612.34;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.304E19, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = 2917.3297588237;
      doubleArray1[2] = 3612.34;
      doubleArray1[3] = 7596.1;
      doubleArray1[4] = 3612.34;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 7596.1;
      doubleArray2[1] = 2917.3297588237;
      doubleArray2[2] = 1.304E19;
      doubleArray2[3] = 7596.1;
      doubleArray2[4] = 15.7146;
      doubleArray2[5] = 3642.69017232;
      double double0 = MathArrays.distance(doubleArray1, doubleArray2);
      assertEquals(1.844134485334515E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 2917.3297588237, 3612.34, 7596.1, 3612.34}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {7596.1, 2917.3297588237, 1.304E19, 7596.1, 15.7146, 3642.69017232}, doubleArray2, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double1 = MathArrays.linearCombination(1.304E19, 1.304E19, 7596.1, (-552.3109387822001));
      assertEquals(1.700416E38, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, 3642.69017232);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {2.1219508295981524E-12, 8.149485001444593E-13, 3642.690172319994, 2.1219508295981524E-12, 4.389832744013787E-15, 1.0175760499629361E-12}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {7596.1, 2917.3297588237, 1.304E19, 7596.1, 15.7146, 3642.69017232}, doubleArray2, 0.01);
      assertEquals(6, doubleArray3.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray4 = MathArrays.scale(3.834E-20, doubleArray2);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {2.91234474E-16, 1.1185042295330066E-16, 0.4999536, 2.91234474E-16, 6.02497764E-19, 1.3966074120674878E-16}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {7596.1, 2917.3297588237, 1.304E19, 7596.1, 15.7146, 3642.69017232}, doubleArray2, 0.01);
      assertEquals(6, doubleArray4.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      
      doubleArray5[0] = 0.9315965175628662;
      doubleArray5[1] = (-552.3109387822001);
      MathArrays.checkOrder(doubleArray5, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.9315965175628662, (-552.3109387822001)}, doubleArray5, 0.01);
      assertEquals(2, doubleArray5.length);
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray0);
      
      MathArrays.scaleInPlace(1.5707963267948966, doubleArray1);
      assertArrayEquals(new double[] {2.048318410140545E19, 4582.53086920971, 5674.250403134277, 11931.925977966714, 5674.250403134277}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 7596.1;
      doubleArray0[2] = 3612.34;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.304E19, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(3612.34, 7596.1, 0.0, 1.304E19);
      assertEquals(2.7439695874E7, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3612.34);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.304E19, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3612.339999999997, 2.104271155981593E-12, 1.0006902051840483E-12}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 206;
      intArray0[1] = 0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "QbO";
      stringArray0[1] = "L{A0 ||I,`";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[4] = "7cos.D";
      stringArray0[5] = "";
      stringArray0[6] = "lower endpoint ({0}) must be less than or equal to upper endpoint ({1})";
      stringArray0[7] = "qC5T#/K9VsN2NPCFp`";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[8];
      longArray1[0] = (-1L);
      longArray1[1] = (-138L);
      longArray1[2] = 4503599627370495L;
      longArray1[3] = 2466L;
      longArray1[4] = 2278L;
      longArray1[5] = (-3209L);
      longArray1[6] = 0L;
      longArray1[7] = 16L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1L;
      longArray2[1] = 4503599627370495L;
      longArray2[2] = 16L;
      longArray2[3] = (-138L);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 16L;
      floatArray0[1] = (float) 2466L;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) (-3209L);
      floatArray0[4] = (float) (-138L);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {16.0F, 2466.0F, 1.0F, (-3209.0F), (-138.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(2105.07396523, (-544.02392), 1.44888888888888883E18, (double) (-1L), 0.1666666505023083, 2868.0);
      assertEquals((-1.44888888889003366E18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 7596.1;
      doubleArray0[2] = 3612.34;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.304E19, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 244.43F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1002.118F;
      floatArray0[4] = (-1164.39F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = 0.5F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 1582.8976F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 0.5F;
      floatArray1[4] = Float.NaN;
      floatArray1[5] = Float.NaN;
      floatArray1[6] = 0.5F;
      floatArray1[7] = (-1164.39F);
      floatArray1[8] = 1002.118F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {Float.NaN, 244.43F, 1.0F, 1002.118F, (-1164.39F), 1.0F, 0.5F, 0.0F, 1582.8976F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 0.5F, Float.NaN, Float.NaN, 0.5F, (-1164.39F), 1002.118F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray1, floatArray1);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 0.5F, Float.NaN, Float.NaN, 0.5F, (-1164.39F), 1002.118F}, floatArray1, 0.01F);
      assertEquals(9, floatArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 1002.118F;
      floatArray2[2] = Float.NaN;
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray2);
      assertFalse(boolean2);
      assertArrayEquals(new float[] {Float.NaN, 244.43F, 1.0F, 1002.118F, (-1164.39F), 1.0F, 0.5F, 0.0F, 1582.8976F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1002.118F, Float.NaN}, floatArray2, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 207;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2, 207, 0, (-1), (-1), 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 207;
      floatArray0[4] = 1.4E-45F;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      floatArray0[7] = 1.4E-45F;
      floatArray0[8] = (-1284.508F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 1.0F, 207.0F, 1.4E-45F, 1.0F, 1.0F, 1.4E-45F, (-1284.508F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Pair<String, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 0, 99);
      assertNotNull(pairArray0);
      assertEquals(0, pairArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2146833683;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2146833683}, intArray0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 99;
      floatArray0[1] = 1.4E-45F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {99.0F, 1.4E-45F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1106.35873);
      doubleArray0[1] = 1.34217729E8;
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-1106.35873), 1.34217729E8}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 7596.1;
      doubleArray0[2] = 3612.34;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.304E19, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.304E19, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TD";
      stringArray0[1] = "TD";
      stringArray0[2] = "RG,{[}";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertFalse(boolean1);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = 422.325338985287;
      double double1 = MathArrays.linearCombination((-2173.484865211), (-2173.484865211), (-2173.484865211), (-651.0), (-651.0), 0.0, 422.325338985287, (-2173.484865211));
      assertEquals(5221057.374074013, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      long[][] longArray0 = new long[4][6];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = (-2559.229689594064);
      double double1 = Double.NEGATIVE_INFINITY;
      double double2 = 0.0;
      double double3 = (-1825.938273710608);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 1;
      intArray0[1] = 1;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (int)integer0;
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(12, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertEquals(12, intArray0.length);
      assertEquals(12, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray2 = MathArrays.scale((-1564.96875895785), doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1564.96875895785), (-1564.96875895785)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1564.96875895785), (-1564.96875895785)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1564.96875895785), (-1564.96875895785)}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray3, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1564.96875895785), (-1564.96875895785)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1564.96875895785), (-1564.96875895785)}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      double double0 = MathArrays.distance(intArray1, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(12, intArray0.length);
      assertEquals(12, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray2);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1564.96875895785), (-1564.96875895785)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1564.96875895785), (-1564.96875895785)}, doubleArray4, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      
      double double1 = MathArrays.linearCombination(doubleArray4, doubleArray4);
      assertEquals(4898254.433028147, double1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1564.96875895785), (-1564.96875895785)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1564.96875895785), (-1564.96875895785)}, doubleArray4, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray4.length);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 207;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-32767);
      intArray0[6] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2, 207, 0, (-1), (-1), (-32767), 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = ".<1L7";
      stringArray0[4] = "";
      stringArray0[5] = "C[7c>Onm)2u";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1303.4545998098756);
      doubleArray0[1] = (-1303.4545998098756);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.8865802510525337E12, 1.1546321004210135E13, 2.8865802510525337E12}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 340;
      intArray0[1] = (-2554);
      intArray0[2] = 0;
      intArray0[3] = 1690;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-77.55407791579262);
      doubleArray3[1] = (double) 340;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (-1000.18);
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) 1690;
      doubleArray3[6] = (double) (-2554);
      doubleArray3[7] = (double) 1690;
      doubleArray3[8] = 26.07178325520568;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray3, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1024);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1024, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 1024;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not increasing (1,024 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-799);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1239);
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 2;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-799), 0, 0, (-1239), Integer.MAX_VALUE, 2}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-799), 0, 0, (-1239), Integer.MAX_VALUE, 2}, intArray0);
      assertArrayEquals(new int[] {(-799), 0, 0, (-1239), Integer.MAX_VALUE, 2}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      
      double double1 = MathArrays.distance(intArray1, intArray1);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-799), 0, 0, (-1239), Integer.MAX_VALUE, 2}, intArray0);
      assertArrayEquals(new int[] {(-799), 0, 0, (-1239), Integer.MAX_VALUE, 2}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(double1, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 0;
      double[] doubleArray5 = MathArrays.copyOf(doubleArray4);
      assertNotNull(doubleArray5);
      assertArrayEquals(new double[] {0.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray5, 0.01);
      assertEquals(1, doubleArray4.length);
      assertEquals(1, doubleArray5.length);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-3.141592653589793);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-3.141592653589793), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 822.06765103);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-3.141592653589793), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 822.06765103, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[][] doubleArray2 = new double[0][9];
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {0.0, (-3.141592653589793), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, 822.06765103}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {0.0, (-3.141592653589793), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, 822.06765103}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(825.2092436835898, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-3.141592653589793), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, 822.06765103}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray0 = new long[5][6];
      long[] longArray1 = new long[9];
      longArray1[0] = 16L;
      longArray1[1] = 855L;
      longArray1[2] = 3038L;
      longArray1[3] = 1L;
      longArray1[4] = 1926L;
      longArray1[5] = (-1L);
      longArray1[6] = 14L;
      longArray1[7] = (-685L);
      longArray1[8] = 4665L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1926L;
      longArray2[1] = 16L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 855L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 14L;
      longArray4[1] = 1926L;
      longArray4[2] = 855L;
      longArray4[3] = 16L;
      longArray4[4] = 3038L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = 4665L;
      longArray5[1] = (-1L);
      longArray5[2] = 16L;
      longArray5[3] = 3038L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Pair<String, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 29, 29);
      assertNotNull(pairArray0);
      assertEquals(29, pairArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-22);
      doubleArray0[1] = (-953.59373);
      doubleArray0[2] = (-953.59373);
      doubleArray0[3] = (-953.59373);
      double double0 = 1.0;
      double double1 = MathArrays.linearCombination((-1295.4951026210992), (-2.6033824355191673E-8), (double) (-22), (-953.59373), (-953.59373), (double) (-22), 1.0, 38.491);
      assertEquals(41996.61515372669, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-22.0), (-953.59373), (-953.59373), (-953.59373), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-22.0), (-953.59373), (-953.59373), (-953.59373), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, (-22));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1106.35873);
      doubleArray0[1] = 1.34217729E8;
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-2559.229689594064);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 1744.5780914717739;
      doubleArray0[7] = (-2608.2317769237);
      doubleArray0[8] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-2559.229689594064), Double.NEGATIVE_INFINITY, 0.0, 0.0, Double.POSITIVE_INFINITY, 1744.5780914717739, (-2608.2317769237), 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "RG{[}";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Pair<String, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 0, 0);
      assertNotNull(pairArray0);
      assertEquals(0, pairArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      long[] longArray0 = new long[8];
      longArray0[0] = 3303L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      Field<Double> field1 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field1, (-2934), (-1073741823));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = new Double((-2173.484865211));
      assertEquals((-2173.484865211), double0, 0.01);
      
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1647.36820743);
      doubleArray0[4] = 422.325338985287;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1647.36820743), 422.325338985287}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {422.325338985287, 0.0, 0.0, 0.0, (-1647.36820743)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2173.484865211), (-2173.484865211), (-2173.484865211), (-651.0), (-651.0), 0.0, 422.325338985287, (-2173.484865211));
      assertEquals(5221057.374074013, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(5221057.374074013, (-651.0), (-0.7853981633974483), 199.95, Double.POSITIVE_INFINITY, 422.325338985287);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(Double.POSITIVE_INFINITY, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-799);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1239);
      intArray0[4] = Integer.MAX_VALUE;
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double double1 = MathArrays.linearCombination((double) (-1239), (-376.5652), 0.0, (double) (-1239), (double) (-1239), 1.304E19);
      assertEquals((-1.615656E22), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.scaleInPlace(2159.8527, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double double2 = MathArrays.linearCombination(1355.094062975821, (-1263.39544356), 204.568937, (-1855.19995));
      assertEquals((-2091535.9464528135), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Pair<String, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 0, 99);
      assertNotNull(pairArray0);
      assertEquals(0, pairArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 99;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 99;
      doubleArray0[3] = (double) 99;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {99.0, 0.0, 99.0, 99.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {99.0, 0.0, 99.0, 99.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 3303L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 99;
      longArray0[5] = (long) 99;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 99;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {3303L, 0L, 0L, 0L, 99L, 99L, 0L, 99L}, longArray0);
      assertEquals(8, longArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 0L, 39204.0, 4294.68547502564, 344.68770198658, 3747.0, (-4298.0));
      assertEquals((-1.4624280732858269E7), double0, 0.01);
      
      MathArrays.scaleInPlace(585.031357689352, doubleArray0);
      assertArrayEquals(new double[] {57918.104411245855, 0.0, 57918.104411245855, 57918.104411245855, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = 452.0;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1640);
      intArray0[2] = 0;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1303.4545998098756);
      doubleArray0[1] = (-1303.4545998098756);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.8865802510525337E12, 1.1546321004210135E13, 2.8865802510525337E12}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      int[] intArray0 = new int[9];
      int int0 = 340;
      intArray0[0] = 340;
      intArray0[2] = 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.j
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 7596.1;
      doubleArray0[2] = 3612.34;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.304E19, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1;
      intArray2[1] = 0;
      intArray2[2] = 0;
      int int1 = MathArrays.distanceInf(intArray1, intArray2);
      assertEquals(1, int1);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {1, 0, 0}, intArray2);
      assertEquals(1, intArray1.length);
      assertEquals(3, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(int1 == int0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3.4028235E38F);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 0;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (float) 1;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) 0;
      floatArray1[3] = 1.4E-45F;
      floatArray1[4] = (float) 1;
      floatArray1[5] = (float) 1;
      floatArray1[6] = (float) 1;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-3.4028235E38F), 0.0F, 1.0F, 0.0F, 1.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 1.4E-45F, 1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[8];
      longArray1[0] = (-1L);
      longArray1[1] = (-138L);
      longArray1[2] = 4503599627370495L;
      longArray1[3] = 2466L;
      long long0 = 2278L;
      longArray1[4] = 2278L;
      longArray1[5] = (-3209L);
      longArray1[6] = 0L;
      longArray1[7] = 16L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1L;
      longArray2[1] = 4503599627370495L;
      longArray2[2] = 16L;
      longArray2[3] = (-138L);
      longArray2[4] = (-138L);
      longArray2[5] = 2466L;
      longArray2[6] = 2278L;
      longArray2[7] = 2466L;
      longArray2[8] = 2278L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      long[] longArray0 = new long[4];
      longArray0[0] = 3303L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {3303L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Pair<String, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 0, 99);
      assertNotNull(pairArray0);
      assertEquals(0, pairArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 99;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 99;
      doubleArray0[1] = (double) 99;
      doubleArray0[4] = (double) 99;
      doubleArray0[5] = (double) 0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(198.0, double0, 0.01);
      assertArrayEquals(new double[] {99.0, 99.0, 99.0, 0.0, 99.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (99 >= 99)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1106.35873);
      doubleArray0[1] = 1.34217729E8;
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1106.35873), 1.34217729E8}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-2559.229689594064);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1825.938273710608);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-2559.229689594064), Double.NEGATIVE_INFINITY, 0.0, (-1825.938273710608), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-5118.459379188128), Double.NEGATIVE_INFINITY, 0.0, (-3651.876547421216), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -2,559.23)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Pair<String, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 0, 99);
      assertNotNull(pairArray0);
      assertEquals(0, pairArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 99;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 99;
      doubleArray0[3] = (double) 99;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 99;
      doubleArray2[1] = (double) 99;
      doubleArray2[2] = (double) 0;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 634;
      intArray0[0] = 634;
      intArray0[1] = 2933;
      int int1 = new Integer(634);
      assertEquals(634, int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 634;
      doubleArray0[1] = (double) 2933;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {634.0, 2933.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, (MathArrays.OrderDirection) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[][] doubleArray2 = new double[2][5];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 2129.5312;
      doubleArray3[1] = 161.39290065506958;
      doubleArray3[2] = (-2.5857668567479893E-8);
      doubleArray3[3] = 161.39290065506958;
      doubleArray3[4] = 161.39290065506958;
      doubleArray3[5] = 2129.5312;
      doubleArray3[6] = 161.39290065506958;
      doubleArray3[7] = 161.39290065506958;
      try { 
        MathArrays.convolve(doubleArray3, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      MathArrays.scaleInPlace(3.834E-20, doubleArray0);
      assertArrayEquals(new double[] {1.4699556E-39, 1.4699556E-39}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 148;
      intArray0[1] = 2142690157;
      intArray0[2] = 17;
      intArray0[3] = 644;
      intArray0[4] = 14;
      intArray0[5] = 296;
      intArray0[6] = (-4229);
      intArray0[7] = 17;
      intArray0[8] = 257;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {148, 2142690157, 17, 644, 14, 296, (-4229), 17, 257}, intArray0);
      assertEquals(9, intArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1.4699556E-39, 1.4699556E-39}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.0788311456062804E-39, double0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, 1.4699556E-39}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[][] longArray0 = new long[7][4];
      long[] longArray1 = new long[4];
      longArray1[0] = (long) 148;
      longArray1[1] = (long) 17;
      longArray1[2] = (long) 148;
      longArray1[3] = (long) 17;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 17;
      longArray2[1] = 113236205062349959L;
      longArray2[2] = (long) (-4229);
      longArray2[3] = (long) 296;
      longArray2[4] = (long) 14;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-1205L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (long) 2142690157;
      longArray4[1] = (long) 257;
      longArray4[2] = 1039L;
      longArray4[3] = (long) 148;
      longArray4[4] = (long) 2142690157;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = (long) 644;
      longArray5[1] = (long) 17;
      longArray5[2] = (long) 17;
      longArray5[3] = (long) 296;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = (long) 17;
      longArray6[1] = (long) 257;
      longArray6[2] = (long) 644;
      longArray6[3] = (long) (-4229);
      longArray6[4] = (long) 148;
      longArray6[5] = (long) 644;
      longArray6[6] = (long) 14;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[9];
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray7[0] = (long) 296;
      longArray7[1] = (-797L);
      longArray7[2] = (long) 296;
      longArray7[3] = (long) 2142690157;
      longArray7[4] = (long) 644;
      longArray7[5] = (long) 148;
      longArray7[6] = (long) 17;
      longArray7[7] = (long) 257;
      longArray7[8] = (long) 148;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(0.0, 1.304E19, 100.0, 100.0, 0.0, (-1232.186223998), 0.0, (-2.5857668567479893E-8));
      assertEquals(10000.0, double0, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      try { 
        MathArrays.convolve(doubleArray3, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Pair<String, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 0, 99);
      assertNotNull(pairArray0);
      assertEquals(0, pairArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 99;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 99;
      doubleArray0[4] = (double) 99;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 99.0, 99.0, 0.0, 0.0, 99.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(99.0, 1.304E19, 100.0, 100.0, 0.0, (-1232.186223998), 0.0, (-2.5857668567479893E-8));
      assertEquals(1.29096E21, double0, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray3, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "R]-A\"07M.oON* 8s%Rh";
      stringArray0[1] = "org.apache.commons.math3.exception.NoDataException";
      stringArray0[2] = ",}x!I\"@sf3_NjsH I";
      stringArray0[3] = "INCREASING";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2934), (-2934));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1303.4545998098756);
      doubleArray0[1] = (-1303.4545998098756);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1303.4545998098756), (-1303.4545998098756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1698993.893765523, 3397987.787531046, 1698993.893765523}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.8865802510525337E12, 1.1546321004210135E13, 2.8865802510525337E12}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 340;
      intArray0[1] = (-2554);
      intArray0[2] = 0;
      intArray0[3] = 1690;
      intArray0[4] = 0;
      intArray0[5] = (-458);
      intArray0[6] = 193;
      intArray0[7] = 1;
      intArray0[8] = (-1);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {340, (-2554), 0, 1690, 0, (-458), 193, 1, (-1)}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = 2933;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3.141592653589793);
      doubleArray0[2] = 100.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1000.18);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-3.141592653589793), 100.0, 1.0, 0.0, (-1000.18)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1860);
      intArray0[1] = (-156);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1860), (-156)}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2649;
      intArray0[1] = (-2084);
      intArray0[2] = (-158);
      intArray0[3] = (-3020);
      intArray0[4] = (-96);
      intArray0[5] = 22;
      intArray0[6] = (-2146644862);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2649, (-2084), (-158), (-3020), (-96), 22, (-2146644862)}, intArray0);
      assertArrayEquals(new int[] {2649, (-2084), (-158), (-3020), (-96), 22, (-2146644862)}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-158);
      doubleArray0[1] = (double) 2649;
      doubleArray0[2] = (double) (-96);
      doubleArray0[3] = (-1265.75);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2286.66671);
      doubleArray1[2] = (double) (-3020);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) (-158);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-1265.75);
      doubleArray1[8] = (double) (-96);
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Pair<String, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 0, 99);
      assertNotNull(pairArray0);
      assertEquals(0, pairArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 99;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 99;
      doubleArray0[3] = (double) 99;
      doubleArray0[4] = (double) 99;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 99;
      doubleArray0[8] = (double) 0;
      double[] doubleArray1 = MathArrays.scale(99, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {99.0, 0.0, 99.0, 99.0, 99.0, 0.0, 0.0, 99.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9801.0, 0.0, 9801.0, 9801.0, 9801.0, 0.0, 0.0, 9801.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 7596.1;
      doubleArray0[2] = 3612.34;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(3612.34, 7596.1, 0.0, 1.0);
      assertEquals(2.7439695874E7, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3612.34);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.32225873906278996, 2447.909607794859, 1164.1081334660787}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 206;
      intArray0[1] = 0;
      intArray0[2] = 43;
      intArray0[4] = 987;
      intArray0[5] = 1;
      intArray0[6] = (-1027);
      intArray0[7] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 454);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {206, 0, 43, 0, 987, 1, (-1027), 0, 0}, intArray0);
      assertEquals(454, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      double double2 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(7347409.298186952, double2, 0.01);
      assertArrayEquals(new double[] {1.0, 7596.1, 3612.34}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.32225873906278996, 2447.909607794859, 1164.1081334660787}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 93.023F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 1350.33289182849;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = 1350.33289182849;
      doubleArray0[5] = (double) 93.023F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-20.0), 1350.33289182849, 0.0, 1350.33289182849, 93.02300262451172, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-40.0), 2700.66578365698, 0.0, 2700.66578365698, 186.04600524902344, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-40 <= 2,700.666)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[][] longArray0 = new long[4][0];
      long[] longArray1 = new long[7];
      longArray1[0] = 1306L;
      longArray1[1] = 0L;
      longArray1[2] = (-2197L);
      longArray1[3] = 270L;
      longArray1[4] = 0L;
      longArray1[5] = (-2343L);
      longArray1[6] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1L);
      longArray2[1] = (-2197L);
      longArray2[2] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-1L);
      longArray3[1] = 270L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 1306L;
      longArray4[4] = (-1L);
      longArray4[5] = (-2343L);
      longArray4[6] = (-2343L);
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 3 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1303.4545998098756);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1303.4545998098756), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "KuaP";
      stringArray0[1] = "THD";
      stringArray0[2] = "RG,vx}";
      stringArray0[3] = "THD";
      stringArray0[4] = "THD";
      stringArray0[5] = "THD";
      stringArray0[6] = "RG,vx}";
      stringArray0[7] = "THD";
      stringArray0[8] = ")8HM_Elg&Z:>";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1303.4545998098756), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-1,303.455 < 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 93.023F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 93.023F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = 7596.1;
      doubleArray0[3] = 1744.5780914717739;
      doubleArray0[4] = 1744.5780914717739;
      doubleArray0[5] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {93.02300262451172, 0.0, 7596.1, 1744.5780914717739, 1744.5780914717739, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "TD";
      stringArray0[1] = "RG,{[}";
      stringArray0[2] = "TD";
      stringArray0[3] = "TD";
      stringArray0[4] = "RG,{[}";
      stringArray0[5] = "RG,{[}";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {93.02300262451172, 0.0, 7596.1, 1744.5780914717739, 1744.5780914717739, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false);
      assertArrayEquals(new double[] {93.02300262451172, 0.0, 7596.1, 1744.5780914717739, 1744.5780914717739, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "R]-A\"07M.oON* 8s%Rh";
      stringArray0[1] = "org.apache.commons.math3.exception.NoDataException";
      stringArray0[2] = ",}x!I\"@sf3_NjsH I";
      stringArray0[3] = "INCREASING";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2934), (-2934));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-890.7819);
      doubleArray0[1] = 0.0;
      double double0 = (-78.85322);
      doubleArray0[2] = (-78.85322);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-890.7819), 0.0, (-78.85322)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 1.5707963267948966;
      doubleArray0[0] = 1.5707963267948966;
      double double1 = (-2417.175831172);
      doubleArray0[1] = (-2417.175831172);
      double double2 = (-1217.8191049434);
      doubleArray0[2] = (-1217.8191049434);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.5707963267948966, (-2417.175831172), (-1217.8191049434)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-1246.6687425774);
      doubleArray0[3] = 234.4647604684;
      doubleArray0[4] = 1.304E19;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.304E19, (-1246.6687425774), 234.4647604684, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.700416E38, (-3.2513120806418594E22), 6.114840953015874E21, 3.400832E38, (-3.2513120806418594E22), 6.114840953015872E21, 1.700416E38}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2559.229689594064);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1825.938273710608);
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 1744.5780914717739;
      doubleArray0[7] = 928.450750886404;
      doubleArray0[8] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2559.229689594064), 0.0, Double.NEGATIVE_INFINITY, 0.0, (-1825.938273710608), Double.POSITIVE_INFINITY, 1744.5780914717739, 928.450750886404, 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "RG,vx}";
      stringArray0[1] = "THD";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {(-2559.229689594064), 0.0, Double.NEGATIVE_INFINITY, 0.0, (-1825.938273710608), Double.POSITIVE_INFINITY, 1744.5780914717739, 928.450750886404, 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-2,559.23 < 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long[][] longArray0 = new long[0][5];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = 939.77;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(939.77, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 1647;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 1647);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(1.0E-5, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      doubleArray0[7] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
      doubleArray1[5] = null;
      doubleArray1[6] = null;
      doubleArray1[7] = null;
      doubleArray1[8] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2173.484865211), (-2173.484865211), (-2173.484865211), (-651.0), (-651.0), 0.0, 422.325338985287, (-2173.484865211));
      assertEquals(5221057.374074013, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-658.831267037402));
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double((-658.831267037402));
      doubleArray0[2] = double2;
      Double double3 = new Double((-368.84284));
      doubleArray0[3] = double3;
      Double double4 = new Double(3.834E-20);
      doubleArray0[4] = double4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1303.4545998098756);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 1024;
      int int1 = (-1304);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1304));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2180.95;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 553.0;
      doubleArray0[6] = 1.0E-5;
      doubleArray0[7] = 1344.07386872;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 7596.1;
      doubleArray0[2] = 3612.34;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(3612.34, 7596.1, 0.0, 1.304E19);
      MathArrays.normalizeArray(doubleArray0, 3612.34);
      int[] intArray0 = new int[9];
      intArray0[0] = 206;
      intArray0[1] = 0;
      intArray0[2] = 43;
      intArray0[3] = 0;
      intArray0[4] = 987;
      intArray0[5] = 1;
      intArray0[6] = (-1027);
      intArray0[7] = 0;
      intArray0[8] = 4222;
      int[] intArray1 = MathArrays.copyOf(intArray0, 454);
      assertEquals(454, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<String, Integer>>) null, (-253), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MathArrays.OrderDirection.values();
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      int int1 = 99;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-412.5583055126);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 1202.33708228;
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = (-2391.3966138570813);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -825.117 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 3872.9443F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-645.1055F);
      floatArray0[3] = 6615.567F;
      floatArray0[4] = 2914.4802F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-1.0F);
      floatArray0[8] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 6615.567F;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0.0F;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 386;
      intArray0[1] = (-1710);
      intArray0[2] = (-829);
      intArray0[3] = 199;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1270;
      intArray0[7] = 153;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1227.24063501;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2140.537057;
      doubleArray0[3] = (-1928.1792);
      doubleArray0[4] = (-51.41496);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 20.0;
      doubleArray0[8] = 0.0;
      MathArrays.copyOf(doubleArray0, 0);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (-1L);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 16L;
      longArray0[3] = 0L;
      longArray0[4] = (-1029L);
      longArray0[5] = 1L;
      longArray0[6] = (-3090L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,029 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-343.724);
      doubleArray0[1] = (-2046.81569);
      MathArrays.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 263);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-2559.229689594064);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (-1825.938273710608);
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -2,559.23)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<String, Integer>>) null, 0, (-2934));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 1355.094062975821;
      doubleArray0[2] = 0.0;
      double double0 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3747.0);
      doubleArray0[5] = (-1670.864400949057);
      MathArrays.safeNorm(doubleArray0);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 871;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 871);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 28.28407F;
      floatArray0[2] = 1929.9929F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 1.4E-45F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1929.9929F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = 7.848361555046424E-8;
      doubleArray0[5] = (double) 1.4E-45F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1929.992919921875, double0, 0.01);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(64);
      integerArray0[0] = integer0;
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("", int0);
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2173.484865211), (-2173.484865211), (-2173.484865211), (-651.0), (-651.0), 0.0, 422.325338985287, (-2173.484865211));
      assertEquals(5221057.374074013, double0, 0.01);
      
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 5221057.374074013;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-651.0);
      doubleArray0[3] = (-651.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-651.0);
      doubleArray0[8] = 5221057.374074013;
      double[][] doubleArray1 = new double[6][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.linearCombination(0.0, 0.0, 0.0, 100.0, 100.0, 100.0, (-2012.116901), 0.0);
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7383690.2344388915, double1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(17, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1106.35873);
      doubleArray0[1] = 1.34217729E8;
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.copyOf(intArray0);
      MathArrays.linearCombination((double) 0, 0.0, 1898.531, 0.0, 20.0, 100.0, 0.0, 1146.86084659365);
      MathArrays.copyOf(doubleArray0);
      MathArrays.copyOf(intArray0, 0);
      MathArrays.scaleInPlace(2171.871, doubleArray0);
      assertArrayEquals(new double[] {(-2402868.44128383), 2.91503593300959E11}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = (-1877.33564);
      doubleArray0[2] = 4905.33320337099;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 4923.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = (-4011.132122994);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {6.64, (-3754.67128), 9810.66640674198, 0.0, 0.0, 0.0, 9846.0, 2.0, (-8022.264245988)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 634;
      int int0 = 2933;
      intArray0[1] = 2933;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2933;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      MathArrays.normalizeArray(doubleArray1, 2933);
      double[][] doubleArray2 = new double[1][5];
      double[] doubleArray3 = new double[0];
      doubleArray2[0] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 899.86431;
      doubleArray0[1] = 482.0805916434;
      doubleArray0[2] = (-20.0);
      doubleArray0[3] = 3.141592653589793;
      doubleArray0[4] = (-832.906828192);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }
}
