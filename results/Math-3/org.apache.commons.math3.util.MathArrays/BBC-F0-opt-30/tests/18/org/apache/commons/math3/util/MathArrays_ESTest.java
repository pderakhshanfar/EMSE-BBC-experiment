/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 07:23:06 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, (-1));
      assertNotNull(objectArray0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(0, objectArray0.length);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = (-624.54F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.4E-45F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, (-624.54F), 0.0F, 1.4E-45F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 1.4E-45F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 1.4E-45F;
      doubleArray0[6] = (double) (-624.54F);
      doubleArray0[7] = 0.16666666666666666;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1.401298464324817E-45, 0.0, 0.0, 1.401298464324817E-45, (-624.5399780273438), 0.16666666666666666}, doubleArray0, 0.01);
      assertEquals(624.5400002659339, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 302.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1659.144);
      doubleArray0[4] = 942.36718;
      doubleArray0[5] = 8.0E298;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 302.0, (-1.0), (-1659.144), 942.36718, 8.0E298}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertEquals(16, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 302.0, (-1.0), (-1659.144), 942.36718, 8.0E298}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 10
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 829.1F;
      floatArray0[1] = 1.4E-45F;
      floatArray0[2] = (-3426.1006F);
      floatArray0[3] = 3722.25F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 216.19395F;
      floatArray0[6] = Float.POSITIVE_INFINITY;
      floatArray0[7] = 432.0F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {829.1F, 1.4E-45F, (-3426.1006F), 3722.25F, 0.0F, 216.19395F, Float.POSITIVE_INFINITY, 432.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 432.0F;
      doubleArray0[2] = (-2354.77614);
      doubleArray0[3] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[4] = (double) 829.1F;
      doubleArray0[5] = (double) 216.19395F;
      doubleArray0[6] = (double) 3722.25F;
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = (double) 829.1F;
      try { 
        MathArrays.normalizeArray(doubleArray0, Float.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-716.153621152);
      doubleArray0[1] = 993.29036;
      doubleArray0[2] = 2975.42148;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-4.9E-324);
      doubleArray0[5] = (-810.5889);
      doubleArray0[6] = 1172.763058;
      doubleArray0[7] = 2402.99;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-716.153621152), 993.29036, 2975.42148, (-1.0), (-4.9E-324), (-810.5889), 1172.763058, 2402.99}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-716.153621152), 993.29036, 2975.42148, (-1.0), (-4.9E-324), (-810.5889), 1172.763058, 2402.99}, doubleArray0, 0.01);
      assertEquals(4261.387594096102, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-4711);
      intArray0[1] = 15;
      intArray0[2] = 2145898525;
      intArray0[3] = (-493);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2145898525;
      intArray1[1] = (-493);
      intArray1[2] = (-4711);
      intArray1[3] = 15;
      intArray1[4] = (-493);
      intArray1[5] = (-4711);
      intArray1[6] = 2145898525;
      intArray1[7] = (-493);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {(-4711), 15, 2145898525, (-493)}, intArray0);
      assertArrayEquals(new int[] {2145898525, (-493), (-4711), 15, (-493), (-4711), 2145898525, (-493)}, intArray1);
      assertEquals((-3159808), int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-493), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2855.9546F);
      floatArray0[1] = 1162.3026F;
      floatArray0[2] = (-331.53F);
      floatArray0[3] = 1731.05F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 366.5733F;
      floatArray0[6] = 3.4028235E38F;
      floatArray0[7] = 1461.0F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1162.3026F;
      floatArray1[1] = 1162.3026F;
      floatArray1[2] = (-2855.9546F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 272.03F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 366.5733F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {(-2855.9546F), 1162.3026F, (-331.53F), 1731.05F, 0.0F, 366.5733F, 3.4028235E38F, 1461.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1162.3026F, 1162.3026F, (-2855.9546F), 0.0F, 272.03F, 0.0F, 0.0F, 366.5733F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2431.42766427);
      doubleArray0[1] = (-2631.024039072);
      doubleArray0[2] = 1576.740204;
      doubleArray0[3] = (-1657.17779);
      doubleArray0[4] = 2446.0;
      doubleArray0[5] = 214.27972354;
      doubleArray0[6] = 1.304E19;
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.9305076599121094;
      doubleArray0[1] = (-539.23);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 515.3660329344445;
      doubleArray0[4] = 8.0;
      doubleArray0[5] = 5197.483;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 5197.483;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.9305076599121094, (-539.23), (-1.0), 515.3660329344445, 8.0, 5197.483, Double.NaN, 5197.483}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 305.09F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 305.09F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double double0 = MathArrays.linearCombination((double) 0.0F, (double) 305.09F, (double) 0.0F, (double) 0.0F, 3.834E-20, (double) 0.0F, 379.947674448479, (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, (-335.272), 2557.125964, (double) 305.09F, (-683.81484), 3334.61219057673, (-37.7081450295241), 1145.3056590982474);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1543291.1024654026), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1426, (-149));
      assertNotNull(objectArray0);
      assertEquals(1426, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1295.111146874);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-1295.111146874)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1677312.8827572877}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-1295.111146874)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1677312.8827572877}, doubleArray1, 0.01);
      assertEquals((-2.172306611254326E9), double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      int int0 = 4338;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 4338);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.9315965175628662;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-2913.06928649833);
      doubleArray0[3] = (-3108.65649766);
      doubleArray0[4] = 1.304E19;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.9315965175628662, 1.34217729E8, (-2913.06928649833), (-3108.65649766), 1.304E19}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.9315965175628662, 1.34217729E8, (-2913.06928649833), (-3108.65649766), 1.304E19}, doubleArray0, 0.01);
      assertEquals(1.700416E38, double0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.700416E38;
      doubleArray1[1] = 1.304E19;
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = (-3108.65649766);
      doubleArray1[4] = 1.34217729E8;
      doubleArray1[5] = 1.34217729E8;
      doubleArray1[6] = 1.34217729E8;
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {1.700416E38, 1.304E19, 1.304E19, (-3108.65649766), 1.34217729E8, 1.34217729E8, 1.34217729E8}, doubleArray1, 0.01);
      assertEquals(1.700416E38, double1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.3040000000000008E19;
      doubleArray0[1] = 1.3040000000000008E19;
      doubleArray0[3] = 1.3040000000000008E19;
      doubleArray0[4] = (-326.76730544557);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.3040000000000008E19, 1.3040000000000008E19, 0.0, 1.3040000000000008E19, (-326.76730544557)}, doubleArray0, 0.01);
      assertEquals(2.2585942530698174E19, double0, 0.01);
      
      long[][] longArray0 = new long[5][5];
      long[] longArray1 = new long[7];
      longArray1[0] = 4774L;
      longArray1[1] = 1L;
      longArray1[2] = 3518L;
      longArray1[3] = (-3364L);
      longArray1[4] = (-995L);
      longArray1[5] = 0L;
      longArray1[6] = 9193070505571053912L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-995L);
      longArray2[1] = 9154082963658192752L;
      longArray2[2] = (-3364L);
      longArray2[3] = 4774L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 3518L;
      longArray3[1] = 3518L;
      longArray3[2] = 9193070505571053912L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 4774L;
      longArray3[6] = (-1L);
      longArray3[7] = 1647L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 0L;
      longArray4[1] = 4774L;
      longArray4[2] = 1647L;
      longArray4[3] = 9193070505571053912L;
      longArray4[4] = 1647L;
      longArray4[5] = (-1L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 4774L;
      longArray5[1] = 9154082963658192752L;
      longArray5[2] = (-1L);
      longArray5[3] = 3952090531849364496L;
      longArray5[4] = 0L;
      longArray5[5] = 4774L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = Integer.getInteger("", 0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1624, 1624);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int[] intArray0 = new int[6];
      intArray0[0] = 107;
      intArray0[1] = (-2146060529);
      intArray0[2] = (-2146060529);
      intArray0[3] = (-2146060529);
      intArray0[4] = (-2146060529);
      intArray0[5] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1987);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(1987, intArray1.length);
      assertArrayEquals(new int[] {107, (-2146060529), (-2146060529), (-2146060529), (-2146060529), 2}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2146060529), (-2146060529));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1624, 1624);
      assertNotNull(objectArray0);
      assertEquals(1624, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4230.7867348473;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4230.7867348473;
      doubleArray1[1] = 4230.7867348473;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {4230.7867348473}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4230.7867348473, 4230.7867348473}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-115.9);
      doubleArray1[1] = 0.7937005259840998;
      doubleArray1[2] = 2.17333333333333325E18;
      doubleArray1[3] = -0.0;
      doubleArray1[4] = 57.2957763671875;
      doubleArray1[5] = (-1.9841269659586505E-4);
      doubleArray1[6] = 264.3200211;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-115.9), 0.7937005259840998, 2.17333333333333325E18, -0.0, 57.2957763671875, (-1.9841269659586505E-4), 264.3200211}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-450.7325);
      doubleArray0[1] = 951.2584674901299;
      doubleArray0[2] = 1758.34867441;
      doubleArray0[3] = (-0.0013888888689039883);
      doubleArray0[4] = 5.650007086920087E-9;
      doubleArray0[5] = 9.5702;
      doubleArray0[6] = (-2664.38773);
      doubleArray0[7] = 951.2584674901299;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-0.0013888888689039883);
      doubleArray1[1] = (-450.7325);
      doubleArray1[2] = (-2664.38773);
      doubleArray1[3] = (-2664.38773);
      doubleArray1[4] = 951.2584674901299;
      doubleArray1[5] = 9.5702;
      doubleArray1[6] = 9.5702;
      doubleArray1[7] = 1758.34867441;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-450.7325), 951.2584674901299, 1758.34867441, (-0.0013888888689039883), 5.650007086920087E-9, 9.5702, (-2664.38773), 951.2584674901299}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.0013888888689039883), (-450.7325), (-2664.38773), (-2664.38773), 951.2584674901299, 9.5702, 9.5702, 1758.34867441}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[3][5];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(8, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {951.2584674901299, (-2664.38773), 5.650007086920087E-9, 9.5702, 951.2584674901299, (-450.7325), 1758.34867441, (-0.0013888888689039883)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-915);
      intArray0[1] = (-2135991393);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2285));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 5;
      intArray0[2] = 226;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1), 5, 226}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 226;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      double double0 = new Integer(0);
      assertEquals(0, double0, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "Xa__:+Dvq|bk";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "$VALUES";
      stringArray0[5] = "";
      stringArray0[6] = "!B";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147006050, (-1808));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = (-775);
      intArray0[2] = (-2146204089);
      intArray0[3] = (-1132);
      intArray0[4] = 123;
      intArray0[5] = 134;
      intArray0[6] = 191;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {1, (-775), (-2146204089), (-1132), 123, 134, 191}, intArray0);
      assertArrayEquals(new int[] {1, (-775), (-2146204089), (-1132), 123, 134, 191}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      MathArrays.checkPositive(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.07692307692307693;
      doubleArray0[1] = 596.733109321055;
      doubleArray0[2] = (-866.2903174246778);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3.0095696449279785;
      doubleArray0[5] = (-1548.708);
      doubleArray0[6] = 1862.78753299;
      doubleArray0[7] = 2800.4546587828;
      doubleArray0[8] = (-2132.295324467);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.07692307692307693, 596.733109321055, (-866.2903174246778), 0.0, 3.0095696449279785, (-1548.708), 1862.78753299, 2800.4546587828, (-2132.295324467)}, doubleArray0, 0.01);
      assertEquals(4400.484279056047, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.07692307692307693, 596.733109321055, (-866.2903174246778), 0.0, 3.0095696449279785, (-1548.708), 1862.78753299, 2800.4546587828, (-2132.295324467)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.15384615384615385, 1193.46621864211, (-1732.5806348493556), 0.0, 6.019139289855957, (-3097.416), 3725.57506598, 5600.9093175656, (-4264.590648934)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.scaleInPlace((-201.45747766578492), doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.07692307692307693, 596.733109321055, (-866.2903174246778), 0.0, 3.0095696449279785, (-1548.708), 1862.78753299, 2800.4546587828, (-2132.295324467)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-30.993458102428452), (-240432.69408696168), 349041.3245493355, -0.0, (-1212.600619053405), 623997.6146416449, (-750544.955646871), (-1128345.0637515585), 859133.6754113365}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {0.07692307692307693, 596.733109321055, (-866.2903174246778), 0.0, 3.0095696449279785, (-1548.708), 1862.78753299, 2800.4546587828, (-2132.295324467)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.15384615384615385, 1193.46621864211, (-1732.5806348493556), 0.0, 6.019139289855957, (-3097.416), 3725.57506598, 5600.9093175656, (-4264.590648934)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {0.07692307692307693, 596.733109321055, (-866.2903174246778), 0.0, 3.0095696449279785, (-1548.708), 1862.78753299, 2800.4546587828, (-2132.295324467)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.15384615384615385, 1193.46621864211, (-1732.5806348493556), 0.0, 6.019139289855957, (-3097.416), 3725.57506598, 5600.9093175656, (-4264.590648934)}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 145;
      intArray0[1] = 5000;
      intArray0[2] = (-499);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {145, 5000, (-499)}, intArray0);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-499);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 5000;
      floatArray0[3] = (float) 145;
      floatArray0[4] = (float) 145;
      floatArray0[5] = (float) (-499);
      floatArray0[6] = (float) 5000;
      floatArray0[7] = (float) 145;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-499.0F), 0.0F, 5000.0F, 145.0F, 145.0F, (-499.0F), 5000.0F, 145.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1383.74037435514;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1383.74037435514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1914737.4236205027, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {1383.74037435514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1383.74037435514;
      doubleArray2[1] = 1914737.4236205027;
      doubleArray2[2] = 1383.74037435514;
      doubleArray2[3] = 1914737.4236205027;
      doubleArray2[4] = 1383.74037435514;
      doubleArray2[5] = 1383.74037435514;
      doubleArray2[6] = 1383.74037435514;
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-610.600135);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 4012.6;
      doubleArray0[4] = 0.5403022766113281;
      doubleArray0[5] = Double.NaN;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-610.600135), (-1.0), 1.34217729E8, 4012.6, 0.5403022766113281, Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.3808658975230467E7;
      doubleArray1[1] = 1.34217729E8;
      doubleArray1[2] = (-2.6437112632041807E-8);
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = 1.34217729E8;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {1.3808658975230467E7, 1.34217729E8, (-2.6437112632041807E-8), Double.NaN, Double.NaN, 1.34217729E8}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2.6437112632041807E-8);
      doubleArray2[1] = (-1949.077);
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Y9d3";
      stringArray0[1] = "";
      stringArray0[2] = "Y9d3";
      stringArray0[3] = "Y9d3";
      stringArray0[4] = "Y9d3";
      stringArray0[5] = "Y9d3";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = Double.NaN;
      doubleArray0[4] = (-546.151);
      doubleArray0[5] = 1.3040000000000008E19;
      doubleArray0[7] = (-326.76730544557);
      doubleArray0[8] = (-453.7);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, (-546.151), 1.3040000000000008E19, 0.0, (-326.76730544557), (-453.7)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-5184.7219773));
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, (-546.151), 1.3040000000000008E19, 0.0, (-326.76730544557), (-453.7)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, Double.NaN, -0.0, -0.0, 2.1715039053867869E-13, (-5184.7219773), -0.0, 1.2992313113548679E-13, 1.8039174548320617E-13}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2335.2;
      doubleArray0[1] = 6.52E18;
      doubleArray0[2] = 9.007199254740992E15;
      doubleArray0[3] = (-3230.0);
      doubleArray0[4] = 1265.2086441488366;
      doubleArray0[5] = 1.3040000000000008E19;
      doubleArray0[6] = 1.633123935319537E16;
      doubleArray0[7] = 0.5403022766113281;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2335.2, 6.52E18, 9.007199254740992E15, (-3230.0), 1265.2086441488366, 1.3040000000000008E19, 1.633123935319537E16, 0.5403022766113281}, doubleArray0, 0.01);
      assertEquals(1.4579175142614118E19, double0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2767.7F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-2767.7F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-2767.7F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-2767.7F);
      floatArray1[1] = (-2767.7F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-2767.7F);
      floatArray1[4] = (-1.4E-45F);
      floatArray1[5] = (-2767.7F);
      floatArray1[6] = (-2767.7F);
      floatArray1[7] = (-2767.7F);
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {(-2767.7F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2767.7F), (-2767.7F), 0.0F, (-2767.7F), (-1.4E-45F), (-2767.7F), (-2767.7F), (-2767.7F)}, floatArray1, 0.01F);
      assertFalse(boolean2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2353.0;
      doubleArray1[1] = 3.834E-20;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {2353.0, 3.834E-20}, doubleArray1, 0.01);
      assertEquals(2353.0, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = Double.NaN;
      doubleArray0[4] = (-546.151);
      doubleArray0[5] = 1.3040000000000008E19;
      doubleArray0[7] = (-326.76730544557);
      doubleArray0[8] = (-453.7);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, (-546.151), 1.3040000000000008E19, 0.0, (-326.76730544557), (-453.7)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, (-546.151), 1.3040000000000008E19, 0.0, (-326.76730544557), (-453.7)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 298280.914801, 1.7004160000000022E38, 0.0, 106776.87190815844, 205843.69}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3698;
      intArray0[1] = 2145358271;
      intArray0[2] = (-6022);
      intArray0[3] = 118;
      intArray0[4] = 205;
      intArray0[5] = (-3678);
      intArray0[6] = 2145873840;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-3678);
      intArray1[1] = 118;
      intArray1[2] = 2146303584;
      intArray1[3] = 3698;
      intArray1[4] = (-6022);
      intArray1[5] = 3698;
      intArray1[6] = 2145358271;
      intArray1[7] = (-3678);
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(8, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-3678), 118, 2146303584, 3698, (-6022), 3698, 2145358271, (-3678)}, intArray1);
      assertArrayEquals(new int[] {3698, 2145358271, (-6022), 118, 205, (-3678), 2145873840}, intArray0);
      assertEquals(3.0346674933875775E9, double1, 0.01);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = Double.NaN;
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[0][8];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 3191;
      floatArray0[1] = (float) 3191;
      floatArray0[2] = (float) 3191;
      floatArray0[3] = (float) 3191;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 3191;
      floatArray1[1] = (float) 3191;
      floatArray1[2] = (float) 3191;
      floatArray1[3] = (float) 3191;
      floatArray1[4] = (float) 3191;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {3191.0F, 3191.0F, 3191.0F, 3191.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3191.0F, 3191.0F, 3191.0F, 3191.0F, 3191.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Y9d3";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "i";
      stringArray0[1] = "i";
      stringArray0[2] = "2_B'*i=Pb";
      stringArray0[4] = "numerator";
      stringArray0[5] = "FEUBH,wwSw?]~";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-3916);
      intArray0[1] = 2284;
      intArray0[2] = 8;
      intArray0[3] = (-148);
      intArray0[4] = 30;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-3916), 2284, 8, (-148), 30}, intArray0);
      assertArrayEquals(new int[] {(-3916), 2284, 8, (-148), 30}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 8;
      intArray2[1] = 30;
      intArray2[2] = (-148);
      intArray2[3] = 2284;
      intArray2[4] = (-148);
      intArray2[5] = 8;
      intArray2[6] = (-3916);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray2, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(464.053437, 0.0, 0.0, 2.608E18, 0.0, 0.0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 261.1344655167;
      doubleArray0[1] = -0.0;
      doubleArray0[2] = (-251.81458);
      doubleArray0[3] = (-1145.3056590982474);
      doubleArray0[4] = 6.52E18;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {261.1344655167, -0.0, (-251.81458), (-1145.3056590982474), 6.52E18, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {261.1344655167, -0.0, (-251.81458), (-1145.3056590982474), 6.52E18, 0.0}, doubleArray0, 0.01);
      assertEquals(6.52E18, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, (-656), (-656));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "#.;qhPm8*+";
      stringArray0[2] = "unable to perform Q.R decomposition on the {0}x{1} jacobian matrix";
      stringArray0[3] = "UNKNOWN_PARAMETER";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[5] = "\"";
      stringArray0[6] = "qt?81Ang)KYV=h:V<\"";
      stringArray0[7] = ",OW\"&.s`:";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2596.478F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1339.508F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-678.98676F);
      floatArray0[7] = (-501.78244F);
      floatArray0[8] = 150.537F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {2596.478F, 1.0F, 0.0F, 0.0F, (-1339.508F), 0.0F, (-678.98676F), (-501.78244F), 150.537F}, floatArray0, 0.01F);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Y9d3";
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2625.0);
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) 0.0F;
      doubleArray1[4] = (double) 0.0F;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 2.17333333333333325E18);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {(-2625.0), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.17333333333333325E18, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2625.0), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2625.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = 0.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 6.52E18;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 6.52E18}, doubleArray0, 0.01);
      assertEquals(6.52E18, double0, 0.01);
      
      int int0 = 0;
      Field<Integer> field0 = null;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "UNKNOWN_PARAMETER";
      stringArray0[1] = "UNKNOWN_PARAMETER";
      stringArray0[2] = ",OW\"&.s`:";
      stringArray0[3] = "\"";
      stringArray0[4] = "UNKNOWN_PARAMETER";
      stringArray0[5] = "UNKNOWN_PARAMETER";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$3";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) 0.0F;
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = (double) 0.0F;
      doubleArray1[6] = (double) 0.0F;
      doubleArray1[7] = (double) 0.0F;
      doubleArray1[8] = (double) 0.0F;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 29.167234F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.4E-45F;
      floatArray0[1] = 0.0F;
      floatArray0[5] = Float.NaN;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-465.0F);
      floatArray0[8] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {29.167234F, 0.0F, 0.0F, 1.4E-45F, 0.0F, Float.NaN, 0.0F, (-465.0F), 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-214.8903356), (-214.8903356), (-214.8903356), (-214.8903356), 1806.9, 1806.9, (-214.8903356), 1806.9);
      assertEquals(2968957.9752729214, double0, 0.01);
      
      long[][] longArray0 = new long[5][1];
      long[] longArray1 = new long[1];
      longArray1[0] = 5997L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 5997L;
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[2][7];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1333;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1333}, intArray0);
      assertEquals(0, int0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {1333}, intArray0);
      assertArrayEquals(new int[] {1333}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(int1 == int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1333}, intArray0);
      assertEquals(0, int1);
      assertNotSame(intArray0, intArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1333;
      longArray0[1] = (long) 1333;
      longArray0[2] = (long) 1333;
      longArray0[3] = (long) 1333;
      longArray0[4] = (long) 1333;
      longArray0[5] = 68L;
      longArray0[6] = (long) 1333;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1333L, 1333L, 1333L, 1333L, 1333L, 68L, 1333L}, longArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination((-1542.51), 1.0, 1.0, 1.0, (-376.847440516), (double) (-1L));
      assertEquals((-1164.662559484), double0, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1164.662559484);
      MathArrays.scaleInPlace((-376.847440516), doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {438900.104606359}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1506;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1506}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1506;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1506.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale(289.7339292511, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1506.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 436339.2974521566, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {1506}, intArray0);
      assertArrayEquals(new int[] {1506}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 1506;
      doubleArray3[1] = (double) 1506;
      doubleArray3[2] = (double) 1506;
      MathArrays.checkPositive(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(3, doubleArray3.length);
      assertArrayEquals(new double[] {1506.0, 1506.0, 1506.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">=.3&x}";
      stringArray0[1] = "INCREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-2702.0);
      doubleArray0[2] = 3152.553;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2814938.3173816204;
      doubleArray0[5] = 739.804897348708;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, (-2702.0), 3152.553, 0.0, 2814938.3173816204, 739.804897348708}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(3152.553, 993.112659667398, 0.0, Double.NaN, Double.NaN, Double.NaN);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3362.239947457796;
      doubleArray1[1] = 3362.239947457796;
      doubleArray1[2] = (-817.1835302);
      doubleArray1[3] = 3362.239947457796;
      doubleArray1[4] = (-621.5);
      doubleArray0[1] = (-621.5);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, (-621.5)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3362.239947457796, 3362.239947457796, (-817.1835302), 3362.239947457796, (-621.5), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2089632.1273450202), (-2089632.1273450202), 507879.5640193, (-2089632.1273450202), 386262.25, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, (-621.5)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3362.239947457796, 3362.239947457796, (-817.1835302), 3362.239947457796, (-621.5), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2089632.1273450202), (-2089632.1273450202), 507879.5640193, (-2089632.1273450202), 386262.25, 0.0}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, (-621.5)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3362.239947457796, 3362.239947457796, (-817.1835302), 3362.239947457796, (-621.5), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2089632.1273450202), (-2089632.1273450202), 507879.5640193, (-2089632.1273450202), 386262.25, 0.0}, doubleArray2, 0.01);
      assertFalse(boolean2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean3 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean3);
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1674.846095747233;
      doubleArray0[1] = 6.283185307179586;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1674.846095747233, 6.283185307179586}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[4][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      long[][] longArray0 = new long[1][2];
      long[] longArray1 = new long[6];
      longArray1[0] = (-552L);
      longArray1[1] = 0L;
      longArray1[2] = 7910884519577875640L;
      longArray1[3] = (-35L);
      longArray1[4] = (-741L);
      longArray1[5] = (-1L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1.2707259058830722);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (0 > -1.271)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = 2182;
      int int1 = 0;
      int int2 = 154;
      int int3 = (-35);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      int int4 = (-3492);
      intArray0[1] = (-3492);
      intArray0[2] = (-35);
      intArray0[3] = (-35);
      intArray0[4] = 154;
      intArray0[5] = 2182;
      intArray0[6] = 154;
      intArray0[7] = (-35);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, (-3492), (-35), (-35), 154, 2182, 154, (-35)}, intArray1);
      assertArrayEquals(new int[] {0, (-3492), (-35), (-35), 154, 2182, 154, (-35)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.scale((-1299.1), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2390.6555);
      doubleArray0[2] = (-1856.54);
      doubleArray0[3] = (-1577.4575624335);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = ">=.3&x}";
      stringArray0[2] = "NOT_POSITIVE_WINDOW_SIZE";
      stringArray0[3] = "njG";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-214.8903356), (-214.8903356), (-214.8903356), (-214.8903356), 1806.9, 1806.9, (-214.8903356), 1806.9);
      assertEquals(2968957.9752729214, double0, 0.01);
      
      long[][] longArray0 = new long[5][1];
      long[] longArray1 = new long[1];
      longArray1[0] = 5997L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 5997L;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = new Integer(1743);
      assertNotNull(integer0);
      assertEquals(1743, (int)integer0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 908);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1677.3);
      doubleArray0[1] = 40.0378243867;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1677.3), 40.0378243867}, doubleArray0, 0.01);
      assertEquals(1677.7777914198352, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[1] = 2987;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1677.3), 40.0378243867}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[3];
      longArray1[0] = 2182L;
      longArray1[1] = (long) 2987;
      longArray1[2] = (long) 2987;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 2987;
      longArray2[1] = 2182L;
      longArray2[2] = 2182L;
      longArray2[3] = (long) 2987;
      longArray2[4] = 0L;
      longArray2[5] = 113236205062349959L;
      longArray2[6] = (long) 2987;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 2182L;
      longArray3[1] = 0L;
      longArray3[2] = 113236205062349959L;
      longArray3[3] = 113236205062349959L;
      longArray3[4] = (long) 2987;
      longArray3[5] = 0L;
      longArray3[6] = 2182L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 2182L;
      longArray4[1] = (-768L);
      longArray4[2] = (long) 2987;
      longArray4[3] = 113236205062349959L;
      longArray4[4] = 0L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -768 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-60.22020469002);
      doubleArray0[1] = (-786.05312729054);
      doubleArray0[2] = 6.283185307179586;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertArrayEquals(new double[] {(-60.22020469002), (-786.05312729054), 6.283185307179586, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertEquals(11, doubleArray2.length);
      assertArrayEquals(new double[] {(-60.22020469002), (-786.05312729054), 6.283185307179586, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray0, 1677.3);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      assertArrayEquals(new double[] {(-60.22020469002), (-786.05312729054), 6.283185307179586, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {120.24825496655018, 1569.5980668652821, (-12.546321831832385), -0.0, -0.0, -0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "3%_;,[(VNp:";
      stringArray0[1] = "#Lm";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2145108647;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {2145108647}, intArray0);
      assertArrayEquals(new int[] {2145108647}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4658.648;
      doubleArray0[1] = 4658.648;
      doubleArray0[2] = 0.0;
      MathArrays.scaleInPlace(4658.648, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.1703001187904E7, 2.1703001187904E7, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3191;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {3191}, intArray0);
      assertEquals(0, int0);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {3191}, intArray0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[6][1];
      long[] longArray1 = new long[1];
      longArray1[0] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = (-1L);
      longArray5[1] = 0L;
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray5[4] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = 3101L;
      longArray6[1] = 0L;
      longArray6[2] = 0L;
      longArray6[3] = (-1L);
      longArray6[4] = (-1L);
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 3 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 641.87356515;
      doubleArray0[1] = 1234.6;
      doubleArray0[2] = 1234.6;
      doubleArray0[3] = (-121.0);
      doubleArray0[4] = (-121.0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {641.87356515, 1234.6, 1234.6, (-121.0), (-121.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {412001.6736383713, 1524237.1599999997, 1524237.1599999997, 14641.0, 14641.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 641.87356515);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[6];
      intArray0[0] = 3191;
      intArray0[1] = 3191;
      intArray0[2] = 3191;
      intArray0[3] = 3191;
      intArray0[4] = (-1);
      intArray0[5] = 3191;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {3191, 3191, 3191, 3191, (-1), 3191}, intArray0);
      assertEquals(0, int0);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {3191, 3191, 3191, 3191, (-1), 3191}, intArray0);
      assertEquals(0, int1);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 3191;
      floatArray0[1] = (float) 3191;
      floatArray0[2] = (float) 3191;
      floatArray0[3] = (float) 3191;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {3191.0F, 3191.0F, 3191.0F, 3191.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {3191.0F, 3191.0F, 3191.0F, 3191.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer(1755);
      assertNotNull(integer0);
      assertEquals(1755, (int)integer0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 1755);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 6.52E18;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 6.52E18}, doubleArray0, 0.01);
      assertEquals(6.52E18, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-3492);
      intArray0[2] = (-35);
      intArray0[3] = (-35);
      intArray0[4] = 154;
      intArray0[5] = 2182;
      intArray0[6] = 154;
      intArray0[7] = (-35);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {0, (-3492), (-35), (-35), 154, 2182, 154, (-35)}, intArray0);
      assertArrayEquals(new int[] {0, (-3492), (-35), (-35), 154, 2182, 154, (-35)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-24.0568756), 0.0, (-83.8026727662), (-24.0568756), 0.0, (-24.0568756), (-83.8026727662));
      assertEquals(2016.0304736839814, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2016.0304736839814;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 2016.0304736839814}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 4032.060947367963}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0975613330136278);
      doubleArray0[1] = (-1239.68848635901);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0975613330136278), (-1239.68848635901), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 5;
      intArray0[1] = 2095154274;
      intArray0[2] = 2212;
      int[] intArray1 = MathArrays.copyOf(intArray0, 301);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(301, intArray1.length);
      assertArrayEquals(new int[] {5, 2095154274, 2212}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2390.6555);
      doubleArray0[2] = (-1856.54);
      doubleArray0[3] = (-1577.4575624335);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      int[] intArray0 = new int[3];
      intArray0[0] = 154;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {154, 0, 0}, intArray0);
      assertArrayEquals(new int[] {154, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 6.283185307179586;
      doubleArray1[4] = (double) 154;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = (-1577.4575624335);
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 6.283185307179586;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 6.283185307179586}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[][] doubleArray2 = new double[2][3];
      doubleArray2[0] = doubleArray1;
      double[] doubleArray3 = new double[12];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 6.283185307179586;
      doubleArray3[5] = 6.283185307179586;
      doubleArray2[1] = doubleArray3;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1268);
      intArray0[1] = (-2048574916);
      intArray0[2] = (-1914);
      intArray0[3] = 15;
      intArray0[4] = 2033;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1268), (-2048574916), (-1914), 15, 2033}, intArray0);
      assertEquals(0, int0);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1914);
      intArray1[1] = 15;
      intArray1[2] = 15;
      intArray1[3] = (-1914);
      intArray1[4] = 2807;
      intArray1[5] = 2033;
      intArray1[6] = 3754;
      intArray1[7] = (-2048574916);
      intArray1[8] = 0;
      int int1 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {(-1268), (-2048574916), (-1914), 15, 2033}, intArray0);
      assertArrayEquals(new int[] {(-1914), 15, 15, (-1914), 2807, 2033, 3754, (-2048574916), 0}, intArray1);
      assertEquals(2048580209, int1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2807;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-4264.6059731));
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {2807.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4264.6059731)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale(15, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {2807.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4264.6059731)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-63969.089596499995)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Q/'5|WIhlk>e9V9gF_0";
      stringArray0[1] = "p|cJfRaFd&c";
      stringArray0[2] = "2,D%,D/ru`-Nc3C.VgG";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[5] = "DECREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(373.0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3191;
      intArray0[1] = 3191;
      intArray0[2] = 3191;
      intArray0[3] = 3191;
      intArray0[4] = 3191;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {3191, 3191, 3191, 3191, 3191}, intArray0);
      assertEquals(0, int0);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {3191, 3191, 3191, 3191, 3191}, intArray0);
      assertEquals(0, int1);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 3191;
      floatArray0[1] = (float) 3191;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 3191;
      floatArray0[5] = (float) 3191;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {3191.0F, 3191.0F, 0.0F, 0.0F, 3191.0F, 3191.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {3191.0F, 3191.0F, 0.0F, 0.0F, 3191.0F, 3191.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-214.8903356), (-214.8903356), (-214.8903356), (-214.8903356), 1806.9, 1806.9, (-214.8903356), 1806.9);
      assertEquals(2968957.9752729214, double0, 0.01);
      
      long[][] longArray0 = new long[5][1];
      long[] longArray1 = new long[1];
      longArray1[0] = 5997L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 5997L;
      longArray2[1] = 5997L;
      longArray2[2] = 5997L;
      longArray2[3] = 5997L;
      longArray2[4] = 5997L;
      longArray2[5] = 5997L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 5997L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 5997L;
      longArray5[1] = 5997L;
      longArray0[4] = longArray5;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      String[] stringArray0 = new String[3];
      stringArray0[1] = "empty polynomials coefficients array";
      stringArray0[2] = "empty polynomials coefficients array";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[3];
      intArray0[0] = (-2477);
      intArray0[1] = (-2477);
      intArray0[2] = (-2477);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-2477), (-2477), (-2477)}, intArray0);
      assertArrayEquals(new int[] {(-2477), (-2477), (-2477)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, (double) (-2477), (double) (-2477), (-1677.3), 1.0, 955.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4155627.1, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-2477);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 955.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (-1677.3);
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = 0.7675435543060303;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(0.7675435543060303, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4658.648;
      doubleArray0[1] = 4658.648;
      doubleArray0[2] = (-81.7294);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {4658.648, 4658.648, (-81.7294)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      Integer integer0 = new Integer(1755);
      assertNotNull(integer0);
      assertEquals(1755, (int)integer0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3389.7678;
      doubleArray1[1] = 3389.7678;
      doubleArray1[2] = (-817.1835302);
      doubleArray1[3] = 3389.7678;
      doubleArray1[4] = (-621.5);
      doubleArray1[5] = (-621.5);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3389.7678, 3389.7678, (-817.1835302), 3389.7678, (-621.5), (-621.5)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-817.1835302);
      double[] doubleArray4 = MathArrays.scale(1.80143987944461E16, doubleArray3);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
      assertArrayEquals(new double[] {(-817.1835302)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-1.4721070001276086E19)}, doubleArray4, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-573);
      intArray0[1] = (-858);
      intArray0[2] = 5997;
      intArray0[3] = 110;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.math3.exception.NotFiniteNumberException";
      stringArray0[1] = "org.apache.commons.math3.exception.NotFiniteNumberException";
      stringArray0[2] = "org.apache.commons.math3.exception.NotFiniteNumberException";
      stringArray0[3] = "org.apache.commons.math3.exception.NotFiniteNumberException";
      stringArray0[4] = "OUT_OF_RANGE_SIMPLE";
      stringArray0[5] = "org.apache.commons.math3.exception.NotFiniteNumberException";
      stringArray0[6] = "org.apache.commons.math3.exception.NotFiniteNumberException";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[9];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "$VALUES";
      stringArray0[1] = "$VALUES";
      stringArray0[2] = "";
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray2[5] = (double) 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(8, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1681.2F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 5709.0F;
      floatArray0[6] = 512.23224F;
      floatArray0[7] = 1674.995F;
      floatArray0[8] = 1.0F;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.math3.exception.NotFiniteNumberException";
      stringArray0[1] = "KLWwn?O4PZ'Q@lsW>";
      stringArray0[2] = "org.apache.commons.math3.exception.NotFiniteNumberException";
      stringArray0[3] = "KLWwn?O4PZ'Q@lsW>";
      stringArray0[4] = "org.apache.commons.math3.exception.NotFiniteNumberException";
      stringArray0[5] = "org.apache.commons.math3.exception.NotFiniteNumberException";
      stringArray0[6] = "org.apache.commons.math3.exception.NotFiniteNumberException";
      stringArray0[7] = "KLWwn?O4PZ'Q@lsW>";
      stringArray0[8] = "org.apache.commons.math3.exception.NotFiniteNumberException";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2390.6555);
      doubleArray0[2] = (-1856.54);
      double double0 = (-1577.4575624335);
      doubleArray0[3] = (-1577.4575624335);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 3.32;
      doubleArray0[6] = 0.0;
      double double1 = MathArrays.linearCombination((-909.32409), 2867.01913, 0.0, 2213.844232007);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2607049.5613998417), double1, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 18
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 511.12691627497446;
      doubleArray0[4] = 517.4196;
      doubleArray0[5] = (-1370.6157178792055);
      doubleArray0[6] = (-377.73539821);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 511.12691627497446, 517.4196, (-1370.6157178792055), (-377.73539821)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 511.12691627497446, 517.4196, (-1370.6157178792055), (-377.73539821)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1370.6157178792055);
      doubleArray2[2] = 511.12691627497446;
      doubleArray2[3] = 517.4196;
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[4][5];
      doubleArray1[0] = doubleArray0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-817.1835302);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 6.283185307179586;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 6.283185307179586;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-817.1835302), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.283185307179586, (-1.0), (-1.0), 6.283185307179586}, doubleArray1, 0.01);
      assertEquals(823.4667155071795, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination((-1.0), (-1914.22834629908), 6.283185307179586, 6.283185307179586);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1953.7067639034374, double1, 0.01);
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1681.2F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 5709.0F;
      floatArray0[6] = 512.23224F;
      floatArray0[7] = 1674.995F;
      floatArray0[8] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1681.2F), 0.0F, 0.0F, 5709.0F, 512.23224F, 1674.995F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale((-1.0), doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      try { 
        MathArrays.checkPositive(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1681.2F);
      floatArray0[3] = 0.0F;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "empty polynomials coefficients array";
      stringArray0[1] = "empty polynomials coefficients array";
      stringArray0[2] = "empty polynomials coefficients array";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1681.2F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 5709.0F;
      floatArray0[6] = 512.23224F;
      floatArray0[7] = 1674.995F;
      floatArray0[8] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1681.2F), 0.0F, 0.0F, 5709.0F, 512.23224F, 1674.995F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 5709.0F;
      doubleArray0[3] = (double) (-1681.2F);
      doubleArray0[4] = (double) 512.23224F;
      doubleArray0[5] = (double) 1674.995F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 5709.0, (-1681.199951171875), 512.2322387695312, 1674.9949951171875, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1677.3);
      doubleArray0[1] = 40.0378243867;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1677.3), 40.0378243867}, doubleArray0, 0.01);
      assertEquals(1677.7777914198352, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[1] = 2987;
      doubleArray0[0] = (double) 2182;
      intArray0[3] = 0;
      intArray0[5] = 0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 154;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1101.7179F;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 2902.18F;
      floatArray1[1] = (float) 154;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 154.0F, (-1.0F), 1.0F, 1101.7179F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2902.18F, 154.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "4l<a{3_ &=U-yt";
      stringArray0[2] = "[ ";
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1633.3295F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 1633.3295F;
      floatArray1[4] = (float) 0;
      floatArray1[5] = 1633.3295F;
      floatArray1[6] = 1633.3295F;
      floatArray1[7] = (float) 0;
      floatArray1[8] = 1633.3295F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 1633.3295F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1633.3295F, 0.0F, 1633.3295F, 1633.3295F, 0.0F, 1633.3295F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (-1.0129027912496858E-9);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 1633.3295F;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-817.1835302);
      MathArrays.checkOrder(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-817.1835302), 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination((-3130.49004036677), 1.304E19, 2472.634019993516, 3.141592653589793, 3.141592653589793, (-2175.980687199989));
      assertEquals((-4.082159012638268E22), double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(3.141592653589793, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-817.1835302), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2567.257775110893), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = new Double(2472.634019993516);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2472.634019993516, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[6][6];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray1;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 2472.634019993516;
      doubleArray3[1] = (-3130.49004036677);
      doubleArray3[2] = (-0.0013888888689039883);
      doubleArray2[5] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "$VALUES";
      stringArray0[1] = "$VALUES";
      stringArray0[2] = "";
      stringArray0[3] = "$VALUES";
      stringArray0[4] = "empty polynomials coefficients array";
      stringArray0[5] = "empty polynomials coefficients array";
      stringArray0[6] = "KLWwn?O4PZ'Q@lsW>";
      stringArray0[7] = "org.apache.commons.math3.exception.NotFiniteNumberException";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1566.6854088), 1065.43952, 6.283185307179586, 6.283185307179586, 1816.2978, 17.37193388777753, 944.0583, 6.283185307179586);
      assertEquals((-1631684.7729834747), double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 17.37193388777753;
      doubleArray0[1] = 1065.43952;
      doubleArray0[2] = (-3.141592653589793);
      doubleArray0[3] = 6.283185307179586;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {17.37193388777753, 1065.43952, (-3.141592653589793), 6.283185307179586}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination((-2072.817864547), 114.5428, (double) 0, 17.37193388777753, (-1.7168146928204135), 1.304E19);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2.238726359437843E19), double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 6.283185307179586;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 6.283185307179586}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[][] doubleArray2 = new double[2][3];
      doubleArray2[0] = doubleArray1;
      double[] doubleArray3 = new double[12];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 6.283185307179586;
      doubleArray3[3] = 6.283185307179586;
      doubleArray2[1] = doubleArray3;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray4.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray4, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "4l<a{3_ &=U-yt";
      stringArray0[2] = "[ ";
      stringArray0[3] = "v8lf";
      stringArray0[4] = "";
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, 648.9376588);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2390.6555);
      doubleArray0[2] = (-1856.54);
      doubleArray0[3] = (-1856.54);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      float[] floatArray0 = new float[11];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-676.258F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(11, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "4l<a{3_ &=U-yt";
      stringArray0[2] = "[ ";
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3389.7678;
      doubleArray1[1] = 3389.7678;
      doubleArray1[2] = (-817.1835302);
      doubleArray1[3] = 3389.7678;
      doubleArray1[4] = (-621.5);
      doubleArray1[5] = (-621.5);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3389.7678, 3389.7678, (-817.1835302), 3389.7678, (-621.5), (-621.5)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-817.1835302);
      double[] doubleArray4 = MathArrays.scale(1.80143987944461E16, doubleArray3);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
      assertArrayEquals(new double[] {(-817.1835302)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-1.4721070001276086E19)}, doubleArray4, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-573);
      intArray0[1] = (-858);
      intArray0[2] = 5997;
      intArray0[3] = 110;
      intArray0[4] = 0;
      double double0 = MathArrays.distance(doubleArray3, doubleArray4);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
      assertArrayEquals(new double[] {(-817.1835302)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-1.4721070001276086E19)}, doubleArray4, 0.01);
      assertEquals(1.4721070001276086E19, double0, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1677.3);
      doubleArray0[1] = 40.0378243867;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1677.3), 40.0378243867}, doubleArray0, 0.01);
      assertEquals(1677.7777914198352, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[1] = 2987;
      doubleArray0[0] = (double) 2182;
      intArray0[3] = 0;
      intArray0[4] = 154;
      intArray0[5] = 0;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 19.422113F;
      floatArray0[1] = 1.0F;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 19.422113F;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 19.422113F;
      doubleArray0[5] = 6.283185307179586;
      doubleArray0[6] = (double) 1.0F;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {19.4221134185791, 6.283185307179586, 1.34217729E8, 1.0, 19.4221134185791, 6.283185307179586, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {19.4221134185791, 6.283185307179586, 1.34217729E8, 1.0, 19.4221134185791, 6.283185307179586, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Double double0 = new Double((-3046.7913864122315));
      assertNotNull(double0);
      assertEquals((-3046.7913864122315), (double)double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {19.422113F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (19.422 >= 6.283)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[1];
      intArray0[0] = (-2477);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {(-2477)}, intArray0);
      assertArrayEquals(new int[] {(-2477)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double1 = MathArrays.linearCombination(1941.0, 0.0, 1341.21182791298, (double) Integer.MAX_VALUE, 2.092571258544922, (double) Integer.MAX_VALUE);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.8847242301640103E12, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][1];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 870.952832172;
      doubleArray0[1] = 794.946111;
      doubleArray0[2] = 6.52E18;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {870.952832172, 794.946111, 6.52E18}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-817.1835302);
      doubleArray0[0] = (-817.1835302);
      doubleArray0[1] = 6.283185307179586;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-817.184 <= 6.283)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 19.422113F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 62.10079F;
      int int0 = Integer.MAX_VALUE;
      double[][] doubleArray0 = new double[9][5];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      doubleArray0[7] = null;
      doubleArray0[8] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1188.3;
      doubleArray0[1] = 280.1183;
      double double0 = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1919.045);
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[0] = doubleArray0;
      int[] intArray0 = new int[8];
      intArray0[0] = (-2249);
      intArray0[1] = (-2477);
      intArray0[2] = (-46);
      intArray0[3] = (-2477);
      intArray0[4] = (-2477);
      intArray0[5] = (-46);
      intArray0[6] = 274;
      intArray0[7] = (-46);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-2249), (-2477), (-46), (-2477), (-2477), (-46), 274, (-46)}, intArray1);
      assertArrayEquals(new int[] {(-2249), (-2477), (-46), (-2477), (-2477), (-46), 274, (-46)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1188.3, 280.1183, 1.0, (-1919.045)}, doubleArray0, 0.01);
      assertEquals(5173257.86401989, double1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double2 = MathArrays.linearCombination((-1919.045), (double) 274, 3447.7381029501475, 355.2478864139, (-1919.045), (-1919.045));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(4381717.056006709, double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1095.4758779;
      doubleArray0[1] = 3389.768;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-621.5);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3389.768, 0.0, (-621.5)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.1490527093824001E7, 0.0, (-4213481.624), 0.0, 386262.25}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale(1.304E19, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 3389.768, 0.0, (-621.5)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.1490527093824001E7, 0.0, (-4213481.624), 0.0, 386262.25}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.4983647330346498E26, 0.0, (-5.494380037696E25), 0.0, 5.03685974E24}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1095.4758779;
      doubleArray0[1] = 3389.7678;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-621.5);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {1095.4758779, 3389.7678, 0.0, (-621.5)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1200067.3990607755, 7426817.7131643025, 1.149052573791684E7, (-1361676.5162296998), (-4213481.3754), 0.0, 386262.25}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale(1.304E19, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {1095.4758779, 3389.7678, 0.0, (-621.5)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1200067.3990607755, 7426817.7131643025, 1.149052573791684E7, (-1361676.5162296998), (-4213481.3754), 0.0, 386262.25}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.5648878883752513E25, 9.68457029796625E25, 1.498364556224356E26, (-1.7756261771635286E25), (-5.4943797135216E25), 0.0, 5.03685974E24}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-858);
      intArray0[2] = 5997;
      intArray0[3] = 0;
      intArray0[4] = (-2501);
      intArray0[5] = (-573);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-60.22020469002);
      doubleArray0[1] = (-786.05312729054);
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertArrayEquals(new double[] {(-60.22020469002), (-786.05312729054), 6.283185307179586, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertEquals(11, doubleArray2.length);
      assertArrayEquals(new double[] {(-60.22020469002), (-786.05312729054), 6.283185307179586, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray0, 1677.3);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      assertArrayEquals(new double[] {(-60.22020469002), (-786.05312729054), 6.283185307179586, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {120.24825496655018, 1569.5980668652821, (-12.546321831832385), -0.0, -0.0, -0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 170.4451;
      doubleArray0[1] = 170.4451;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 100.0;
      doubleArray0[4] = 917.95741498697;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2249.3337;
      doubleArray0[2] = 0.0;
      double double0 = (-1.0);
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2249.3337, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(1003.9008140746, 0.0, Double.NaN, 1.8014398509481984E16);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.8014398509481984E16;
      doubleArray1[1] = 2249.3337;
      doubleArray1[2] = 1003.9008140746;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1003.9008140746;
      doubleArray1[6] = (-1.0);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "4l<a{3_ &=U-yt";
      stringArray0[2] = "[ ";
      stringArray0[3] = "v8lf";
      double double0 = 1320.2611583559;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-817.1835302);
      doubleArray0[1] = 6.283185307179586;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-817.1835302), 6.283185307179586}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-817.1835302), 6.283185307179586}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$VALUES";
      stringArray0[1] = "empty polynomials coefficients array";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      double double0 = (-786.05312729054);
      double double1 = 6.283185307179586;
      double double2 = 0.0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      double double3 = (-2163.9591247988724);
      doubleArray0[2] = (-2163.9591247988724);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-2163.9591247988724), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 4682719.093800302, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-786.05312729054);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (-2163.9591247988724);
      doubleArray2[5] = (double) 0;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = 4338;
      Object[] objectArray0 = MathArrays.buildArray(field0, 4338);
      assertNotNull(objectArray0);
      assertEquals(4338, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4338;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {4338.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Field<Object> field1 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field1, 4338, 4338);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "4l<a{3_ &=U-yt";
      stringArray0[2] = "[ ";
      stringArray0[3] = "v8lf";
      stringArray0[4] = "";
      stringArray0[5] = "BVNIsSRh8?sY9>K";
      stringArray0[6] = "doOC";
      stringArray0[7] = "$VALUES";
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "4l<a{3_ &=U-yt";
      stringArray0[2] = "[ ";
      stringArray0[3] = "v8lf";
      stringArray0[4] = "";
      stringArray0[5] = "BVNIsSRh8?sY9>K";
      stringArray0[6] = "doOC";
      stringArray0[7] = "$VALUES";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      double double0 = new Integer(0);
      assertEquals(0, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0;
      doubleArray0[2] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-60.22020469002);
      doubleArray0[1] = (-786.05312729054);
      doubleArray0[2] = 6.283185307179586;
      int int0 = 0;
      int int1 = (-3043);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-3043));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 19.422113F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 62.10079F;
      int[] intArray0 = new int[3];
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[1] = (-2477);
      intArray0[2] = (-46);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {0, (-2477), (-46)}, intArray0);
      assertArrayEquals(new int[] {0, (-2477), (-46)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-46);
      doubleArray0[1] = 1320.2611583559;
      doubleArray0[2] = (double) 19.422113F;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-46.0), 1320.2611583559, 19.4221134185791}, doubleArray0, 0.01);
      assertEquals(1745582.7447529072, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double1 = MathArrays.linearCombination(1320.2611583559, (double) 1.0F, 1.304E19, (double) 62.10079F, 355.2478864139, 1745582.7447529072);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(8.097942770391944E20, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4.6209784774588);
      doubleArray0[2] = (-903.203411003);
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 3963.9454761144298;
      doubleArray0[5] = (-3.141592653589793);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-4.6209784774588), (-903.203411003), 1.34217729E8, 3963.9454761144298, (-3.141592653589793)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-4.6209784774588), (-903.203411003), 1.34217729E8, 3963.9454761144298, (-3.141592653589793)}, doubleArray0, 0.01);
      assertEquals(1.3421772906157407E8, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-4.6209784774588), (-903.203411003), 1.34217729E8, 3963.9454761144298, (-3.141592653589793)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-4.6209784774588), (-903.203411003), 1.34217729E8, 3963.9454761144298, (-3.141592653589793)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 782;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 782;
      floatArray0[2] = 1511.4908F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 782;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (float) 782;
      floatArray1[3] = 0.0F;
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(4, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 782.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 782.0F, 1511.4908F, 0.0F, 0.0F, 782.0F}, floatArray0, 0.01F);
      assertFalse(boolean2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1566.6854088), (-1566.6854088), 6.283185307179586, 6.283185307179586, 1816.2978, 0.0, 944.0583, 6.283185307179586);
      assertEquals(2460474.3418041086, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1566.6854088);
      doubleArray0[2] = (-3.141592653589793);
      doubleArray0[3] = 6.283185307179586;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-1566.6854088), (-3.141592653589793), 6.283185307179586}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, (-1492));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-60.22020469002);
      doubleArray0[1] = (-786.05312729054);
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertArrayEquals(new double[] {(-60.22020469002), (-786.05312729054), 6.283185307179586, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertEquals(11, doubleArray2.length);
      assertArrayEquals(new double[] {(-60.22020469002), (-786.05312729054), 6.283185307179586, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray0, 1677.3);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      assertArrayEquals(new double[] {(-60.22020469002), (-786.05312729054), 6.283185307179586, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {120.24825496655018, 1569.5980668652821, (-12.546321831832385), -0.0, -0.0, -0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      double[] doubleArray4 = null;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      
      doubleArray5[0] = 6.283185307179586;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-865.22046F);
      floatArray0[4] = (-457.41F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1511.4908F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, (-865.22046F), (-457.41F), 0.0F, 1511.4908F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1511.4908F;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1511.4908447265625}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][0];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {1511.4908447265625}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2.17333333333333325E18;
      doubleArray2[1] = (double) 1511.4908F;
      doubleArray2[2] = (double) 0.0F;
      doubleArray2[3] = (double) (-865.22046F);
      doubleArray2[4] = (double) 1511.4908F;
      doubleArray2[5] = (double) 1511.4908F;
      doubleArray2[6] = (double) 0.0F;
      doubleArray2[7] = (double) 1.0F;
      doubleArray2[8] = (double) 0.0F;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-618.76F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-618.76F);
      floatArray0[3] = (-618.76F);
      floatArray0[4] = 1908.0F;
      floatArray0[5] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-618.76F), (-1.0F), (-618.76F), (-618.76F), 1908.0F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[1];
      longArray1[0] = 530L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 530L;
      longArray2[1] = 0L;
      longArray2[2] = 530L;
      longArray2[3] = 0L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1306.7F);
      floatArray0[2] = 1225.186F;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 170.4451;
      doubleArray0[1] = 412.0;
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 100.0;
      doubleArray0[4] = 917.95741498697;
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 1003.9008140746;
      doubleArray0[7] = 0.0;
      doubleArray0[0] = (-1.0);
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 412.0, 0.0, 100.0, 917.95741498697, 1.34217729E8, 1003.9008140746, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.linearCombination((-1.0), 170.4451, 0.0, 1.7976931348623157E308);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-170.4451), double2, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.34217729E8;
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 917.95741498697;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 489.2268305;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1.34217729E8, 489.2268305}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.801439877791744E16, 1.3132582831115587E11, 239342.89168107574}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-615);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-615));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-817.1835302);
      doubleArray0[1] = 6.283185307179586;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3466.949F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-3466.949F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 4281, (-1665));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1566.6854088), 1065.43952, 6.283185307179586, 6.283185307179586, 1816.2978, 0.0, 944.0583, 6.283185307179586);
      assertEquals((-1663237.3782855903), double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1065.43952;
      doubleArray0[2] = (-3.141592653589793);
      doubleArray0[3] = 6.283185307179586;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1065.43952, (-3.141592653589793), 6.283185307179586}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "INCREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1677.3);
      doubleArray0[1] = 40.0378243867;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1677.3), 40.0378243867}, doubleArray0, 0.01);
      assertEquals(1677.7777914198352, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 172;
      intArray0[1] = 2987;
      intArray0[2] = 2182;
      intArray0[3] = 0;
      intArray0[4] = 154;
      intArray0[5] = 0;
      intArray0[6] = 2555;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {172, 2987, 2182, 0, 154, 0, 2555}, intArray0);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1677.3), 40.0378243867}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      double[][] doubleArray1 = new double[6][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {40.0378243867, (-1677.3)}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2182;
      intArray1[1] = 0;
      intArray1[2] = (-2005);
      intArray1[3] = 1283;
      intArray1[4] = 154;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 2555;
      int int1 = MathArrays.distanceInf(intArray0, intArray1);
      assertFalse(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {172, 2987, 2182, 0, 154, 0, 2555}, intArray0);
      assertArrayEquals(new int[] {2182, 0, (-2005), 1283, 154, 0, 0, 2555}, intArray1);
      assertEquals(4187, int1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-60.22020469002);
      doubleArray0[1] = (-786.05312729054);
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 0.0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2696.45F;
      floatArray0[1] = (-1260.266F);
      floatArray0[2] = 0.5F;
      floatArray0[3] = (-996.0F);
      doubleArray0[3] = (double) (-2229.57F);
      floatArray0[5] = (-4295.1167F);
      floatArray0[6] = Float.POSITIVE_INFINITY;
      floatArray0[7] = (-867.894F);
      floatArray0[5] = 912.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {2696.45F, (-1260.266F), 0.5F, (-996.0F), 0.0F, 912.0F, Float.POSITIVE_INFINITY, (-867.894F), 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-60.22020469002), (-786.05312729054), 6.283185307179586, (-2229.570068359375), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2414);
      intArray0[1] = (-5734);
      int int0 = (-1198);
      intArray0[2] = (-1198);
      intArray0[3] = 2404;
      int int1 = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int2 = 2;
      intArray0[6] = 2;
      int int3 = (-2721);
      intArray0[7] = (-2721);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {(-2414), (-5734), (-1198), 2404, 0, 0, 2, (-2721)}, intArray0);
      assertArrayEquals(new int[] {(-2414), (-5734), (-1198), 2404, 0, 0, 2, (-2721)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray2.length);
      assertArrayEquals(new int[] {(-2414), (-5734), (-1198), 2404, 0, 0, 2, (-2721)}, intArray0);
      assertArrayEquals(new int[] {(-2414), (-5734), (-1198), 2404, 0, 0, 2, (-2721)}, intArray1);
      assertArrayEquals(new int[] {(-2414), (-5734), (-1198), 2404, 0, 0, 2, (-2721)}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      int[] intArray3 = MathArrays.copyOf(intArray2);
      assertNotNull(intArray3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray2.length);
      assertEquals(8, intArray3.length);
      assertArrayEquals(new int[] {(-2414), (-5734), (-1198), 2404, 0, 0, 2, (-2721)}, intArray0);
      assertArrayEquals(new int[] {(-2414), (-5734), (-1198), 2404, 0, 0, 2, (-2721)}, intArray1);
      assertArrayEquals(new int[] {(-2414), (-5734), (-1198), 2404, 0, 0, 2, (-2721)}, intArray2);
      assertArrayEquals(new int[] {(-2414), (-5734), (-1198), 2404, 0, 0, 2, (-2721)}, intArray3);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1060.1593428);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 107.8830388619;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 423.0;
      doubleArray0[7] = 1.304E19;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1060.1593428), 0.0, 0.0, 107.8830388619, 0.0, 0.0, 423.0, 1.304E19}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 121);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertEquals(121, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 152;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 152);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 2146764945, (-656));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 4338;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 4338);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 641.87356515;
      doubleArray0[1] = (-2798.300716812664);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-653.063);
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 278.18533305499;
      doubleArray0[6] = (-1831.97);
      doubleArray0[7] = (-3.141592653589793);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {641.87356515, (-2798.300716812664), 0.0, (-653.063), 1.34217729E8, 278.18533305499, (-1831.97), (-3.141592653589793)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 259.519764;
      double[][] doubleArray1 = new double[9][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 259.519764;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 259.519764;
      doubleArray2[4] = 259.519764;
      doubleArray2[5] = 0.0;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4.6209784774588);
      doubleArray0[2] = (-903.203411003);
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 3963.9454761144298;
      doubleArray0[5] = (-3.141592653589793);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-4.6209784774588), (-903.203411003), 1.34217729E8, 3963.9454761144298, (-3.141592653589793)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-4.6209784774588), (-903.203411003), 1.34217729E8, 3963.9454761144298, (-3.141592653589793)}, doubleArray0, 0.01);
      assertEquals(1.3421772906157407E8, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-4.6209784774588), (-903.203411003), 1.34217729E8, 3963.9454761144298, (-3.141592653589793)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-4.6209784774588), (-903.203411003), 1.34217729E8, 3963.9454761144298, (-3.141592653589793)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 782;
      intArray0[1] = 1993;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-468);
      intArray0[5] = (-2812);
      intArray0[6] = (-766);
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 782;
      intArray1[1] = (-766);
      intArray1[2] = (-2812);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 996.1111190618747;
      doubleArray0[2] = 3.32;
      doubleArray0[3] = (-1504.0);
      doubleArray0[4] = (-835.0);
      doubleArray0[5] = (-1776.388825);
      doubleArray0[6] = 1.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (996.111 >= 3.32)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1;
      int int1 = 134217729;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1, 134217729);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 1941.0;
      doubleArray0[0] = 1941.0;
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      double double2 = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      String string0 = "nf_d{`nxW~=eJT% *E";
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("nf_d{`nxW~=eJT% *E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.nf_d{`nxW~=eJT% *E
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "4l<a{3_ &=U-yt";
      stringArray0[2] = "[ ";
      stringArray0[3] = "v8lf";
      stringArray0[4] = "";
      stringArray0[5] = "BVNIsSRh8?sY9>K";
      stringArray0[6] = "doOC";
      stringArray0[7] = "$VALUES";
      stringArray0[8] = "INCREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 508;
      intArray0[5] = 0;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 508;
      doubleArray0[3] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[][] doubleArray1 = new double[7][1];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-1570.94262985);
      doubleArray0[0] = (-1570.94262985);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1239.68848635901);
      doubleArray0[2] = 3.32;
      doubleArray0[3] = 2506.2410863329587;
      doubleArray0[4] = (-1122.235694736224);
      doubleArray0[5] = (-1996.516);
      doubleArray0[6] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 213;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MathArrays.linearCombination(Double.NaN, Double.NaN, (-364.4063385387), (-24.0568756), 1990.191515, Double.NaN, 0.0, 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-24.0568756);
      doubleArray0[1] = 1990.191515;
      doubleArray0[2] = 1990.191515;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-48.1137512), 3980.38303, 3980.38303, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4658.648;
      doubleArray0[1] = 4658.648;
      doubleArray0[2] = 0.0;
      MathArrays.scaleInPlace(4658.648, doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 3191;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MathArrays.linearCombination((-1566.6854088), 1065.43952, 6.283185307179586, 6.283185307179586, 1816.2978, 0.0, 944.0583, 6.283185307179586);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1065.43952;
      doubleArray0[2] = (-3.141592653589793);
      doubleArray0[3] = 6.283185307179586;
      MathArrays.copyOf(doubleArray0, 0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = 0L;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-60.22020469002);
      doubleArray0[1] = (-786.05312729054);
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 737.626;
      doubleArray0[5] = (-1.0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2249.3337;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.304E19;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2030.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,030 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-4711);
      intArray0[1] = 15;
      intArray0[2] = 0;
      intArray0[3] = (-493);
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = (-493);
      intArray1[2] = (-4711);
      intArray1[3] = 15;
      intArray1[4] = (-493);
      intArray1[5] = (-4711);
      intArray1[6] = 0;
      intArray1[7] = (-493);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(10438, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1306.7F);
      floatArray0[2] = 1225.186F;
      floatArray0[3] = 1908.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-1.0F);
      floatArray0[8] = (-618.76F);
      MathArrays.equals(floatArray0, floatArray0);
      long[][] longArray0 = new long[7][6];
      long[] longArray1 = new long[9];
      longArray1[0] = 0L;
      longArray1[1] = 2813L;
      longArray1[2] = 391L;
      longArray1[3] = (-1L);
      longArray1[4] = 530L;
      longArray1[5] = 0L;
      longArray1[6] = 1L;
      longArray1[7] = 0L;
      longArray1[8] = 392L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = 2813L;
      longArray2[1] = 391L;
      longArray2[2] = 1L;
      longArray2[3] = 391L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = 1023L;
      longArray3[1] = 2813L;
      longArray3[2] = 0L;
      longArray3[3] = 391L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = (-1L);
      longArray5[1] = 2813L;
      longArray5[2] = 530L;
      longArray5[3] = 1023L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[9];
      longArray6[0] = 0L;
      longArray6[1] = (-1318L);
      longArray6[2] = 0L;
      longArray6[3] = (-1L);
      longArray6[4] = 0L;
      longArray6[5] = 530L;
      longArray6[6] = 0L;
      longArray6[7] = (-1L);
      longArray6[8] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      longArray7[0] = 1023L;
      longArray7[1] = (-1L);
      longArray7[2] = 0L;
      longArray7[3] = 0L;
      longArray7[4] = (-1318L);
      longArray7[5] = (-1L);
      longArray7[6] = (-1L);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2390.6555);
      doubleArray0[2] = (-1856.54);
      doubleArray0[3] = (-1577.4575624335);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      int int0 = 310;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 310, 310);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MathArrays.OrderDirection.values();
      long[][] longArray0 = new long[8][0];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = (-2722L);
      longArray1[2] = (-1112L);
      longArray1[3] = 4629L;
      longArray1[4] = 4503599627370495L;
      longArray1[5] = (-6479L);
      longArray1[6] = 1068L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 4503599627370495L;
      longArray2[1] = 1L;
      longArray2[2] = 1023L;
      longArray2[3] = (-2722L);
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = 0L;
      longArray3[1] = 4503599627370495L;
      longArray3[2] = 1068L;
      longArray3[3] = 1023L;
      longArray3[4] = 0L;
      longArray3[5] = (-2722L);
      longArray3[6] = (-2722L);
      longArray3[7] = 1068L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      longArray4[0] = 4503599627370495L;
      longArray4[1] = (-6479L);
      longArray4[2] = 0L;
      longArray4[3] = (-1112L);
      longArray4[4] = 1L;
      longArray4[5] = 1023L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      longArray5[0] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      longArray6[0] = (-6479L);
      longArray6[1] = 1068L;
      longArray6[2] = 0L;
      longArray6[3] = 0L;
      longArray6[4] = 0L;
      longArray6[5] = 4503599627370495L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[8];
      longArray7[0] = 4629L;
      longArray7[1] = (-6479L);
      longArray7[2] = 0L;
      longArray7[3] = 1023L;
      longArray7[4] = 0L;
      longArray7[5] = 4503599627370495L;
      longArray7[6] = 0L;
      longArray7[7] = (-1112L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[2];
      longArray8[0] = (-1112L);
      longArray8[1] = 1023L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1095.4758779;
      doubleArray0[1] = 3389.7678;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-621.5);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.scale(1.304E19, doubleArray1);
      assertArrayEquals(new double[] {1.5648878883752513E25, 9.68457029796625E25, 1.498364556224356E26, (-1.7756261771635286E25), (-5.4943797135216E25), 0.0, 5.03685974E24}, doubleArray2, 0.01);
      assertEquals(7, doubleArray2.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-858);
      intArray0[2] = 5997;
      intArray0[3] = 0;
      intArray0[4] = (-2501);
      intArray0[5] = (-573);
      intArray0[6] = 0;
      intArray0[7] = (-965);
      intArray0[8] = (-1711);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MathArrays.linearCombination(2166.0, 2166.0, 2166.0, 1.7976931348623157E308);
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.linearCombination((-3739.34), Double.POSITIVE_INFINITY, 2166.0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-3739.34), (-1.0));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3739.34);
      doubleArray0[1] = (-3739.34);
      doubleArray0[2] = 2166.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 1.7976931348623157E308;
      doubleArray0[7] = (-1.0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, 0.0, 0.0, -0.0, Double.NaN, 0.0, -0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-817.1835302);
      doubleArray0[1] = 6.283185307179586;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {(-817.1835302), 6.283185307179586}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1188.3;
      doubleArray0[1] = 280.1183;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1919.045);
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      Integer[] integerArray0 = new Integer[5];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      try { 
        Integer.valueOf("org.apache.commons.math3.util.MathArrays$1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.commons.math3.util.MathArrays$1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 378.5064195;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1987.90814;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1028.7;
      doubleArray0[6] = (-2153.5);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[0][1];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2153.5), (-1.0), 0.0, 0.0, 378.5064195, 1028.7, 1987.90814}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-260);
      intArray0[1] = 2;
      intArray0[2] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {(-260), 2, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 511.12691627497446;
      doubleArray0[4] = 517.4196;
      doubleArray0[5] = (-1370.6157178792055);
      doubleArray0[6] = (-377.73539821);
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1370.6157178792055);
      doubleArray1[2] = 511.12691627497446;
      doubleArray1[3] = 517.4196;
      doubleArray1[4] = (-377.73539821);
      doubleArray1[5] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-1,370.616 < 511.127)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      int[] intArray0 = new int[2];
      intArray0[0] = 16;
      intArray0[1] = 0;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.linearCombination((double) 0, 0.0, 3.834E-20, 0.0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 16;
      longArray0[1] = (long) 16;
      longArray0[2] = (long) 0;
      longArray0[3] = (-43L);
      longArray0[4] = (long) 0;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -43 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 170.4451;
      doubleArray0[1] = 412.0;
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 100.0;
      doubleArray0[4] = 917.95741498697;
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 1003.9008140746;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1.0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-1.0), 170.4451, (-1.0), 1.7976931348623157E308);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.34217729E8;
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 917.95741498697;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
