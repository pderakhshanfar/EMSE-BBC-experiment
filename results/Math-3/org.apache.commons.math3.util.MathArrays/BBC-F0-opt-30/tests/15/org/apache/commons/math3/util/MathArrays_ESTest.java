/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 07:14:58 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = Float.POSITIVE_INFINITY;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {Float.POSITIVE_INFINITY}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[4] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[5] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[6] = (double) Float.POSITIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.304E19, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<Double> fieldElement0 = (FieldElement<Double>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      FieldElement<Double> fieldElement1 = (FieldElement<Double>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      FieldElement<Double> fieldElement2 = (FieldElement<Double>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0).when(field0).getZero();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 47;
      doubleArray0[1] = (double) 47;
      doubleArray0[2] = (double) 47;
      doubleArray0[3] = (double) 47;
      doubleArray0[4] = (double) 47;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {47.0, 47.0, 47.0, 47.0, 47.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {94.0, 94.0, 94.0, 94.0, 94.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      FieldElement<Double>[] fieldElementArray0 = MathArrays.buildArray(field0, 47);
      assertEquals(47, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-904.2F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2422.3037F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-690.3828F);
      floatArray0[6] = Float.POSITIVE_INFINITY;
      floatArray0[7] = (-1235.87F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-904.2F), 0.0F, 0.0F, 2422.3037F, (-1.0F), (-690.3828F), Float.POSITIVE_INFINITY, (-1235.87F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2422.3037F;
      doubleArray0[1] = (double) (-904.2F);
      doubleArray0[2] = (double) Float.POSITIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, 1.801439878206224E16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Double>[][] fieldElementArray0 = MathArrays.buildArray(field0, 47, (-294));
      assertEquals(47, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3551.467282994);
      doubleArray0[1] = 3182.9467029527177;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3551.467282994), 3182.9467029527177}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals((-368.5205800412823), double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3551.467282994), 3182.9467029527177}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "FIRST_ELEMENT_NOT_ZERO";
      stringArray0[1] = "{iDi@dV4FKM";
      stringArray0[2] = "{iDi@dV4FKM";
      stringArray0[3] = "INCREASING";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      double double1 = MathArrays.linearCombination(1.34217729E8, 0.0, 0.0, 3.834E-20);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147483599);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 28.316066876963806;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 28.316066876963806;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.7976931348623157E308, 28.316066876963806, 1.7976931348623157E308, 28.316066876963806}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.7976931348623157E308, 28.316066876963806, 1.7976931348623157E308, 28.316066876963806}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {28.316066876963806, 1.7976931348623157E308, 28.316066876963806, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 28.316066876963806;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 2362.0743647087515;
      doubleArray0[3] = 1.7976931348623157E308;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308, 2362.0743647087515, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308, 2362.0743647087515, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int int0 = 415;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 415);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308, 2362.0743647087515, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(415, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 1228;
      int int1 = 2147483263;
      // Undeclared exception!
      MathArrays.buildArray(field0, 1228, 2147483263);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1372.01365);
      doubleArray0[1] = 5.669184079525E-24;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1372.01365, double0, 0.01);
      assertArrayEquals(new double[] {(-1372.01365), 5.669184079525E-24}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1372.01365), 5.669184079525E-24}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.scaleInPlace(3.213964812753972E-47, doubleArray0);
      assertArrayEquals(new double[] {(-4.409603593718144E-44), 1.8220558148618364E-70}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {(-4.409603593718144E-44), 1.8220558148618364E-70}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double3 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertArrayEquals(new double[] {(-4.409603593718144E-44), 1.8220558148618364E-70}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 835);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4.409603593718144E-44), 1.8220558148618364E-70}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(835, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long[] longArray0 = new long[17];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(17, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1145.17842);
      doubleArray0[1] = 3594.0926264682707;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-2.957007209750105E-8);
      doubleArray0[4] = (-2399.658453603231);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = (-1217.0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {(-1145.17842), 3594.0926264682707, 1.0, (-2.957007209750105E-8), (-2399.658453603231), 3.834E-20, 1.304E19, (-1217.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-637), (-637));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1555.76);
      doubleArray0[3] = (-1135.5659);
      doubleArray0[4] = (-345.579);
      doubleArray0[5] = (-801.02955);
      doubleArray0[6] = 1009.9569702148438;
      doubleArray0[7] = 1748.6;
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.34217729E8, Double.NaN, (-1555.76), (-1135.5659), (-345.579), (-801.02955), 1009.9569702148438, 1748.6}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.020408160832463558;
      doubleArray0[1] = 0.07073719799518585;
      doubleArray0[2] = 4048.0;
      doubleArray0[3] = 1648.7493197263;
      doubleArray0[4] = (-2.5857668567479893E-8);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.020408160832463558, 0.07073719799518585, 4048.0, 1648.7493197263, (-2.5857668567479893E-8)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-18);
      intArray0[1] = (-2146401557);
      intArray0[2] = 1;
      intArray0[3] = 3;
      intArray0[4] = 390;
      intArray0[5] = 206;
      intArray0[6] = 10;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1073741824;
      intArray1[1] = 390;
      intArray1[2] = (-18);
      intArray1[3] = 390;
      intArray1[4] = 3;
      intArray1[5] = 1582;
      intArray1[6] = 10;
      intArray1[7] = 3;
      intArray1[8] = 3;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals((-1074821338), int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-18), (-2146401557), 1, 3, 390, 206, 10}, intArray0);
      assertArrayEquals(new int[] {1073741824, 390, (-18), 390, 3, 1582, 10, 3, 3}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2097;
      intArray0[1] = 2131288093;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2131288093;
      intArray1[1] = 2131288093;
      intArray1[2] = 2097;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(2131285996, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2097, 2131288093}, intArray0);
      assertArrayEquals(new int[] {2131288093, 2131288093, 2097}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][0];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      assertEquals(MathArrays.OrderDirection.INCREASING, mathArrays_OrderDirection0);
      
      float[] floatArray0 = new float[3];
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1933.031F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 1933.031F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1933.031F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1933.031F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      FieldElement<Double>[][] fieldElementArray0 = MathArrays.buildArray(field0, 47, 47);
      assertEquals(47, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "(x?-PWeJS\"Un?";
      stringArray0[1] = "#0wY95PR#e:?HRFn";
      stringArray0[2] = "list of chromosomes bigger than maxPopulationSize";
      stringArray0[3] = "#0wY95PR#e:?HRFn";
      stringArray0[4] = "3\"0tW9#=E2Y(YN/^";
      stringArray0[5] = "8'v/";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1061.077479328663);
      doubleArray2[1] = (-0.010714690733195933);
      doubleArray2[2] = 3282.38178818;
      doubleArray2[3] = 1.34217729E8;
      doubleArray2[4] = 3034.0269531;
      doubleArray2[5] = 2077.2;
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 3238.8816F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 3238.8816F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      long[][] longArray0 = new long[1][8];
      long[] longArray1 = new long[5];
      longArray1[0] = 334L;
      longArray1[1] = 3422L;
      longArray1[2] = 3653L;
      longArray1[3] = 4398046511103L;
      longArray1[4] = (-344L);
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -344 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[2][2];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 2362.3837;
      doubleArray0[3] = 1.7976931348623157E308;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308, 2362.3837, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308, 2362.3837, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 179;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1073741823);
      doubleArray0[1] = (-95.9485496612539);
      doubleArray0[2] = (double) 179;
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = 2.608E18;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1.073741823E9), (-95.9485496612539), 179.0, (-3.141592653589793), 2.608E18}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.608E18, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1.073741823E9), (-95.9485496612539), 179.0, (-3.141592653589793), 2.608E18}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 151.8;
      doubleArray0[0] = 151.8;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[][] doubleArray1 = new double[8][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 2362.3837;
      doubleArray0[3] = (-3.141592653589793);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308, 2362.3837, (-3.141592653589793)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.7976931348623157E308, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308, 2362.3837, (-3.141592653589793)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1677.84665891021);
      doubleArray1[1] = (-1677.84665891021);
      doubleArray1[2] = (-1677.84665891021);
      Double double0 = new Double((-1677.84665891021));
      assertEquals((-1677.84665891021), (double)double0, 0.01);
      assertNotNull(double0);
      
      MathArrays.scaleInPlace((-642.2272377533802), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      try { 
        MathArrays.convolve((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, (double[]) null);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[][] doubleArray2 = new double[4][9];
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-2653.65);
      doubleArray3[1] = (-5544.53662109375);
      doubleArray3[2] = Double.NaN;
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = null;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 2657.8F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3067.2F;
      floatArray0[4] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {3.4028235E38F, 2657.8F, 0.0F, 3067.2F, Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4505.603874306;
      doubleArray0[1] = 4505.603874306;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {4505.603874306, 4505.603874306}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4505.603874306;
      doubleArray1[1] = 4505.603874306;
      doubleArray1[2] = 4505.603874306;
      doubleArray1[3] = 4505.603874306;
      doubleArray1[4] = 4505.603874306;
      doubleArray1[5] = 2.6251270265589334E14;
      doubleArray1[6] = 4.116164446561962E-8;
      doubleArray1[7] = 4505.603874306;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertTrue(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4505.603874306, 4505.603874306, 4505.603874306, 4505.603874306, 4505.603874306, 2.6251270265589334E14, 4.116164446561962E-8, 4505.603874306}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1032.07F;
      floatArray0[1] = (-1561.61F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {1032.07F, (-1561.61F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertTrue(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(13, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      boolean boolean3 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new float[] {1032.07F, (-1561.61F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1417.91F);
      floatArray0[1] = 1467.0466F;
      floatArray0[2] = (-573.411F);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1417.91F), 1467.0466F, (-573.411F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int int0 = 36;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(657);
      assertEquals(657, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-2871));
      assertEquals((-2871), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(36);
      assertEquals(36, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer4;
      integerArray0[1] = integer2;
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 657;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = (int) integerArray0[1];
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) integerArray0[1];
      intArray1[1] = (-2871);
      intArray1[2] = (-1);
      intArray1[3] = 657;
      intArray1[4] = 36;
      intArray1[5] = (-2871);
      intArray1[6] = (int) integerArray0[1];
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(5433.35467275973, double0, 0.01);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-2871), (-2871), (-1), 657, 36, (-2871), (-2871)}, intArray1);
      assertArrayEquals(new int[] {(-1), 657, 36, 36, (-2871)}, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(5, intArray0.length);
      
      Field<Pair<Integer, Double>> field0 = (Field<Pair<Integer, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2147483344, (-2595));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][4];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[18];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(18, intArray0.length);
      
      int int0 = 560;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 560);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 2413;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2413;
      doubleArray0[1] = (double) 2413;
      doubleArray0[2] = (double) 2413;
      doubleArray0[3] = (-2772.268310546875);
      doubleArray0[4] = (double) 2413;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2413.0, 2413.0, 2413.0, (-2772.268310546875), 2413.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4826.0, 4826.0, 4826.0, (-5544.53662109375), 4826.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {2413.0, 2413.0, 2413.0, (-2772.268310546875), 2413.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4826.0, 4826.0, 4826.0, (-5544.53662109375), 4826.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2413.0, 2413.0, 2413.0, (-2772.268310546875), 2413.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5822569.0, 1.1645138E7, 1.7467707E7, (-1733828.8666992188), 4088740.1333007812, (-1733828.8666992188), 1.9330609585662425E7, (-1.3378966866699219E7), 5822569.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "?]$d73]c2:S>fouz*";
      stringArray0[0] = "?]$d73]c2:S>fouz*";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-706.22F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-706.22F);
      floatArray0[3] = (-706.22F);
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-706.22F);
      floatArray1[1] = 501.6F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 355.39825F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-706.22F), 0.0F, (-706.22F), (-706.22F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-706.22F), 501.6F, 0.0F, 355.39825F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = -0.0F;
      floatArray0[4] = (float) 0;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = -0.0F;
      floatArray1[2] = (float) 0;
      floatArray1[5] = -0.0F;
      floatArray1[6] = (float) 0L;
      floatArray1[7] = -0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, -0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {-0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -0.0F, 0.0F, -0.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?]$d73]c2:S>fouz*";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      double double0 = 1.5897311383606068E26;
      doubleArray0[1] = 1.5897311383606068E26;
      double double1 = (-4908.1);
      doubleArray0[2] = (-4908.1);
      doubleArray0[3] = 3.834E-20;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 158,973,113,836,060,680,000,000,000)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "FIRST_ELEMENT_NOT_ZERO";
      stringArray0[1] = "{iDi@dV4FKM";
      stringArray0[2] = "{iDi@dV4FKM";
      stringArray0[3] = "INCREASING";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      double double1 = MathArrays.linearCombination(1.34217729E8, 0.0, 0.0, 3.834E-20);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2147483599);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination((-1701.3878267355906), 1.34217729E8, 4793.4686604, 3559.949053971, 3.834E-20, (-1701.3878267355906), (-202.4781523), (-601.764496));
      assertEquals((-2.2833922390431036E11), double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1.34217729E8, (-202.4781523), 489.3, Double.NaN);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[1][8];
      doubleArray3[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2965.4830104316);
      doubleArray2[1] = (-1.1199170055484122);
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2965.4830104316), (-1.1199170055484122)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1.1199170055484122);
      doubleArray3[1] = (-2965.4830104316);
      doubleArray3[2] = (-1.1199170055484122);
      doubleArray3[3] = (-2965.4830104316);
      doubleArray3[4] = (-2965.4830104316);
      doubleArray3[5] = (-2965.4830104316);
      double[] doubleArray4 = MathArrays.convolve(doubleArray3, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.1199170055484122), (-2965.4830104316), (-1.1199170055484122), (-2965.4830104316), (-2965.4830104316), (-2965.4830104316)}, doubleArray3, 0.01);
      assertEquals(6, doubleArray3.length);
      assertEquals(11, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      try { 
        MathArrays.ebeMultiply(doubleArray3, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 11
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, (-2110.4), (-604.5494), 0.0, (-604.5494));
      assertEquals(1275841.05376, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.scale(0.0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      MathArrays.checkPositive(doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray5 = new double[2][3];
      doubleArray5[0] = doubleArray2;
      doubleArray5[1] = doubleArray3;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray5.length);
      
      long[][] longArray0 = new long[5][0];
      long[] longArray1 = new long[9];
      longArray1[0] = 1290L;
      longArray1[1] = 10000L;
      longArray1[2] = 2596L;
      longArray1[3] = 598L;
      longArray1[4] = (-3958705157555305932L);
      longArray1[5] = 4577762542105553359L;
      longArray1[6] = 2641L;
      longArray1[7] = 2641L;
      longArray1[8] = 13L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 4577762542105553359L;
      longArray2[1] = 10000L;
      longArray2[2] = 2641L;
      longArray2[3] = 1290L;
      longArray2[4] = 2641L;
      longArray2[5] = 1290L;
      longArray2[6] = 4577762542105553359L;
      longArray2[7] = 2641L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-1L);
      longArray3[1] = 4577762542105553359L;
      longArray3[2] = (-3958705157555305932L);
      longArray3[3] = 9007199254740990L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-1L);
      longArray4[1] = 13L;
      longArray4[2] = 13L;
      longArray4[3] = 2641L;
      longArray4[4] = 9007199254740990L;
      longArray4[5] = 1290L;
      longArray4[6] = 9007199254740990L;
      longArray4[7] = 13L;
      longArray4[8] = 598L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (-1L);
      longArray5[1] = 1290L;
      longArray5[2] = (-3958705157555305932L);
      longArray5[3] = 1290L;
      longArray5[4] = 598L;
      longArray5[5] = 9007199254740990L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,958,705,157,555,305,932 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-5544.53662109375);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-5544.53662109375)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-230), (-30));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-5544.53662109375);
      doubleArray0[0] = (-5544.53662109375);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-5544.53662109375)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int0 = (-230);
      int int1 = (-30);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-230), (-30));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4025.201082399343);
      doubleArray0[1] = 93.6778444054;
      doubleArray0[2] = (-4025.201082399343);
      doubleArray0[3] = (-829.0);
      MathArrays.scaleInPlace((-642.2272377533802), doubleArray0);
      assertArrayEquals(new double[] {2585093.772551246, (-60162.46325117098), 2585093.772551246, 532406.3800975522, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1.3652495701319494E13, double0, 0.01);
      assertArrayEquals(new double[] {2585093.772551246, (-60162.46325117098), 2585093.772551246, 532406.3800975522, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2585093.772551246, (-60162.46325117098), 2585093.772551246, 532406.3800975522, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[][] longArray0 = new long[3][1];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) 0;
      longArray2[5] = (long) 0;
      longArray2[6] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 0;
      longArray3[1] = (long) 0;
      longArray3[2] = (long) 0;
      longArray3[3] = (long) 0;
      longArray3[4] = (long) 0;
      longArray0[2] = longArray3;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      double double1 = MathArrays.linearCombination(1757.1291709817, (double) 0L, (-592.8191), (double) 0L, (double) 0L, 1129.552679252812, 3286.193618784132, (double) 0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Integer integer0 = new Integer(36);
      assertEquals(36, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(657);
      assertEquals(657, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-2871));
      assertEquals((-2871), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer((-1));
      assertEquals((-1), (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      int int0 = (-11);
      Integer integer5 = new Integer((-11));
      assertEquals((-11), (int)integer5);
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer3;
      integerArray0[1] = integer2;
      integerArray0[2] = integer5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, integerArray0.length);
      
      double double0 = MathArrays.linearCombination((-12055.487203897675), 1.625, Double.NaN, (double) int0, (double) 657, 1.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-12055.487203897675);
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = 1.625;
      doubleArray1[3] = (double) 657;
      doubleArray1[4] = (-12055.487203897675);
      doubleArray1[5] = (double) 657;
      doubleArray1[6] = (double) (-2871);
      doubleArray1[7] = (double) int0;
      doubleArray1[8] = (double) (-11);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][3];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertArrayEquals(new double[] {(-11.0), (-11.0), 1.625, 657.0, (-12055.487203897675), (-12055.487203897675), (-2871.0), 657.0, (-11.0)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2413;
      int int0 = new Integer(2413);
      assertEquals(2413, int0);
      
      Integer integer0 = new Integer(2413);
      assertEquals(2413, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 2413;
      integerArray0[1] = (Integer) 2413;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integerArray0[4];
      integerArray0[6] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
      
      double double0 = MathArrays.linearCombination(3.834E-20, 1029.040450156, (double) integerArray0[0], (-3100.60917266), (double) integerArray0[4], 1.625);
      assertEquals((-7477848.80862858), double0, 0.01);
      assertEquals(7, integerArray0.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {2413, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = 1677.84665891021;
      double double1 = Double.NaN;
      double double2 = MathArrays.linearCombination(1677.84665891021, 507.72339042251, 1677.84665891021, Double.NaN, (-3.987935724218201), 0.041666663879186654);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.041666663879186654;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 507.72339042251;
      doubleArray0[3] = 507.72339042251;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.041666663879186654, Double.NaN, 507.72339042251, 507.72339042251}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0017361108788211178, Double.NaN, 257783.04118212854, 257783.04118212854}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.041666663879186654, Double.NaN, 507.72339042251, 507.72339042251}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0017361108788211178, Double.NaN, 257783.04118212854, 257783.04118212854}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1327.4887100368;
      doubleArray0[1] = Double.NaN;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1327.4887100368, Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1327.4887100368, Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {1327.4887100368, Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.scaleInPlace((-523.473), doubleArray0);
      assertArrayEquals(new double[] {(-694904.4975090937), Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-694904.4975090937), Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1389808.9950181874), Double.NaN}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 3504;
      intArray0[2] = 1;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 3504;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(1, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 3504, 1}, intArray0);
      assertArrayEquals(new int[] {0, 3504, 0, 0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(5, intArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 0;
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 3504;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 3504;
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {0.0, 1.0, 3504.0, 1.0, 0.0, 0.0, 0.0, 0.0, 3504.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1.0, 3504.0, 1.0, 0.0, 0.0, 0.0, 0.0, 3504.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 1.2278016E7, 1.0, 0.0, 0.0, 0.0, 0.0, 1.2278016E7}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[2][3];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 1.0, 3504.0, 0.0, 0.0, 0.0, 3504.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(1.2278016E7, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 1.0, 3504.0, 0.0, 0.0, 0.0, 3504.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.2278016E7, 1.2278016E7}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(2034.627424084495, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      long[][] longArray0 = new long[2][1];
      long[] longArray1 = new long[8];
      longArray1[0] = 2413L;
      longArray1[1] = 10000L;
      longArray1[2] = 10000L;
      longArray1[3] = 10000L;
      longArray1[4] = 10000L;
      longArray1[5] = 10000L;
      longArray1[6] = 10000L;
      longArray1[7] = 2L;
      longArray0[1] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 10000L;
      longArray2[1] = 2413L;
      longArray2[2] = 2L;
      longArray2[3] = 2L;
      longArray2[4] = 10000L;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 2.0;
      doubleArray2[2] = 2.0;
      doubleArray2[3] = 437.508410575051;
      doubleArray2[4] = 2.0;
      doubleArray2[5] = 2.0;
      doubleArray2[6] = 2.0;
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, (-700.0));
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 437.508410575051, 2.0, 2.0, 2.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-3.114513470858078), (-3.114513470858078), (-3.114513470858078), (-681.3129191748516), (-3.114513470858078), (-3.114513470858078), (-3.114513470858078)}, doubleArray3, 0.01);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4025.201082399343);
      doubleArray0[1] = 93.6778444054;
      doubleArray0[2] = (-4025.201082399343);
      doubleArray0[3] = (-829.0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-4025.201082399343), 93.6778444054, (-4025.201082399343), (-829.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      MathArrays.scaleInPlace(2.1016716560358658E11, doubleArray0);
      assertArrayEquals(new double[] {(-8.459651024723586E14), 1.968800703853672E13, (-8.459651024723586E14), (-1.7422858028537328E14), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      try { 
        MathArrays.convolve((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1335L;
      doubleArray2[1] = (double) 1335L;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) (-3455L);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) (-3455L);
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 3296.4;
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertFalse(boolean2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1335.0, 1335.0, 0.0, (-3455.0), 0.0, (-3455.0), 0.0, 0.0, 3296.4}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
      boolean boolean3 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.6251270265589334E14;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-2818.4794149262693);
      double double0 = 1444.71398199;
      doubleArray0[3] = 1444.71398199;
      doubleArray0[4] = 0.1666666505023083;
      double double1 = 92152.63779248987;
      doubleArray0[5] = 92152.63779248987;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.6251270265589334E14, (-1.0), (-2818.4794149262693), 1444.71398199, 0.1666666505023083, 92152.63779248987, 1.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.250254053117867E14, (-2.0), (-5636.958829852539), 2889.42796398, 0.3333333010046166, 184305.27558497974, 2.0, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 34);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.6251270265589334E14, (-1.0), (-2818.4794149262693), 1444.71398199, 0.1666666505023083, 92152.63779248987, 1.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(34, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 34 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?]$d73]c2:S>fouz*";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      double double0 = 0.0;
      double double1 = 445.547206;
      double double2 = MathArrays.linearCombination(445.547206, 438.0814403821772, 0.0, 438.0814403821772);
      assertEquals(195185.96176273463, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-2319);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2319));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int int0 = 36;
      Integer integer0 = new Integer(36);
      assertEquals(36, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(657);
      assertEquals(657, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-2871));
      assertEquals((-2871), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer((-1));
      assertEquals((-1), (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(36);
      assertEquals(36, (int)integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer5;
      integerArray0[1] = integer3;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (int)integerArray0[1];
      floatArray0[1] = (float) int0;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) (-2871);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-2871.0F), 36.0F, 1.0F, (-1.0F), (-1.0F), 1.0F, (-2871.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray1 = null;
      boolean boolean2 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(0.06666666666666667, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2749.02);
      doubleArray1[1] = (-2749.02);
      doubleArray1[3] = (-2749.02);
      doubleArray1[4] = (-2749.02);
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(3.02284438416E7, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2749.02), (-2749.02), 0.0, (-2749.02), (-2749.02), 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2749.02), (-2749.02), 0.0, (-2749.02), (-2749.02), 0.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 48;
      floatArray0[1] = (float) 48;
      floatArray0[2] = 624.436F;
      floatArray0[3] = (float) 48;
      floatArray0[4] = (float) 48;
      floatArray0[5] = (float) 48;
      floatArray0[6] = (float) 48;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {48.0F, 48.0F, 624.436F, 48.0F, 48.0F, 48.0F, 48.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 48;
      longArray0[1] = (long) 48;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {48L, 48L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 48;
      intArray0[1] = 48;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {48, 48}, intArray0);
      assertArrayEquals(new int[] {48, 48}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      int[] intArray2 = MathArrays.copyOf(intArray1, 48);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {48, 48}, intArray0);
      assertArrayEquals(new int[] {48, 48}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(48, intArray2.length);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2749.02);
      doubleArray1[1] = (-2749.02);
      doubleArray1[3] = (-2749.02);
      doubleArray1[4] = (-2749.02);
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(3.02284438416E7, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2749.02), (-2749.02), 0.0, (-2749.02), (-2749.02), 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2749.02), (-2749.02), 0.0, (-2749.02), (-2749.02), 0.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 48;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {48.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 2134145240;
      intArray0[0] = 2134145240;
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {2134145240}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      double double0 = 1327.4887100368;
      doubleArray0[0] = 1327.4887100368;
      double double1 = Double.NaN;
      doubleArray0[1] = Double.NaN;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[3];
      intArray0[0] = 2413;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2413, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2413;
      longArray0[1] = (long) 2413;
      longArray0[2] = (long) 2413;
      longArray0[3] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2413L, 2413L, 2413L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((double) 0L, (double) 0L, 1677.84665891021, (-0.010714690733195933));
      assertEquals((-17.977608047948983), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-300.882248);
      doubleArray0[1] = (-300.882248);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-300.882248), (-300.882248), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "H";
      stringArray0[1] = "xRww?Rn%5";
      stringArray0[2] = "H";
      stringArray0[3] = "H";
      stringArray0[4] = "H";
      stringArray0[5] = "H";
      stringArray0[6] = "H";
      stringArray0[7] = "H";
      stringArray0[8] = "H";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertFalse(boolean1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Double double1 = new Double((-1492.5522));
      assertEquals((-1492.5522), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 347.5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Integer integer0 = new Integer(36);
      assertEquals(36, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(657);
      assertEquals(657, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-2871));
      assertEquals((-2871), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer((-1));
      assertEquals((-1), (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(36);
      assertEquals(36, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer5;
      integerArray0[1] = integer3;
      integerArray0[2] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, integerArray0.length);
      
      double double0 = MathArrays.linearCombination(1.625, 2247.3537, 0.0, 1029.040450156, (double) (-2871), (double) integerArray0[1]);
      assertEquals(8246292.9497625, double0, 0.01);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2749.02);
      doubleArray0[1] = (-2749.02);
      doubleArray0[2] = 76.83812302259;
      doubleArray0[3] = (-2749.02);
      doubleArray0[4] = (-2749.02);
      doubleArray0[5] = (-2749.02);
      MathArrays.scaleInPlace((-2749.02), doubleArray0);
      assertArrayEquals(new double[] {7557110.9604, 7557110.9604, (-211229.53695156035), 7557110.9604, 7557110.9604, 7557110.9604}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Integer integer0 = new Integer(3406);
      assertEquals(3406, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(3406);
      assertEquals(3406, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(3406);
      assertEquals(3406, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-175));
      assertEquals((-175), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(3406);
      assertEquals(3406, (int)integer4);
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integerArray0[1];
      integerArray0[3] = integer3;
      integerArray0[4] = integer3;
      integerArray0[5] = integer1;
      integerArray0[6] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
      
      double double0 = MathArrays.linearCombination((-71.44), (double) (-175), Double.NaN, 7557110.9604, (-0.1666666567325592), (-211229.53695156035));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-700);
      intArray0[1] = (-700);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-700);
      intArray1[1] = (-700);
      intArray1[2] = (-700);
      intArray1[3] = (-653);
      intArray1[4] = (-700);
      intArray1[5] = 19;
      intArray1[6] = (-653);
      intArray1[7] = (-700);
      intArray1[8] = (-700);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-700), (-700)}, intArray0);
      assertArrayEquals(new int[] {(-700), (-700), (-700), (-653), (-700), 19, (-653), (-700), (-700)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(9, intArray1.length);
      
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2413;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2413, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2413;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2413.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4826.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?]$d73]c2:S>fouz*";
      stringArray0[1] = "";
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2772.2683F);
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, (-2772.2683F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1327.4887100368;
      doubleArray0[1] = Double.NaN;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1327.4887100368, Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[23];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 1327.4887100368;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = Double.NaN;
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(23, doubleArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1780);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1780), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 1972);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1780), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(1972, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1327.4887100368, Double.NaN}, doubleArray0, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(23, doubleArray1.length);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray0, (-3853.64342716237));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1327.4887100368, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3853.6434271623702), Double.NaN}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 161L;
      doubleArray1[1] = (double) 161L;
      doubleArray1[2] = (double) 161L;
      doubleArray1[3] = (double) (-3455L);
      doubleArray1[4] = (double) 1335L;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {161.0, 161.0, 161.0, (-3455.0), 1335.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {161.0, 161.0, 161.0, (-3455.0), 1335.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {25921.0, 25921.0, 25921.0, 1.1937025E7, 1782225.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double double0 = MathArrays.distance1(doubleArray1, doubleArray2);
      assertEquals(1.379865E7, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {161.0, 161.0, 161.0, (-3455.0), 1335.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {25921.0, 25921.0, 25921.0, 1.1937025E7, 1782225.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {161.0, 161.0, 161.0, (-3455.0), 1335.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {322.0, 322.0, 322.0, (-6910.0), 2670.0}, doubleArray3, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1335L;
      longArray0[1] = (-3455L);
      longArray0[2] = (-3455L);
      longArray0[3] = (-3455L);
      longArray0[4] = 1335L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,455 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 40.19140625;
      double double0 = MathArrays.linearCombination(1942.147031162012, 1942.147031162012, 1942.147031162012, 402.3540291717574);
      assertEquals(4553365.773883419, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 40.19140625, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1615.349136352539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      long[][] longArray0 = new long[2][4];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 2003L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "Xz";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 438.0814403821772;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 438.0814403821772;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 438.0814403821772;
      doubleArray0[3] = 438.0814403821772;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2.147483368E9;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {438.0814403821772, 0.0, 438.0814403821772, 438.0814403821772, 438.0814403821772, 0.0, 0.0, 2.147483368E9}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-601.764496), 3704.8, 1.304E19, (-1297.9204), (-1446.58416), (-279.94));
      assertEquals((-1.6924882016000002E22), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2346);
      intArray0[1] = 3;
      intArray0[2] = (-2146324098);
      intArray0[3] = (-2147483647);
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new int[] {(-2346), 3, (-2146324098), (-2147483647)}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-700);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-700);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-700.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-653);
      doubleArray1[1] = (double) (-700);
      doubleArray1[2] = (double) (-700);
      doubleArray1[3] = (double) (-700);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-653.0), (-700.0), (-700.0), (-700.0)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(946.136163431, (-601.764496), (-601.764496), (-124.9095823770894), 1.304E19, 1.0, (-653.0), (-833.42449176563));
      assertEquals(1.304000000000005E19, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-700.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {490000.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-700);
      floatArray0[1] = (float) (-700);
      floatArray0[2] = (float) (-653);
      floatArray0[3] = (float) (-700);
      floatArray0[4] = (float) (-700);
      floatArray0[5] = (float) (-700);
      floatArray0[6] = (float) (-700);
      floatArray0[7] = (float) (-653);
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new float[] {(-700.0F), (-700.0F), (-653.0F), (-700.0F), (-700.0F), (-700.0F), (-700.0F), (-653.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3.834E-20;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) Float.NEGATIVE_INFINITY;
      doubleArray3[1] = (double) Float.NEGATIVE_INFINITY;
      doubleArray3[2] = (double) 0.0F;
      doubleArray3[3] = Double.NaN;
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      long[] longArray0 = new long[4];
      longArray0[1] = (-3453L);
      longArray0[2] = (-3453L);
      longArray0[3] = 1323L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,453 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1327.4887100368;
      doubleArray0[1] = Double.NaN;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1327.4887100368, Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2772.2683F);
      floatArray0[2] = (-2772.2683F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, (-2772.2683F), (-2772.2683F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertTrue(boolean1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.scaleInPlace((-2772.2683F), doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2147268921;
      intArray0[1] = (-1780);
      intArray0[2] = (-1780);
      intArray0[3] = (-1780);
      intArray0[4] = (-1780);
      intArray0[5] = (-1780);
      intArray0[6] = (-1);
      intArray0[7] = (-1780);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2147268921, (-1780), (-1780), (-1780), (-1780), (-1780), (-1), (-1780)}, intArray0);
      assertEquals(8, intArray0.length);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1389);
      intArray1[1] = 2147268921;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray1, (-516));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-601.764496);
      MathArrays.scaleInPlace(2252.71998, doubleArray0);
      assertArrayEquals(new double[] {(-1355606.90339383), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MathArrays.scaleInPlace(2252.71998, doubleArray0);
      assertArrayEquals(new double[] {(-3.0538027563012104E9), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3.0538027563012104E9, double0, 0.01);
      assertArrayEquals(new double[] {(-3.0538027563012104E9), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-3.0538027563012104E9), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "array size cannot be greater than {0}";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "";
      stringArray0[3] = "An1dkX1@Py9},*U@s5%";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "Xz";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 438.0814403821772, 0.0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 161;
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1436.8256;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-7.01689946830171);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1699.5499966429);
      doubleArray0[3] = 95.7639603625265;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-7.01689946830171), 0.0, (-1699.5499966429), 95.7639603625265}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 95.7639603625265;
      doubleArray1[2] = 95.7639603625265;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-7.01689946830171);
      doubleArray1[5] = (-7.01689946830171);
      doubleArray1[6] = (-1699.5499966429);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-7.01689946830171);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-7.01689946830171), 0.0, (-1699.5499966429), 95.7639603625265}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 95.7639603625265, 95.7639603625265, 0.0, (-7.01689946830171), (-7.01689946830171), (-1699.5499966429), 0.0, (-7.01689946830171)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.scale((-7.01689946830171), doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0, (-671.9660825502782), (-671.9660825502782), -0.0, 49.23687814825282, 49.23687814825282, 11925.571467795737, -0.0, 49.23687814825282}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 95.7639603625265, 95.7639603625265, 0.0, (-7.01689946830171), (-7.01689946830171), (-1699.5499966429), 0.0, (-7.01689946830171)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 95.7639603625265;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 95.7639603625265;
      doubleArray3[4] = (-1699.5499966429);
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (-2284.015521832);
      doubleArray3[7] = 0.0;
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray3);
      assertFalse(boolean1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {95.7639603625265, 0.0, 0.0, 95.7639603625265, (-1699.5499966429), 0.0, (-2284.015521832), 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 95.7639603625265, 95.7639603625265, 0.0, (-7.01689946830171), (-7.01689946830171), (-1699.5499966429), 0.0, (-7.01689946830171)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray3.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray4 = MathArrays.ebeMultiply(doubleArray3, doubleArray3);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {95.7639603625265, 0.0, 0.0, 95.7639603625265, (-1699.5499966429), 0.0, (-2284.015521832), 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {9170.736104315547, 0.0, 0.0, 9170.736104315547, 2888470.1910888813, 0.0, 5216726.903969504, 0.0}, doubleArray4, 0.01);
      assertEquals(8, doubleArray3.length);
      assertEquals(8, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      double[] doubleArray6 = MathArrays.convolve(doubleArray5, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray5, doubleArray6);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray5);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertArrayEquals(new double[] {(-7.01689946830171), 0.0, (-1699.5499966429), 95.7639603625265}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray6, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray5.length);
      assertEquals(4, doubleArray6.length);
      assertNotNull(doubleArray6);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "Xz";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 438.0814403821772, 0.0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 161;
      intArray0[1] = 195;
      intArray0[2] = 1269;
      intArray0[3] = 2;
      intArray0[4] = 2641;
      intArray0[5] = 598;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {161, 195, 1269, 2, 2641, 598}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2641;
      doubleArray0[1] = (double) 195;
      doubleArray0[2] = (double) 195;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 598;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = 496.91902034906;
      MathArrays.scaleInPlace(79.003565061975, doubleArray0);
      assertArrayEquals(new double[] {208648.41532867597, 15405.695187085124, 15405.695187085124, Double.NaN, 47244.13190706105, 158.00713012395, 39258.37415467984}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 15405.695187085124);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {9856.404834620842, 727.7542380731028, 727.7542380731028, Double.NaN, 2231.7796634241818, 7.464146031519003, 1854.5380668623736}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {208648.41532867597, 15405.695187085124, 15405.695187085124, Double.NaN, 47244.13190706105, 158.00713012395, 39258.37415467984}, doubleArray0, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-4025.201082399343);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 4625;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      double double0 = (-682.6211576155388);
      double double1 = 0.0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2375.09);
      doubleArray0[3] = (-1192.685);
      doubleArray0[4] = 93.6778444054;
      doubleArray0[5] = (-682.6211576155388);
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, (-2375.09), (-1192.685), 93.6778444054, (-682.6211576155388), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 13
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.800552834259E-8;
      doubleArray0[2] = 2.800552834259E-8;
      doubleArray0[3] = 2.800552834259E-8;
      doubleArray0[5] = 2.800552834259E-8;
      doubleArray0[6] = 2.800552834259E-8;
      doubleArray0[7] = 2.800552834259E-8;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.800552834259E-8;
      doubleArray1[1] = 2.800552834259E-8;
      doubleArray1[2] = 2.800552834259E-8;
      doubleArray1[3] = 2.800552834259E-8;
      doubleArray1[4] = 2.800552834259E-8;
      doubleArray1[5] = 2.800552834259E-8;
      doubleArray1[6] = (-1297.07627555);
      doubleArray1[7] = 2.800552834259E-8;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-300.882248);
      doubleArray0[1] = (-300.882248);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1492.5522;
      doubleArray1[7] = (-306.2747583316709);
      doubleArray1[8] = 0.0;
      MathArrays.scaleInPlace((-300.882248), doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, (-449082.4611933456), 92152.63779248987, -0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {-0.0, -0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(458439.92583934765, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, (-449082.4611933456), 92152.63779248987, -0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1492.5522;
      doubleArray2[1] = 1492.5522;
      double double1 = MathArrays.distance(doubleArray2, doubleArray0);
      assertEquals(2110.7875637898005, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1492.5522, 1492.5522}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("o:%v%J(U+q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.o:%v%J(U+q
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 2973.3554;
      doubleArray0[2] = (-601.764496);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -601.764 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2772.2683F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2772.2683F);
      floatArray0[5] = (-2772.2683F);
      floatArray0[6] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2772.2683F), 0.0F, (-2772.2683F), (-2772.2683F), 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(0.0F, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      double double1 = 3.834E-20;
      double double2 = 40.0;
      double double3 = 0.0;
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      double double4 = 1173.4;
      doubleArray1[1] = 1173.4;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 3.834E-20;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = new Double((-1492.5522));
      assertEquals((-1492.5522), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 347.5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1042.255384670152);
      doubleArray0[1] = (-7.01689946830171);
      doubleArray0[2] = 4837.66085049;
      double double0 = 1725.86;
      doubleArray0[3] = 1725.86;
      doubleArray0[4] = 1.34217729E8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (4,837.661 > 1,725.86)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 609.25757F;
      floatArray0[1] = 962.3F;
      floatArray0[2] = 908.9308F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {609.25757F, 962.3F, 908.9308F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 908.9308F, 3.834E-20, (-919.2493892), 95.7639603625265);
      assertEquals((-88030.9620706255), double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-88030.9620706255);
      doubleArray0[1] = (double) 609.25757F;
      doubleArray0[2] = (double) 962.3F;
      doubleArray0[3] = 95.7639603625265;
      doubleArray0[4] = (double) 962.3F;
      doubleArray0[5] = 95.7639603625265;
      doubleArray0[6] = (-2191.34881135367);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-88,030.962 <= 609.258)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1327.4887100368;
      doubleArray0[1] = Double.NaN;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1327.4887100368, Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 1327.4887100368;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = Double.NaN;
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, 0.0, Double.NaN, 1327.4887100368, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1780);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1780), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 5);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1780), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1780), 0, 0, 0, 0}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 5);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1327.4887100368, Double.NaN, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1327.4887100368, Double.NaN}, doubleArray0, 0.01);
      assertEquals(5, doubleArray2.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1780);
      floatArray0[1] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1780.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "/GB%hNM9@@";
      stringArray0[3] = "/GB%hNM9@@";
      stringArray0[4] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1822.1407585778145), 2144537.21029632, (-346.584667), (-1822.1407585778145), (-1822.1407585778145), 1.0, 802.3059281986, 802.3059281986);
      assertEquals((-3.9063752604579835E9), double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 378.36167975;
      doubleArray0[1] = (-1822.1407585778145);
      doubleArray0[2] = 802.3059281986;
      doubleArray0[3] = (-3.9063752604579835E9);
      doubleArray0[4] = (-1822.1407585778145);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2144537.21029632;
      doubleArray0[8] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {378.36167975, (-1822.1407585778145), 802.3059281986, (-3.9063752604579835E9), (-1822.1407585778145), 0.0, 0.0, 2144537.21029632, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      Integer integer0 = new Integer(36);
      assertEquals(36, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2248));
      assertEquals((-2248), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(602);
      assertEquals(602, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer((-1));
      assertEquals((-1), (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      Integer integer5 = new Integer(36);
      assertEquals(36, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      
      integerArray0[1] = integer5;
      integerArray0[2] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, integerArray0.length);
      
      double double1 = MathArrays.linearCombination(1029.040450156, 0.0, 1.0, (-71.44), 802.3059281986, (-1822.1407585778145));
      assertEquals((-1461985.7726192744), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 76.83812302259;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {76.83812302259, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {76.83812302259, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "r{s%h5p^$6";
      stringArray0[1] = "H";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertFalse(boolean1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-74.957F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection2, false);
      assertTrue(boolean2);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection0);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection1);
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection0));
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3820.14606733361);
      double double0 = new Double((-3820.14606733361));
      assertEquals((-3820.14606733361), double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-3820.14606733361)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-3820.14606733361)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(819.1307649789027, 261.78908539, 819.1307649789027, (-2698.90875), 20.570732946806892, (-1.0));
      assertEquals((-1996340.2659500628), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 40.0;
      doubleArray0[4] = 0.0;
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, 0.0, 3.834E-20, 40.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 7.668E-20, 80.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1727.9720387965;
      doubleArray0[1] = 1727.9720387965;
      doubleArray0[2] = 1727.9720387965;
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      double double0 = MathArrays.linearCombination(1408.2, 1727.9720387965, 1408.2, 1727.9720387965, 1.44888888888888883E18, 3396.68488623053, (-2611.54), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1727.9720387965, 1727.9720387965, 1727.9720387965, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1727.9720387965, 1727.9720387965, 1727.9720387965, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1436.8256;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-74.957F);
      floatArray0[1] = (-2772.2683F);
      floatArray0[2] = (-3820.2F);
      floatArray0[3] = (-74.957F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1030.19F;
      floatArray0[6] = (-2772.2683F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-74.957F), (-2772.2683F), (-3820.2F), (-74.957F), 0.0F, 1030.19F, (-2772.2683F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1436.8256, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.scaleInPlace(1492.5522, doubleArray0);
      assertArrayEquals(new double[] {2144537.21029632, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1677.84665891021);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2144537.21029632, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1677.84665891021, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0.0F;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 0.0F;
      doubleArray2[3] = (double) (-2772.2683F);
      doubleArray2[4] = (double) 0.0F;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (double) (-74.957F);
      doubleArray2[7] = (double) (-74.957F);
      doubleArray2[8] = (double) (-2772.2683F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[3][2];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray0;
      doubleArray3[2] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "r{s%h5p^$6";
      stringArray0[1] = "H";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertFalse(boolean1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(1.125, 1.125, 4100.3739, (-440.5773782), (-3306.0731821), 4100.3739, 963.692241362942, (-1034.2372662617524));
      assertEquals((-1.6359353333474364E7), double0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 625.0;
      doubleArray1[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 625.0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) 0;
      doubleArray1[2] = doubleArray3;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 3504;
      intArray0[2] = 1;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 3504;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 0;
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1436.8256;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.800552834259E-8;
      doubleArray0[1] = 2.800552834259E-8;
      doubleArray0[2] = 2.800552834259E-8;
      doubleArray0[3] = 2.800552834259E-8;
      doubleArray0[4] = 2.800552834259E-8;
      doubleArray0[5] = 2.800552834259E-8;
      doubleArray0[6] = 2.800552834259E-8;
      doubleArray0[7] = 2.800552834259E-8;
      doubleArray0[8] = 2.800552834259E-8;
      MathArrays.scaleInPlace(2.800552834259E-8, doubleArray0);
      assertArrayEquals(new double[] {7.843096177476118E-16, 7.843096177476118E-16, 7.843096177476118E-16, 7.843096177476118E-16, 7.843096177476118E-16, 7.843096177476118E-16, 7.843096177476118E-16, 7.843096177476118E-16, 7.843096177476118E-16}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.scaleInPlace(0.008333333333329196, doubleArray0);
      assertArrayEquals(new double[] {6.5359134812268534E-18, 6.5359134812268534E-18, 6.5359134812268534E-18, 6.5359134812268534E-18, 6.5359134812268534E-18, 6.5359134812268534E-18, 6.5359134812268534E-18, 6.5359134812268534E-18, 6.5359134812268534E-18}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.960774044368056E-17, double0, 0.01);
      assertArrayEquals(new double[] {6.5359134812268534E-18, 6.5359134812268534E-18, 6.5359134812268534E-18, 6.5359134812268534E-18, 6.5359134812268534E-18, 6.5359134812268534E-18, 6.5359134812268534E-18, 6.5359134812268534E-18, 6.5359134812268534E-18}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.960774044368056E-17;
      doubleArray1[1] = 1.960774044368056E-17;
      doubleArray1[2] = 1.960774044368056E-17;
      doubleArray1[3] = 1.960774044368056E-17;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?]$d73]c2:S>fouz*";
      stringArray0[1] = "";
      stringArray0[2] = "/GB%hNM9@@";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1727.9720387965;
      doubleArray0[1] = 1727.9720387965;
      doubleArray0[2] = 1727.9720387965;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1727.9720387965, 1727.9720387965, 1727.9720387965, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2749.02);
      doubleArray1[1] = (-2749.02);
      doubleArray1[2] = 76.83812302259;
      doubleArray1[3] = (-2749.02);
      doubleArray1[4] = (-2749.02);
      doubleArray1[5] = (-2749.02);
      MathArrays.scaleInPlace((-2749.02), doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {7557110.9604, 7557110.9604, (-211229.53695156035), 7557110.9604, 7557110.9604, 7557110.9604}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(2.855942482562698E14, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {7557110.9604, 7557110.9604, (-211229.53695156035), 7557110.9604, 7557110.9604, 7557110.9604}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7557110.9604, 7557110.9604, (-211229.53695156035), 7557110.9604, 7557110.9604, 7557110.9604}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 48;
      intArray0[1] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {48, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "Xz";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 438.0814403821772, 0.0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 161;
      intArray0[1] = 195;
      intArray0[2] = 1269;
      intArray0[3] = 2;
      intArray0[4] = 2641;
      intArray0[5] = 598;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {161, 195, 1269, 2, 2641, 598}, intArray0);
      assertEquals(6, intArray0.length);
      
      long[][] longArray0 = new long[5][2];
      long[] longArray1 = new long[7];
      longArray1[0] = (long) 195;
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 378.36167975, 0.0, 0.0, 378.36167975, 378.36167975);
      assertEquals(143157.56070324156, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 143157.56070324156;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 143157.56070324156, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[5];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertEquals(1, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals(1, (int)integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertEquals(1, (int)integer4);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "Xz";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 20.570732946806892;
      doubleArray0[3] = (-1492.5522);
      doubleArray0[4] = (-1428.9199899616);
      doubleArray0[5] = (-1677.84665891021);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2661.788491467123, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 20.570732946806892, (-1492.5522), (-1428.9199899616), (-1677.84665891021)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-1492.5522), 0.0, (-705.5684850976913), (-1.0), (-2613.868897), 261.63200124, (-1572.1063099231153), (-1.0));
      assertEquals((-681594.0757060806), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-1.0), 20.570732946806892, (-1492.5522), (-1428.9199899616), (-1677.84665891021)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-1.0), 20.570732946806892, (-1492.5522), (-1428.9199899616), (-1677.84665891021)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 378.36167975, 0.0, 0.0, 378.36167975, 378.36167975);
      assertEquals(143157.56070324156, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 318;
      intArray0[2] = 1;
      intArray0[3] = 3676;
      intArray0[4] = 211;
      intArray0[5] = (-1);
      intArray0[6] = 225;
      intArray0[7] = Integer.MAX_VALUE;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      double double0 = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1492.5522);
      doubleArray0[4] = (-1428.9199899616);
      doubleArray0[5] = (-1677.84665891021);
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 76.83812302259;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {76.83812302259, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {76.83812302259, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "r{s%h5p^$6";
      stringArray0[1] = "H";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertFalse(boolean1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-74.957F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[4] = 1030.19F;
      floatArray0[5] = 0.0F;
      long[][] longArray0 = new long[1][0];
      long[] longArray1 = new long[1];
      longArray1[0] = 1L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      int int0 = 284;
      intArray0[1] = 284;
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, 284}, intArray0);
      assertEquals(2, intArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int2 = (-3857);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 284;
      doubleArray0[1] = (double) (-3857);
      doubleArray0[2] = (double) (-3857);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 284;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {284.0, (-3857.0), (-3857.0), 0.0, 284.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {284.0, (-3857.0), (-3857.0), 0.0, 284.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3857), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 378.36167975, 0.0, 0.0, 378.36167975, 378.36167975);
      assertEquals(143157.56070324156, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1436.8256;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.linearCombination(3.834E-20, 1.1921056801463227E-8, (-3306.0731821), 0.0, 785.088, 1436.8256, 3387.085901481149, 785.088);
      assertEquals(3787195.032874832, double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1436.8256;
      doubleArray1[1] = 0.0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2064467.8048153596, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      long[] longArray0 = new long[4];
      longArray0[0] = 161L;
      longArray0[1] = (-3455L);
      longArray0[2] = (-3455L);
      longArray0[3] = 1335L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,455 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4018.495734632558);
      doubleArray0[1] = (-4018.495734632558);
      doubleArray0[2] = (-4018.495734632558);
      doubleArray0[3] = (-4018.495734632558);
      double[] doubleArray1 = MathArrays.scale((-4018.495734632558), doubleArray0);
      double[][] doubleArray2 = new double[7][3];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {1.6148307969260063E7, 1.6148307969260063E7, 1.6148307969260063E7, 1.6148307969260063E7}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 76.83812302259;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "r{s%h5p^$6";
      stringArray0[1] = "H";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-74.957F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1030.19F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-2772.2683F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      MathArrays.scaleInPlace(0.0F, doubleArray0);
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "Xz";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.linearCombination(Double.NaN, 438.0814403821772, 0.0, Double.NaN);
      int[] intArray0 = new int[6];
      intArray0[0] = 161;
      intArray0[1] = 195;
      intArray0[2] = 1269;
      intArray0[3] = 2;
      intArray0[4] = 2641;
      intArray0[5] = 598;
      MathArrays.distance1(intArray0, intArray0);
      long[][] longArray0 = new long[5][2];
      long[] longArray1 = new long[7];
      longArray1[0] = (long) 195;
      longArray1[1] = (long) 195;
      longArray1[2] = (long) 161;
      longArray1[3] = (long) 1269;
      longArray1[4] = (long) 2;
      longArray1[5] = (long) 2641;
      longArray1[6] = (long) 161;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (long) 2;
      longArray2[1] = (long) 195;
      longArray2[2] = (long) 2;
      longArray2[3] = (long) 2641;
      longArray2[4] = (long) 598;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = (long) 598;
      longArray4[1] = (long) 598;
      longArray4[2] = (long) 161;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = (long) 195;
      longArray5[1] = (long) 2641;
      longArray5[2] = (long) 2641;
      longArray5[3] = (long) 1269;
      longArray0[4] = longArray5;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-112.2444402);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 2984.6609631360625;
      doubleArray0[3] = 768.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.linearCombination(doubleArray1, doubleArray1);
      long[][] longArray0 = new long[6][7];
      long[] longArray1 = new long[6];
      longArray1[0] = (-2476L);
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (-2445L);
      longArray1[4] = 2140L;
      longArray1[5] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = (-2476L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      longArray4[0] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      longArray5[0] = 0L;
      longArray5[1] = (-2445L);
      longArray5[2] = 1L;
      longArray5[3] = (-2445L);
      longArray5[4] = (-2476L);
      longArray5[5] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      longArray6[0] = (-2360L);
      longArray6[1] = (-2445L);
      longArray6[2] = (-2445L);
      longArray6[3] = (-4486L);
      longArray6[4] = 3274L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,476 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1727.9720387965;
      doubleArray0[1] = 1727.9720387965;
      doubleArray0[2] = 1727.9720387965;
      doubleArray0[3] = 1727.9720387965;
      doubleArray0[4] = 1727.9720387965;
      doubleArray0[5] = 1727.9720387965;
      MathArrays.scaleInPlace(1727.9720387965, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 48;
      intArray0[1] = 0;
      int[] intArray1 = new int[1];
      intArray1[0] = 48;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1450);
      intArray0[1] = 245;
      intArray0[2] = 0;
      intArray0[3] = 134217729;
      intArray0[4] = (-2052);
      intArray0[5] = 144;
      intArray0[6] = 283;
      intArray0[7] = 0;
      intArray0[8] = 55;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-318);
      intArray0[0] = (-318);
      intArray0[1] = 0;
      intArray0[2] = 24;
      int int1 = 3816;
      intArray0[3] = 3816;
      intArray0[4] = 0;
      intArray0[5] = 134217729;
      intArray0[6] = 0;
      MathArrays.copyOf(intArray0, 0);
      // Undeclared exception!
      try { 
        MathArrays.scale(1.34217729E8, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 4562.0;
      doubleArray0[2] = 20.0;
      double[][] doubleArray1 = new double[0][1];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      long[][] longArray0 = new long[6][0];
      long[] longArray1 = new long[4];
      longArray1[0] = 869L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = 100L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = (-3508L);
      longArray2[3] = 100L;
      longArray2[4] = 100L;
      longArray2[5] = 869L;
      longArray2[6] = 0L;
      longArray2[7] = 869L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = 100L;
      longArray3[1] = 100L;
      longArray3[2] = 869L;
      longArray3[3] = 331L;
      longArray3[4] = 100L;
      longArray3[5] = 100L;
      longArray3[6] = 0L;
      longArray3[7] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = 869L;
      longArray4[1] = 331L;
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray4[4] = 0L;
      longArray4[5] = 331L;
      longArray4[6] = 0L;
      longArray4[7] = 100L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      longArray5[0] = 100L;
      longArray5[1] = 331L;
      longArray5[2] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 3396.68488623053;
      doubleArray0[0] = 3396.68488623053;
      double double1 = (-370.606143560956);
      doubleArray0[1] = (-370.606143560956);
      double double2 = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (3,396.685 >= -370.606)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1327.4887100368;
      doubleArray0[1] = Double.NaN;
      MathArrays.checkPositive(doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 1327.4887100368;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = Double.NaN;
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1780);
      intArray0[1] = 0;
      intArray0[2] = (-1158);
      intArray0[3] = 966;
      intArray0[4] = (-1461);
      intArray0[5] = (-1292);
      intArray0[6] = (-102);
      intArray0[7] = 2099;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MathArrays.linearCombination(0.0, (-4270.837739293163), Double.NaN, (-498.5669));
      int[] intArray0 = new int[5];
      intArray0[0] = 134217729;
      intArray0[1] = 3755;
      intArray0[2] = 79;
      intArray0[3] = 0;
      intArray0[4] = 0;
      MathArrays.distance(intArray0, intArray0);
      long[][] longArray0 = new long[6][7];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 3755;
      longArray1[1] = (-799L);
      longArray1[2] = (long) 79;
      longArray1[3] = (-4034L);
      longArray1[4] = (long) 3755;
      longArray1[5] = (long) 3755;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 3755;
      longArray1[8] = (long) 3755;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = (long) 79;
      longArray3[1] = (long) 0;
      longArray3[2] = (long) 3755;
      longArray3[3] = 4503599627370495L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      longArray4[0] = (long) 0;
      longArray4[1] = 4503599627370495L;
      longArray4[2] = (-799L);
      longArray4[3] = (-4034L);
      longArray4[4] = (long) 79;
      longArray4[5] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = (-799L);
      longArray5[1] = (long) 0;
      longArray5[2] = (long) 0;
      longArray5[3] = 4503599627370495L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[4];
      longArray6[0] = (long) 79;
      longArray6[1] = (long) 0;
      longArray6[2] = (long) 3755;
      longArray6[3] = (long) 3755;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -799 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-5691.414);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-674.696436771);
      doubleArray0[1] = 3528.602739589;
      doubleArray0[2] = (-232.0);
      doubleArray0[3] = (-1409.4597670872686);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {(-674.696436771), 3528.602739589, (-232.0), (-1409.4597670872686)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-109.694201789765);
      doubleArray0[1] = (-109.694201789765);
      MathArrays.scale((-109.694201789765), doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 239;
      intArray0[1] = 2441;
      intArray0[2] = 145;
      intArray0[3] = 115;
      intArray0[4] = (-3215);
      intArray0[5] = 1764;
      intArray0[6] = 1107;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      int int0 = 284;
      intArray0[1] = 284;
      MathArrays.distance1(intArray0, intArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = (-3857);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3857), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3820.14606733361);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.checkOrder(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-300.882248);
      doubleArray0[1] = (-2057.3102002313);
      doubleArray0[2] = 0.0;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.normalizeArray(doubleArray0, 2.0);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 261.78908539;
      doubleArray0[0] = 261.78908539;
      double double1 = 3387.085901481149;
      doubleArray0[1] = 3387.085901481149;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][0];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      long[][] longArray0 = new long[9][9];
      long[] longArray1 = new long[5];
      longArray1[0] = (-25L);
      longArray1[1] = (-1L);
      longArray1[2] = 1981L;
      longArray1[3] = (-230L);
      longArray1[4] = 2319L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = (-1L);
      longArray2[1] = 1981L;
      longArray2[2] = (-25L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = (-1613L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      longArray4[0] = (-1613L);
      longArray4[1] = (-1L);
      longArray4[2] = (-1073741824L);
      longArray4[3] = (-1L);
      longArray4[4] = 1981L;
      longArray4[5] = 1981L;
      longArray4[6] = (-25L);
      longArray4[7] = (-1613L);
      longArray4[8] = (-1613L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      longArray5[0] = 1981L;
      longArray5[1] = 1981L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      longArray7[0] = 1981L;
      longArray7[1] = (-1613L);
      longArray7[2] = (-1073741824L);
      longArray7[3] = (-1073741824L);
      longArray7[4] = 1981L;
      longArray7[5] = (-1L);
      longArray7[6] = 1981L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[7];
      longArray8[0] = 2319L;
      longArray8[1] = (-25L);
      longArray8[2] = 1981L;
      longArray8[3] = (-1L);
      longArray8[4] = (-1L);
      longArray8[5] = (-1073741824L);
      longArray8[6] = (-1613L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[7];
      longArray9[0] = 1981L;
      longArray9[1] = 0L;
      longArray9[2] = (-1073741824L);
      longArray9[3] = (-230L);
      longArray9[4] = (-25L);
      longArray9[5] = 0L;
      longArray9[6] = (-1L);
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 3 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (-777.4677447234742));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-700);
      intArray0[1] = (-653);
      MathArrays.distance(intArray0, intArray0);
      long[][] longArray0 = new long[6][4];
      long[] longArray1 = new long[4];
      longArray1[0] = (long) (-653);
      longArray1[1] = (long) (-700);
      longArray1[2] = (long) (-653);
      longArray1[3] = (long) (-700);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (long) (-653);
      longArray2[1] = (long) (-700);
      longArray2[2] = (long) (-653);
      longArray2[3] = (long) (-653);
      longArray2[4] = (long) (-700);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = (long) (-653);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = 1032L;
      longArray4[1] = (long) (-653);
      longArray4[2] = (long) (-700);
      longArray4[3] = (long) (-700);
      longArray4[4] = (long) (-700);
      longArray4[5] = (long) (-653);
      longArray4[6] = (long) (-700);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      longArray5[0] = (long) (-700);
      longArray5[1] = 2147483647L;
      longArray5[2] = (long) (-700);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      longArray6[0] = (long) (-700);
      longArray6[1] = (long) (-700);
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 76.83812302259;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, (-127), 110);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1545;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1545, 1545);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 40.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2054.0);
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[][] doubleArray2 = new double[5][0];
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = Double.NaN;
      doubleArray3[3] = 3.834E-20;
      doubleArray3[4] = 40.0;
      doubleArray3[5] = Double.NaN;
      doubleArray3[6] = 40.0;
      doubleArray3[7] = Double.NaN;
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1075;
      intArray0[1] = 274;
      int int0 = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1085);
      intArray0[4] = 134217729;
      intArray0[5] = (-3233);
      int int1 = 192;
      intArray0[6] = 192;
      int int2 = (-3892);
      intArray0[7] = (-3892);
      MathArrays.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("J+)n}03KW)Um+(8j=p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.J+)n}03KW)Um+(8j=p
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[8][9];
      long[] longArray1 = new long[5];
      longArray1[0] = 0L;
      longArray1[1] = 4503599627370496L;
      longArray1[2] = 0L;
      longArray1[3] = (-915L);
      longArray1[4] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 4503599627370496L;
      longArray2[1] = 0L;
      longArray2[2] = (-915L);
      longArray2[3] = (-915L);
      longArray2[4] = 4503599627370496L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = (-915L);
      longArray3[4] = 2147483647L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      longArray4[0] = 4503599627370496L;
      longArray4[1] = (-915L);
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray4[4] = (-915L);
      longArray4[5] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      longArray5[0] = 0L;
      longArray5[1] = 4503599627370496L;
      longArray5[2] = 2461L;
      longArray5[3] = (-1607L);
      longArray5[4] = 4503599627370496L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      longArray0[5] = longArray6;
      long[] longArray7 = new long[3];
      longArray7[0] = 2461L;
      longArray7[1] = 2461L;
      longArray7[2] = 4503599627370496L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[3];
      longArray8[0] = 2461L;
      longArray8[1] = 2147483647L;
      longArray8[2] = (-915L);
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -915 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.linearCombination(1353.809171131515, 801.0733563, 0.0, (-147.3), 0.0, 801.0733563, (-1.0), 785.088);
      MathArrays.convolve(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Object>>) null, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 1.0, 0.0, 1.0, (-243.533024488), 1.0E-5, 1.0E-5);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 385.363;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 385.363;
      doubleArray1[3] = (-568.6666405623535);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1353.809171131515;
      doubleArray0[1] = (-3.141592653589793);
      doubleArray0[2] = (-1.0);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1353.809171131515;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-3.141592653589793);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-3.141592653589793);
      doubleArray1[5] = (-3.141592653589793);
      doubleArray1[6] = (-1753.7895824275);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-7.01689946830171);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1699.5499966429);
      doubleArray0[3] = 95.7639603625265;
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 95.7639603625265;
      doubleArray1[2] = 95.7639603625265;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-7.01689946830171);
      doubleArray1[5] = 95.7639603625265;
      doubleArray1[6] = (-1699.5499966429);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray1);
      MathArrays.scale((-7.01689946830171), doubleArray1);
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[4];
      longArray1[0] = 956L;
      longArray1[1] = 10000L;
      longArray1[2] = 1L;
      longArray1[3] = 4503599627370496L;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 390.3;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[7][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = 2632L;
      longArray2[1] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = 2632L;
      longArray3[4] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray4[4] = 2632L;
      longArray4[5] = 2632L;
      longArray4[6] = 2632L;
      longArray4[7] = 2632L;
      longArray4[8] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = 0L;
      longArray5[1] = 0L;
      longArray5[2] = 0L;
      longArray5[3] = 2632L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      longArray7[0] = 2632L;
      longArray7[1] = 0L;
      longArray7[2] = 2632L;
      longArray7[3] = 2632L;
      longArray7[4] = 2632L;
      longArray7[5] = 2632L;
      longArray7[6] = 0L;
      longArray0[6] = longArray7;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      long[] longArray0 = new long[3];
      long long0 = (-3455L);
      longArray0[0] = (-3455L);
      long long1 = 3714L;
      longArray0[1] = 3714L;
      long long2 = 1335L;
      longArray0[2] = 1335L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,455 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4025.201082399343);
      doubleArray0[1] = 93.6778444054;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-829.0);
      doubleArray0[4] = 1811.92695157;
      doubleArray0[5] = (-682.6211576155388);
      doubleArray0[6] = 1799.37369083461;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
