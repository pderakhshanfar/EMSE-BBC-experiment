/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 26 00:24:47 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Object>[][] fieldElementArray0 = MathArrays.buildArray(field0, 391, (-2064));
      assertEquals(391, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
      
      Field<String> field1 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field1, 154);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      FieldElement<Object>[][] fieldElementArray0 = MathArrays.buildArray(field0, 261, 261);
      assertEquals(261, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-17.25913675819);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3276.5892437392263;
      doubleArray0[3] = (-3968.43948);
      doubleArray0[4] = (-1860.870557057);
      doubleArray0[5] = (-177.1369);
      doubleArray0[6] = 2567.444855715721;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-17.25913675819);
      doubleArray1[1] = 2567.444855715721;
      doubleArray1[2] = (-1860.870557057);
      doubleArray1[3] = 3276.5892437392263;
      doubleArray1[4] = (-316.01439232);
      doubleArray1[5] = (-17.25913675819);
      doubleArray1[6] = (-3968.43948);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-17.25913675819), 0.0, 3276.5892437392263, (-3968.43948), (-1860.870557057), (-177.1369), 2567.444855715721}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-17.25913675819), 2567.444855715721, (-1860.870557057), 3276.5892437392263, (-316.01439232), (-17.25913675819), (-3968.43948)}, doubleArray1, 0.01);
      assertEquals((-2.869758710792904E7), double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.3837348F;
      floatArray0[2] = 2087.27F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 2087.27F;
      floatArray1[1] = 2087.27F;
      floatArray1[2] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 1.3837348F, 2087.27F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2087.27F, 2087.27F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (double) 3.4028235E38F;
      doubleArray0[3] = (double) 3.4028235E38F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4.8123190965235035E38, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 3.4028235E38F);
      assertArrayEquals(new double[] {0.0, 0.0, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.7014117331926443E38, 1.7014117331926443E38, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2.836315010707277E77, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1374.9671982951904;
      doubleArray0[1] = 418.91;
      doubleArray0[2] = 1.63E18;
      doubleArray0[3] = 3797.3784;
      doubleArray0[4] = 1202.0;
      doubleArray0[5] = 1.5213333333467548E19;
      doubleArray0[6] = 193.55314;
      doubleArray0[7] = (-337.2131110848);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1374.9671982951904, 418.91, 1.63E18, 3797.3784, 1202.0, 1.5213333333467548E19, 193.55314, (-337.2131110848)}, doubleArray0, 0.01);
      assertEquals(1.5300405586623998E19, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1374.9671982951904, 418.91, 1.63E18, 3797.3784, 1202.0, 1.5213333333467548E19, 193.55314, (-337.2131110848)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      MathArrays.scaleInPlace(3.834E-20, doubleArray0);
      assertArrayEquals(new double[] {1.4699556E-39, 1.4699556E-39}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.4699556E-39, 1.4699556E-39}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.4699556E-39, 1.4699556E-39}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertArrayEquals(new double[] {1.4699556E-39, 1.4699556E-39}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[3][6];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray2;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
      assertArrayEquals(new double[] {1.4699556E-39, 1.4699556E-39}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 134217729;
      intArray0[1] = 134217729;
      intArray0[2] = 241;
      intArray0[3] = (-1172);
      intArray0[4] = 7;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {134217729, 134217729, 241, (-1172), 7}, intArray1);
      assertArrayEquals(new int[] {134217729, 134217729, 241, (-1172), 7}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2068.17327021);
      doubleArray0[1] = (-1425.124240242399);
      doubleArray0[2] = 4.9E-324;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-2068.17327021), (-1425.124240242399), 4.9E-324}, doubleArray0, 0.01);
      assertEquals(2511.636871790506, double0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 67.4115431059;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 67.4115431059, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 134.8230862118, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 134.823)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1024.0;
      doubleArray0[1] = (-1109.0);
      doubleArray0[2] = (-5.207000323380292E-8);
      doubleArray0[3] = 1685.7407589;
      doubleArray0[4] = 5.650007086920087E-9;
      doubleArray0[5] = 1034.81280761;
      doubleArray0[6] = 2656.468978324254;
      doubleArray0[7] = 3.834E-20;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {1024.0, (-1109.0), (-5.207000323380292E-8), 1685.7407589, 5.650007086920087E-9, 1034.81280761, 2656.468978324254, 3.834E-20}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-5.207000323380292E-8);
      doubleArray1[1] = 1034.81280761;
      boolean boolean1 = MathArrays.equals(doubleArray1, (double[]) null);
      assertArrayEquals(new double[] {(-5.207000323380292E-8), 1034.81280761}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[4][6];
      doubleArray2[0] = null;
      doubleArray2[1] = null;
      doubleArray2[2] = doubleArray0;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1034.81280761;
      doubleArray3[1] = (-1109.0);
      doubleArray3[2] = 5406.801;
      doubleArray3[3] = 2656.468978324254;
      doubleArray3[4] = 3.834E-20;
      doubleArray3[5] = 2322.1125045697017;
      doubleArray3[6] = 3.834E-20;
      doubleArray2[3] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-8.0E298);
      doubleArray0[1] = 2461.694;
      doubleArray0[2] = 792.625266547706;
      doubleArray0[3] = (-7.44321345601866E-11);
      doubleArray0[4] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][9];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Double double0 = new Double(1.304E19);
      assertEquals(1.304E19, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 1.63E18;
      doubleArray0[2] = (double) 0.15782715F;
      doubleArray0[3] = (double) 0.15782715F;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = 1.304E19;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.63E18, 0.15782715380191803, 0.15782715380191803, 1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertEquals(2.9203850773485335E19, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.normalizeArray(doubleArray1, 3.4028235E38F);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 535);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2141442421, 2141442421);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 965.1261F;
      floatArray0[2] = 3071.4438F;
      floatArray0[3] = (-1287.63F);
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[1] = 3071.4438F;
      floatArray1[2] = Float.NEGATIVE_INFINITY;
      floatArray1[1] = 3071.4438F;
      floatArray1[4] = 965.1261F;
      floatArray1[5] = Float.NEGATIVE_INFINITY;
      floatArray1[6] = Float.NEGATIVE_INFINITY;
      floatArray1[7] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 965.1261F, 3071.4438F, (-1287.63F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 3071.4438F, Float.NEGATIVE_INFINITY, 0.0F, 965.1261F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 965.1261F, 3071.4438F, (-1287.63F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 3071.4438F, Float.NEGATIVE_INFINITY, 0.0F, 965.1261F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-981);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4336.95977218907;
      doubleArray0[1] = (-2049.00559542578);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {4336.95977218907, (-2049.00559542578)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4336.95977218907, (-2049.00559542578)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {4336.95977218907, (-2049.00559542578)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      boolean boolean1 = MathArrays.equals(doubleArray1, (double[]) null);
      assertArrayEquals(new double[] {4336.95977218907, (-2049.00559542578)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4336.95977218907, (-2049.00559542578)}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {4336.95977218907, (-2049.00559542578)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4336.95977218907, (-2049.00559542578)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.8809220065586265E7, (-1.777290968070384E7), 4198423.930086155}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      try { 
        MathArrays.convolve((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertEquals(12, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2113.963755786311;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2113.963755786311, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {2113.963755786311, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {2113.963755786311, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, (-2401.7460886), 1.425771232659977E7, 2113.963755786311, 1288.665636238, 0.0, 1167.19);
      assertEquals((-3.4240680620346664E10), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2246));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2779.70001068887;
      doubleArray0[1] = (-3.5997360512765566E-9);
      doubleArray0[2] = (-243.270002);
      doubleArray0[3] = 2890.199462890625;
      double[][] doubleArray1 = new double[0][7];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-243.270002), (-3.5997360512765566E-9), 2779.70001068887, 2890.199462890625}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.linearCombination(2952.53, 0.8775825500488281, 3887.4589495961877, 0.8775825500488281);
      assertEquals(6002.654944692428, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(boolean1);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(4, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("NEGATIVE_ELEMENT_AT_INDEX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.NEGATIVE_ELEMENT_AT_INDEX
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = 144.96F;
      floatArray0[2] = 2339.4F;
      floatArray0[3] = 358.77F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-279.34F);
      try { 
        MathArrays.normalizeArray(doubleArray1, Float.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 87.77;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (-1153.28913723));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.4028234663852886E38;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3.4028234663852886E38}, doubleArray0, 0.01);
      assertEquals(3.4028234663852886E38, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.4028234663852886E38}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (double) 3.4028235E38F;
      doubleArray0[3] = (double) 3.4028235E38F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4.8123190965235035E38, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 6.805646932770577E38, 6.805646932770577E38, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 68;
      floatArray0[1] = (float) 68;
      floatArray0[4] = (float) 68;
      floatArray0[3] = (-303.969F);
      floatArray0[4] = (-1343.743F);
      floatArray0[5] = (float) 68;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {68.0F, 68.0F, 0.0F, (-303.969F), (-1343.743F), 68.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {68.0F, 68.0F, 0.0F, (-303.969F), (-1343.743F), 68.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) (-1343.743F);
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) 68.0F;
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray1, (float[]) null);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(boolean2);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1343.7430419921875), 0.0, 68.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 10
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) 0;
      doubleArray3[6] = (double) 0;
      doubleArray3[7] = (double) 0;
      doubleArray3[8] = (double) 0;
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 2.0;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 5;
      intArray1[1] = 5;
      intArray1[2] = 5;
      intArray1[3] = 5;
      intArray1[4] = 5;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertArrayEquals(new int[] {5}, intArray0);
      assertArrayEquals(new int[] {5, 5, 5, 5, 5}, intArray1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 5;
      floatArray0[1] = (float) 5;
      floatArray0[2] = (float) 5;
      floatArray0[3] = (float) 5;
      floatArray0[4] = (float) 5;
      floatArray0[5] = (float) 5;
      floatArray0[6] = (float) 5;
      floatArray0[7] = (float) 5;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {5.0F, 5.0F, 5.0F, 5.0F, 5.0F, 5.0F, 5.0F, 5.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {5.0F, 5.0F, 5.0F, 5.0F, 5.0F, 5.0F, 5.0F, 5.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int int0 = MathArrays.distance1(intArray1, intArray1);
      assertArrayEquals(new int[] {5, 5, 5, 5, 5}, intArray1);
      assertEquals(0, int0);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 5;
      doubleArray1[1] = (double) 5;
      doubleArray1[3] = 0.0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.0, 5.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[4];
      intArray0[0] = (-1678);
      doubleArray0[1] = (double) (-1678);
      intArray0[1] = (-1678);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {(-1678), (-1678), 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1678), (-1678), 0, 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-1678);
      intArray2[1] = (-1678);
      intArray2[2] = (-1678);
      intArray2[3] = (-1678);
      intArray2[4] = (-1678);
      double double0 = MathArrays.distance(intArray0, intArray2);
      assertArrayEquals(new int[] {(-1678), (-1678), 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1678), (-1678), (-1678), (-1678), (-1678)}, intArray2);
      assertEquals(2373.0503576620536, double0, 0.01);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int int0 = MathArrays.distance1(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1678), (-1678), 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1678), (-1678), 0, 0}, intArray1);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1678.0), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1678.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 2815684.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1678.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146214667);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-281.629776768847), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(2.0);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[2] = double0;
      Double double1 = new Double(0.1428571343421936);
      assertEquals(0.1428571343421936, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray1 = null;
      int[] intArray0 = new int[1];
      intArray0[0] = 141;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {141}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 10000;
      intArray0[1] = 56;
      intArray0[2] = 10000;
      intArray0[3] = 10000;
      intArray0[4] = 10000;
      intArray0[5] = 1069;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {10000, 56, 10000, 10000, 10000, 1069}, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 5.041914939880371;
      doubleArray2[2] = (double) 1069;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[0] = Double.NaN;
      doubleArray0[2] = (-1016.947234457297);
      doubleArray0[3] = (-298.4850593725274);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {Double.NaN, 0.0, (-1016.947234457297), (-298.4850593725274)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2890.1995F);
      floatArray0[1] = (-2890.1995F);
      floatArray0[2] = 3.4028235E38F;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, (-1016.947234457297), (-298.4850593725274)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, (-1016.947234457297), (-298.4850593725274)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[0] = Double.NaN;
      doubleArray0[2] = (-1016.947234457297);
      doubleArray0[3] = (-298.4850593725274);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {Double.NaN, 0.0, (-1016.947234457297), (-298.4850593725274)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2890.1995F);
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.15782715F;
      floatArray0[5] = 794.9238F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, (-1016.947234457297), (-298.4850593725274)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1730.466903974);
      assertArrayEquals(new double[] {Double.NaN, 0.0, (-1016.947234457297), (-298.4850593725274)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, -0.0, 1337.8062410134978, 392.6606629605023}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.normalizeArray(doubleArray1, (-1293.073481));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1102.801605820709);
      doubleArray0[3] = (-1102.801605820709);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1102.801605820709));
      assertArrayEquals(new double[] {0.0, Double.NaN, (-1102.801605820709), (-1102.801605820709)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, (-551.4008029103545), (-551.4008029103545)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1148.532566283826;
      doubleArray0[1] = 1653.74253858287;
      doubleArray0[2] = (-2106.908);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1148.532566283826, 1653.74253858287, (-2106.908)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {1148.532566283826, 1653.74253858287, (-2106.908)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      int int0 = (-845);
      intArray0[0] = (-845);
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Double double0 = new Double(1.304E19);
      assertEquals(1.304E19, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.1428571343421936);
      assertEquals(0.1428571343421936, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.1428571343421936;
      doubleArray1[1] = 1.304E19;
      doubleArray1[2] = 0.1428571343421936;
      double[] doubleArray2 = MathArrays.scale(0.1428571343421936, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.1428571343421936, 1.304E19, 0.1428571343421936}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray3, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1813.39655411754);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {(-1813.39655411754), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1813.39655411754), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1813.39655411754), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3288407.0624853685, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double double1 = MathArrays.linearCombination((-1813.39655411754), 0.0, 0.0, 0.0, (-1813.39655411754), 0.0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 68;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 68;
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 68.0, 0.0, 68.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.2599210498948732;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {1.2599210498948732, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = (-3961.02007361887);
      double double2 = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = false;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1813.39655411754);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-3908.117);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1813.39655411754), 0.0, (-1.0), (-3908.117)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3626.79310823508), 0.0, (-2.0), (-7816.234)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-1813.39655411754), 0.0, (-1.0), (-3908.117)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3626.79310823508), 0.0, (-2.0), (-7816.234)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = (-3482);
      intArray2[2] = 0;
      intArray2[3] = 0;
      int int1 = MathArrays.distanceInf(intArray1, intArray2);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {0, (-3482), 0, 0}, intArray2);
      assertEquals(3482, int1);
      assertEquals(2, intArray1.length);
      assertEquals(4, intArray2.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-1813.39655411754), 0.0, (-1.0), (-3908.117)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3626.79310823508), 0.0, (-2.0), (-7816.234)}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[][] longArray0 = new long[3][1];
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 68;
      longArray1[1] = (long) 68;
      longArray1[2] = (long) 68;
      longArray1[3] = (long) 68;
      longArray1[4] = (long) 68;
      longArray1[5] = (long) 68;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 68;
      longArray2[1] = (long) 68;
      longArray2[2] = (long) 68;
      longArray2[3] = (long) 68;
      longArray2[4] = (long) 68;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 68;
      longArray3[1] = (long) 68;
      longArray3[2] = (long) 68;
      longArray0[2] = longArray3;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 68L;
      doubleArray0[1] = (double) 68L;
      doubleArray0[2] = (double) 68L;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (68 >= 68)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[0][1];
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Double double0 = new Double((-15.598663626922965));
      assertEquals((-15.598663626922965), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(3.834E-20);
      assertEquals(3.834E-20, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double double2 = MathArrays.linearCombination((-2796.361073817), 3.834E-20, 3.834E-20, 1.0612957180910213E7, 1044.822779138341, (-3636.38));
      assertEquals((-3799372.657603081), double2, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-141);
      intArray0[1] = 2142364483;
      intArray0[2] = 1614;
      intArray0[3] = 4759;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 812;
      intArray1[1] = (-141);
      intArray1[2] = (-141);
      intArray1[3] = 2142364483;
      intArray1[4] = 2142364483;
      intArray1[5] = (-141);
      intArray1[6] = (-2146746907);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {(-141), 2142364483, 1614, 4759}, intArray0);
      assertArrayEquals(new int[] {812, (-141), (-141), 2142364483, 2142364483, (-141), (-2146746907)}, intArray1);
      assertEquals((-10240240), int0);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-141);
      doubleArray0[2] = (double) (-141);
      doubleArray0[3] = 1.0612957180910213E7;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = (double) 2142364483;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -141)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 203);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.scale(3.834E-20, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2533.36927584);
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double0 = MathArrays.distance(intArray1, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(2135139299);
      assertEquals(2135139299, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Double double0 = new Double(2.0);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 2.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4.0, 8.0, 12.0, 16.0, 12.0, 8.0, 4.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(2.0);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[2] = double0;
      Double double1 = new Double(0.1428571343421936);
      assertEquals(0.1428571343421936, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = MathArrays.scale(2.0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.checkPositive(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray2, 3352);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(3352, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 0.1428571343421936;
      doubleArray5[1] = (double) doubleArray0[2];
      int[] intArray0 = new int[8];
      intArray0[0] = (-3431);
      intArray0[1] = 3352;
      intArray0[2] = 3352;
      intArray0[3] = (-3431);
      intArray0[4] = 3352;
      intArray0[5] = (-3431);
      intArray0[6] = 3352;
      intArray0[7] = (-3431);
      int[] intArray1 = MathArrays.copyOf(intArray0, 142);
      assertArrayEquals(new int[] {(-3431), 3352, 3352, (-3431), 3352, (-3431), 3352, (-3431)}, intArray0);
      assertEquals(142, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 0, (double) 0, (double) 0, (double) 0, (-1399.1413987450549), (double) 0, (double) 0, (double) 0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1399.1413987450549);
      doubleArray0[1] = 0.0;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1399.1413987450549), 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(1.34217729E8, (-1399.1413987450549), 1.073741824E9, (-1950.739399943889), 0.4311765432357788, 1.073741824E9, (-3435.8555522), (double) 0);
      assertEquals((-2.281917090245862E12), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1399.1413987450549), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double3 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-1399.1413987450549), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2236));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = 0.0F;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      long[][] longArray0 = new long[6][1];
      long[] longArray1 = new long[9];
      longArray1[0] = 1859L;
      longArray1[1] = (-784L);
      longArray1[2] = 1073741824L;
      longArray1[3] = 586L;
      longArray1[4] = (-1934L);
      longArray1[5] = 4499201580859392L;
      longArray1[6] = (-3537L);
      longArray1[7] = 7910884519577875640L;
      longArray1[8] = 725L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1859L;
      longArray3[1] = 586L;
      longArray3[2] = 725L;
      longArray3[3] = 725L;
      longArray3[4] = (-3537L);
      longArray3[5] = (-1934L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 1859L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = (-3537L);
      longArray5[1] = 1859L;
      longArray5[2] = 7910884519577875640L;
      longArray5[3] = (-784L);
      longArray5[4] = (-784L);
      longArray5[5] = 4499201580859392L;
      longArray5[6] = (-3537L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[4];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = 1859L;
      longArray6[1] = (-3537L);
      longArray6[2] = 725L;
      longArray6[3] = 7910884519577875640L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = 1.0;
      double double1 = 173.9649269518783;
      double double2 = 0.1428571343421936;
      Double double3 = new Double(0.1428571343421936);
      assertEquals(0.1428571343421936, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 173.9649269518783;
      doubleArray0[2] = 1.0;
      double[] doubleArray1 = MathArrays.scale(0.1428571343421936, doubleArray0);
      assertArrayEquals(new double[] {1.0, 173.9649269518783, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.1428571343421936, 24.852130940394378, 0.1428571343421936}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double4 = MathArrays.distance(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {1.0, 173.9649269518783, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.1428571343421936, 24.852130940394378, 0.1428571343421936}, doubleArray1, 0.01);
      assertEquals(0.0, double4, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {1.0, 173.9649269518783, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.1428571343421936, 24.852130940394378, 0.1428571343421936}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.1428571343421936, 24.852130940394378, 0.1428571343421936}, doubleArray3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      double double5 = 25.2451;
      double double6 = MathArrays.linearCombination(116.25212136, 1.0, 1.0, 116.25212136, 2359.994, 0.1428571343421936, 25.2451, 0.0);
      assertEquals(569.6462226247709, double6, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      
      MathArrays.checkOrder(doubleArray2);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 3.4028235E38F;
      Integer integer0 = new Integer((-3868));
      assertEquals((-3868), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("INCREASING", integer0);
      assertEquals((-3868), (int)integer1);
      assertNotNull(integer1);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3.4028235E38F;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) 3.4028235E38F;
      doubleArray1[4] = (double) (-3868);
      doubleArray1[5] = (double) (-3868);
      doubleArray1[6] = (double) (-3868);
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.4028234663852886E38, 0.0, 0.0, 3.4028234663852886E38, (-3868.0), (-3868.0), (-3868.0)}, doubleArray1, 0.01);
      assertEquals(4.812319096523503E38, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (340,282,346,638,528,860,000,000,000,000,000,000,000 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1513.732F;
      floatArray0[1] = (-3260.5254F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1513.732F, (-3260.5254F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 966L;
      longArray0[1] = 0L;
      longArray0[2] = (-1633L);
      longArray0[3] = (-1633L);
      longArray0[4] = (-584L);
      longArray0[5] = 0L;
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 1513.732F, (double) 0L, 0.0, 0.11113807559013367, (double) 0, 2639.32330279);
      assertEquals(0.0, double0, 0.01);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int1);
      assertEquals(0, intArray0.length);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1633L);
      doubleArray0[1] = (double) (-1633L);
      doubleArray0[2] = (double) 966L;
      doubleArray0[3] = (double) (-1633L);
      doubleArray0[4] = (double) 966L;
      doubleArray0[5] = (double) 1513.732F;
      doubleArray0[6] = 928.9061548119386;
      doubleArray0[7] = (double) 966L;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1,633 >= -1,633)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Double double0 = new Double((-1243.368443253));
      assertEquals((-1243.368443253), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2135.0956);
      assertEquals(2135.0956, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(2.0);
      assertEquals(2.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double3;
      doubleArray0[1] = double3;
      doubleArray0[2] = double1;
      doubleArray0[3] = double2;
      doubleArray0[4] = double2;
      doubleArray0[5] = double0;
      Double[] doubleArray1 = new Double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double2;
      doubleArray1[1] = double1;
      doubleArray1[2] = double1;
      doubleArray1[3] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      assertFalse(boolean1);
      assertEquals(4, doubleArray1.length);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2913.98766804;
      doubleArray0[2] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {2913.98766804, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      long[][] longArray0 = new long[5][3];
      long[] longArray1 = new long[1];
      longArray1[0] = (-1934L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1934L);
      longArray2[1] = (-1934L);
      longArray2[2] = (-1934L);
      longArray2[3] = (-1934L);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1934L);
      doubleArray1[1] = (double) (-1934L);
      doubleArray1[2] = Double.NaN;
      boolean boolean2 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
      assertArrayEquals(new double[] {(-1934.0), (-1934.0), Double.NaN}, doubleArray1, 0.01);
      assertTrue(boolean2);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-484.3649739767);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-484.3649739767)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {234609.4280154493}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(1.0, (-305.816960239), 3990.044554, (-305.816960239));
      assertEquals((-1220529.1136826957), double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-484.3649739767)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {234609.4280154493}, doubleArray1, 0.01);
      assertEquals(235093.792989426, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1951));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2132.875291502), (-2411.1978004173757), 1.073741824E9, 1262.9484, Double.NaN, 1.073741824E9, 1.073741824E9, 1.0612957180910213E7);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3775.938602069659;
      int int0 = 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 820);
      assertArrayEquals(new double[] {3775.938602069659, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(820, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 820;
      floatArray0[1] = 1021.06F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 820;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {820.0F, 1021.06F, 0.0F, 820.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 1.34217729E8, (double) 0, 557.9);
      assertEquals(0.0, double0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<jy";
      stringArray0[1] = "IC";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "w?w5;P\"cdI";
      stringArray0[1] = "w?w5;P\"cdI";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2423.880058);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-1.0), (-2423.880058)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Double double0 = new Double((-1243.368443253));
      assertEquals((-1243.368443253), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2135.0956);
      assertEquals(2135.0956, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(2.0);
      assertEquals(2.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double3;
      doubleArray0[1] = double3;
      doubleArray0[2] = double1;
      doubleArray0[3] = double2;
      doubleArray0[4] = double2;
      doubleArray0[5] = double0;
      doubleArray0[6] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(2.0);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[2] = double0;
      Double double1 = new Double(0.1428571343421936);
      assertEquals(0.1428571343421936, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = MathArrays.scale(2.0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.checkPositive(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray2, 3352);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(3352, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 0.1428571343421936;
      doubleArray5[1] = (double) doubleArray0[2];
      doubleArray5[2] = (double) 3352;
      doubleArray5[3] = (double) 3352;
      doubleArray5[4] = 2.0;
      doubleArray5[5] = 2.0;
      try { 
        MathArrays.linearCombination(doubleArray5, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 3,352
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 173.9649269518783;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[4] = 0.0;
      double double0 = new Double(1.0);
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 12;
      intArray0[1] = (-1);
      intArray0[2] = 14;
      intArray0[3] = 1825;
      intArray0[4] = (-2146459747);
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-402.46677F);
      floatArray0[1] = (float) (-2146459747);
      floatArray0[2] = (float) (-2146459747);
      floatArray0[3] = (float) (-2146459747);
      floatArray0[4] = (float) (-1);
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-402.46677F), (-2.14645978E9F), (-2.14645978E9F), (-2.14645978E9F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean2);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = (-1187.412056083);
      doubleArray0[2] = (-1187.412056083);
      doubleArray0[3] = (-1187.412056083);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1187.412056083);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1187.412056083);
      doubleArray1[4] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.32, (-1187.412056083), (-1187.412056083), (-1187.412056083), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1187.412056083), 0.0, (-1187.412056083), 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2247;
      intArray0[1] = (-352);
      intArray0[2] = 63;
      intArray0[3] = 1336;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {2247, (-352), 63, 1336}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2113.963755786311;
      doubleArray0[1] = 1288.665636238;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2113.963755786311, 1288.665636238, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {2113.963755786311, 1288.665636238, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {2113.963755786311, 1288.665636238, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertArrayEquals(new double[] {2113.963755786311, 1288.665636238, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(0.0, (-3147.4), (-2401.7460886), 1.425771232659977E7, 2113.963755786311, 1288.665636238, 0.0, 1167.19);
      assertEquals((-3.4240680620346664E10), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2246));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-526), (-526));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = (-1187.412056083);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.32, (-1187.412056083), (-1.0), (-1.0), (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3639), (-3639));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1016.947234457297);
      doubleArray0[3] = (-298.4850593725274);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {3.834E-20, Double.NaN, (-1016.947234457297), (-298.4850593725274)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2875.4683F);
      floatArray0[1] = 3.4028235E38F;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, Double.NaN, (-1016.947234457297), (-298.4850593725274)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(18, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(18, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3775.938602069659;
      doubleArray0[1] = 0.0;
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 3775.938602069659;
      doubleArray1[2] = (Double) 3775.938602069659;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 3775.938602069659;
      Double double0 = new Double((double) doubleArray1[4]);
      assertEquals(3775.938602069659, (double)double0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertNotNull(double0);
      
      doubleArray1[5] = double0;
      doubleArray1[6] = (Double) 3775.938602069659;
      Double double1 = new Double((double) doubleArray1[0]);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals(8, doubleArray1.length);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[7] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, doubleArray1.length);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3775.938602069659, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3775.938602069659, double2, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3775.938602069659;
      doubleArray2[1] = (double) doubleArray1[1];
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) doubleArray1[4];
      doubleArray2[4] = (double) 0.0F;
      doubleArray2[5] = 3775.938602069659;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2135.0956;
      doubleArray0[1] = 1288.665636238;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2135.0956, 1288.665636238, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {2135.0956, 1288.665636238, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2493.8509063614947, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      int int0 = (-1419);
      intArray0[0] = (-1419);
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = (-1094);
      intArray0[2] = (-1094);
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertArrayEquals(new int[] {(-1419), 0, (-1094)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "Ho}A*S=6[ajQJ'oApl!";
      stringArray0[2] = "";
      stringArray0[3] = "3Fc?7{QYSSu|e/p";
      double double1 = MathArrays.linearCombination(175.96493695187831, (double) (-1094), (double) (-1094), 2991.256755586, 1094.11739398707, (double) (-1094), (-109.329), (-491.0));
      assertEquals((-4608224.421658293), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,135.096 >= 1,288.666)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(521.75, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-141.966F);
      floatArray0[2] = (-12.192F);
      floatArray0[3] = 3174.9038F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-246.2703F);
      floatArray0[6] = (-2214.518F);
      floatArray0[7] = 714.0554F;
      floatArray0[8] = (-2365.09F);
      float[] floatArray1 = new float[16];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-141.966F);
      floatArray1[1] = (-2214.518F);
      floatArray1[2] = 714.0554F;
      floatArray1[3] = 714.0554F;
      floatArray1[4] = (-246.2703F);
      floatArray1[5] = (-246.2703F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, (-141.966F), (-12.192F), 3174.9038F, 0.0F, (-246.2703F), (-2214.518F), 714.0554F, (-2365.09F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3344;
      intArray0[1] = (-2026);
      intArray0[2] = 252;
      intArray0[3] = 0;
      intArray0[4] = 3465;
      intArray0[5] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {3344, (-2026), 252, 0, 3465, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 928.9061548119386, 20.0, (double) 3344, (double) 0, (double) 0);
      assertEquals(66880.0, double0, 0.01);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {3344, (-2026), 252, 0, 3465, 0}, intArray0);
      assertEquals(0, int1);
      assertEquals(6, intArray0.length);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[6];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.scaleInPlace(66880.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = null;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 252;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 2097.38088954898;
      doubleArray2[4] = (double) 0;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray2, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 173.9649269518783;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 173.9649269518783, 1.0E-5, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1678);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {(-1678)}, intArray0);
      assertArrayEquals(new int[] {(-1678)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double1 = MathArrays.distance(intArray1, intArray1);
      assertArrayEquals(new int[] {(-1678)}, intArray0);
      assertArrayEquals(new int[] {(-1678)}, intArray1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 173.9649269518783;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      int[] intArray0 = new int[6];
      intArray0[0] = (-442);
      intArray0[1] = (-1);
      intArray0[2] = (-1133);
      intArray0[3] = 2145246685;
      intArray0[4] = 2;
      intArray0[5] = 1045;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-442), (-1), (-1133), 2145246685, 2, 1045}, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(2145246685, doubleArray0);
      assertArrayEquals(new double[] {1.0, 173.9649269518783, 1.0E-5, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.145246685E9, 3.731976828497841E11, 21452.46685, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2913.98766804;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 125.68893312455;
      doubleArray0[4] = 125.68893312455;
      doubleArray0[5] = (-4107.393166394459);
      doubleArray0[7] = (-1379.5590647731);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "1f#";
      stringArray0[1] = "1f#";
      stringArray0[3] = "QnmJR[n[";
      stringArray0[4] = "1f#";
      stringArray0[5] = "1f#";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4225.4063582);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4225.4063582)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-8450.8127164)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "invalid row dimension: {0} (must be positive)";
      stringArray0[1] = "u{P,pj";
      stringArray0[2] = "L";
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4225.4063582)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-8450.8127164)}, doubleArray1, 0.01);
      assertEquals(4225.4063582, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4107.393166394459);
      doubleArray0[1] = (-4107.393166394459);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-4107.393166394459), (-4107.393166394459)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,107.393 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-688.17128);
      doubleArray0[1] = 1003.117873;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-298.4850593725274);
      doubleArray1[1] = (-298.4850593725274);
      doubleArray1[2] = (-114.0);
      doubleArray1[3] = (-688.17128);
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-298.4850593725274), (-298.4850593725274), (-114.0), (-688.17128), 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(664762.3719540809, double0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-608.0));
      assertArrayEquals(new double[] {(-298.4850593725274), (-298.4850593725274), (-114.0), (-688.17128), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-129.70734499120124), (-129.70734499120124), (-49.53895300515635), (-299.0463570124412), 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 173.9649269518783;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[4] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 173.9649269518783, 1.0E-5, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 12;
      intArray0[1] = (-1);
      intArray0[2] = 14;
      intArray0[3] = 1825;
      intArray0[4] = (-2146459747);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {1.0, 173.9649269518783, 1.0E-5, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-402.46677F);
      floatArray0[1] = (float) (-2146459747);
      floatArray0[2] = (float) (-2146459747);
      floatArray0[3] = (float) (-2146459747);
      floatArray0[4] = (float) (-1);
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-402.46677F), (-2.14645978E9F), (-2.14645978E9F), (-2.14645978E9F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean2);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 173.9649269518783;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[4] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 173.9649269518783, 1.0E-5, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 12;
      intArray0[1] = (-1);
      intArray0[2] = 14;
      intArray0[3] = 1825;
      intArray0[4] = (-2146459747);
      intArray0[5] = 0;
      intArray0[6] = 339;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 339;
      intArray1[1] = 14;
      intArray1[2] = 14;
      intArray1[3] = 12;
      intArray1[4] = 14;
      intArray1[5] = 339;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "fV_$f@&";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2135.0956;
      doubleArray0[1] = 1288.665636238;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2135.0956, 1288.665636238, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {2135.0956, 1288.665636238, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2493.8509063614947, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1419);
      intArray0[1] = 0;
      intArray0[2] = (-1094);
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertArrayEquals(new int[] {(-1419), 0, (-1094)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "Ho}A*S=6[ajQJ'oApl!";
      stringArray0[2] = "";
      stringArray0[3] = "3Fc?7{QYSSu|e/p";
      stringArray0[4] = "&ul";
      stringArray0[5] = "l/nJ,_:4Hah(";
      stringArray0[6] = "Z";
      stringArray0[7] = "TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1600.485124;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1600.485124}, doubleArray0, 0.01);
      assertEquals(1600.485124, double0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3344;
      intArray0[1] = (-2026);
      intArray0[2] = 252;
      intArray0[3] = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3450.1726068375815);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 252;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3450.1726068375815), 0.0, 252.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 3465;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (-3450.1726068375815);
      doubleArray2[3] = (double) 3344;
      doubleArray2[4] = 0.043323961617872095;
      doubleArray2[5] = 0.043323961617872095;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (-1424.68231);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-3450.1726068375815), 0.0, 252.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3465.0, 0.0, (-3450.1726068375815), 3344.0, 0.043323961617872095, 0.043323961617872095, 0.0, (-1424.68231)}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-3450.1726068375815), 0.0, 252.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3459.3633831924094, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 10.0;
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 1182.424145981918;
      doubleArray0[2] = (-673.3);
      double double1 = (-1.0);
      doubleArray0[3] = (-1.0);
      double double2 = (-2189.014);
      doubleArray0[4] = (-2189.014);
      double double3 = (-1093.2386948214416);
      doubleArray0[5] = (-1093.2386948214416);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {10.0, 1182.424145981918, (-673.3), (-1.0), (-2189.014), (-1093.2386948214416)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long[][] longArray0 = new long[1][0];
      long[] longArray1 = new long[1];
      longArray1[0] = (-1L);
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.4439717236742845E-8;
      doubleArray0[1] = 5.041914939880371;
      doubleArray0[2] = (-4475.7799861982);
      doubleArray0[3] = 104.08743922;
      doubleArray0[4] = 1293.95;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.4439717236742845E-8, 5.041914939880371, (-4475.7799861982), 104.08743922, 1293.95}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1860941233468023E-15, 3.472842497223786E-7, 25.420597971794606, (-45133.00395289106), 2.00336560849712E7, (-918696.9828780787), (-1.1572036831278946E7), 269367.883957438, 1674306.6025}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = Float.NaN;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long[][] longArray0 = new long[3][1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1889.4F);
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-297.6385F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1889.4F), Float.NaN, 0.0F, (-297.6385F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-297.6385F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-297.63848876953125)}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      long[][] longArray0 = new long[6][1];
      long[] longArray1 = new long[8];
      longArray1[0] = 0L;
      longArray1[1] = 959L;
      longArray1[2] = (-1L);
      longArray1[3] = 3642L;
      longArray1[4] = (-3183605296591799669L);
      longArray1[5] = (-1073741824L);
      longArray1[6] = (-4048L);
      longArray1[7] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 959L;
      longArray2[1] = 959L;
      longArray2[2] = (-4048L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 959L;
      longArray3[1] = 0L;
      longArray3[2] = (-3183605296591799669L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 0L;
      longArray4[1] = (-1073741824L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 959L;
      longArray5[1] = 0L;
      longArray5[2] = 959L;
      longArray5[3] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      try { 
        MathArrays.normalizeArray((double[]) null, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2180.34869);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 172.82444499725;
      doubleArray0[4] = 2609.389697188;
      doubleArray0[5] = (-2180.34869);
      doubleArray0[6] = (-176.98780659);
      try { 
        MathArrays.normalizeArray(doubleArray0, 4192.412350346906);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(10, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2483.65311);
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, (-2483.65311), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double double0 = MathArrays.linearCombination((-399.149), 0.0, (-2483.65311), 0.0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, (-2483.65311), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 0.0F;
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0, 2386);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, (-2483.65311), 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(2386, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray3, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1315));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(3.141592653589793);
      assertEquals(3.141592653589793, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 3.141592653589793;
      doubleArray1[1] = 3.141592653589793;
      doubleArray1[2] = (-2254.266);
      doubleArray1[3] = (double) doubleArray0[0];
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {3.141592653589793, 3.141592653589793, (-2254.266), 3.141592653589793}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = (-2875.4683F);
      floatArray0[3] = 2391.0F;
      floatArray0[4] = 2391.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {3.4028235E38F, 3.4028235E38F, (-2875.4683F), 2391.0F, 2391.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3775.938602069659;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[1] = (-4690.45945919);
      doubleArray0[4] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3775.938602069659, (-4690.45945919), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1016.947234457297);
      doubleArray0[3] = (-298.4850593725274);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {3.834E-20, Double.NaN, (-1016.947234457297), (-298.4850593725274)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2875.4683F);
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 780.09F;
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) (-298.4850593725274);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      assertTrue(boolean1);
      assertEquals(1, doubleArray1.length);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, Double.NaN, (-1016.947234457297), (-298.4850593725274)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, Double.NaN, (-1016.947234457297), (-298.4850593725274)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 173.9649269518783;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[4] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1.0E-5, 173.9649269518783, 0.0, Double.NaN, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2050;
      intArray0[1] = (-2146960941);
      intArray0[2] = (-1546);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {2050, (-2146960941), (-1546)}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2913.98766804;
      doubleArray0[2] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2913.98766804, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8491324.129489196, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {2913.98766804, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8491324.129489196, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2913.98766804;
      doubleArray3[1] = 2913.98766804;
      doubleArray0[0] = 2913.98766804;
      doubleArray3[3] = Double.NaN;
      doubleArray3[4] = 2913.98766804;
      doubleArray3[5] = (-438.601243);
      doubleArray3[6] = (double) 3265;
      doubleArray3[7] = 2913.98766804;
      doubleArray3[8] = 2913.98766804;
      double double0 = MathArrays.distance(doubleArray0, doubleArray3);
      assertArrayEquals(new double[] {2913.98766804, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2913.98766804, 2913.98766804, 0.0, Double.NaN, 2913.98766804, (-438.601243), 3265.0, 2913.98766804, 2913.98766804}, doubleArray3, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      double[] doubleArray4 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2913.98766804, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8491324.129489196, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(15, doubleArray4.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(0.0, Double.NaN, 0.0, 3031.8996, (-438.601243), (-494.529963225), 5.669184079525E-24, (-2467.886));
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[1][2];
      MathArrays.sortInPlace(doubleArray0[0], mathArrays_OrderDirection0, doubleArray0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 2913.98766804;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 2913.98766804, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 8491324.129489196, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 2913.98766804, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 8491324.129489196, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(2913.98766804, 2913.98766804, 2913.98766804, 2913.98766804, 0.0, 2913.98766804, 1262.9484, 2913.98766804);
      assertEquals(2.066286432194924E7, double0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-688.17128);
      doubleArray0[1] = 1003.117873;
      doubleArray0[2] = (-1093.2386948214416);
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-688.17128), 1003.117873, (-1093.2386948214416)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-688.17128), 1003.117873, (-1093.2386948214416)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(1003.117873, 0.0, 1003.117873, (-1865.66018390724), (-1093.2386948214416), 0.0);
      assertEquals((-1871477.0754218195), double0, 0.01);
      
      double double1 = 1.0;
      double double2 = MathArrays.linearCombination((-1093.2386948214416), (-1093.2386948214416), 1.0, 0.0, 422.0, 2.0, (-491.0), 1094.11739398707);
      assertEquals(658803.2034072378, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 134217729, 2736);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-840.74);
      doubleArray0[1] = (-2777.3187573841);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-106.84);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-366.43995);
      doubleArray0[8] = 900.3465074366559;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-106.84);
      doubleArray1[2] = (-3.141592653589793);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-366.43995);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-2777.3187573841);
      doubleArray1[7] = 900.3465074366559;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-840.74), (-2777.3187573841), 0.0, 0.0, 0.0, (-106.84), (-1.0), (-366.43995), 900.3465074366559}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-106.84), (-3.141592653589793), 0.0, (-366.43995), (-1.0), (-2777.3187573841), 900.3465074366559}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2913.98766804;
      doubleArray0[2] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {2913.98766804, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2913.98766804, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean2);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3344;
      intArray0[1] = (-2026);
      intArray0[2] = 252;
      intArray0[3] = 0;
      intArray0[4] = 3465;
      intArray0[5] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {3344, (-2026), 252, 0, 3465, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 928.9061548119386, 20.0, (double) 3344, (double) 0, (double) 0);
      assertEquals(66880.0, double0, 0.01);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {3344, (-2026), 252, 0, 3465, 0}, intArray0);
      assertEquals(0, int1);
      assertEquals(6, intArray0.length);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3465;
      doubleArray0[1] = (double) 3344;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 3344;
      doubleArray0[5] = (double) 0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (3,465 >= 3,344)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 483.079603141;
      doubleArray0[1] = 2913.98766804;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 125.68893312455;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-4107.393166394459);
      doubleArray0[6] = (-1379.5590647731);
      doubleArray0[7] = (-22.43968857);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {483.079603141, 2913.98766804, Double.NaN, 125.68893312455, 0.0, (-4107.393166394459), (-1379.5590647731), (-22.43968857)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {483.079603141, 2913.98766804, Double.NaN, 125.68893312455, 0.0, (-4107.393166394459), (-1379.5590647731), (-22.43968857)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.scaleInPlace(538.6375, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2009.85005);
      doubleArray0[1] = (-2009.85005);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2009.85005);
      doubleArray0[4] = (-2009.85005);
      doubleArray0[5] = (-2009.85005);
      doubleArray0[6] = (-2009.85005);
      MathArrays.scaleInPlace((-2009.85005), doubleArray0);
      assertArrayEquals(new double[] {4039497.2234850028, 4039497.2234850028, -0.0, 4039497.2234850028, 4039497.2234850028, 4039497.2234850028, 4039497.2234850028}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1520.4;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-20.0);
      doubleArray0[7] = -0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, 20.0, 0.0, 0.0, 1520.4, 0.0, (-20.0), -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 20.0, 0.0, 0.0, 1520.4, 0.0, (-20.0), -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8, 20.0, 0.0, 0.0, 1520.4, 0.0, (-20.0), -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 20.0, 0.0, 0.0, 1520.4, 0.0, (-20.0), -0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2103);
      intArray0[1] = 600;
      intArray0[2] = 299;
      intArray0[3] = 1143;
      intArray0[4] = 3653;
      intArray0[5] = 44;
      intArray0[6] = (-1333);
      intArray0[7] = (-1600);
      intArray0[8] = 1249;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2103), 600, 299, 1143, 3653, 44, (-1333), (-1600), 1249}, intArray0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1513.732F;
      floatArray0[1] = (-3260.5254F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1513.732F, (-3260.5254F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      long[][] longArray0 = new long[5][0];
      long[] longArray1 = new long[8];
      longArray1[0] = 966L;
      longArray1[1] = 0L;
      longArray1[2] = (-1633L);
      longArray1[3] = 2333L;
      longArray1[4] = (-584L);
      longArray1[5] = 0L;
      longArray1[6] = 5309L;
      longArray1[7] = 3240L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-584L);
      longArray2[1] = 0L;
      longArray2[2] = 1154L;
      longArray2[3] = 966L;
      longArray2[4] = 0L;
      longArray2[5] = 966L;
      longArray2[6] = 5309L;
      longArray2[7] = (-3048L);
      longArray2[8] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-584L);
      longArray3[1] = (-1633L);
      longArray3[2] = (-3048L);
      longArray3[3] = (-584L);
      longArray3[4] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 966L;
      longArray4[1] = 0L;
      longArray4[2] = 5309L;
      longArray4[3] = 1154L;
      longArray4[4] = (-584L);
      longArray4[5] = 2333L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 966L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1513.732F;
      floatArray0[1] = (-3260.5254F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1513.732F, (-3260.5254F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      long[][] longArray0 = new long[5][0];
      long[] longArray1 = new long[8];
      longArray1[0] = 966L;
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      long[][] longArray0 = new long[3][1];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 966L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      long[] longArray0 = new long[1];
      longArray0[0] = 12L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {12L}, longArray0);
      assertEquals(1, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, (-3431));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1884L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,884 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (-1073741824L);
      longArray0[4] = (-1L);
      longArray0[5] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,073,741,824 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double double0 = MathArrays.linearCombination(20.0, (-1.7976931348623157E308), (-1.7976931348623157E308), 304.170339241);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 495;
      intArray0[1] = 425;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-3649);
      intArray1[1] = 425;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {495, 425}, intArray0);
      assertArrayEquals(new int[] {(-3649), 425}, intArray1);
      assertEquals(4144, int0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 425;
      doubleArray0[1] = (double) 4144;
      doubleArray0[2] = (double) 4144;
      doubleArray0[3] = (double) 425;
      doubleArray0[4] = 20.0;
      doubleArray0[5] = (double) 425;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = 902.250862;
      try { 
        MathArrays.normalizeArray(doubleArray0, 902.250862);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = new String[1];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(1792.74172966086, 1792.74172966086, 1792.74172966086, (-2181.419));
      assertEquals((-696797.9619076512), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2483.65311);
      doubleArray0[4] = (-1297.5771455668146);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, (-2483.65311), (-1297.5771455668146)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double double0 = MathArrays.linearCombination((-399.149), 0.0, (-2483.65311), 0.0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, (-2483.65311), (-1297.5771455668146)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[9][6];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray1;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray0;
      doubleArray3[5] = doubleArray0;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (-1297.5771455668146);
      doubleArray4[1] = 1291.755924084;
      doubleArray4[2] = (double) 0.0F;
      doubleArray4[3] = (double) 0.0F;
      doubleArray3[6] = doubleArray4;
      doubleArray3[7] = doubleArray1;
      doubleArray3[8] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2607;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2607);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      long[][] longArray0 = new long[5][0];
      long[] longArray1 = new long[11];
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1813.39655411754);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-3908.117);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1813.39655411754), 0.0, (-1.0), (-3908.117)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3626.79310823508), 0.0, (-2.0), (-7816.234)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-1813.39655411754), 0.0, (-1.0), (-3908.117)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2382.999);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {(-2382.999)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {(-2382.999)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2382.999);
      doubleArray2[1] = (-2382.999);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (-2382.999);
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3.4028235E38F;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (double) 3.4028235E38F;
      doubleArray1[3] = (double) (-2890.1995F);
      doubleArray1[4] = (double) 3.4028235E38F;
      doubleArray1[5] = (double) (-2890.1995F);
      doubleArray1[6] = (double) 3.4028235E38F;
      doubleArray1[7] = (double) 0.0F;
      doubleArray1[8] = (double) 0.15782715F;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {3.4028234663852886E38, (-1.0), 3.4028234663852886E38, (-2890.199462890625), 3.4028234663852886E38, (-2890.199462890625), 3.4028234663852886E38, 0.0, 0.15782715380191803}, doubleArray1, 0.01);
      assertEquals(6.805646932770577E38, double0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 2040.803790926);
      assertArrayEquals(new double[] {3.4028234663852886E38, (-1.0), 3.4028234663852886E38, (-2890.199462890625), 3.4028234663852886E38, (-2890.199462890625), 3.4028234663852886E38, 0.0, 0.15782715380191803}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {510.2009477315, (-1.4993459189743694E-36), 510.2009477315, (-4.333408769706973E-33), 510.2009477315, (-4.333408769706973E-33), 510.2009477315, 0.0, 2.366374989562459E-37}, doubleArray2, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.63E18;
      doubleArray0[1] = 68.9414;
      doubleArray0[2] = 3722.14946;
      doubleArray0[3] = 2325.301392727481;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.63E18, 68.9414, 3722.14946, 2325.301392727481}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.6569E36, 4752.916633960001, 1.3854396602578292E7, 5407026.567020363}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 3722.14946);
      assertArrayEquals(new double[] {1.63E18, 68.9414, 3722.14946, 2325.301392727481}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.6569E36, 4752.916633960001, 1.3854396602578292E7, 5407026.567020363}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3722.14946, 6.658536671504097E-30, 1.940913652486455E-26, 7.574903465181414E-27}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertArrayEquals(new double[] {1.63E18, 68.9414, 3722.14946, 2325.301392727481}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.6569E36, 4752.916633960001, 1.3854396602578292E7, 5407026.567020363}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3722.14946, 6.658536671504097E-30, 1.940913652486455E-26, 7.574903465181414E-27}, doubleArray2, 0.01);
      assertEquals(3722.14946, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(16, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(16, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertEquals(16, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = (-1187.412056083);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 176.814;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-944.17099368);
      doubleArray0[7] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.32, (-1187.412056083), (-1.0), 176.814, 0.0, 0.0, (-944.17099368), 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.32, (-1187.412056083), (-1.0), 176.814, 0.0, 0.0, (-944.17099368), 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {3.32, (-1187.412056083), (-1.0), 176.814, 0.0, 0.0, (-944.17099368), 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Double double0 = new Double(1.7207571405858234E7);
      assertEquals(1.7207571405858234E7, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int1);
      assertEquals(0, intArray0.length);
      assertTrue(int1 == int0);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3775.938602069659;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 267.33914;
      doubleArray0[3] = (-4690.45945919);
      doubleArray0[4] = 0.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3775.938602069659, 0.0, 267.33914, (-4690.45945919), 0.0}, doubleArray0, 0.01);
      assertEquals(3.632959248068066E7, double0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, (-3681), (-3681));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-1071);
      int int1 = (-636);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1071), (-636));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = (-1187.412056083);
      doubleArray0[2] = (-1.0);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.32, (-1187.412056083), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 1581.2265665195357, 3.32, (-1.0), 5145.451, 1782.8587224627508);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2138995570;
      intArray0[1] = 480;
      intArray0[2] = 4;
      intArray0[3] = 3367;
      intArray0[4] = 0;
      intArray0[5] = 2147483468;
      intArray0[6] = 7;
      intArray0[7] = 203;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 203;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3752.24954636969, 3752.24954636969, 3752.24954636969, 3752.24954636969, 3752.24954636969, 3752.24954636969);
      assertEquals(4.223812997469463E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3752.24954636969, 3752.24954636969, 23.0, 23.0, 3.32, 3752.24954636969);
      assertEquals(1.4092363126725493E7, double0, 0.01);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2290.2012;
      doubleArray0[5] = 1.0;
      doubleArray0[7] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2290.2012;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-1240.4192439558);
      doubleArray0[7] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[3][3];
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[2] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1813.39655411754);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.425771232659977E7;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1813.39655411754);
      doubleArray1[4] = (-1813.39655411754);
      doubleArray1[5] = (-1813.39655411754);
      doubleArray1[6] = 0.0;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1167.19;
      doubleArray0[2] = (-20.13266783286);
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 3006.071;
      doubleArray0[7] = 1492.551531343502;
      doubleArray0[8] = 1590.009848079;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1167.19, (-20.13266783286), 1.34217729E8, 3.834E-20, 0.0, 3006.071, 1492.551531343502, 1590.009848079}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1362332.4961, 405.32431406827584, 1.801439877791744E16, 1.4699556E-39, 0.0, 9036462.857041, 2227710.0737158326, 2528131.3169882046}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1167.19, (-20.13266783286), 1.34217729E8, 3.834E-20, 0.0, 3006.071, 1492.551531343502, 1590.009848079}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = new Integer[6];
      String string0 = "";
      try { 
        Integer.valueOf("", 3265);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 3265 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "FIRST_ROWS_NOT_INITIALIZED_YET";
      stringArray0[1] = "FIRST_ROWS_NOT_INITIALIZED_YET";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4225.4063582);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4225.4063582)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-8450.8127164)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "invalid row dimension: {0} (must be positive)";
      stringArray0[1] = "u{P,pj";
      stringArray0[2] = "L";
      stringArray0[3] = "";
      stringArray0[4] = "QnmJR[n[";
      stringArray0[5] = "1f#";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "NOT_SUBTRACTION_COMPATIBLE_MATRICES";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 2587, 2587);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 116, 146);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3752.24954636969, 3752.24954636969, 23.0, 23.0, 23.0, 3752.24954636969);
      assertEquals(1.4166207397798048E7, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 13.07;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 13.07);
      assertArrayEquals(new double[] {13.07}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {13.07}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[7] = (-1102.801605820709);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = (-1734.5502033538444);
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 3.834E-20;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1734.5502033538444));
      assertArrayEquals(new double[] {1.7976931348623157E308, (-1734.5502033538444), 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 1.673625130790353E-302, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      float[] floatArray0 = new float[8];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-4957.123F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1228.9716F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1936.3F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-4957.123F), 0.0F, 1228.9716F, 0.0F, (-1936.3F), 1.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1391.977941106318;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 3618.58029;
      doubleArray0[3] = 3417.995;
      doubleArray0[4] = (-2838.53049);
      doubleArray0[5] = 115.049366470096;
      doubleArray0[6] = (-827.6741601885784);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,838.53 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-688.17128);
      double double0 = 1003.117873;
      doubleArray0[1] = 1003.117873;
      double double1 = (-1093.2386948214416);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-688.17128);
      doubleArray1[1] = (-1093.2386948214416);
      doubleArray1[2] = (-298.4850593725274);
      doubleArray1[3] = (-688.17128);
      doubleArray1[4] = 2710.24659076108;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-7.877917738262007E-9);
      doubleArray0[1] = 994.0;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-7.877917738262007E-9), 994.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[1];
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3262.3451259;
      doubleArray0[2] = 3988.791671;
      doubleArray0[3] = (-3961.02007361887);
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 3262.3451259, 3988.791671, (-3961.02007361887), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-1.0), 3262.3451259, 3988.791671, (-3961.02007361887), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3262.3451259, 3988.791671, (-3961.02007361887), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2135.0956;
      doubleArray0[1] = 1288.665636238;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2135.0956, 1288.665636238, 3.834E-20, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = (-2108.769592232396);
      doubleArray0[5] = 632.7362;
      doubleArray0[6] = (-623.0280357);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 20.0, 0.0, 6.283185307179586, (-2108.769592232396), 632.7362, (-623.0280357)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (20 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-506.3724150546312);
      doubleArray0[1] = (-408.296293989911);
      doubleArray0[2] = 20.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-506.3724150546312), (-408.296293989911), 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {256413.02272825968, 413499.9608910539, 146450.9670837106, (-16331.85175959644), 400.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-506.3724150546312);
      doubleArray2[1] = (-506.3724150546312);
      doubleArray2[2] = (-408.296293989911);
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-638.49);
      doubleArray3[1] = (-408.296293989911);
      doubleArray3[2] = 20.0;
      doubleArray3[3] = (-408.296293989911);
      doubleArray3[4] = 20.0;
      doubleArray3[5] = (-408.296293989911);
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2487.936F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.4E-45F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-2487.936F);
      floatArray1[3] = (-2487.936F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-2487.936F), 0.0F, 0.0F, 1.4E-45F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2487.936F), (-2487.936F)}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      longArray0[1] = 1L;
      longArray0[2] = (-1L);
      longArray0[3] = (-652L);
      longArray0[4] = (-3958705157555305932L);
      longArray0[5] = 4095L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      float[] floatArray0 = new float[5];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-141.966F);
      floatArray0[2] = (-12.192F);
      floatArray0[3] = 3174.9038F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-246.2703F);
      floatArray0[6] = (-2214.518F);
      floatArray0[7] = 714.0554F;
      floatArray0[8] = (-2365.09F);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-141.966F);
      floatArray1[1] = (-2214.518F);
      floatArray1[2] = 714.0554F;
      floatArray1[3] = 714.0554F;
      floatArray1[4] = (-246.2703F);
      floatArray1[5] = (-246.2703F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, (-141.966F), (-12.192F), 3174.9038F, 0.0F, (-246.2703F), (-2214.518F), 714.0554F, (-2365.09F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-141.966F), (-2214.518F), 714.0554F, 714.0554F, (-246.2703F), (-246.2703F)}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.7976931348623157E308;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {1.7976931348623157E308, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3.834E-20, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.#
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1016.947234457297);
      doubleArray0[3] = (-298.4850593725274);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {3.834E-20, Double.NaN, (-1016.947234457297), (-298.4850593725274)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2875.4683F);
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 780.09F;
      floatArray0[6] = 2391.0F;
      floatArray0[7] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-2875.4683F), 3.4028235E38F, 3.4028235E38F, 0.0F, 0.0F, 780.09F, 2391.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 67.4115431059;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (134.823 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][1];
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[5][0];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-285.2);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = (-1285.49);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-285.2);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1514.67453826;
      doubleArray2[3] = 3.834E-20;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[2][2];
      MathArrays.sortInPlace(doubleArray0[0], mathArrays_OrderDirection0, doubleArray0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      double double0 = 2.0;
      Double double1 = new Double(2.0);
      doubleArray0[2] = double1;
      Double double2 = new Double(0.1428571343421936);
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = MathArrays.scale(2.0, doubleArray1);
      MathArrays.distance(doubleArray2, doubleArray2);
      try { 
        MathArrays.convolve(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(18, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray2, doubleArray2);
      MathArrays.convolve(doubleArray1, doubleArray2);
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(2.0);
      doubleArray0[2] = double0;
      Double double1 = new Double(0.1428571343421936);
      double[] doubleArray1 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "crossover rate ({0})";
      stringArray0[1] = "INDEX_OUT_OF_RANGE";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "w?w5;PcdI";
      stringArray0[1] = "w?w5;PcdI";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String[] stringArray0 = new String[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(3.141592653589793);
      doubleArray0[0] = double0;
      Double double1 = new Double((-2254.266));
      doubleArray0[1] = double1;
      Double double2 = new Double(2.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(3.141592653589793);
      doubleArray0[3] = double3;
      Double double4 = new Double((-2254.266));
      doubleArray0[4] = double4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }
}
