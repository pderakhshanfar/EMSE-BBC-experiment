/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:54:16 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.633279512582547E-20;
      doubleArray0[1] = (-1.1524175389737278E-20);
      doubleArray0[2] = 1139.58649;
      doubleArray0[3] = 774913.7588797439;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-525.681150756);
      doubleArray0[7] = 1097.52;
      doubleArray0[8] = (-930.0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {1.633279512582547E-20, (-1.1524175389737278E-20), 1139.58649, 774913.7588797439, Double.NaN, Double.NaN, (-525.681150756), 1097.52, (-930.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 32768);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(32768, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      MathArrays.scaleInPlace(32768, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 626;
      intArray0[1] = 0;
      intArray0[0] = 0;
      intArray0[3] = 259;
      intArray0[4] = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 626;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (-1486.013);
      doubleArray2[8] = (double) 259;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 626.0, 0.0, 0.0, (-1486.013), 259.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 39);
      assertNotNull(objectArray0);
      assertEquals(39, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.26E18;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 150.0;
      doubleArray0[3] = 504.69375;
      doubleArray0[4] = 3188.463085258;
      doubleArray0[5] = (-1365.70357008713);
      doubleArray0[6] = 3852.383795874149;
      doubleArray0[7] = 864.003953883509;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 504.69375;
      doubleArray2[1] = 3.26E18;
      doubleArray2[2] = 150.0;
      doubleArray2[3] = 3.26E18;
      doubleArray2[4] = 504.69375;
      doubleArray2[5] = 864.003953883509;
      doubleArray2[6] = 3.26E18;
      doubleArray2[7] = 3188.463085258;
      doubleArray2[8] = 3852.383795874149;
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2207.2549942308);
      doubleArray0[1] = (-1024.2);
      doubleArray0[2] = (-2207.2549942308);
      doubleArray0[3] = 904.9210053885353;
      doubleArray0[4] = (-2207.2549942308);
      doubleArray0[5] = (-2207.2549942308);
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 1.3040000000000008E19;
      doubleArray0[8] = 1.3040000000000008E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.258594253069817E19, double0, 0.01);
      assertArrayEquals(new double[] {(-2207.2549942308), (-1024.2), (-2207.2549942308), 904.9210053885353, (-2207.2549942308), (-2207.2549942308), 1.304E19, 1.3040000000000008E19, 1.3040000000000008E19}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1292.9);
      doubleArray0[1] = 9.313225746154785E-10;
      doubleArray0[2] = (-20.0);
      doubleArray0[3] = 2.17333333333333325E18;
      doubleArray0[4] = 1.0E-5;
      doubleArray0[5] = 0.0875862700108075;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 4.3466666666666665E18;
      doubleArray0[8] = (-1171.653157398);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4.8597210710995425E18, double0, 0.01);
      assertArrayEquals(new double[] {(-1292.9), 9.313225746154785E-10, (-20.0), 2.17333333333333325E18, 1.0E-5, 0.0875862700108075, 0.0, 4.3466666666666665E18, (-1171.653157398)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {(-1292.9), 9.313225746154785E-10, (-20.0), 2.17333333333333325E18, 1.0E-5, 0.0875862700108075, 0.0, 4.3466666666666665E18, (-1171.653157398)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Object>>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1928.116838019435;
      doubleArray0[1] = 805.28228808;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 6.52E18;
      doubleArray0[4] = (-474.73195);
      doubleArray0[5] = (-1006.88111379461);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.4579163213298629E19, double0, 0.01);
      assertArrayEquals(new double[] {1928.116838019435, 805.28228808, 1.304E19, 6.52E18, (-474.73195), (-1006.88111379461)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-1118);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2213), (-1118));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.POSITIVE_INFINITY;
      floatArray0[4] = 2766.57F;
      floatArray0[5] = 0.0F;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = (double) (-0.0068449974F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-0.006844997406005859), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 3.834E-20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 623.26833498512;
      doubleArray0[1] = 1698.784039070315;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {623.26833498512, 1698.784039070315}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1698.784039070315;
      doubleArray2[1] = 5.669184079525E-24;
      doubleArray2[2] = 623.26833498512;
      doubleArray2[3] = 2168.55;
      doubleArray2[4] = 623.26833498512;
      doubleArray2[5] = 1698.784039070315;
      doubleArray2[6] = 623.26833498512;
      doubleArray2[7] = 623.26833498512;
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3468.169141619336, double0, 0.01);
      assertArrayEquals(new double[] {1698.784039070315, 5.669184079525E-24, 623.26833498512, 2168.55, 623.26833498512, 1698.784039070315, 623.26833498512, 623.26833498512}, doubleArray2, 0.01);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {623.26833498512, 1698.784039070315}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0016044453790900097, 5.886563430082996E-4}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 5.669184079525E-24;
      doubleArray4[1] = 5.669184079525E-24;
      doubleArray4[2] = 623.26833498512;
      doubleArray4[3] = 1212.6199;
      doubleArray4[4] = 1698.784039070315;
      doubleArray4[5] = 1698.784039070315;
      doubleArray4[6] = 2168.55;
      doubleArray4[7] = 3468.169141619336;
      doubleArray4[8] = 2168.55;
      double double1 = MathArrays.distance(doubleArray1, doubleArray4);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertEquals(1.4142135623730951, double1, 0.01);
      assertArrayEquals(new double[] {623.26833498512, 1698.784039070315}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5.669184079525E-24, 5.669184079525E-24, 623.26833498512, 1212.6199, 1698.784039070315, 1698.784039070315, 2168.55, 3468.169141619336, 2168.55}, doubleArray4, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(9, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      double[] doubleArray5 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray0);
      assertArrayEquals(new double[] {623.26833498512, 1698.784039070315}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {623.26833498512, 1698.784039070315}, doubleArray5, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray5.length);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-3005);
      intArray0[1] = 233;
      intArray0[2] = 2143939945;
      intArray0[3] = 1887;
      intArray0[4] = (-2267);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2143939945;
      intArray1[1] = 1887;
      intArray1[2] = (-2267);
      intArray1[3] = (-2267);
      intArray1[4] = 1887;
      intArray1[5] = (-2267);
      intArray1[6] = (-2267);
      intArray1[7] = 2143939945;
      intArray1[8] = 2143939945;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-7072172), int0);
      assertArrayEquals(new int[] {(-3005), 233, 2143939945, 1887, (-2267)}, intArray0);
      assertArrayEquals(new int[] {2143939945, 1887, (-2267), (-2267), 1887, (-2267), (-2267), 2143939945, 2143939945}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-411.1111);
      MathArrays.scaleInPlace((-411.1111), doubleArray0);
      assertArrayEquals(new double[] {169012.33654321003}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-101.7F);
      floatArray0[2] = (-2361.134F);
      floatArray0[3] = (-2375.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-328.8008F);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-101.7F);
      floatArray1[1] = (-101.7F);
      floatArray1[2] = (-328.8008F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-101.7F), (-2361.134F), (-2375.0F), 0.0F, (-328.8008F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-101.7F), (-101.7F), (-328.8008F), 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.0542942886283994E7;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2.0542942886283994E7}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2790.3801F);
      floatArray0[1] = (-89.4F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-2790.3801F), (-89.4F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0036;
      doubleArray0[1] = 3.834E-20;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1.296E-5, double0, 0.01);
      assertArrayEquals(new double[] {0.0036, 3.834E-20, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0036, double1, 0.01);
      assertArrayEquals(new double[] {0.0036, 3.834E-20, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 629);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3282.0030539453);
      doubleArray1[1] = (-3282.0030539453);
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 15 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.POSITIVE_INFINITY;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 2470.3481F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2766.57F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {Float.POSITIVE_INFINITY, 1.0F, 2470.3481F, 0.0F, 2766.57F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Float.POSITIVE_INFINITY;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NaN, Double.NaN, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale(1.0F, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NaN, Double.NaN, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NaN, Double.NaN, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 0.0F;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1642.229F;
      doubleArray0[1] = 3.1660099222737955E-7;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) 1642.229F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 1642.229F;
      doubleArray0[6] = (double) 1642.229F;
      doubleArray0[7] = (double) 1642.229F;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1642.22900390625, 3.1660099222737955E-7, Double.POSITIVE_INFINITY, 1642.22900390625, 0.0, 1642.22900390625, 1642.22900390625, 1642.22900390625}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.526371669874569E7;
      doubleArray0[1] = (-1924.1923460766225);
      doubleArray0[2] = 2724.580663779814;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1962.82809164);
      doubleArray0[5] = 2.526371669874569E7;
      doubleArray0[6] = (-3.43338934259355E-8);
      doubleArray0[7] = 2335.9427824533223;
      doubleArray0[8] = (-2385.271498029);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2.526371669874569E7, (-1924.1923460766225), 2724.580663779814, 0.0, (-1962.82809164), 2.526371669874569E7, (-3.43338934259355E-8), 2335.9427824533223, (-2385.271498029)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 10389.790569965762;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {10389.790569965762}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1080.0623;
      doubleArray0[1] = 2305.452067456;
      doubleArray0[2] = (-3284.11377757);
      doubleArray0[3] = 3954.2146021;
      doubleArray0[4] = 0.125;
      doubleArray0[5] = 3.26E18;
      doubleArray0[6] = 3396.333377;
      doubleArray0[7] = 3279.834596858032;
      doubleArray0[8] = 1711.93;
      boolean boolean1 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {1080.0623, 2305.452067456, (-3284.11377757), 3954.2146021, 0.125, 3.26E18, 3396.333377, 3279.834596858032, 1711.93}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {1080.0623, 2305.452067456, (-3284.11377757), 3954.2146021, 0.125, 3.26E18, 3396.333377, 3279.834596858032, 1711.93}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float[] floatArray0 = new float[19];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(19, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2144.171424526056;
      doubleArray0[1] = 0.49999999999999994;
      doubleArray0[2] = 638.64446243715;
      doubleArray0[3] = 907.7883015470212;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0.5 <= 638.644)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.8109631538391113;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1018.319949676;
      doubleArray0[3] = (-452.0);
      double double0 = 1319.954158165;
      doubleArray0[4] = 1319.954158165;
      doubleArray0[5] = 1561.50755233148;
      doubleArray0[6] = 1119.9;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.8109631538391113, 1.0, 1018.319949676, (-452.0), 1319.954158165, 1561.50755233148, 1119.9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.6219263076782227, 2.0, 2036.639899352, (-904.0), 2639.90831633, 3123.01510466296, 2239.8}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[2][8];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1561.50755233148, 1319.954158165, 1119.9, 1018.319949676, 1.0, 0.8109631538391113, (-452.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      MathArrays.scaleInPlace((-772.8494), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1206810.1749148527), (-1020125.7791653253), (-865514.04306), (-787007.9621151267), (-772.8494), (-626.7523868666649), 349327.9288}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 829);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1642.229F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1642.229F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 45;
      intArray0[1] = 204;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {45, 204}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 45;
      doubleArray0[1] = (double) 204;
      doubleArray0[2] = (double) 45;
      doubleArray0[3] = (double) 204;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {45.0, 204.0, 45.0, 204.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {45.0, 204.0, 45.0, 204.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) 45, (Integer) 45);
      assertNotNull(pair0);
      
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>(pair0);
      assertNotNull(pair1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Pair<Object, Object> pair2 = new Pair<Object, Object>(pair0, pair1);
      assertNotNull(pair2);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, pair1).when(field0).getZero();
      int int1 = 39;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 39, 1941);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[] floatArray0 = new float[12];
      floatArray0[1] = 0.0F;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(12, floatArray0.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(0.0, 3284.4580078125, 0.0, 1.3225969022710855E8, 0.0, (double) 0.0F);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("u3W2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.u3W2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[] floatArray0 = new float[19];
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[1] = 2482.042F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1.0F, 2482.042F}, floatArray1, 0.01F);
      assertEquals(19, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {1.0F, 2482.042F}, floatArray1, 0.01F);
      assertEquals(19, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float float0 = 1.0F;
      double[] doubleArray0 = new double[6];
      double double0 = (-346.0);
      doubleArray0[0] = (-346.0);
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) 1.0F;
      double double1 = (-2.6437112632041807E-8);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2.6437112632041807E-8));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-346.0), 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.6824753579725702E-8), 7.75281895367795E-11, 7.75281895367795E-11, 7.75281895367795E-11, 7.75281895367795E-11, 7.75281895367795E-11}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-346.0), 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.6824753579725702E-8), 7.75281895367795E-11, 7.75281895367795E-11, 7.75281895367795E-11, 7.75281895367795E-11, 7.75281895367795E-11}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[] floatArray0 = new float[8];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 557.5573647922719;
      doubleArray0[1] = 6.52E18;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {557.5573647922719, 6.52E18}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {557.5573647922719, 6.52E18}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.141592653589793, 3.141592653589793, Double.NaN, 3.141592653589793, Double.NaN, Double.NaN, 3.141592653589793, (-1486.671032796));
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.141592653589793;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4107.058231124553);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (-1486.671032796);
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = Double.NaN;
      double double2 = MathArrays.distance(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4110.199823778143, double2, 0.01);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4107.058231124553), 0.0, Double.NaN, (-1486.671032796), 0.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.03999981641790473;
      doubleArray2[1] = Double.NaN;
      double double3 = MathArrays.linearCombination(doubleArray2, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(Double.NaN, double3, 0.01);
      assertArrayEquals(new double[] {0.03999981641790473, Double.NaN}, doubleArray2, 0.01);
      assertEquals(2, doubleArray2.length);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 288;
      intArray0[1] = (-1642);
      intArray0[2] = 1073741824;
      intArray0[3] = 2;
      intArray0[4] = 219;
      intArray0[5] = (-1082);
      intArray0[6] = (-2144402608);
      intArray0[7] = 413;
      intArray0[8] = (-2542);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1642);
      intArray1[1] = 219;
      intArray1[2] = 2004209472;
      intArray1[3] = 1073741824;
      intArray1[4] = 413;
      intArray1[5] = 2;
      intArray1[6] = 1073741824;
      intArray1[7] = 2;
      intArray1[8] = 219;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1.7827616286918132E9, double0, 0.01);
      assertArrayEquals(new int[] {288, (-1642), 1073741824, 2, 219, (-1082), (-2144402608), 413, (-2542)}, intArray0);
      assertArrayEquals(new int[] {(-1642), 219, 2004209472, 1073741824, 413, 2, 1073741824, 2, 219}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[8];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2146176779);
      intArray0[1] = 2147213248;
      intArray0[2] = 5000;
      intArray0[3] = (-4566);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2147213248;
      intArray1[1] = (-2146176779);
      intArray1[2] = (-2146176779);
      intArray1[3] = 2147213248;
      intArray1[4] = 2147213248;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1586835, int0);
      assertArrayEquals(new int[] {(-2146176779), 2147213248, 5000, (-4566)}, intArray0);
      assertArrayEquals(new int[] {2147213248, (-2146176779), (-2146176779), 2147213248, 2147213248}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Integer integer0 = new Integer((-1631));
      assertNotNull(integer0);
      assertEquals((-1631), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-1631);
      int[] intArray3 = MathArrays.copyOf(intArray2);
      assertNotNull(intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertArrayEquals(new int[] {(-1631)}, intArray3);
      assertArrayEquals(new int[] {(-1631)}, intArray2);
      assertEquals(1, intArray3.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1631);
      doubleArray0[1] = (double) (-2146176779);
      doubleArray0[3] = (double) (-2146176779);
      doubleArray0[4] = (double) (-1631);
      doubleArray0[5] = (-593.267);
      doubleArray0[6] = (double) (-2146176779);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1631.0), (-2.146176779E9), 0.0, (-2.146176779E9), (-1631.0), (-593.267), (-2.146176779E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 0.3153223395347595);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1631.0), (-2.146176779E9), 0.0, (-2.146176779E9), (-1631.0), (-593.267), (-2.146176779E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.05255372325579325, 0.05255372325579325, Double.NaN, 0.05255372325579325, 0.05255372325579325, 0.05255372325579325, 0.05255372325579325}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1631.0), (-2.146176779E9), 0.0, (-2.146176779E9), (-1631.0), (-593.267), (-2.146176779E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray1, intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1642.9114F;
      doubleArray0[1] = (double) 1642.9114F;
      doubleArray0[2] = (double) 1642.9114F;
      doubleArray0[3] = (double) 1642.9114F;
      doubleArray0[4] = (double) 1642.9114F;
      MathArrays.scaleInPlace(1642.9114F, doubleArray0);
      assertArrayEquals(new double[] {2699157.792522013, 2699157.792522013, 2699157.792522013, 2699157.792522013, 2699157.792522013}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2699157.792522013, 2699157.792522013, 2699157.792522013, 2699157.792522013, 2699157.792522013}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 13.988630309598074;
      doubleArray1[1] = 13.988630309598074;
      doubleArray1[2] = 13.988630309598074;
      doubleArray1[3] = 13.988630309598074;
      doubleArray1[4] = 13.988630309598074;
      MathArrays.scaleInPlace(13.988630309598074, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {195.6817779386059, 195.6817779386059, 195.6817779386059, 195.6817779386059, 195.6817779386059}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 13.988630309598074;
      doubleArray2[1] = 13.988630309598074;
      MathArrays.checkPositive(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {13.988630309598074, 13.988630309598074}, doubleArray2, 0.01);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.checkPositive(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {13.988630309598074, 13.988630309598074}, doubleArray2, 0.01);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 13.988630309598074;
      doubleArray4[1] = 13.988630309598074;
      double double0 = MathArrays.safeNorm(doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertEquals(19.782910702856945, double0, 0.01);
      assertArrayEquals(new double[] {13.988630309598074, 13.988630309598074}, doubleArray4, 0.01);
      assertEquals(2, doubleArray4.length);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      try { 
        MathArrays.ebeAdd(doubleArray3, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1642.229F;
      floatArray0[1] = 1642.229F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1642.229F, 1642.229F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[2];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1642.229F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1642.229F;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1642.22900390625, 0.0, 0.0, 1642.22900390625}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 1642.22900390625, 0.0, 0.0, 1642.22900390625}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = (-1);
      int int0 = (-905);
      intArray0[2] = (-905);
      intArray0[3] = (-1525);
      int int1 = Integer.MAX_VALUE;
      intArray0[4] = Integer.MAX_VALUE;
      int int2 = (-2144268851);
      intArray0[5] = (-2144268851);
      int int3 = (-3141);
      intArray0[6] = (-3141);
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-2969));
      assertNotNull(integer0);
      assertEquals((-2969), (int)integer0);
      
      integerArray0[0] = integer0;
      try { 
        Integer.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(926.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 134217729;
      intArray0[1] = 1321;
      intArray0[2] = 134217729;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {134217729, 1321, 134217729}, intArray0);
      assertArrayEquals(new int[] {134217729, 1321, 134217729}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      int int0 = MathArrays.distance1(intArray1, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {134217729, 1321, 134217729}, intArray0);
      assertArrayEquals(new int[] {134217729, 1321, 134217729}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 926.0;
      doubleArray3[1] = 1483.0;
      doubleArray3[2] = (double) 1321;
      MathArrays.checkPositive(doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {926.0, 1483.0, 1321.0}, doubleArray3, 0.01);
      assertEquals(3, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.304E19;
      doubleArray2[1] = 1.304E19;
      doubleArray2[2] = 1.304E19;
      doubleArray2[3] = 1.304E19;
      doubleArray2[4] = 1.304E19;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 1506.93365395523;
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = 1.304E19;
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = 1.304E19;
      doubleArray3[6] = 1.304E19;
      doubleArray3[7] = (-1.0);
      doubleArray3[8] = (-1.0);
      double double0 = MathArrays.distanceInf(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.0), 1506.93365395523, (-1.0), 1.304E19, (-1.0), 1.304E19, 1.304E19, (-1.0), (-1.0)}, doubleArray3, 0.01);
      assertEquals(5, doubleArray2.length);
      assertEquals(9, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(1.304E19, (-1.0), 7.2057595257917024E16, 1506.93365395523);
      assertEquals(9.554601531723996E19, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, (double[]) null);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray4 = MathArrays.scale(1.304E19, doubleArray2);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38}, doubleArray4, 0.01);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray4.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      double double3 = MathArrays.distance(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertEquals(1.700416E38, double3, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38}, doubleArray4, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      double double4 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0.0, double4, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = (-1574.68292296);
      double double0 = MathArrays.linearCombination(177.99, 0.0, 44.0, 3043.15353);
      assertEquals(133898.75532, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 20.0, (-1574.68292296)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[][] longArray1 = new long[4][9];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(4, longArray1.length);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-295.0F);
      floatArray0[1] = (-852.12335F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-869.0233F);
      floatArray0[5] = 200.8F;
      floatArray0[6] = 1128.0583F;
      floatArray0[7] = Float.NaN;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-295.0F), (-852.12335F), 0.0F, 0.0F, (-869.0233F), 200.8F, 1128.0583F, Float.NaN}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(Double.NaN, (double) 200.8F, (-1.0), 4.558674864440036);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[][] longArray1 = new long[4][9];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(4, longArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1439;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1197.9643658;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1439.0, 0.0, 1197.9643658}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1726);
      intArray0[1] = 2;
      intArray0[2] = 1439;
      intArray0[3] = 1439;
      intArray0[4] = (-1726);
      intArray0[5] = (-2809);
      intArray0[6] = 1439;
      intArray0[7] = 0;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1886);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1642.229F;
      floatArray0[1] = 1642.229F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1642.229F, 1642.229F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double double0 = 1.44888888888888883E18;
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = 1642.229F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 45;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1642.229F;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[5][6];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 1642.229F;
      doubleArray3[1] = (double) 45;
      doubleArray3[2] = (double) 45;
      doubleArray2[3] = doubleArray3;
      doubleArray2[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1943.40975844686);
      doubleArray0[1] = (-1943.40975844686);
      doubleArray0[2] = (-1943.40975844686);
      double[] doubleArray1 = MathArrays.scale((-1943.40975844686), doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3776841.489226483, 3776841.489226483, 3776841.489226483}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<String, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 0, (-1));
      assertNotNull(pairArray0);
      assertEquals(0, pairArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[][] longArray1 = new long[4][9];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.scaleInPlace(1.700416E38, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2.217342464E57}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19}, doubleArray2, 0.01);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 45;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1642.229F;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1658;
      intArray1[1] = 45;
      intArray1[2] = 45;
      intArray1[3] = 45;
      intArray1[4] = 45;
      intArray1[5] = 45;
      intArray1[6] = 45;
      intArray1[7] = 45;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1613, int0);
      assertArrayEquals(new int[] {45, 0}, intArray0);
      assertArrayEquals(new int[] {1658, 45, 45, 45, 45, 45, 45, 45}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = (-1108.8);
      double double1 = MathArrays.linearCombination(1.0, (-1486.671032796), 1.0, Double.NaN, (-1108.8), 1086.598089, (-5.207000323380292E-8), (-166.65383148));
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1086.598089;
      doubleArray0[1] = (-1108.8);
      doubleArray0[2] = (-1486.671032796);
      doubleArray0[3] = (-1108.8);
      doubleArray0[4] = (-166.65383148);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1086.598089, (-1108.8), (-1486.671032796), (-1108.8), (-166.65383148)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1180695.4070184522, (-2409639.9221664), (-2001390.3664155803), 887201.7601620094, 4306894.170133333, 3666413.2190184575, 1724956.2875315645, 369571.536690048, 27773.49954696424}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-5.207000323380292E-8));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1086.598089, (-1108.8), (-1486.671032796), (-1108.8), (-166.65383148)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1180695.4070184522, (-2409639.9221664), (-2001390.3664155803), 887201.7601620094, 4306894.170133333, 3666413.2190184575, 1724956.2875315645, 369571.536690048, 27773.49954696424}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-7.930216991440056E-9), 1.6184502235230293E-8, 1.344246771513462E-8, (-5.958947948344425E-9), (-2.8927532982087476E-8), (-2.46257012894827E-8), (-1.1585780362623523E-8), (-2.4822511059079842E-9), (-1.8654250428167067E-10)}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1642.229F;
      floatArray0[1] = 1642.229F;
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1642.229F;
      doubleArray0[1] = (double) 1642.229F;
      MathArrays.scaleInPlace(1642.229F, doubleArray0);
      assertArrayEquals(new double[] {2696916.101270914, 2696916.101270914}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {2696916.101270914, 2696916.101270914}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2696916.101270914, 2696916.101270914}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1.4546712914588615E13, double0, 0.01);
      assertArrayEquals(new double[] {2696916.101270914, 2696916.101270914}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.141592653589793;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 20.0;
      doubleArray1[1] = 3.141592653589793;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {20.0, 3.141592653589793}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {20.0, 3.141592653589793}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {400.0, 9.869604401089358}, doubleArray2, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 1481L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      longArray0[8] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 1481L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 0L;
      double double0 = MathArrays.distance1(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(20.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {20.0, 3.141592653589793}, doubleArray1, 0.01);
      assertEquals(1, doubleArray3.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray0, doubleArray3);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray4, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[17];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 312;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(17, intArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 312);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 312;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (double) 312;
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 312;
      double double0 = MathArrays.linearCombination((double) 0, (double) 0, Double.NaN, 3776841.489226483, (-4243.50578608), (-232.287102045945));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      double[] doubleArray1 = MathArrays.scale((-1), doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.linearCombination((-1.0), (-1.0), 1.304E19, Double.NaN, (-2298.926885793), 5187.83082564);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = (-219.80378000268);
      double double1 = 1.0E-6;
      double double2 = MathArrays.linearCombination(3718.08432359, (-219.80378000268), 1.0E-6, 3718.08432359);
      assertEquals((-817248.9849757054), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double[] doubleArray0 = new double[0];
      int int0 = 2165;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2165);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2165, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.normalizeArray(doubleArray1, (-219.80378000268));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 626;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 259;
      intArray0[4] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {626, 0, 0, 259, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2116L;
      long[][] longArray1 = new long[8][7];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2116L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      try { 
        MathArrays.normalizeArray(doubleArray0, 3.834E-20);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = 1642.229F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[2];
      int int0 = 45;
      intArray0[0] = 45;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1642.229F;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1642.229F;
      floatArray0[1] = 1642.229F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1642.229F, 1642.229F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 45;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1642.229F;
      doubleArray0[1] = (double) 45;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1642.229F;
      floatArray0[0] = 1642.229F;
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1642.229F;
      MathArrays.scaleInPlace(1642.229F, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2696916.101270914}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 2696916.101270914}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.5F;
      Integer[] integerArray0 = new Integer[9];
      int int0 = 44;
      Integer integer0 = new Integer(44);
      assertNotNull(integer0);
      assertEquals(44, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(15);
      assertNotNull(integer1);
      assertEquals(15, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(689);
      assertNotNull(integer2);
      assertEquals(689, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2149);
      assertNotNull(integer3);
      assertEquals(2149, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(44);
      assertNotNull(integer4);
      assertEquals(44, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int0));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(151);
      assertNotNull(integer5);
      assertEquals(151, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      assertNotNull(integer6);
      assertEquals(44, (int)integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)int0));
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[3]);
      assertNotNull(integer7);
      assertEquals(2149, (int)integer7);
      assertEquals(9, integerArray0.length);
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(218);
      assertNotNull(integer8);
      assertEquals(218, (int)integer8);
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)int0));
      
      integerArray0[8] = integer8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, integerArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(62.22539674441618, double0, 0.01);
      assertArrayEquals(new double[] {44.0, 44.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.POSITIVE_INFINITY;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 2470.3481F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2766.57F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {Float.POSITIVE_INFINITY, 1.0F, 2470.3481F, 0.0F, 2766.57F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 1.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("S f-f@X*W {.*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.S f-f@X*W {.*
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 312;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 312}, intArray0);
      assertEquals(3, intArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 312);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 312}, intArray0);
      assertArrayEquals(new int[] {0, 0, 312}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 202;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (float) 202;
      floatArray0[3] = (float) 312;
      floatArray0[4] = (float) 312;
      floatArray0[5] = (float) 312;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (float) 312;
      floatArray0[8] = (float) 312;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 202;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) 0;
      floatArray1[3] = Float.NaN;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {202.0F, 0.0F, 0.0F, Float.NaN}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {202.0F, Float.NaN, 202.0F, 312.0F, 312.0F, 312.0F, 0.0F, 312.0F, 312.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      double double0 = MathArrays.linearCombination((-1884.79584212451), (-1943.40975844686), 3610000.0, (double) 0, 3135.60095191574, (double) 0.0F);
      assertEquals(3662930.63226484, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1642.229F;
      floatArray0[1] = 1642.229F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1642.229F, 1642.229F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 45;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 45;
      longArray0[1] = (long) 45;
      longArray0[2] = (long) 45;
      longArray0[3] = (long) 45;
      longArray0[4] = (long) 45;
      longArray0[5] = (long) 45;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {45L, 45L, 45L, 45L, 45L, 45L}, longArray0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1642.229F;
      floatArray0[1] = 1642.229F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1642.229F, 1642.229F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[2];
      int int0 = 45;
      intArray0[0] = 45;
      int int1 = 204;
      intArray0[1] = 204;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = 573L;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scale(1.34217729E8, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 312;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 312}, intArray0);
      assertEquals(3, intArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 312);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 312;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (double) 312;
      doubleArray0[4] = (double) 0;
      Integer integer0 = new Integer(312);
      assertNotNull(integer0);
      assertEquals(312, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 312}, intArray1);
      assertArrayEquals(new int[] {0, 0, 312}, intArray0);
      assertEquals(3, intArray1.length);
      assertEquals(3, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {312.0, 0.0, 1.304E19, 312.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {312.0, 0.0, 1.304E19, 312.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1.304E19;
      doubleArray3[1] = 1.304E19;
      doubleArray3[2] = (double) 312;
      doubleArray3[3] = 1.304E19;
      boolean boolean0 = MathArrays.equals(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 312.0, 1.304E19}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {312.0, 0.0, 1.304E19, 312.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray3.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (-632.310336213665);
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = (double) 312;
      doubleArray4[7] = 0.0;
      doubleArray4[8] = 1.304E19;
      double[] doubleArray5 = MathArrays.ebeDivide(doubleArray4, doubleArray4);
      assertNotNull(doubleArray5);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, 1.0, Double.NaN, 1.0, Double.NaN, 1.0}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-632.310336213665), 0.0, 312.0, 0.0, 1.304E19}, doubleArray4, 0.01);
      assertEquals(9, doubleArray5.length);
      assertEquals(9, doubleArray4.length);
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.141592653589793, 3.141592653589793, Double.NaN, 3.141592653589793, Double.NaN, Double.NaN, 3.141592653589793, (-1486.671032796));
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-2135.3443));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2135.3443)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray1, doubleArray2);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2135.3443)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2145.2139044010896}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray4 = new double[2][4];
      doubleArray4[0] = doubleArray0;
      doubleArray4[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(2, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      Integer integer0 = new Integer(52);
      assertNotNull(integer0);
      assertEquals(52, (int)integer0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray5 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray5);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray1);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray5, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray5.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      double[] doubleArray6 = MathArrays.normalizeArray(doubleArray0, 3.141592653589793);
      assertNotNull(doubleArray6);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray6, 0.01);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertEquals(1, doubleArray6.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "L\"I7AmPAm";
      stringArray0[1] = "";
      stringArray0[2] = ")";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray6);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2135.3443)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray6));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray6));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray6));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 3133.17514328;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-378.418298889);
      doubleArray0[4] = 1842.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 3133.17514328, (-1.0), (-378.418298889), 1842.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (-378.418298889);
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 3133.17514328, (-1.0), (-378.418298889), 1842.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-378.418298889)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":_A_C .lkad6ae";
      stringArray0[1] = ":";
      stringArray0[2] = "d}YdP\"7X}%'vRSV;6";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean2);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (-3917.8326372821);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-3917.8326372821), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = 696.950593599;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, false);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 696.950593599}, doubleArray2, 0.01);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.distanceInf(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3917.8326372821, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 696.950593599}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, (-3917.8326372821), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1642.229F;
      int int0 = 0;
      int int1 = 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-396);
      intArray0[3] = 259;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 259;
      intArray1[2] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long[][] longArray0 = new long[8][4];
      long[] longArray1 = new long[1];
      longArray1[0] = 1967L;
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 926.0;
      double[] doubleArray1 = MathArrays.scale(926.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {926.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {857476.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 134217729;
      intArray0[1] = 134217729;
      intArray0[2] = 134217729;
      intArray0[3] = 134217729;
      intArray0[4] = 134217729;
      intArray0[5] = 134217729;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {134217729, 134217729, 134217729, 134217729, 134217729, 134217729}, intArray0);
      assertArrayEquals(new int[] {134217729, 134217729, 134217729, 134217729, 134217729, 134217729}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {926.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {857476.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0010799136069114472}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 134217729;
      Integer integer0 = new Integer(134217729);
      assertNotNull(integer0);
      assertEquals(134217729, (int)integer0);
      
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) 134217729;
      integerArray0[3] = (Integer) 134217729;
      integerArray0[4] = (Integer) 134217729;
      integerArray0[5] = (Integer) 134217729;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, integerArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0.0010799136069114472, double0, 0.01);
      assertArrayEquals(new double[] {926.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {857476.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0010799136069114472}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long[][] longArray0 = new long[8][4];
      long[] longArray1 = new long[1];
      longArray1[0] = 1967L;
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 926.0;
      double[] doubleArray1 = MathArrays.scale(926.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {926.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {857476.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 134217729;
      intArray0[1] = 134217729;
      intArray0[2] = 134217729;
      intArray0[3] = 134217729;
      intArray0[4] = 134217729;
      intArray0[5] = 134217729;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {134217729, 134217729, 134217729, 134217729, 134217729, 134217729}, intArray0);
      assertArrayEquals(new int[] {134217729, 134217729, 134217729, 134217729, 134217729, 134217729}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {926.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {857476.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0010799136069114472}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 134217729;
      doubleArray3[1] = (double) 1967L;
      doubleArray3[2] = 926.0;
      doubleArray3[3] = (double) 134217729;
      doubleArray3[4] = 926.0;
      doubleArray3[5] = (double) 134217729;
      double double0 = MathArrays.distance(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(1.34216803E8, double0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 1967.0, 926.0, 1.34217729E8, 926.0, 1.34217729E8}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {926.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray3.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1642.229F;
      floatArray0[1] = 1642.229F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1642.229F, 1642.229F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long[][] longArray0 = new long[8][4];
      long[] longArray1 = new long[1];
      longArray1[0] = 1967L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1L);
      longArray2[1] = 1967L;
      longArray2[2] = 1967L;
      longArray2[3] = 573L;
      longArray2[4] = 1967L;
      longArray2[5] = 1967L;
      longArray2[6] = 1967L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[1] = 1967L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 573L;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1967L;
      doubleArray0[1] = (double) 0L;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3869089.0, double0, 0.01);
      assertArrayEquals(new double[] {1967.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.checkNonNegative(longArray4);
      assertNotSame(longArray4, longArray1);
      assertNotSame(longArray4, longArray2);
      assertNotSame(longArray4, longArray5);
      assertNotSame(longArray4, longArray3);
      assertArrayEquals(new long[] {}, longArray4);
      assertEquals(0, longArray4.length);
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray5));
      assertFalse(longArray4.equals((Object)longArray3));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1967.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {1967.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1967.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3869089.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {1967.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {1967.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3869089.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(1967L, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[0][0];
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1943.40975844686);
      doubleArray0[2] = (-1943.40975844686);
      double[] doubleArray1 = MathArrays.scale((-1943.40975844686), doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1943.40975844686), 0.0, (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3776841.489226483, -0.0, 3776841.489226483}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = 1616;
      intArray0[3] = (-4063);
      intArray0[4] = 746;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 134217729, 1616, (-4063), 746}, intArray0);
      assertArrayEquals(new int[] {0, 134217729, 1616, (-4063), 746}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1943.40975844686), 0.0, (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      Integer integer0 = new Integer(134217729);
      assertNotNull(integer0);
      assertEquals(134217729, (int)integer0);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 134217729, 1616, (-4063), 746}, intArray0);
      assertArrayEquals(new int[] {0, 134217729, 1616, (-4063), 746}, intArray1);
      assertArrayEquals(new int[] {0, 134217729, 1616, (-4063), 746}, intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray2);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-1943.40975844686), 0.0, (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0}, doubleArray3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = 2232.636;
      doubleArray4[1] = (double) (-4063);
      doubleArray4[2] = (double) (-4063);
      doubleArray4[3] = (double) 0;
      double[] doubleArray5 = MathArrays.normalizeArray(doubleArray4, (-1978.4411));
      assertNotNull(doubleArray5);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {749.5106061223438, (-1363.9758530611718), (-1363.9758530611718), 0.0}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {2232.636, (-4063.0), (-4063.0), 0.0}, doubleArray4, 0.01);
      assertEquals(4, doubleArray5.length);
      assertEquals(4, doubleArray4.length);
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      double[] doubleArray6 = MathArrays.copyOf(doubleArray5, 0);
      assertNotNull(doubleArray6);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray6);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray4, doubleArray6);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {749.5106061223438, (-1363.9758530611718), (-1363.9758530611718), 0.0}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {}, doubleArray6, 0.01);
      assertArrayEquals(new double[] {2232.636, (-4063.0), (-4063.0), 0.0}, doubleArray4, 0.01);
      assertEquals(4, doubleArray5.length);
      assertEquals(0, doubleArray6.length);
      assertEquals(4, doubleArray4.length);
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray5));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      double[] doubleArray7 = MathArrays.ebeSubtract(doubleArray1, doubleArray3);
      assertNotNull(doubleArray7);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray7);
      assertNotSame(doubleArray1, doubleArray7);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray7, doubleArray0);
      assertNotSame(doubleArray7, doubleArray2);
      assertNotSame(doubleArray7, doubleArray4);
      assertNotSame(doubleArray7, doubleArray5);
      assertNotSame(doubleArray7, doubleArray1);
      assertNotSame(doubleArray7, doubleArray6);
      assertNotSame(doubleArray7, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray7);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray6);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray6);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray7);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-1943.40975844686), 0.0, (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3776841.489226483, -0.0, 3776841.489226483}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3776840.489226483, Double.NaN, 3776840.489226483}, doubleArray7, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0}, doubleArray3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray7.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray6));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray6));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray0));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray6));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray6));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long[][] longArray0 = new long[8][4];
      long[] longArray1 = new long[1];
      longArray1[0] = 1967L;
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 926.0;
      double[] doubleArray1 = null;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1967L;
      doubleArray2[1] = 0.097;
      doubleArray2[2] = (double) 1967L;
      doubleArray2[3] = 926.0;
      doubleArray2[4] = (double) 1967L;
      doubleArray2[5] = (double) 1967L;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 681.9428;
      doubleArray3[1] = (double) 1967L;
      doubleArray3[2] = (double) 1967L;
      doubleArray3[3] = (double) 1967L;
      doubleArray3[4] = 0.097;
      doubleArray3[5] = (double) 1967L;
      doubleArray3[6] = 926.0;
      doubleArray3[7] = (double) 1967L;
      doubleArray3[8] = 0.097;
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1943.40975844686);
      doubleArray0[1] = (-1943.40975844686);
      doubleArray0[2] = (-1943.40975844686);
      double[] doubleArray1 = MathArrays.scale((-1943.40975844686), doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3776841.489226483, 3776841.489226483, 3776841.489226483}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = 1616;
      intArray0[3] = (-4063);
      intArray0[4] = 746;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 134217729, 1616, (-4063), 746}, intArray0);
      assertArrayEquals(new int[] {0, 134217729, 1616, (-4063), 746}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 1616;
      Integer integer0 = new Integer(1616);
      assertNotNull(integer0);
      assertEquals(1616, (int)integer0);
      
      integerArray0[1] = integer0;
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1.7320508075688772, double0, 0.01);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {0, 134217729, 1616, (-4063), 746}, intArray0);
      assertArrayEquals(new int[] {0, 134217729, 1616, (-4063), 746}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (int)integerArray0[0];
      doubleArray3[1] = (double) (-4063);
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 1301.2138467212494;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 134217729;
      try { 
        MathArrays.ebeAdd(doubleArray3, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 626;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 259;
      intArray0[4] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {626, 0, 0, 259, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2116L;
      long[][] longArray1 = new long[8][7];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      Integer integer0 = new Integer(2479);
      assertNotNull(integer0);
      assertEquals(2479, (int)integer0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {626, 0, 0, 259, 0}, intArray0);
      assertArrayEquals(new int[] {626, 0, 0, 259, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2116L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.19999954120254515;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2116.0, 0.0, 0.0, 0.19999954120254515}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 0.0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {2116.0, 0.0, 0.0, 0.19999954120254515}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1943.40975844686);
      doubleArray0[1] = (-1943.40975844686);
      doubleArray0[2] = (-1943.40975844686);
      double[] doubleArray1 = MathArrays.scale((-1943.40975844686), doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3776841.489226483, 3776841.489226483, 3776841.489226483}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = 1616;
      intArray0[3] = (-4063);
      intArray0[4] = 740;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 134217729, 1616, (-4063), 740}, intArray0);
      assertArrayEquals(new int[] {0, 134217729, 1616, (-4063), 740}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 1616;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1099.48744);
      doubleArray0[3] = (-2760.064127839757);
      doubleArray0[4] = 0.0010799136069114472;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-1176.8023289);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 626;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 259;
      intArray0[4] = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 626;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 626;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 626;
      doubleArray2[7] = (-1486.013);
      doubleArray2[8] = (double) 259;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 626.0, 0.0, 0.0, 626.0, 0.0, 626.0, (-1486.013), 259.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int int0 = 39;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1642.229F;
      floatArray0[1] = 1642.229F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1642.229F, 1642.229F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 45;
      intArray0[1] = 204;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {45, 204}, intArray0);
      assertEquals(2, intArray0.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {45, 204}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[][] longArray0 = new long[0][8];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-181.0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(181.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-181.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 181.0;
      doubleArray1[1] = 181.0;
      doubleArray1[2] = 181.0;
      int[] intArray0 = new int[2];
      intArray0[0] = (-790);
      intArray0[1] = (-1734);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-790), (-1734)}, intArray0);
      assertEquals(2, intArray0.length);
      
      Integer integer0 = new Integer(4386);
      assertNotNull(integer0);
      assertEquals(4386, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-1734));
      assertNotNull(integer1);
      assertEquals((-1734), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer((-1734));
      assertNotNull(integer2);
      assertEquals((-1734), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer(4386);
      assertNotNull(integer4);
      assertEquals(4386, (int)integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) (-790);
      integerArray0[1] = integer3;
      Integer integer5 = new Integer((-790));
      assertNotNull(integer5);
      assertEquals((-790), (int)integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      
      integerArray0[2] = integer5;
      integerArray0[3] = integer0;
      integerArray0[4] = integer3;
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      integerArray0[7] = (Integer) (-790);
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-181.0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(181.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-181.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 181.0;
      doubleArray1[1] = 181.0;
      doubleArray1[2] = 181.0;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.scaleInPlace(1.34217729E8, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.34217729E8;
      doubleArray2[1] = 1.34217729E8;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1.34217729E8;
      doubleArray2[5] = 0.0;
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "$VALUES";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 312;
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {0, 0, 312}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(int1 == int0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 312);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 312;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (double) 312;
      doubleArray0[4] = (double) 0;
      Integer integer0 = new Integer(312);
      assertNotNull(integer0);
      assertEquals(312, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 312;
      longArray1[1] = (long) int0;
      longArray1[2] = (long) int0;
      longArray1[3] = (long) int0;
      longArray1[4] = (long) 312;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      longArray1[8] = (long) 0;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2688.1212001;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 2688.1212001, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = Integer.getInteger("nc]u6:;9O", integer0);
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      integerArray0[0] = integer1;
      Integer integer2 = new Integer((-4766));
      assertNotNull(integer2);
      assertEquals((-4766), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[1] = integer2;
      Integer integer3 = new Integer((-4766));
      assertNotNull(integer3);
      assertEquals((-4766), (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[2] = integer3;
      Integer integer4 = Integer.getInteger("nc]u6:;9O", (Integer) null);
      assertNull(integer4);
      
      integerArray0[3] = null;
      Integer integer5 = Integer.getInteger("nc]u6:;9O", integer3);
      assertNotNull(integer5);
      assertEquals((-4766), (int)integer5);
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[4] = integer5;
      Integer integer6 = new Integer(3274);
      assertNotNull(integer6);
      assertEquals(3274, (int)integer6);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      
      integerArray0[5] = integer6;
      Integer integer7 = new Integer(1949915864);
      assertNotNull(integer7);
      assertEquals(1949915864, (int)integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      
      integerArray0[6] = integer7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 2688.1212001, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1642.229F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1642.229F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 45;
      intArray0[1] = 204;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {45, 204}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 45;
      doubleArray0[1] = (double) 204;
      doubleArray0[2] = (double) 45;
      doubleArray0[3] = (double) 204;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {45.0, 204.0, 45.0, 204.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {45.0, 204.0, 45.0, 204.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 39, 1941);
      assertNotNull(objectArray0);
      assertEquals(39, objectArray0.length);
      
      Field<String> field1 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field1, 39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.scale(1.700416E38, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1535.34725617, 1535.34725617, 1535.34725617, 1535.34725617);
      assertEquals(4714582.3940574955, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      long[][] longArrayArray0 = null;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1943.40975844686);
      doubleArray0[1] = (-1943.40975844686);
      doubleArray0[2] = (-1943.40975844686);
      double[] doubleArray1 = MathArrays.scale((-1943.40975844686), doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3776841.489226483, 3776841.489226483, 3776841.489226483}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = 1616;
      intArray0[3] = (-4063);
      intArray0[4] = 746;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 134217729, 1616, (-4063), 746}, intArray0);
      assertArrayEquals(new int[] {0, 134217729, 1616, (-4063), 746}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 1616;
      Integer integer0 = new Integer(1616);
      assertNotNull(integer0);
      assertEquals(1616, (int)integer0);
      
      integerArray0[1] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1.7320508075688772, double0, 0.01);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 1616;
      doubleArray3[1] = (-1943.40975844686);
      doubleArray3[2] = (double) 134217729;
      doubleArray3[3] = 1.7320508075688772;
      try { 
        MathArrays.ebeSubtract(doubleArray3, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.141592653589793, 3.141592653589793, Double.NaN, 3.141592653589793, Double.NaN, Double.NaN, 3.141592653589793, 3.141592653589793);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-2135.3443));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2135.3443)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray1, doubleArray2);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2135.3443)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2145.2139044010896}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray4 = new double[2][4];
      doubleArray4[0] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-772));
      assertNotNull(integer1);
      assertEquals((-772), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = int0;
      intArray0[1] = 202;
      intArray0[2] = (-772);
      intArray0[3] = (-772);
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = 202;
      intArray0[7] = (-772);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 202, (-772), (-772), 0, 0, 202, (-772)}, intArray0);
      assertArrayEquals(new int[] {0, 202, (-772), (-772), 0, 0, 202, (-772)}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[][] longArray0 = new long[2][2];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) (-772);
      longArray1[2] = (long) (-772);
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 202;
      longArray1[5] = 2147483648L;
      longArray1[6] = (long) (-772);
      longArray1[7] = (long) (-772);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 3952090531849364496L;
      longArray2[1] = 9218868437227405312L;
      longArray2[2] = (long) (-772);
      longArray2[3] = (long) int0;
      longArray2[4] = (long) 202;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -772 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2080.5F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 3725.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2080.5F), 0.0F, 3725.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 0.0F, 0.7249995199969751, (double) (-2080.5F), 681.9428, 475.962844910531, 3123.0);
      assertEquals(67649.96925558816, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1943.40975844686);
      doubleArray0[1] = (-1943.40975844686);
      doubleArray0[2] = (-1943.40975844686);
      double[] doubleArray1 = MathArrays.scale((-1943.40975844686), doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3776841.489226483, 3776841.489226483, 3776841.489226483}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = 1616;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-2.2019851818809155E10), double0, 0.01);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3776841.489226483, 3776841.489226483, 3776841.489226483}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1616;
      longArray0[1] = (long) 134217729;
      longArray0[2] = (long) 134217729;
      longArray0[3] = (long) 0;
      longArray0[4] = 2935890503282001226L;
      longArray0[5] = (long) 134217729;
      longArray0[6] = (long) 134217729;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1616L, 134217729L, 134217729L, 0L, 2935890503282001226L, 134217729L, 134217729L}, longArray0);
      assertEquals(7, longArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3776841.489226483, 3776841.489226483, 3776841.489226483}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("zPB3Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.zPB3Z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[3];
      double double0 = (-532.769097794953);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-532.769097794953);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-582.0);
      double[] doubleArray1 = MathArrays.scale((-532.769097794953), doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-532.769097794953), 0.0, (-582.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {283842.9115652482, -0.0, 310071.6149166627}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1943.40975844686);
      doubleArray0[1] = (-1943.40975844686);
      doubleArray0[2] = (-1943.40975844686);
      double[] doubleArray1 = MathArrays.scale((-1943.40975844686), doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3776841.489226483, 3776841.489226483, 3776841.489226483}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = 1616;
      intArray0[3] = (-4063);
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(1947.24053081342, (double) 0, (double) 0.0F, 3123.0, (-690.815986125596), (-690.815986125596));
      assertEquals(477226.7266866797, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1943.40975844686);
      doubleArray0[1] = (-1943.40975844686);
      doubleArray0[2] = (-1943.40975844686);
      double[] doubleArray1 = MathArrays.scale((-1943.40975844686), doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3776841.489226483, 3776841.489226483, 3776841.489226483}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = 1616;
      intArray0[3] = (-4063);
      intArray0[4] = 746;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 134217729, 1616, (-4063), 746}, intArray0);
      assertArrayEquals(new int[] {0, 134217729, 1616, (-4063), 746}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 1616;
      Integer integer0 = new Integer(1616);
      assertNotNull(integer0);
      assertEquals(1616, (int)integer0);
      
      integerArray0[1] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(6541681.351474371, double0, 0.01);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3776841.489226483, 3776841.489226483, 3776841.489226483}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination((double) 134217729, (-1943.40975844686), (-3293.101), 1199.21864584696, 1980.86953107, (double) integerArray0[1]);
      assertEquals((-2.6084079235813577E11), double2, 0.01);
      assertEquals(2, integerArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1943.40975844686);
      doubleArray0[1] = (-1943.40975844686);
      doubleArray0[2] = (-1943.40975844686);
      double[] doubleArray1 = MathArrays.scale((-1943.40975844686), doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3776841.489226483, 3776841.489226483, 3776841.489226483}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      int int0 = 134217729;
      intArray0[1] = 134217729;
      intArray0[2] = 0;
      intArray0[3] = (-4063);
      intArray0[4] = 746;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 134217729, 0, (-4063), 746}, intArray0);
      assertArrayEquals(new int[] {0, 134217729, 0, (-4063), 746}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1943.40975844686), (-1943.40975844686), (-1943.40975844686)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (1 <= 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double double0 = MathArrays.linearCombination(1352.668566006723, 489.4, (-591.238), 2067.03427, 2067.03427, (-293.1), 1.34217729E8, (-780.0));
      assertEquals((-1.0469099458095605E11), double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-1284);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2809), (-1284));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2688.1212001;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 2688.1212001, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.141592653589793, 3.141592653589793, Double.NaN, 3.141592653589793, Double.NaN, Double.NaN, 3.141592653589793, (-1486.671032796));
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-2135.3443));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2135.3443)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray1, doubleArray2);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2135.3443)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2145.2139044010896}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray4 = new double[2][4];
      doubleArray4[0] = doubleArray0;
      doubleArray4[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(2, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 202;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 202}, intArray0);
      assertArrayEquals(new int[] {0, 202}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 202;
      longArray0[3] = 2625L;
      longArray0[4] = (long) 202;
      boolean boolean0 = MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, true, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2135.3443)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2145.2139044010896}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = 1877.2650032839626;
      doubleArray5[2] = (double) 202;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray5, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long[][] longArray0 = new long[8][4];
      long[] longArray1 = new long[1];
      longArray1[0] = 1967L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1L);
      longArray2[1] = 1967L;
      longArray2[2] = 1967L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[4][4];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = (-772);
      Integer integer0 = new Integer((-772));
      assertNotNull(integer0);
      assertEquals((-772), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[1] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Integer integer0 = new Integer((-2846));
      assertNotNull(integer0);
      assertEquals((-2846), (int)integer0);
      
      int int0 = (-1814);
      Integer integer1 = new Integer((-1814));
      assertNotNull(integer1);
      assertEquals((-1814), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[6] = integer1;
      integerArray0[7] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, integerArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 626;
      intArray0[1] = 626;
      intArray0[2] = 0;
      intArray0[3] = 259;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {626, 626, 0, 259, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 747.98493991436;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 626;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 259);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, 747.98493991436, 0.0, 626.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(259, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[3][7];
      long[] longArray1 = new long[4];
      longArray1[0] = (long) 626;
      longArray1[1] = (long) 626;
      longArray1[2] = (long) 626;
      longArray1[3] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-423L);
      longArray3[1] = (long) 626;
      longArray3[2] = (long) 1434;
      longArray3[3] = (long) 626;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 597;
      Integer integer0 = new Integer(597);
      assertNotNull(integer0);
      assertEquals(597, (int)integer0);
      
      Integer integer1 = new Integer(5892);
      assertNotNull(integer1);
      assertEquals(5892, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      Integer integer2 = new Integer((-772));
      assertNotNull(integer2);
      assertEquals((-772), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[1] = integer2;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer integer3 = new Integer(2146379208);
      assertNotNull(integer3);
      assertEquals(2146379208, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      integerArray0[4] = integer3;
      Integer integer4 = new Integer((-772));
      assertNotNull(integer4);
      assertEquals((-772), (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      
      integerArray0[5] = integer4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(6, integerArray0.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {597, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (int)integerArray0[1];
      doubleArray0[2] = (double) (int)integerArray0[5];
      doubleArray0[3] = (double) (int)integerArray0[1];
      doubleArray0[4] = (double) (int)integerArray0[5];
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 312;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 312}, intArray0);
      assertEquals(3, intArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 312);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 312;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (double) 312;
      doubleArray0[4] = (double) 0;
      Integer integer0 = new Integer(312);
      assertNotNull(integer0);
      assertEquals(312, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 626;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 259;
      intArray0[4] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {626, 0, 0, 259, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2116L;
      long[][] longArray1 = new long[8][7];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1900.0F);
      floatArray0[1] = (-1900.0F);
      floatArray0[2] = (-1900.0F);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1900.0F);
      floatArray1[1] = (-1900.0F);
      floatArray1[2] = (-1900.0F);
      floatArray1[3] = (-1900.0F);
      floatArray1[4] = (-1900.0F);
      floatArray1[5] = (-1900.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1900.0F), (-1900.0F), (-1900.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1900.0F), (-1900.0F), (-1900.0F), (-1900.0F), (-1900.0F), (-1900.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double double0 = MathArrays.linearCombination((double) (-1900.0F), (double) (-1900.0F), 3123.0, (double) (-1900.0F), 1947.24053081342, (double) (-1900.0F));
      assertEquals((-6023457.008545498), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-716);
      intArray0[1] = 6;
      intArray0[2] = 1391;
      intArray0[3] = 0;
      intArray0[4] = (-1121);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-716), 6, 1391, 0, (-1121)}, intArray0);
      assertEquals(5, intArray0.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-716), 6, 1391, 0, (-1121)}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[][] longArray0 = new long[0][1];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      double double0 = MathArrays.linearCombination(1352.668566006723, 489.4, (-591.238), 2067.03427, 2067.03427, (-293.1), 1.34217729E8, (-780.0));
      assertEquals((-1.0469099458095605E11), double0, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2809), (-1284));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1900.0F);
      floatArray0[1] = (-1900.0F);
      floatArray0[2] = (-1900.0F);
      floatArray0[3] = (-1900.0F);
      floatArray0[4] = (-1900.0F);
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[1] = (-1900.0F);
      floatArray1[2] = (-1900.0F);
      floatArray1[3] = (-1900.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1900.0F), (-1900.0F), (-1900.0F), (-1900.0F), (-1900.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1900.0F), (-1900.0F), (-1900.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1900.0F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1900.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1900.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = (-1574.68292296);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 20.0, (-1574.68292296)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 20.0, (-1574.68292296)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 400.0, 2479626.307861849}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 20.0;
      doubleArray2[1] = 0.0;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1574.68292296);
      doubleArray3[1] = 13.07;
      doubleArray3[2] = (-1574.68292296);
      doubleArray3[3] = 20.0;
      doubleArray3[4] = 20.0;
      doubleArray3[5] = (-1574.68292296);
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 276;
      intArray0[1] = 0;
      intArray0[2] = (-514);
      intArray0[3] = (-1);
      int[] intArray1 = MathArrays.copyOf(intArray0, 276);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {276, 0, (-514), (-1)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(276, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-514);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 276;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 276;
      doubleArray0[8] = (double) (-514);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 826.776039);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {-0.0, 1.7296569853556485, 889.0436904728033, -0.0, (-477.38532795815894), 1.7296569853556485, -0.0, (-477.38532795815894), 889.0436904728033}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), (-514.0), 0.0, 276.0, (-1.0), 0.0, 276.0, (-514.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 681.9428;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = Double.NaN;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1231.288113632;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3509.649030144);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-3185.65335013517);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1231.288113632, 0.0, 1.304E19, 0.0, 0.0, (-3509.649030144), 0.0, (-3185.65335013517)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1255L;
      longArray0[1] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1255L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1231.288113632, 0.0, 1.304E19, 0.0, 0.0, (-3509.649030144), 0.0, (-3185.65335013517)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 171;
      intArray0[1] = 2343;
      intArray0[2] = 5;
      intArray0[3] = (-2853);
      intArray0[4] = 134217729;
      intArray0[5] = 178;
      intArray0[6] = 109;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {171, 2343, 5, (-2853), 134217729, 178, 109, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {171, 2343, 5, (-2853), 134217729, 178, 109, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 109;
      doubleArray0[1] = (double) 178;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1629.02;
      doubleArray0[4] = (double) (-2853);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 178;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {109.0, 178.0, 0.0, 1629.02, (-2853.0), 0.0, 178.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination((double) (-2853), (double) 0, 178.0, 0.0, (double) 0, (double) 0, 1.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray3 = MathArrays.copyOf(intArray2);
      assertNotNull(intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {171, 2343, 5, (-2853), 134217729, 178, 109, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray3);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray3.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 217;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {217}, intArray0);
      assertArrayEquals(new int[] {217}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) 217;
      integerArray0[1] = (Integer) 217;
      integerArray0[2] = (Integer) 217;
      integerArray0[3] = (Integer) 217;
      integerArray0[4] = (Integer) 217;
      integerArray0[5] = (Integer) 217;
      integerArray0[6] = (Integer) 217;
      integerArray0[7] = (Integer) 217;
      integerArray0[8] = (Integer) 217;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertEquals(9, integerArray0.length);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, (int) integerArray0[8]);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(217, doubleArray2.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(9, integerArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, true);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {217}, intArray0);
      assertArrayEquals(new int[] {217}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      
      double double1 = MathArrays.distance(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {217}, intArray0);
      assertArrayEquals(new int[] {217}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, (-1.0), 0.0, (double) integerArray0[2], (double) integerArray0[3], 0.0, 3084.12326132, (-3.141592653589793));
      assertEquals((-9689.058980528305), double2, 0.01);
      assertEquals(9, integerArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 736;
      intArray0[1] = 1197;
      intArray0[2] = 769;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1197);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {736, 1197, 769}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1197, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 736;
      doubleArray1[1] = (double) 736;
      doubleArray1[2] = (double) 736;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1197;
      doubleArray2[1] = (double) 736;
      doubleArray2[2] = (double) 1197;
      doubleArray2[3] = (double) 769;
      doubleArray2[4] = (double) 736;
      doubleArray0[7] = doubleArray2;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-772));
      assertNotNull(integer1);
      assertEquals((-772), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(2, integerArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-772);
      intArray0[1] = int0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-772), 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-772);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -772 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1.0), (-1.0), (-1767.358037), 0.0, (-3.141592653589793), (-3.141592653589793), (-1.0), 5924.687343);
      assertEquals((-5913.81773859891), double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1767.358037);
      doubleArray0[1] = 5924.687343;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1767.358037), 5924.687343}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1767.358037), 5924.687343}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3123554.430948493, 3.51019201123044E7}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-1767.358037), 5924.687343}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3123554.430948493, 3.51019201123044E7}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1642.229F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1642.229F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 45;
      intArray0[1] = 204;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {45, 204}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 45;
      doubleArray0[1] = (double) 204;
      doubleArray0[2] = (double) 45;
      doubleArray0[3] = (double) 204;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {45.0, 204.0, 45.0, 204.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {45.0, 204.0, 45.0, 204.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 39;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 39, 1941);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = (-1569.23743299768);
      doubleArray0[3] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 3.141592653589793, (-1569.23743299768), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1569.23743299768);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1569.23743299768);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1569.23743299768), 0.0, (-1569.23743299768)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1569.23743299768), 0.0, (-1569.23743299768)}, doubleArray2, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 3.834E-20, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 733.1101936;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 4368.040696741;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 2442.1009191011;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2442.1009191011;
      doubleArray1[1] = 4368.040696741;
      doubleArray1[2] = 2442.1009191011;
      doubleArray1[3] = 2442.1009191011;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2442.1009191011;
      doubleArray1[6] = 733.1101936;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2899.3645023519;
      doubleArray0[2] = 362.047293267817;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 1346.1;
      doubleArray0[5] = 579.0837;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1141.076);
      doubleArray0[8] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = 1.34217729E8;
      MathArrays.scaleInPlace(1.34217729E8, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      int int0 = 2161;
      intArray0[1] = 2161;
      int int1 = 312;
      intArray0[2] = 312;
      int int2 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int2);
      assertArrayEquals(new int[] {0, 2161, 312}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 312);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 90.502742;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {90.502742}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.scaleInPlace(2131.5059, doubleArray0);
      assertArrayEquals(new double[] {192907.1285391778}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1289;
      intArray0[1] = 1540;
      intArray0[2] = (-2473);
      intArray0[3] = 0;
      intArray0[4] = 120;
      intArray0[5] = 2;
      intArray0[6] = 2786;
      intArray0[7] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1289, 1540, (-2473), 0, 120, 2, 2786, 2}, intArray0);
      assertArrayEquals(new int[] {1289, 1540, (-2473), 0, 120, 2, 2786, 2}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {192907.1285391778}, doubleArray0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[][] doubleArray2 = new double[7][3];
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 116.029572;
      doubleArray3[2] = (double) 2786;
      doubleArray3[3] = (double) 120;
      doubleArray3[4] = (double) 1289;
      doubleArray3[5] = 90.502742;
      doubleArray3[6] = (double) 2786;
      doubleArray3[7] = (double) 120;
      doubleArray3[8] = (double) 0;
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long[][] longArray0 = new long[8][4];
      long[] longArray1 = new long[1];
      longArray1[0] = 1967L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1L);
      longArray2[1] = 1967L;
      longArray2[2] = 1967L;
      longArray2[3] = 573L;
      longArray2[4] = 1967L;
      longArray2[5] = 1967L;
      longArray2[6] = 1967L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[1] = 1967L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 573L;
      longArray5[1] = 1967L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = 573L;
      longArray6[1] = 1967L;
      longArray6[2] = 1032L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = 0L;
      longArray7[1] = (-297L);
      longArray7[2] = 0L;
      longArray7[3] = (-1L);
      longArray7[4] = 0L;
      longArray7[5] = 100L;
      longArray7[6] = 1967L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray2));
      
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1900.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1900.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = (-1574.68292296);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 20.0, (-1574.68292296)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 20.0, (-1574.68292296)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 400.0, 2479626.307861849}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 20.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1574.68292296);
      doubleArray2[3] = (-1574.68292296);
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 20.0, (-1574.68292296)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {20.0, 0.0, (-1574.68292296), (-1574.68292296)}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 981.110936;
      doubleArray0[1] = 3133.17514328;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-378.418298889);
      doubleArray0[4] = 1842.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {981.110936, 3133.17514328, (-1.0), (-378.418298889), 1842.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, (-2146553256));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3074.432627789;
      doubleArray0[1] = 1368.806112754459;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {3074.432627789, 1368.806112754459, 20.0, 1.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {3074.432627789, 1368.806112754459, 20.0, 1.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {3074.432627789, 1368.806112754459, 20.0, 1.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-483);
      intArray0[1] = 1242;
      intArray0[2] = 2202;
      intArray0[3] = (-2983);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1892));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1642.229F;
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = 2944.942952780774;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3.141592653589793), 2944.942952780774, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358, (-18503.622291394226), 8672688.995133143, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-3.141592653589793), 2944.942952780774, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3.141592653589793), 2944.942952780774, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-960), (-960));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[1][8];
      long[] longArray1 = new long[5];
      long long0 = (-907L);
      longArray1[0] = (-907L);
      longArray1[1] = 1008L;
      longArray1[2] = 100L;
      longArray1[3] = 1L;
      longArray1[4] = (-4520L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 3534.72273230556;
      doubleArray0[3] = (-2170.7792);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 20.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, Double.POSITIVE_INFINITY, 3534.72273230556, (-2170.7792), 1.0, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, Double.POSITIVE_INFINITY, 7069.44546461112, (-4341.5584), 2.0, 40.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = 2147483647L;
      longArray0[2] = (-9223372036854775808L);
      longArray0[3] = (-2702L);
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
      longArray0[6] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -9,223,372,036,854,775,808 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double double0 = 161.1787;
      double double1 = MathArrays.linearCombination(161.1787, 1.0E-5, 0.0, 1.0E-5, 0.0, 1.0E-5);
      assertEquals(0.0016117870000000002, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0016117870000000002;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = 0.0016117870000000002;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 161.1787;
      int int0 = (-1226);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1226));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1650.586F;
      floatArray0[3] = 1722.75F;
      floatArray0[4] = (-2152.582F);
      floatArray0[5] = 1246.7F;
      floatArray0[6] = Float.NaN;
      floatArray0[7] = (-84.1796F);
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 1650.586F, 1722.75F, (-2152.582F), 1246.7F, Float.NaN, (-84.1796F), 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 1.0F, 1650.586F, 1722.75F, (-2152.582F), 1246.7F, Float.NaN, (-84.1796F), 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      double double0 = 3123.0;
      doubleArray0[1] = 3123.0;
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {1.0, 3123.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 3123.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 6246.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1.0, 3123.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 6246.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, 1.9506258E7}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2653.583F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 2653.583F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {1.0, 3123.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 6246.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.5, 0.5}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      double double2 = 1781.42;
      double double3 = 668.48;
      double double4 = MathArrays.linearCombination(1781.42, 1.0, 668.48, (-1.0));
      assertEquals(1112.94, double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (1 <= 3,123)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-981.0);
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 6376.648886334833;
      doubleArray0[5] = 100.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-981.0), 1.34217729E8, 0.0, 0.0, 6376.648886334833, 100.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-981.0), 1.34217729E8, 0.0, 0.0, 6376.648886334833, 100.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1910.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-7029.2437F);
      floatArray0[4] = 69.9243F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-880.961F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1910.0F, (-1.0F), 0.0F, (-7029.2437F), 69.9243F, 0.0F, (-880.961F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, (-2030.3), (-981.0), 1.34217729E8, 0.0, 100.0, 6376.648886334833, (double) (-1.0F));
      assertEquals((-1.3166759852564888E11), double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-215));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double0 = (-1.0);
      double double1 = (-2663.83);
      double double2 = MathArrays.linearCombination((-1.0), (-1.0), 0.0, (-2663.83));
      assertEquals(1.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale(Double.NaN, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[3];
      int int0 = 652;
      intArray0[0] = 652;
      int int1 = (-2920);
      intArray0[1] = (-2920);
      intArray0[2] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {652, (-2920), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int2 = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {652, (-2920), 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 696.950593599;
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 696.950593599}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 531);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 696.950593599}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(531, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double2 = 0.0;
      double double3 = MathArrays.linearCombination(0.0, (double) 531, 0.0, 696.950593599);
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 696.950593599}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 531;
      int int0 = 1;
      intArray0[1] = 1;
      intArray0[2] = 531;
      intArray0[3] = 531;
      intArray0[4] = 531;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {531, 1, 531, 531, 531}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(5, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 531 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-181.0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(181.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-181.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 181.0;
      doubleArray1[1] = 181.0;
      doubleArray1[2] = 181.0;
      doubleArray1[3] = (-181.0);
      doubleArray1[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {181.0, 181.0, 181.0, (-181.0), 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = 9007199254740990L;
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      longArray0[4] = (-1L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1384.0154F;
      floatArray1[1] = (-2639.208F);
      floatArray1[2] = 1.0F;
      floatArray1[3] = 2194.382F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1384.0154F, (-2639.208F), 1.0F, 2194.382F, 0.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1632.922173964823;
      doubleArray0[1] = (-1265.5);
      doubleArray0[2] = 82.8926;
      doubleArray0[3] = 4.983191803254889E-7;
      doubleArray0[4] = 3657.530171;
      doubleArray0[5] = 1.2784239448288797E8;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1632.922173964823, (-1265.5), 82.8926, 4.983191803254889E-7, 3657.530171, 1.2784239448288797E8}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-536.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[2] = 2130.4F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray1, (float[]) null);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int int0 = 28;
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 28, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathArrays.linearCombination(3.141592653589793, 3.141592653589793, Double.NaN, 3.141592653589793, Double.NaN, Double.NaN, 3.141592653589793, (-1486.671032796));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-2135.3443));
      MathArrays.ebeSubtract(doubleArray1, doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[2][4];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray3);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 202;
      MathArrays.copyOf(intArray0);
      long[][] longArray0 = new long[4][4];
      long[] longArray1 = new long[5];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 202;
      longArray1[3] = 2625L;
      longArray1[4] = (long) 202;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 2625L;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 202;
      longArray2[3] = 2625L;
      longArray2[4] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = (long) 202;
      longArray3[1] = 2625L;
      longArray3[2] = 2625L;
      longArray3[3] = (long) 202;
      longArray3[4] = (long) 0;
      longArray3[5] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = (long) 0;
      longArray4[1] = (long) 202;
      longArray4[2] = (long) 202;
      longArray0[3] = longArray4;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-1.0);
      doubleArray0[0] = (-1.0);
      double double1 = 2688.1212001;
      doubleArray0[1] = 2688.1212001;
      double double2 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double3 = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double double0 = 2067.03427;
      MathArrays.linearCombination(1352.668566006723, 489.4, (-591.238), 2067.03427, 2067.03427, (-293.1), 1.34217729E8, (-780.0));
      double[] doubleArray1 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      float[] floatArray0 = new float[2];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1642.229F;
      doubleArray0[1] = (double) 45;
      doubleArray0[2] = 1696130.71521169;
      doubleArray0[3] = (double) 45;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<String, Integer>>) null, 13, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2583.727788979581), (-3.141592653589793), (-2583.727788979581), 0.0, (-591.238), (-591.238), 1118.7137, 981.4882941498469);
      assertEquals(1455683.7939397977, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 218;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-591.238);
      doubleArray0[1] = 1118.7137;
      doubleArray0[2] = (double) 218;
      doubleArray0[3] = (double) 218;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      double double1 = MathArrays.linearCombination(782.968143, 0.0, (double) 0, 3.32, 0.0, 0.0, 1118.7137, 1118.7137);
      assertEquals(1251520.34256769, double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1302.3558327936685, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double double0 = (-1767.358037);
      double double1 = 0.0;
      double double2 = 5924.687343;
      MathArrays.linearCombination((-1.0), (-1.0), (-1767.358037), 0.0, (-3.141592653589793), (-3.141592653589793), (-1.0), 5924.687343);
      MathArrays.equals((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 5924.687343;
      doubleArray0[3] = (-1767.358037);
      doubleArray0[4] = (-1767.358037);
      double double3 = (-1.0);
      doubleArray0[5] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double double4 = 100.0;
      double double5 = 0.0;
      double double6 = 489.4;
      MathArrays.linearCombination(100.0, (-258.46356858822), 0.0, 0.0, (-137.359994153), 489.4, 1.0, 0.0);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-826), (-2809));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.304E19;
      double[] doubleArray1 = MathArrays.scale(1.304E19, doubleArray0);
      assertArrayEquals(new double[] {1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 0.0, 1.700416E38}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-353.751362548233);
      doubleArray0[1] = 1876.8412;
      doubleArray0[2] = 539.0701341528;
      doubleArray0[3] = 551.43155364;
      doubleArray0[4] = 5313.04462846;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {354.751362548233, (-1875.8412), (-538.0701341528), (-550.43155364), (-5312.04462846), Double.NaN}, doubleArray2, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-3215);
      intArray0[1] = 1896;
      intArray0[2] = (-39);
      intArray0[3] = (-476);
      intArray0[4] = 134217729;
      intArray0[5] = (-863);
      intArray0[6] = (-2859);
      intArray0[7] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }
}
