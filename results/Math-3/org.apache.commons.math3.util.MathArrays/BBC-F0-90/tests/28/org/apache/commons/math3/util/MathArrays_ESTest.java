/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 16:08:54 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-54);
      intArray0[1] = (-1);
      intArray0[2] = 3578;
      intArray0[3] = (-2146580963);
      intArray0[4] = (-33);
      intArray0[5] = 405;
      intArray0[6] = 2676;
      intArray0[7] = (-1120);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-54), (-1), 3578, (-2146580963), (-33), 405, 2676, (-1120)}, intArray0);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3578;
      intArray1[1] = (-2146580963);
      intArray1[2] = (-33);
      intArray1[3] = (-54);
      intArray1[4] = 3578;
      intArray1[5] = (-54);
      int int1 = MathArrays.distance1(intArray1, intArray0);
      assertEquals((-1794112), int1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-54), (-1), 3578, (-2146580963), (-33), 405, 2676, (-1120)}, intArray0);
      assertArrayEquals(new int[] {3578, (-2146580963), (-33), (-54), 3578, (-54)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, Integer.MAX_VALUE, 1000000000);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = Float.NEGATIVE_INFINITY;
      floatArray0[3] = (-109.43234F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F, Float.NEGATIVE_INFINITY, (-109.43234F), 1.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-109.43234F);
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[4] = (double) (-109.43234F);
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 134217746;
      intArray0[0] = 134217746;
      intArray0[1] = (-6);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {134217746, (-6)}, intArray0);
      assertArrayEquals(new int[] {134217746, (-6)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      int int1 = 133;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 133, 133);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 7611.362908222889;
      doubleArray0[1] = 3344.389;
      doubleArray0[2] = 1325.878001334;
      doubleArray0[3] = (-2264.990121);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long[][] longArray0 = new long[6][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4211.1511);
      doubleArray0[1] = 1686.2;
      doubleArray0[2] = 0.9921976327896118;
      doubleArray0[3] = 598.8947588858957;
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1686.2;
      doubleArray1[1] = 864.0054;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 598.8947588858957;
      doubleArray1[4] = 598.8947588858957;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals((-5284682.260162487), double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4211.1511), 1686.2, 0.9921976327896118, 598.8947588858957, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1686.2, 864.0054, 1.0, 598.8947588858957, 598.8947588858957}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4.3466666666666665E18;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1362.302060524662;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 0.3333333134651184;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {4.3466666666666665E18, Double.NaN, 1362.302060524662, 1.304E19, 0.3333333134651184}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int int0 = 2587;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2587);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {4.3466666666666665E18, Double.NaN, 1362.302060524662, 1.304E19, 0.3333333134651184}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(2587, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {4.3466666666666665E18, Double.NaN, 1362.302060524662, 1.304E19, 0.3333333134651184}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.693333333333333E18, Double.NaN, 2724.604121049324, 2.608E19, 0.6666666269302368}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {4.3466666666666665E18, Double.NaN, 1362.302060524662, 1.304E19, 0.3333333134651184}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(2587, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-25.91777171);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-25.91777171), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-51.83554342), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(51.83554342, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-25.91777171), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-51.83554342), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1324.3976F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 761.6F;
      floatArray0[4] = 1691.56F;
      floatArray0[5] = 1935.0548F;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 1935.0548F;
      floatArray1[2] = 1060.4F;
      floatArray1[3] = 1324.3976F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 761.6F;
      floatArray1[6] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 1324.3976F, 1.0F, 761.6F, 1691.56F, 1935.0548F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1935.0548F, 1060.4F, 1324.3976F, 0.0F, 761.6F, (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1071.499F;
      floatArray0[1] = 922.6619F;
      floatArray0[2] = (-2149.9F);
      floatArray0[3] = (-95.775536F);
      floatArray0[5] = 3678.086F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1071.499F, 922.6619F, (-2149.9F), (-95.775536F), 0.0F, 3678.086F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.5122273008860803E13;
      doubleArray0[1] = 613.08;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-648.82);
      doubleArray0[4] = 2090.9636885064056;
      doubleArray0[5] = 3063.272;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 4112.035158416447;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2090.9636885064056);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.5122273008860803E13, 613.08, Double.NaN, (-648.82), 2090.9636885064056, 3063.272, 3.834E-20, 4112.035158416447}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2090.963687230096, 8.47708553215439E-8, Double.NaN, (-8.971264166132333E-8), 2.8911851686725755E-7, 4.2356003706292226E-7, 5.301289543009056E-30, 5.685730043244315E-7}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-3067);
      intArray0[1] = 497;
      intArray0[2] = 124;
      intArray0[3] = (-2145446595);
      intArray0[4] = 124;
      intArray0[5] = (-919);
      intArray0[6] = 2;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 497;
      intArray1[1] = 124;
      intArray1[2] = (-3067);
      intArray1[3] = 2;
      intArray1[4] = (-919);
      intArray1[5] = (-2145446595);
      intArray1[6] = 497;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(3.034119023583342E9, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3067), 497, 124, (-2145446595), 124, (-919), 2}, intArray0);
      assertArrayEquals(new int[] {497, 124, (-3067), 2, (-919), (-2145446595), 497}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, (-2797.66850905816));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147483616);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1360.0;
      doubleArray1[2] = (-2240.4);
      doubleArray1[3] = (-1661.03723949);
      doubleArray1[4] = 3.32;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 943.521964647;
      doubleArray1[7] = (-1257.437);
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 4039;
      intArray0[1] = 231;
      int int0 = 96;
      intArray0[2] = 96;
      intArray0[3] = 2276;
      intArray0[4] = 89;
      intArray0[5] = 1;
      intArray0[6] = 134217729;
      intArray0[7] = 2386;
      intArray0[8] = 633;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 89;
      intArray1[1] = 2276;
      intArray1[2] = 1;
      intArray1[3] = 4039;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2079.4067636647);
      doubleArray0[1] = (-2240.4);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4.7233777777777774E36;
      doubleArray0[1] = 135122.90474395355;
      doubleArray0[2] = 1.342181711731671E8;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-4392.3);
      doubleArray0[5] = 1591.0539663528;
      doubleArray0[6] = 0.2;
      doubleArray0[7] = 1.342181711731671E8;
      doubleArray0[8] = 1.7976931348623157E308;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertArrayEquals(new double[] {4.7233777777777774E36, 135122.90474395355, 1.342181711731671E8, 0.0, (-4392.3), 1591.0539663528, 0.2, 1.342181711731671E8, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1651.2227F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = Float.NEGATIVE_INFINITY;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1651.2227F;
      floatArray1[1] = (-1.0F);
      floatArray1[2] = 1651.2227F;
      floatArray1[3] = 1651.2227F;
      floatArray1[4] = 1651.2227F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 1651.2227F;
      floatArray1[7] = 1651.2227F;
      floatArray1[8] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1651.2227F, 0.0F, Float.NEGATIVE_INFINITY, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1651.2227F, (-1.0F), 1651.2227F, 1651.2227F, 1651.2227F, 0.0F, 1651.2227F, 1651.2227F, Float.NEGATIVE_INFINITY}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 294);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(294, intArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 294;
      doubleArray0[1] = (double) 294;
      doubleArray0[2] = (double) 294;
      doubleArray0[3] = (double) 294;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 294;
      doubleArray1[1] = (double) 294;
      doubleArray1[2] = (double) 294;
      doubleArray1[3] = (double) 294;
      doubleArray1[4] = (double) 294;
      doubleArray1[5] = (double) 294;
      doubleArray1[6] = (double) 294;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, (-3067.76998009289), (-0.010714690733195933), 0.0, 0.0, (-0.010714690733195933));
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-0.25);
      doubleArray0[1] = (-121.686039);
      doubleArray0[2] = 1168.80278112581;
      doubleArray0[3] = 2800.9687705;
      doubleArray0[4] = 1.073741824E9;
      doubleArray0[5] = 625.7210986315679;
      doubleArray0[6] = 6.6522;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = (-3856.681565757659);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-0.25), (-121.686039), 1168.80278112581, 2800.9687705, 1.073741824E9, 625.7210986315679, 6.6522, Double.NaN, (-3856.681565757659)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5), (-243.372078), 2337.60556225162, 5601.937541, 2.147483648E9, 1251.4421972631358, 13.3044, Double.NaN, (-7713.363131515318)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-0.25), (-121.686039), 1168.80278112581, 2800.9687705, 1.073741824E9, 625.7210986315679, 6.6522, Double.NaN, (-3856.681565757659)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5), (-243.372078), 2337.60556225162, 5601.937541, 2.147483648E9, 1251.4421972631358, 13.3044, Double.NaN, (-7713.363131515318)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 3311.57F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 3311.57F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 3311.57F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 1.7976931348623157E308;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.7976931348623157E308, 1.7976931348623157E308, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertArrayEquals(new double[] {1.7976931348623157E308, 1.7976931348623157E308, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 887.18;
      doubleArray0[1] = (-200.8303010735);
      doubleArray0[2] = (-3.940510424527919E-20);
      doubleArray0[3] = 2.0738664542440273E10;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 0.49999999999999994;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {887.18, (-200.8303010735), (-3.940510424527919E-20), 2.0738664542440273E10, 1.304E19, 0.49999999999999994}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-567.438784658405));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {887.18, (-200.8303010735), (-3.940510424527919E-20), 2.0738664542440273E10, 1.304E19, 0.49999999999999994}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3.860585430771548E-14), 8.73917958454674E-15, 1.7147227321102696E-36, (-9.024480509727836E-7), (-567.4387837559569), (-2.1757622076532087E-17)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(567.4387837559569, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {887.18, (-200.8303010735), (-3.940510424527919E-20), 2.0738664542440273E10, 1.304E19, 0.49999999999999994}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3.860585430771548E-14), 8.73917958454674E-15, 1.7147227321102696E-36, (-9.024480509727836E-7), (-567.4387837559569), (-2.1757622076532087E-17)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      boolean boolean3 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {887.18, (-200.8303010735), (-3.940510424527919E-20), 2.0738664542440273E10, 1.304E19, 0.49999999999999994}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {887.18, (-200.8303010735), (-3.940510424527919E-20), 2.0738664542440273E10, 1.304E19, 0.49999999999999994}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.304E19;
      doubleArray3[1] = 1.304E19;
      try { 
        MathArrays.ebeSubtract(doubleArray3, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 263.9122;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.7976931348623157E308, 263.9122, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertArrayEquals(new double[] {1.7976931348623157E308, 263.9122, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.7976931348623157E308, 263.9122, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 534.0694144463224;
      doubleArray0[1] = (-0.0013888888689039883);
      doubleArray0[2] = (-3207.18338238626);
      doubleArray0[3] = (-1259.5959540102526);
      doubleArray0[4] = 413.3829043;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 1.86285714285714278E18;
      doubleArray0[7] = 831.71354275;
      doubleArray0[8] = 2.17333333333333325E18;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {534.0694144463224, (-0.0013888888689039883), (-3207.18338238626), (-1259.5959540102526), 413.3829043, 1.304E19, 1.86285714285714278E18, 831.71354275, 2.17333333333333325E18}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.335047619047619E19, double1, 0.01);
      assertArrayEquals(new double[] {534.0694144463224, (-0.0013888888689039883), (-3207.18338238626), (-1259.5959540102526), 413.3829043, 1.304E19, 1.86285714285714278E18, 831.71354275, 2.17333333333333325E18}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      // Undeclared exception!
      try { 
        MathArrays.scale(7777.118961928932, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 206;
      intArray0[0] = 206;
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {206}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 206;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {206.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1904);
      intArray0[1] = (-1904);
      intArray0[2] = (-1904);
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1681);
      intArray1[1] = (-1904);
      intArray1[2] = (-1904);
      intArray1[3] = (-1904);
      intArray1[4] = (-1904);
      intArray1[5] = (-1904);
      intArray1[6] = (-1904);
      intArray1[7] = (-1904);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(1904, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1904), (-1904), (-1904), 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1681), (-1904), (-1904), (-1904), (-1904), (-1904), (-1904), (-1904)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray0.length);
      assertEquals(8, intArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) (-1904);
      floatArray0[2] = (float) (-1904);
      floatArray0[3] = (float) (-1904);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (-1681);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, (-1904.0F), (-1904.0F), (-1904.0F), 0.0F, (-1681.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, (-1229.61142702479), Double.NaN, 1.34217729E8, (-379.454087), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (-1229.61142702479);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (-379.454087);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, (-1229.61142702479), Double.NaN, 1.34217729E8, (-379.454087)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.801439877791744E16, (-3.3007130657543304E11), Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, (-1.0185893163381685E11), 143985.4041410036}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, (-1229.61142702479), Double.NaN, 1.34217729E8, (-379.454087)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.801439877791744E16, (-3.3007130657543304E11), Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, (-1.0185893163381685E11), 143985.4041410036}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 5;
      intArray0[2] = 3555;
      intArray0[3] = 979;
      intArray0[4] = (-3059);
      intArray0[5] = 8;
      intArray0[6] = 1;
      intArray0[7] = 195;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 5, 3555, 979, (-3059), 8, 1, 195}, intArray0);
      assertEquals(8, intArray0.length);
      
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, (-1229.61142702479), Double.NaN, 1.34217729E8, (-379.454087)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.801439877791744E16, (-3.3007130657543304E11), Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, (-1.0185893163381685E11), 143985.4041410036}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 195);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {1.34217729E8, (-1229.61142702479), Double.NaN, 1.34217729E8, (-379.454087)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.801439877791744E16, (-3.3007130657543304E11), Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, (-1.0185893163381685E11), 143985.4041410036}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(195, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[13];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[6] = 0L;
      longArray0[1] = 0L;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 3880.629772266088;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 3880.629772266088, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 2.576237453517371E-4, 0.9997423762546482, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 3880.629772266088, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 2.576237453517371E-4, 0.9997423762546482, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 263.9122;
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = 263.9122;
      doubleArray1[3] = 1.7976931348623157E308;
      doubleArray1[4] = 1.7976931348623157E308;
      doubleArray1[5] = 1.7976931348623157E308;
      doubleArray1[6] = 1.7976931348623157E308;
      doubleArray1[7] = 1.7976931348623157E308;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {263.9122, 1.7976931348623157E308, 263.9122, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.06666666666666667;
      doubleArray0[1] = 0.06666666666666667;
      doubleArray0[4] = 0.06666666666666667;
      doubleArray0[5] = 0.06666666666666667;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.06666666666666667}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.06666666666666667}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.06666666666666667}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3055.111);
      doubleArray0[1] = 1.407047513779025E15;
      doubleArray0[2] = 0.04168701738764507;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.407047513779025E15, double0, 0.01);
      assertArrayEquals(new double[] {(-3055.111), 1.407047513779025E15, 0.04168701738764507}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {(-3055.111), 1.407047513779025E15, 0.04168701738764507}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.407047513779025E15;
      doubleArray1[4] = (-3055.111);
      doubleArray1[5] = 1.407047513779025E15;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.04168701738764507;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3055.111), 1.407047513779025E15, 0.04168701738764507}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.407047513779025E15, (-3055.111), 1.407047513779025E15, 0.0, 0.04168701738764507}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-2403));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Conversion Exception in Transformation: {0}";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "W4$RQ~\"*ZMyFoFR5q";
      stringArray0[1] = "%@G~a*e)LT[";
      stringArray0[2] = "d`2?X~:C_iO:ys}}CQP";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[5] = ">>Wu:?{K0a-4~G{3#GL";
      stringArray0[6] = "f";
      stringArray0[7] = "\"k<Q%5~a}OIRw";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 797.6994494993;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {797.6994494993}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-20.0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-20.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-20.0);
      doubleArray3[1] = 2337.37;
      doubleArray3[2] = 797.6994494993;
      doubleArray3[3] = (-20.0);
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1903.1116856928345);
      doubleArray0[1] = (-1093.72912236826);
      doubleArray0[2] = 1433.443031012;
      doubleArray0[3] = (-5715.8);
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = 263.9122;
      doubleArray0[6] = 6.123233995736766E-17;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1903.1116856928345), (-1093.72912236826), 1433.443031012, (-5715.8), 1.7976931348623157E308, 263.9122, 6.123233995736766E-17}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.7976931348623157E308, double1, 0.01);
      assertArrayEquals(new double[] {(-1903.1116856928345), (-1093.72912236826), 1433.443031012, (-5715.8), 1.7976931348623157E308, 263.9122, 6.123233995736766E-17}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2098);
      intArray0[1] = 589;
      intArray0[2] = 134217729;
      intArray0[3] = (-1233);
      intArray0[4] = 2145431505;
      intArray0[5] = 9;
      intArray0[6] = (-2013);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-2098), 589, 134217729, (-1233), 2145431505, 9, (-2013)}, intArray0);
      assertEquals(7, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1.7976931348623157E308, 1433.443031012, 263.9122, (-5715.8), (-1093.72912236826), (-1903.1116856928345), 6.123233995736766E-17}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.4E-45F;
      floatArray0[1] = (-1191.3173F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2541.9197F;
      floatArray0[4] = 0.5F;
      floatArray0[5] = Float.NEGATIVE_INFINITY;
      floatArray0[6] = (-2876.9377F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-1600.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1.4E-45F, (-1191.3173F), 0.0F, 2541.9197F, 0.5F, Float.NEGATIVE_INFINITY, (-2876.9377F), 0.0F, (-1600.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {1.4E-45F, (-1191.3173F), 0.0F, 2541.9197F, 0.5F, Float.NEGATIVE_INFINITY, (-2876.9377F), 0.0F, (-1600.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.19999999999923582;
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = 1.0E-6;
      doubleArray1[4] = Double.NaN;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray1 = new Double[7];
      Double double1 = new Double(0.3936265707015991);
      assertEquals(0.3936265707015991, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray1[0] = double1;
      Double double2 = new Double(967.713863);
      assertEquals(967.713863, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray1[1] = double2;
      Double double3 = new Double(797.6994494993);
      assertEquals(797.6994494993, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray1[2] = double3;
      Double double4 = new Double(0.3936265707015991);
      assertEquals(0.3936265707015991, (double)double4, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray1[3] = double4;
      Double double5 = new Double(1.34217729E8);
      assertEquals(1.34217729E8, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      
      doubleArray1[4] = double5;
      Double double6 = new Double(0.13333333333333333);
      assertEquals(0.13333333333333333, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotNull(double6);
      
      doubleArray1[5] = double6;
      double double7 = (-487.7493407722);
      Double double8 = new Double((-487.7493407722));
      assertEquals((-487.7493407722), (double)double8, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotNull(double8);
      
      doubleArray1[6] = double8;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[9];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.06666667;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.06666667, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray1, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3143.039884);
      doubleArray0[1] = 2.608E18;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3143.039884), 2.608E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9878699.712414732, (-1.6394096034944E22), 6.801664E36}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("dR[<b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.dR[<b
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, Integer.MAX_VALUE, 1000000000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-770.423966);
      doubleArray0[1] = 2382.639353747;
      doubleArray0[2] = (-7.44321345601866E-11);
      doubleArray0[3] = 2.608E18;
      double double0 = 0.3936265707015991;
      doubleArray0[4] = 0.3936265707015991;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.608E18, double1, 0.01);
      assertArrayEquals(new double[] {(-770.423966), 2382.639353747, (-7.44321345601866E-11), 2.608E18, 0.3936265707015991}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) (-770.423966);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-770.423966), 2382.639353747, (-7.44321345601866E-11), 2.608E18, 0.3936265707015991}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-770.423966), 2382.639353747, (-7.44321345601866E-11), 2.608E18, 0.3936265707015991}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      try { 
        MathArrays.checkPositive(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -770.424 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long[][] longArray0 = new long[21][7];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1229.61142702479);
      doubleArray0[1] = (-1229.61142702479);
      doubleArray0[2] = (-1229.61142702479);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1229.61142702479), (-1229.61142702479), (-1229.61142702479)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(0L, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1.0, 0.04, 383.0, 1.2599210498948732, Double.NaN, 636324.4117314863, Double.NaN, 1.304E19);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 6.571095523328E13;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1393));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-1.0), (-1.0), 788.9923639807, (-1.0));
      assertEquals((-787.9923639807), double0, 0.01);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      long[][] longArray0 = new long[3][9];
      long[] longArray1 = new long[2];
      longArray1[1] = (long) 2531;
      longArray0[0] = longArray1;
      long[][] longArray2 = new long[4][1];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = longArray1;
      longArray2[1] = longArray1;
      longArray2[2] = longArray1;
      longArray2[3] = longArray1;
      MathArrays.checkRectangular(longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(4, longArray2.length);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "Nj7C\t<,yCbK N#`rS";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[3] = "Ok/*/V";
      stringArray0[4] = "l<";
      stringArray0[5] = "";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[7] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 797.6994494993;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {797.6994494993}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(542.1307931829439, (-731.6983447979447), 0.0, 0.0, 0.0, 2203.5753743182313);
      assertEquals((-396676.20403595694), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      long[][] longArray0 = new long[1][4];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double double3 = MathArrays.safeNorm(doubleArray1);
      assertEquals(0.0, double3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(4, integerArray0.length);
      
      double double4 = MathArrays.linearCombination((double) integerArray0[2], 2985.8563225, (double) integerArray0[3], 0.0, 2370.00419433, (-396676.20403595694));
      assertEquals((-9.401242673561207E8), double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(4, integerArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1229.61142702479);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1229.61142702479), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1229.61142702479), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "GT;FWuh<e<Hqs>Q";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 3.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1229.61142702479);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-334.66469937);
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 0L;
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray3);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (double) 0L;
      doubleArray4[1] = (double) 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray4, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray4, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(2, doubleArray4.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double double0 = (-1229.61142702479);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-3.4028235E38F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1417.16F);
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-3.4028235E38F);
      floatArray1[2] = 1.0F;
      floatArray1[3] = (-1417.16F);
      floatArray1[4] = 1.0F;
      floatArray1[5] = (-1417.16F);
      float float0 = (-328.46094F);
      floatArray1[6] = (-328.46094F);
      floatArray1[7] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-3.4028235E38F), 0.0F, 1.0F, 1.0F, (-1417.16F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-3.4028235E38F), 1.0F, (-1417.16F), 1.0F, (-1417.16F), (-328.46094F), 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-160);
      intArray0[1] = 129;
      intArray0[2] = (-1764);
      intArray0[3] = 808;
      intArray0[4] = 117;
      intArray0[5] = 2;
      intArray0[6] = 181;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-160), 129, (-1764), 808, 117, 2, 181}, intArray0);
      assertEquals(7, intArray0.length);
      
      boolean boolean2 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[7][5];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = MathArrays.linearCombination((double) 0.0F, (-2891.0), (-477.9), 160.7923407);
      assertEquals((-76842.65962053), double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1457);
      intArray0[1] = (-2880);
      intArray0[2] = 121;
      intArray0[3] = 109;
      intArray0[4] = 27;
      intArray0[5] = 26;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-1457), (-2880), 121, 109, 27, 26}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6, intArray0.length);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1457), (-2880), 121, 109, 27, 26}, intArray0);
      assertEquals(6, intArray0.length);
      
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 115, 134217729);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-1.0), (-1.0), (-1.0), (-1.0));
      assertEquals(2.0, double0, 0.01);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Double>[][] fieldElementArray0 = MathArrays.buildArray(field0, 0, (-606));
      assertNotNull(fieldElementArray0);
      assertEquals(0, fieldElementArray0.length);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[9];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "&0z$e";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 134217746;
      intArray0[0] = 134217746;
      intArray0[1] = (-6);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {134217746, (-6)}, intArray0);
      assertArrayEquals(new int[] {134217746, (-6)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      int int1 = 133;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 133;
      doubleArray0[1] = (double) (-6);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {133.0, (-6.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Object[][] objectArray0 = MathArrays.buildArray(field0, 133, 133);
      assertNotNull(objectArray0);
      assertEquals(133, objectArray0.length);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 797.6994494993;
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.scaleInPlace(636324.4117314863, doubleArray0);
      assertArrayEquals(new double[] {5.075956329411726E8}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(542.1307931829439, (-731.6983447979447), 0.0, 0.0, 0.0, 2203.5753743182313);
      assertEquals((-396676.20403595694), double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {5.075956329411726E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.57653326580949632E17}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(2.57653326073353984E17, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {5.075956329411726E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.57653326580949632E17}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      MathArrays.checkOrder(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {5.075956329411726E8}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0L;
      doubleArray2[1] = 0.0;
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) -0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) -0.0F;
      double[][] doubleArray1 = new double[8][0];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0.0F;
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = (double) -0.0F;
      doubleArray2[3] = (double) -0.0F;
      double double0 = (-0.05417713522911072);
      doubleArray2[4] = (-0.05417713522911072);
      doubleArray2[5] = (double) 0.0F;
      doubleArray2[6] = (double) 0.0F;
      doubleArray2[7] = (double) 0.0F;
      doubleArray2[8] = (double) 0.0F;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[6] = (-1229.61142702479);
      doubleArray0[7] = 0.0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2157.7336F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-93.4F);
      floatArray0[3] = (-1638.027F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-3739.2605F);
      floatArray0[6] = 3549.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 2926.497F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2157.7336F, 1.0F, (-93.4F), (-1638.027F), 0.0F, (-3739.2605F), 3549.0F, 0.0F, 2926.497F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-0.32641912F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-0.32641912F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[10];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-0.32641912F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.06666666666666667;
      doubleArray0[1] = 0.06666666666666667;
      doubleArray0[2] = 0.06666666666666667;
      doubleArray0[3] = 0.06666666666666667;
      doubleArray0[4] = 0.06666666666666667;
      doubleArray0[6] = 0.06666666666666667;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2286.0F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 1184.0491F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 2286.0F, Float.NaN, 1184.0491F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 595.839;
      doubleArray0[1] = (-1103.6622263);
      doubleArray0[2] = 210.2547352153;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 595.839;
      doubleArray0[5] = 3.834E-20;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {595.839, (-1103.6622263), 210.2547352153, (-1.0), 595.839, 3.834E-20, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-681.025F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-328.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-681.025F), 0.0F, (-328.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1840700268);
      intArray0[1] = (-1840700268);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1840700268), (-1840700268)}, intArray0);
      assertEquals(2, intArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1972326.5912839284, double1, 0.01);
      assertArrayEquals(new double[] {595.839, (-1103.6622263), 210.2547352153, (-1.0), 595.839, 3.834E-20, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1840700268);
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (double) (-1840700268);
      doubleArray1[4] = 595.839;
      doubleArray1[5] = (double) (-1840700268);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= -1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = (-1229.61142702479);
      double[] doubleArray0 = new double[0];
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1229.61142702479);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.06666666666666667;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1229.61142702479);
      int int0 = 0;
      int int1 = 350;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1229.61142702479), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1229.61142702479), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-1229.61142702479);
      doubleArray3[1] = 1606.59;
      doubleArray3[2] = 1606.59;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 350;
      doubleArray3[5] = (-1229.61142702479);
      doubleArray3[6] = (-1229.61142702479);
      double[] doubleArray4 = MathArrays.scale(350, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertArrayEquals(new double[] {(-1229.61142702479), 1606.59, 1606.59, 0.0, 350.0, (-1229.61142702479), (-1229.61142702479)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-430363.9994586765), 562306.5, 562306.5, 0.0, 122500.0, (-430363.9994586765), (-430363.9994586765)}, doubleArray4, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotNull(doubleArray4);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray4.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 797.6994494993;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {797.6994494993}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(542.1307931829439, (-731.6983447979447), 0.0, 0.0, 0.0, 2203.5753743182313);
      assertEquals((-396676.20403595694), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = 780.1738359694136;
      double double1 = (-358.264432);
      double double2 = MathArrays.linearCombination((-358.264432), (-358.264432), 780.1738359694136, (-358.264432));
      assertEquals((-151155.13296856053), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 797.6994494993;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {797.6994494993}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(542.1307931829439, (-731.6983447979447), 0.0, 0.0, 0.0, 2203.5753743182313);
      assertEquals((-396676.20403595694), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      long[][] longArray0 = new long[1][4];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double double3 = MathArrays.safeNorm(doubleArray1);
      assertEquals(0.0, double3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 797.6994494993;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {797.6994494993}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.834E-20;
      double double1 = (-2.5857668567479893E-8);
      doubleArray1[0] = (-2.5857668567479893E-8);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-2253.516767);
      doubleArray1[4] = 797.6994494993;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 210.2547352153;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = 2916.313F;
      floatArray0[5] = 498.7F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-1.0F);
      floatArray1[2] = (-2631.812F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 3.4028235E38F, 2916.313F, 498.7F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-2631.812F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(7, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.06666666666666667;
      doubleArray0[1] = 0.06666666666666667;
      doubleArray0[2] = 0.06666666666666667;
      doubleArray0[3] = 0.06666666666666667;
      doubleArray0[4] = 0.06666666666666667;
      doubleArray0[5] = 0.06666666666666667;
      doubleArray0[6] = 0.06666666666666667;
      doubleArray0[7] = 0.06666666666666667;
      doubleArray0[8] = 0.06666666666666667;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.13333333333333333, 0.13333333333333333, 0.13333333333333333, 0.13333333333333333, 0.13333333333333333, 0.13333333333333333, 0.13333333333333333, 0.13333333333333333, 0.13333333333333333}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) -0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][0];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0.0F;
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = (double) -0.0F;
      doubleArray2[3] = (double) -0.0F;
      doubleArray2[4] = (-0.05417713522911072);
      doubleArray2[5] = (double) 0.0F;
      doubleArray2[6] = (double) 0.0F;
      doubleArray2[7] = (double) 0.0F;
      doubleArray2[8] = (double) 0.0F;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long[][] longArray0 = new long[2][2];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = 1073741824L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = (-7796L);
      longArray1[5] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1042L);
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3810.56994, (double) (-1904), (-770.3371230268696), 780.1738359694136);
      assertEquals((-7856322.0340215145), double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1904);
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = 7;
      intArray0[5] = 7;
      intArray0[6] = (-1904);
      intArray0[7] = 7;
      intArray0[8] = 7;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-1904), 7, 7, 7, 7, 7, (-1904), 7, 7}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(9, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 595.839;
      doubleArray0[1] = (-1103.6622263);
      doubleArray0[2] = 210.2547352153;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-3375.637657522278);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 2885.01699;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {595.839, (-1103.6622263), 210.2547352153, (-1.0), (-3375.637657522278), 3.834E-20, 2885.01699, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-681.025F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-328.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-681.025F), 0.0F, (-328.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1840700268);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {595.839, (-1103.6622263), 210.2547352153, (-1.0), (-3375.637657522278), 3.834E-20, 2885.01699, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4619.042661075353, double1, 0.01);
      assertArrayEquals(new double[] {595.839, (-1103.6622263), 210.2547352153, (-1.0), (-3375.637657522278), 3.834E-20, 2885.01699, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-707));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 8289.2403822338;
      doubleArray0[1] = 1.342181711731671E8;
      doubleArray0[2] = (-2145.8223);
      doubleArray0[3] = 501.439304871397;
      doubleArray0[4] = (-573.749197814892);
      doubleArray0[2] = 13.07;
      doubleArray0[6] = 1379.193973169869;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = 501.439304871397;
      doubleArray1[1] = 501.439304871397;
      doubleArray1[2] = 1.342181711731671E8;
      doubleArray1[3] = 501.439304871397;
      doubleArray1[4] = 8289.2403822338;
      doubleArray1[5] = 501.439304871397;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1229.61142702479);
      doubleArray0[2] = 1606.59;
      doubleArray0[3] = 3016.999236995;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1606.59;
      doubleArray1[1] = 3016.999236995;
      doubleArray1[2] = (-1229.61142702479);
      doubleArray1[3] = (-1229.61142702479);
      doubleArray1[4] = 3016.999236995;
      doubleArray1[5] = 1606.59;
      doubleArray1[6] = 3016.999236995;
      doubleArray1[7] = 3016.999236995;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(23593.60046604937, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1229.61142702479), 1606.59, 3016.999236995, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1606.59, 3016.999236995, (-1229.61142702479), (-1229.61142702479), 3016.999236995, 1606.59, 3016.999236995, 3016.999236995}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 188;
      intArray0[1] = 781;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {188, 781}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {188, 781}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1904);
      intArray0[2] = (-1904);
      intArray0[2] = 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3055.111);
      doubleArray0[1] = (double) (-1904);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-2406.72);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      intArray0[0] = (-1904);
      doubleArray0[8] = (-1.0);
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not increasing (0 > -2,406.72)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1904);
      intArray0[1] = (-1904);
      intArray0[2] = (-1904);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1904);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1904.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1904.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1904), (-1904), (-1904), 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1904), (-1904));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1904);
      intArray0[1] = (-1904);
      intArray0[2] = (-1904);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1904);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1904.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1904);
      floatArray0[1] = (float) (-1904);
      floatArray0[2] = (float) (-1904);
      floatArray0[3] = (-901.0F);
      floatArray0[4] = (float) (-1904);
      floatArray0[5] = (float) (-1904);
      floatArray0[6] = (float) (-1904);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1904.0F), (-1904.0F), (-1904.0F), (-901.0F), (-1904.0F), (-1904.0F), (-1904.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(0, floatArray1.length);
      assertEquals(7, floatArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1904);
      intArray0[1] = (-1904);
      intArray0[2] = 0;
      intArray0[3] = 350;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "s<^NG3!iW{5~0-G`Y";
      stringArray0[2] = "s<^NG3!iW{5~0-G`Y";
      stringArray0[3] = "s<^NG3!iW{5~0-G`Y";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 350;
      doubleArray0[1] = (double) 350;
      doubleArray0[2] = (-2703.40897);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 797.6994494993;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {797.6994494993}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.834E-20;
      doubleArray1[1] = (-2.5857668567479893E-8);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-2253.516767);
      doubleArray1[4] = 797.6994494993;
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(797.6994494993, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {797.6994494993}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, (-2.5857668567479893E-8), 0.0, (-2253.516767), 797.6994494993}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, (-2.5857668567479893E-8));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {797.6994494993}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.585766856747989E-8)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1226.014252273706);
      doubleArray0[2] = 1606.59;
      doubleArray0[3] = 3016.999236995;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1226.014252273706);
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1226.014252273706), 1606.59, 3016.999236995, (-1.0), (-1226.014252273706), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2452.028504547412), 3213.18, 6033.99847399, (-2.0), (-2452.028504547412), 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-1.0), (-1342.46055836), (-552.654150983585), (-1226.014252273706));
      assertEquals(678904.3262424598, double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2531;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {2531}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      double double2 = MathArrays.linearCombination(1606.59, 0.0, 1606.59, 3016.999236995);
      assertEquals(4847080.804163797, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray2 = null;
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray1);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1226.014252273706), 1606.59, 3016.999236995, (-1.0), (-1226.014252273706), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2452.028504547412), 3213.18, 6033.99847399, (-2.0), (-2452.028504547412), 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -2,452.029)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 595.839;
      doubleArray0[1] = (-1103.6622263);
      doubleArray0[2] = 210.2547352153;
      double double0 = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-3375.637657522278);
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {595.839, (-1103.6622263), 210.2547352153, (-1.0), (-3375.637657522278), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 797.6994494993;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {797.6994494993}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(542.1307931829439, 0.0, 0.0, 0.0, 0.0, 2203.5753743182313);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = -0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {-0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.valueOf("DECREASING");
      assertEquals(MathArrays.OrderDirection.DECREASING, mathArrays_OrderDirection0);
      
      double double0 = MathArrays.linearCombination((-8.0E298), (-8.0E298), 1697.2491962, (-0.010714690733195933), (-8.0E298), 1697.2491962);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-603);
      intArray0[1] = 1;
      intArray0[2] = 322;
      intArray0[3] = 1079;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-603), 1, 322, 1079}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-603);
      doubleArray0[1] = (-8.0E298);
      doubleArray0[2] = (double) 1079;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1621.6;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 322;
      doubleArray0[7] = (double) 322;
      doubleArray0[8] = (double) 1;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[2];
      double double0 = 3.834E-20;
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      double double1 = 2408.226;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 229;
      intArray0[1] = 229;
      int[] intArray1 = MathArrays.copyOf(intArray0, 781);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {229, 229}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(781, intArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[7] = (-1229.61142702479);
      doubleArray0[2] = 1606.59;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 1606.59, 0.0, 0.0, 0.0, 0.0, (-1229.61142702479)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 1606.59, 0.0, 0.0, 0.0, 0.0, (-1229.61142702479)}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1606.59, 0.0, 0.0, 0.0, 0.0, (-1229.61142702479)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1606.59, 0.0, 0.0, 0.0, 0.0, (-1229.61142702479)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      int int0 = 7;
      int[] intArray0 = new int[6];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = 7;
      intArray0[5] = 7;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {7, 7, 7, 7, 7, 7}, intArray0);
      assertEquals(6, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 1,606.59)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "2~0o+t\"(o'F";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[3] = "2~0o+t\"(o'F";
      stringArray0[4] = "s<^NG3!iW{5~0-G`Y";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.8775825500488281;
      doubleArray0[1] = (-1812.2378143396415);
      doubleArray0[2] = (-1103.6622263);
      doubleArray0[3] = 2190.0;
      doubleArray0[4] = 788.9923639807;
      doubleArray0[5] = (-1230.0562782674554);
      doubleArray0[6] = (-1990.2343941);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3923.64082418597, double0, 0.01);
      assertArrayEquals(new double[] {0.8775825500488281, (-1812.2378143396415), (-1103.6622263), 2190.0, 788.9923639807, (-1230.0562782674554), (-1990.2343941)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.7551651000976562, (-3624.475628679283), (-2207.3244526), 4380.0, 1577.9847279614, (-2460.1125565349107), (-3980.4687882)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.8775825500488281, (-1812.2378143396415), (-1103.6622263), 2190.0, 788.9923639807, (-1230.0562782674554), (-1990.2343941)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(2190.0, double1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.7551651000976562, (-3624.475628679283), (-2207.3244526), 4380.0, 1577.9847279614, (-2460.1125565349107), (-3980.4687882)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.8775825500488281, (-1812.2378143396415), (-1103.6622263), 2190.0, 788.9923639807, (-1230.0562782674554), (-1990.2343941)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(788.9923639807, (-2896.50807399), 1.304E19, 2190.0);
      assertEquals(2.85576E22, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1226.014252273706);
      doubleArray0[2] = 1606.59;
      doubleArray0[3] = 3016.999236995;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1226.014252273706);
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1226.014252273706), 1606.59, 3016.999236995, (-1.0), (-1226.014252273706), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2452.028504547412), 3213.18, 6033.99847399, (-2.0), (-2452.028504547412), 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-1.0), (-1342.46055836), (-552.654150983585), (-1226.014252273706));
      assertEquals(678904.3262424598, double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2531;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {2531}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      long[][] longArray0 = new long[8][1];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 2531;
      longArray1[1] = (long) 2531;
      longArray1[2] = (long) 2531;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 2531;
      longArray2[1] = (long) 2531;
      longArray2[2] = 4503599627370496L;
      longArray2[3] = (long) 2531;
      longArray2[4] = (long) 2531;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 2531;
      longArray3[1] = 4503599627370496L;
      longArray3[2] = 4503599627370496L;
      longArray3[3] = (long) 2531;
      longArray3[4] = 4503599627370496L;
      longArray3[5] = (long) 2531;
      longArray3[6] = (long) 2531;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (long) 2531;
      longArray4[1] = 4503599627370496L;
      longArray4[2] = (long) 2531;
      longArray4[3] = (long) 2531;
      longArray4[4] = (long) 2531;
      longArray4[5] = (long) 2531;
      longArray4[6] = (long) 2531;
      longArray4[7] = (long) 2531;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = (long) 2531;
      longArray5[1] = (long) 2531;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = 4503599627370496L;
      longArray6[1] = (long) 2531;
      longArray6[2] = 4503599627370496L;
      longArray6[3] = 4503599627370496L;
      longArray6[4] = 4503599627370496L;
      longArray6[5] = 4503599627370496L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray4));
      
      longArray7[0] = 4503599627370496L;
      longArray7[1] = (long) 2531;
      longArray7[2] = 4503599627370496L;
      longArray7[3] = 4503599627370496L;
      longArray7[4] = (long) 2531;
      longArray7[5] = (long) 2531;
      longArray7[6] = 4503599627370496L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[8];
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray4));
      
      longArray8[0] = 4503599627370496L;
      longArray8[1] = 4503599627370496L;
      longArray8[2] = (long) 2531;
      longArray8[3] = (long) 2531;
      longArray8[4] = (long) 2531;
      longArray8[5] = (long) 2531;
      longArray8[6] = (long) 2531;
      longArray8[7] = (long) 2531;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "e&";
      stringArray0[1] = "e&";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(3.834E-20, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1229.61142702479);
      doubleArray0[2] = 1606.59;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "e&";
      stringArray0[4] = "";
      stringArray0[5] = "e&";
      stringArray0[6] = "";
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "e&";
      stringArray0[2] = "e&";
      stringArray0[3] = "e&";
      stringArray0[4] = "e&";
      stringArray0[5] = "e&";
      stringArray0[6] = "e&";
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = MathArrays.linearCombination(788.9923639807, (-770.423966), 788.9923639807, (-770.423966));
      assertEquals((-1215717.2524034528), double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-770.423966);
      doubleArray0[1] = (-1215717.2524034528);
      doubleArray0[2] = (-770.423966);
      doubleArray0[3] = (-1215717.2524034528);
      doubleArray0[4] = (-1215717.2524034528);
      doubleArray0[5] = (-1215717.2524034528);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-770.423966), (-1215717.2524034528), (-770.423966), (-1215717.2524034528), (-1215717.2524034528), (-1215717.2524034528)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1540.847932), (-2431434.5048069055), (-1540.847932), (-2431434.5048069055), (-2431434.5048069055), (-2431434.5048069055)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1229.61142702479);
      doubleArray0[2] = 1606.59;
      doubleArray0[3] = 3016.999236995;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 2408.226;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1229.61142702479), 2408.226, 3016.999236995, 0.0, 1606.59, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1229.61142702479);
      doubleArray0[2] = 1606.59;
      doubleArray0[3] = 3016.999236995;
      doubleArray0[4] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "e&";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "e&";
      stringArray0[4] = "e&";
      stringArray0[5] = "e&";
      stringArray0[6] = "e&";
      stringArray0[7] = "e&";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[6] = 7;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 7, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, false);
      assertFalse(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 7;
      longArray0[1] = 9193070505571053912L;
      longArray0[2] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {7L, 9193070505571053912L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(9999);
      assertEquals(9999, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 7;
      integerArray0[2] = (Integer) 7;
      integerArray0[3] = (Integer) 7;
      integerArray0[4] = (Integer) 7;
      integerArray0[5] = (Integer) 7;
      integerArray0[6] = (Integer) 7;
      integerArray0[7] = (Integer) 7;
      integerArray0[8] = (Integer) 7;
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.INCREASING;
      boolean boolean3 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection2, false);
      assertFalse(boolean3);
      assertSame(mathArrays_OrderDirection2, mathArrays_OrderDirection0);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection1));
      assertEquals(9, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 831.2433464143884;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {831.2433464143884}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = (-1904);
      double double0 = 3810.56994;
      double double1 = 780.1738359694136;
      double double2 = MathArrays.linearCombination(3810.56994, (double) (-1904), (-770.423966), 780.1738359694136);
      assertEquals((-7856389.786636989), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1229.61142702479);
      doubleArray0[2] = 1606.59;
      doubleArray0[3] = 3016.999236995;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 2408.226;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "e&";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1904);
      intArray0[1] = (-1904);
      intArray0[2] = 0;
      intArray0[3] = 350;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1904);
      intArray1[1] = 0;
      intArray1[2] = 350;
      intArray1[3] = 0;
      intArray1[4] = (-1904);
      intArray1[5] = 350;
      intArray1[6] = (-1904);
      intArray1[7] = 0;
      intArray1[8] = (-2891);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(4508, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1904), (-1904), 0, 350, 0}, intArray0);
      assertArrayEquals(new int[] {(-1904), 0, 350, 0, (-1904), 350, (-1904), 0, (-2891)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray0.length);
      assertEquals(9, intArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1544), (-1904));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1229.61142702479);
      doubleArray0[2] = 1606.59;
      doubleArray0[3] = 3016.999236995;
      doubleArray0[4] = (-1.0);
      double double0 = MathArrays.linearCombination(2250.6434547923, (-6126.644866), 2203.5753743182313, (-1.0), (-6126.644866), 0.14285714285714285);
      assertEquals((-1.3791971977854922E7), double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1229.61142702479), 1606.59, 3016.999236995, (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "2~0o+t\"(o'F";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[3] = "2~0o+t\"(o'F";
      stringArray0[4] = "s<^NG3!iW{5~0-G`Y";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.8775825500488281;
      doubleArray0[1] = (-1812.2378143396415);
      doubleArray0[2] = (-1103.6622263);
      doubleArray0[3] = 2190.0;
      doubleArray0[4] = 788.9923639807;
      doubleArray0[5] = (-1230.0562782674554);
      doubleArray0[6] = (-1990.2343941);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3923.64082418597, double0, 0.01);
      assertArrayEquals(new double[] {0.8775825500488281, (-1812.2378143396415), (-1103.6622263), 2190.0, 788.9923639807, (-1230.0562782674554), (-1990.2343941)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2145739224));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1904);
      intArray0[1] = (-1904);
      intArray0[2] = 0;
      intArray0[3] = 350;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "s<^NG3!iW{5~0-G`Y";
      stringArray0[2] = "s<^NG3!iW{5~0-G`Y";
      stringArray0[3] = "s<^NG3!iW{5~0-G`Y";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 350;
      doubleArray0[1] = (double) 350;
      doubleArray0[2] = (-2703.40897);
      doubleArray0[3] = (double) 350;
      doubleArray0[4] = (double) (-1904);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 350;
      doubleArray0[8] = (double) (-1904);
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {350.0, 350.0, (-2703.40897), 350.0, 0.0, 0.0, (-1904.0), 350.0, (-1904.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1229.61142702479);
      doubleArray0[2] = 1606.59;
      doubleArray0[3] = 3016.999236995;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 2408.226;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-1229.61142702479), 1606.59, 3016.999236995, (-1.0), 2408.226, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 229);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(229, intArray1.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(0, intArray0.length);
      
      double double1 = MathArrays.linearCombination(1606.59, 1606.59, 2408.226, 1606.59, (-827.421620948962), (-1.0), 1606.59, (-827.421620948962));
      assertEquals(5121663.357060556, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1229.61142702479);
      doubleArray0[2] = 1606.59;
      doubleArray0[3] = 3016.999236995;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 2386.584934457403;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      long[][] longArray0 = new long[18][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(18, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 229;
      intArray0[1] = 229;
      intArray0[2] = 229;
      intArray0[3] = 229;
      int[] intArray1 = MathArrays.copyOf(intArray0, 229);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {229, 229, 229, 229}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(229, intArray1.length);
      
      double double0 = MathArrays.linearCombination((double) 229, 1205.57, 1.34217729E8, (-1.0), (double) 229, 2413.119584700978, 2291.204743190864, 0.0);
      assertEquals((-1.3338904908510348E8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[6] = 7;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 7, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, false);
      assertFalse(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 7;
      longArray0[1] = 9193070505571053912L;
      longArray0[2] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {7L, 9193070505571053912L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1904);
      intArray0[1] = (-1904);
      intArray0[2] = 0;
      intArray0[3] = 350;
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale((-1230.0562782674554), doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-2280);
      intArray0[2] = 0;
      intArray0[3] = (-1312);
      intArray0[4] = 2079;
      intArray0[5] = 627;
      intArray0[6] = 1348;
      Integer integer0 = new Integer(2079);
      assertEquals(2079, (int)integer0);
      assertNotNull(integer0);
      
      double double0 = MathArrays.linearCombination((double) (-2280), 1919.8, (double) integer0, 0.0, 1399.2, (double) (-2280), (-366.02), (-2807.68695));
      assertEquals((-6539650.422561), double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray4);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray4.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double1 = MathArrays.linearCombination(4392.8366640745, 0.0, 0.0, (double) 627);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray5 = MathArrays.copyOf(doubleArray1, 2079);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray5);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray5);
      assertEquals(2079, doubleArray5.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray6 = MathArrays.ebeDivide(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray6);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray3, doubleArray6);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray6);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray6, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertNotNull(doubleArray6);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray6.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[][] longArray0 = new long[6][3];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) (-1312);
      longArray2[2] = (long) 2079;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 1348;
      longArray3[1] = (long) (-2280);
      longArray3[2] = (-1485L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (long) 0;
      longArray4[1] = (long) 2079;
      longArray4[2] = (long) 1348;
      longArray4[3] = (long) (-1312);
      longArray4[4] = 0L;
      longArray4[5] = (long) 0;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = 1L;
      longArray5[1] = (long) (-1312);
      longArray5[2] = (long) (-1312);
      longArray5[3] = (long) 627;
      longArray5[4] = (long) 627;
      longArray5[5] = (long) (-2280);
      longArray5[6] = (long) 2079;
      longArray5[7] = (long) (-2280);
      longArray5[8] = (long) 0;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = (long) (-1312);
      longArray6[1] = (long) (-1312);
      longArray6[2] = (long) 2079;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,312 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 595.839;
      doubleArray0[1] = (-1103.6622263);
      doubleArray0[2] = 210.2547352153;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-3375.637657522278);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 2885.01699;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {595.839, (-1103.6622263), 210.2547352153, (-1.0), (-3375.637657522278), 3.834E-20, 2885.01699, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-681.025F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-328.0F);
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-681.025F), 0.0F, (-328.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 10;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 10}, intArray0);
      assertEquals(2, intArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2.133555510483408E7, double1, 0.01);
      assertArrayEquals(new double[] {595.839, (-1103.6622263), 210.2547352153, (-1.0), (-3375.637657522278), 3.834E-20, 2885.01699, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1904);
      intArray0[1] = (-1904);
      intArray0[2] = 0;
      intArray0[3] = 350;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1904);
      intArray1[1] = 0;
      intArray1[2] = 350;
      intArray1[3] = 0;
      intArray1[4] = (-1904);
      intArray1[5] = 350;
      intArray1[6] = (-1904);
      intArray1[7] = 0;
      intArray1[8] = (-2891);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(4508, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1904), (-1904), 0, 350, 0}, intArray0);
      assertArrayEquals(new int[] {(-1904), 0, 350, 0, (-1904), 350, (-1904), 0, (-2891)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray0.length);
      assertEquals(9, intArray1.length);
      
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1544), (-1904));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-1629);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1629);
      doubleArray0[1] = (double) (-1629);
      doubleArray0[2] = (double) (-1629);
      doubleArray0[3] = (double) (-1629);
      doubleArray0[4] = (-1360.16286229);
      doubleArray0[5] = (double) (-1629);
      doubleArray0[6] = (double) (-1629);
      doubleArray0[7] = (double) (-1629);
      doubleArray0[8] = (-1080.456);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1629);
      doubleArray1[1] = (double) (-1629);
      doubleArray1[2] = (double) (-1629);
      doubleArray1[3] = (double) (-1629);
      doubleArray1[4] = (-1360.16286229);
      doubleArray1[5] = (-1080.456);
      doubleArray1[6] = (-1360.16286229);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1629.0), (-1629.0), (-1629.0), (-1629.0), (-1360.16286229), (-1629.0), (-1629.0), (-1629.0), (-1080.456)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1629.0), (-1629.0), (-1629.0), (-1629.0), (-1360.16286229), (-1080.456), (-1360.16286229)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1629));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.06666666666666667;
      doubleArray0[1] = 0.06666666666666667;
      doubleArray0[4] = 0.06666666666666667;
      doubleArray0[5] = 0.06666666666666667;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.scaleInPlace(634.7, doubleArray0);
      assertArrayEquals(new double[] {42.31333333333333, 42.31333333333333, 0.0, 0.0, 42.31333333333333, 42.31333333333333, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {42.31333333333333, 42.31333333333333, 0.0, 0.0, 42.31333333333333, 42.31333333333333, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray2.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray2);
      assertEquals(9900.354658426053, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {42.31333333333333, 42.31333333333333, 0.0, 0.0, 42.31333333333333, 42.31333333333333, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray2.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {42.31333333333333, 42.31333333333333, 0.0, 0.0, 42.31333333333333, 42.31333333333333, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {42.31333333333333, 42.31333333333333, 0.0, 0.0, 42.31333333333333, 42.31333333333333, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {42.31333333333333, 42.31333333333333, 0.0, 0.0, 42.31333333333333, 42.31333333333333, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      
      try { 
        MathArrays.checkPositive(doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1230.4090198294368);
      doubleArray0[2] = 1606.59;
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-1230.4090198294368), 1606.59, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1229.61142702479);
      doubleArray0[2] = 1606.59;
      doubleArray0[3] = 3016.999236995;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 2408.226;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      long[][] longArray0 = new long[1][7];
      long[] longArray1 = new long[8];
      longArray1[0] = 2125L;
      longArray1[1] = 1L;
      longArray1[2] = (-6L);
      longArray1[3] = 1L;
      longArray1[4] = 1L;
      longArray1[5] = 0L;
      longArray1[6] = 0L;
      longArray1[7] = 2125L;
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -6 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-25.91777171);
      doubleArray0[1] = (-606.0656871);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "GT;FWuh<e<Hqs>Q";
      stringArray0[2] = "";
      stringArray0[3] = "s<^NG3!iW{5~0-G`Y";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "s<^NG3!iW{5~0-G`Y";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 595.839;
      doubleArray0[1] = (-1103.6622263);
      doubleArray0[2] = 210.2547352153;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-3375.637657522278);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 2885.01699;
      doubleArray0[7] = (-3405.652);
      doubleArray0[8] = 1697.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {595.839, (-1103.6622263), 210.2547352153, (-1.0), (-3375.637657522278), 3.834E-20, 2885.01699, (-3405.652), 1697.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,103.662 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-25.91777171);
      doubleArray0[1] = (-606.0656871);
      doubleArray0[2] = (-20.0);
      doubleArray0[3] = 630.313799744;
      doubleArray0[4] = 3398.5921;
      doubleArray0[5] = 3585.4272382629;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-25.91777171), (-606.0656871), (-20.0), 630.313799744, 3398.5921, 3585.4272382629, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-25.91777171), (-606.0656871), (-20.0), 630.313799744, 3398.5921, 3585.4272382629, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(3357);
      assertEquals(3357, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-25.91777171), (-606.0656871), (-20.0), 630.313799744, 3398.5921, 3585.4272382629, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {671.7308904116763, 367315.6170799951, 400.0, 397295.4861477193, 1.1550428262182409E7, 1.2855288480877528E7, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-25.91777171), (-606.0656871), (-20.0), 630.313799744, 3398.5921, 3585.4272382629, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {671.7308904116763, 367315.6170799951, 400.0, 397295.4861477193, 1.1550428262182409E7, 1.2855288480877528E7, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1343.4617808233527, 734631.2341599902, 800.0, 794590.9722954386, 2.3100856524364818E7, 2.5710576961755056E7, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertArrayEquals(new double[] {1317.5440091133528, 734025.1684728902, 780.0, 795221.2860951826, 2.3104255116464816E7, 2.571416238899332E7, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {(-25.91777171), (-606.0656871), (-20.0), 630.313799744, 3398.5921, 3585.4272382629, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {671.7308904116763, 367315.6170799951, 400.0, 397295.4861477193, 1.1550428262182409E7, 1.2855288480877528E7, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1343.4617808233527, 734631.2341599902, 800.0, 794590.9722954386, 2.3100856524364818E7, 2.5710576961755056E7, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray4);
      assertEquals(9, doubleArray4.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray3.length);
      
      double double0 = MathArrays.linearCombination(3585.4272382629, 4392.8366640745, (double) 3357, (-25.91777171));
      assertEquals(1.5663190268982176E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-2280);
      intArray0[2] = 0;
      intArray0[3] = (-1312);
      intArray0[4] = 2079;
      intArray0[5] = 627;
      intArray0[6] = 1348;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, (-2280), 0, (-1312), 2079, 627, 1348}, intArray0);
      assertEquals(7, intArray0.length);
      
      double double0 = MathArrays.linearCombination((double) (-2280), 1919.8, (double) 0, 0.0, 1399.2, (double) (-2280), (-366.02), (-2807.68695));
      assertEquals((-6539650.422561), double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1348;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1312);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1348.0, 0.0, (-1312.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,348 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-25.91777171);
      doubleArray0[1] = (-606.0656871);
      doubleArray0[2] = (-20.0);
      doubleArray0[3] = 630.313799744;
      doubleArray0[4] = 3398.5921;
      doubleArray0[5] = 3585.4272382629;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 797.6994494993;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {797.6994494993}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(542.1307931829439, (-698.62682), 0.0, 0.0, 884.557393332, 2203.5753743182313);
      assertEquals(1570441.777052043, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[][] doubleArray2 = new double[6][3];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-25.91777171);
      doubleArray0[1] = (-606.0656871);
      int[] intArray0 = new int[8];
      intArray0[0] = 414;
      intArray0[1] = 2391;
      intArray0[2] = 180;
      intArray0[3] = 191;
      intArray0[4] = 1321;
      intArray0[5] = 203;
      intArray0[6] = 0;
      intArray0[7] = 1;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {414, 2391, 180, 191, 1321, 203, 0, 1}, intArray0);
      assertEquals(8, intArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-25.91777171), (-606.0656871), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-25.91777171), (-606.0656871), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {671.7308904116763, 367315.6170799951, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-25.91777171), (-606.0656871), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-25.91777171), (-606.0656871), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-25.91777171), (-606.0656871), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 595.839;
      doubleArray0[1] = (-1103.6622263);
      doubleArray0[2] = 210.2547352153;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-3375.637657522278);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 2885.01699;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {595.839, (-1103.6622263), 210.2547352153, (-1.0), (-3375.637657522278), 3.834E-20, 2885.01699, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-328.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-328.0F);
      floatArray1[1] = (-328.0F);
      floatArray1[2] = (-681.025F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = (-681.025F);
      floatArray1[6] = 0.0F;
      floatArray1[7] = (-328.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-328.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-328.0F), (-328.0F), (-681.025F), 0.0F, 0.0F, (-681.025F), 0.0F, (-328.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-2280);
      intArray0[2] = 0;
      intArray0[3] = (-1312);
      intArray0[4] = 2079;
      intArray0[5] = 627;
      intArray0[6] = 1348;
      int int0 = new Integer(2079);
      assertEquals(2079, int0);
      
      double double0 = MathArrays.linearCombination((double) (-2280), 1919.8, (double) 2079, 0.0, 1399.2, (double) (-2280), (-366.02), (-2807.68695));
      assertEquals((-6539650.422561), double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(doubleArray4);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray4.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double1 = MathArrays.linearCombination(4392.8366640745, 0.0, 0.0, (double) 627);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray5 = MathArrays.copyOf(doubleArray1, 2079);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(doubleArray5);
      assertEquals(2079, doubleArray5.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "2~0o+t\"(o'F";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[4] = "s<^NG3!iW{5~0-G`Y";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 2.800552834259E-8;
      doubleArray0[2] = (-669.9429);
      doubleArray0[3] = 1225.6719538742;
      doubleArray0[4] = 0.9489846229553223;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {6.283185307179586, 2.800552834259E-8, (-669.9429), 1225.6719538742, 0.9489846229553223}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.283185307179586, 2.800552834259E-8, (-669.9429), 1225.6719538742, 0.9489846229553223}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {6.283185307179586, 2.800552834259E-8, (-669.9429), 1225.6719538742, 0.9489846229553223}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {12.566370614359172, 5.601105668518E-8, (-1339.8858), 2451.3439077484, 1.8979692459106445}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-25.91777171);
      doubleArray0[1] = (-606.0656871);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-25.918 >= -606.066)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 134217729;
      intArray0[0] = 134217729;
      intArray0[1] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {134217729, 1}, intArray0);
      assertArrayEquals(new int[] {134217729, 1}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 133;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 133, 133);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.06666666666666667;
      doubleArray0[1] = 0.06666666666666667;
      doubleArray0[4] = 0.06666666666666667;
      doubleArray0[5] = 0.06666666666666667;
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      FieldElement<Double>[][] fieldElementArray0 = MathArrays.buildArray(field0, 0, Integer.MAX_VALUE);
      assertNotNull(fieldElementArray0);
      assertEquals(0, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 595.839;
      doubleArray0[1] = (-1103.6622263);
      doubleArray0[2] = 210.2547352153;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-3375.637657522278);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 2885.01699;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {595.839, (-1103.6622263), 210.2547352153, (-1.0), (-3375.637657522278), 3.834E-20, 2885.01699, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-681.025F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-328.0F);
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-681.025F), 0.0F, (-328.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1840700268);
      intArray0[1] = 10;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1840700268), 10}, intArray0);
      assertEquals(2, intArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2.133555510483408E7, double1, 0.01);
      assertArrayEquals(new double[] {595.839, (-1103.6622263), 210.2547352153, (-1.0), (-3375.637657522278), 3.834E-20, 2885.01699, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 415.804263496244;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-545.2084);
      doubleArray0[3] = 20.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 755.340202435003;
      doubleArray0[6] = (-1496.9689918356048);
      doubleArray0[7] = 2320.613;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {415.804263496244, 0.0, (-545.2084), 20.0, 0.0, 755.340202435003, (-1496.9689918356048), 2320.613}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 5646L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {5646L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {415.804263496244, 0.0, (-545.2084), 20.0, 0.0, 755.340202435003, (-1496.9689918356048), 2320.613}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-943.4475736), 0.0, 755.340202435003, (-458.9), 415.804263496244, (-1496.9689918356048));
      assertEquals((-969071.7080243414), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1496.9689918356048);
      doubleArray1[1] = (-458.9);
      doubleArray1[2] = 2320.613;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-545.2084);
      doubleArray1[6] = (double) 5646L;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {415.804263496244, 0.0, (-545.2084), 20.0, 0.0, 755.340202435003, (-1496.9689918356048), 2320.613}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1496.9689918356048), (-458.9), 2320.613, 0.0, 0.0, (-545.2084), 5646.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(14, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-283.6754));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0876114836E-17), (-283.6754)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-283.6754);
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 3.834E-20;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = (-283.6754);
      doubleArray2[6] = (-283.6754);
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-283.6754), 1.0, 1.0, 3.834E-20, 1.0, (-283.6754), (-283.6754)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertEquals(7, doubleArray2.length);
      assertEquals(13, doubleArray3.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray3, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-358));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 12L;
      longArray0[1] = 0L;
      longArray0[2] = 1023L;
      longArray0[3] = 0L;
      longArray0[4] = (-2505L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,505 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = (-770.423966);
      double double1 = MathArrays.linearCombination(788.9923639807, (-770.423966), 788.9923639807, (-770.423966));
      assertEquals((-1215717.2524034528), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 788.9923639807;
      doubleArray0[1] = (-770.423966);
      doubleArray0[2] = 788.9923639807;
      doubleArray0[3] = (-1215717.2524034528);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {788.9923639807, (-770.423966), 788.9923639807, (-1215717.2524034528)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (788.992 >= -770.424)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1229.61142702479);
      doubleArray0[3] = 3016.999236995;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1229.61142702479), 0.0, 0.0, 0.0, 0.0, 3016.999236995, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.scaleInPlace((-20.0), doubleArray0);
      assertArrayEquals(new double[] {-0.0, 24592.2285404958, -0.0, -0.0, -0.0, -0.0, (-60339.9847399), -0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-2280);
      intArray0[2] = 0;
      intArray0[3] = (-1312);
      intArray0[4] = 2079;
      intArray0[5] = 627;
      intArray0[6] = 1348;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, (-2280), 0, (-1312), 2079, 627, 1348}, intArray0);
      assertEquals(7, intArray0.length);
      
      double double0 = MathArrays.linearCombination((double) (-2280), 1919.8, (double) 0, 0.0, 1399.2, (double) (-2280), (-366.02), (-2807.68695));
      assertEquals((-6539650.422561), double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotNull(doubleArray4);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray4.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double1 = MathArrays.linearCombination(4392.8366640745, 0.0, 0.0, (double) 627);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-1.0), (-1.0), 788.9923639807, (-1.0));
      assertEquals((-787.9923639807), double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = 2524;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 2524);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2712.0836);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2712.0836)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1708);
      intArray0[1] = (-2164);
      intArray0[2] = 1379;
      intArray0[3] = 0;
      intArray0[4] = 2459;
      intArray0[5] = 0;
      intArray0[6] = (-1438);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2164);
      intArray1[1] = 1379;
      intArray1[2] = (-1438);
      intArray1[3] = 2;
      intArray1[4] = 0;
      intArray1[5] = (-1708);
      intArray1[6] = (-2164);
      intArray1[7] = 0;
      intArray1[8] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(11711, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1708), (-2164), 1379, 0, 2459, 0, (-1438)}, intArray0);
      assertArrayEquals(new int[] {(-2164), 1379, (-1438), 2, 0, (-1708), (-2164), 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray0.length);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = (-1904);
      intArray0[0] = (-1904);
      intArray0[1] = (-1904);
      intArray0[2] = 0;
      intArray0[3] = 350;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "s<^NG3!iW{5~0-G`Y";
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {(-1904), (-1904), 0, 350, 0}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(5, intArray0.length);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      long[][] longArrayArray0 = null;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (-2396.4147084366946);
      doubleArray0[2] = 2409.4436;
      doubleArray0[3] = 1992.14948;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 5000.2655953649;
      doubleArray0[6] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {6.283185307179586, (-2396.4147084366946), 2409.4436, 1992.14948, 0.0, 5000.2655953649, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {6.283185307179586, (-2396.4147084366946), 2409.4436, 1992.14948, 0.0, 5000.2655953649, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, doubleArray0.length);
      
      long[][] longArray0 = new long[7][0];
      long[] longArray1 = new long[2];
      longArray1[0] = (-7796L);
      longArray1[1] = 35L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 35L;
      longArray2[1] = 0L;
      longArray2[2] = 35L;
      longArray2[3] = 35L;
      longArray2[4] = (-7796L);
      longArray2[5] = (-7796L);
      longArray2[6] = 35L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[1] = (-7796L);
      longArray3[2] = 35L;
      longArray3[3] = 1L;
      longArray3[4] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-7796L);
      longArray4[1] = 0L;
      longArray4[2] = (-7796L);
      longArray4[3] = (-7796L);
      longArray4[4] = 35L;
      longArray4[5] = 1L;
      longArray4[6] = 35L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 2125L;
      longArray5[1] = 0L;
      longArray5[2] = 1L;
      longArray5[3] = 35L;
      longArray5[4] = 1L;
      longArray5[5] = 1L;
      longArray5[6] = 1L;
      longArray5[7] = (-7796L);
      longArray5[8] = 1L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      
      longArray7[0] = 2125L;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -7,796 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 797.6994494993;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {797.6994494993}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(542.1307931829439, (-698.62682), 0.0, 0.0, 884.557393332, 2203.5753743182313);
      assertEquals(1570441.777052043, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 1247.137203, 542.1307931829439, (-1342.46055836));
      assertEquals((-727789.2073205245), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double4 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double4, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[][] doubleArray2 = new double[6][3];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 797.6994494993;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 1.34217729E8;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 542.1307931829439;
      try { 
        MathArrays.ebeDivide(doubleArray3, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-25.91777171);
      doubleArray0[1] = (-606.0656871);
      doubleArray0[2] = (-20.0);
      doubleArray0[3] = 630.313799744;
      doubleArray0[4] = 3398.5921;
      doubleArray0[5] = 3585.4272382629;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 456.706;
      doubleArray0[8] = 2625.6776;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-25.91777171), (-606.0656871), (-20.0), 630.313799744, 3398.5921, 3585.4272382629, 0.0, 456.706, 2625.6776}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-25.91777171), (-606.0656871), (-20.0), 630.313799744, 3398.5921, 3585.4272382629, 0.0, 456.706, 2625.6776}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 0.0, 1.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 0.0, 1.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 0.0, 1.0, Double.NaN, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale(0.0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 0.0, 1.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.scale(0.0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 0.0, 1.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray4);
      assertEquals(8, doubleArray4.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[][] doubleArray2 = new double[9][4];
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray1;
      doubleArray2[8] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2940.27);
      doubleArray2[1] = 1489.9438;
      doubleArray2[2] = (-1275.7709602);
      doubleArray2[3] = (-682.1495);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 595.839;
      doubleArray0[1] = (-1103.6622263);
      doubleArray0[2] = 210.2547352153;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-3375.637657522278);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 2885.01699;
      doubleArray0[7] = (-3405.652);
      doubleArray0[8] = 1697.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {595.839, (-1103.6622263), 210.2547352153, (-1.0), (-3375.637657522278), 3.834E-20, 2885.01699, (-3405.652), 1697.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-328.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-681.025F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-328.0F), 0.0F, (-1.0F), 0.0F, (-681.025F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1339.0528481;
      doubleArray0[4] = (-1104.2091);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1812.2378143396415);
      doubleArray0[0] = (-1812.2378143396415);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1658.52;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,812.238 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2891);
      intArray0[1] = (-2891);
      intArray0[2] = (-2891);
      intArray0[3] = (-2891);
      intArray0[4] = (-2891);
      intArray0[5] = (-2891);
      intArray0[6] = (-2891);
      intArray0[7] = (-2891);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-2891), (-2891), (-2891), (-2891), (-2891), (-2891), (-2891), (-2891)}, intArray0);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Double>>) null, (-1544), (-1838));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "e&";
      stringArray0[1] = "";
      stringArray0[2] = "";
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1904);
      doubleArray0[1] = (double) (-1904);
      doubleArray0[2] = (double) (-1904);
      doubleArray0[3] = (double) (-1904);
      doubleArray0[4] = (double) (-1904);
      doubleArray0[5] = (double) (-1904);
      doubleArray0[6] = (double) (-1904);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1904.0), (-1904.0), (-1904.0), (-1904.0), (-1904.0), (-1904.0), (-1904.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1904.0), (-1904.0), (-1904.0), (-1904.0), (-1904.0), (-1904.0), (-1904.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1904);
      intArray0[1] = (-1904);
      intArray0[2] = (-1904);
      intArray0[3] = (-1904);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1904), (-1904), (-1904), (-1904)}, intArray0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-1904), 2146147807);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1904);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 350;
      intArray0[4] = 4385;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1904), 0, 0, 350, 4385}, intArray0);
      assertEquals(5, intArray0.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-769.221315115);
      doubleArray0[1] = (-141.715253566416);
      doubleArray0[2] = (-3221.4871058);
      doubleArray0[3] = (-2253.516767);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = (-2311.92101306774);
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-769.221315115), (-141.715253566416), (-3221.4871058), (-2253.516767), 3.834E-20, (-2311.92101306774), 3.834E-20, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-769.221315115), (-141.715253566416), (-3221.4871058), (-2253.516767), 3.834E-20, (-2311.92101306774), 3.834E-20, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("insufficient dimension {0}, must be at least {1}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.insufficient dimension {0}, must be at least {1}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (-1);
      intArray0[3] = (-1028);
      intArray0[4] = 3011;
      intArray0[5] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 1, (-1), (-1028), 3011, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-297.4473128632);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-297.4473128632), 0.0, 3.834E-20, 2.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1371);
      intArray0[1] = (-49);
      intArray0[2] = 273;
      intArray0[3] = (-1319);
      intArray0[4] = 0;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-1371), (-49), 273, (-1319), 0}, intArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(5, intArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1371), (-49), 273, (-1319), 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-769.221315115);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1229.61142702);
      doubleArray0[2] = 1606.59;
      doubleArray0[3] = 3016.999236995;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 2408.226;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-1229.61142702), 1606.59, 3016.999236995, (-1.0), 2408.226, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 229);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(229, intArray1.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(0, intArray0.length);
      
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-1,229.611 <= 1,606.59)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1229.61142702479);
      doubleArray0[2] = 1606.59;
      doubleArray0[3] = 3016.999236995;
      doubleArray0[4] = (-1.0);
      double double0 = 2408.226;
      doubleArray0[5] = 2408.226;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-508.0028360646);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-1229.61142702479), 1606.59, 3016.999236995, (-1.0), 2408.226, 0.0, (-508.0028360646)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 229);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(229, intArray1.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1229.61142702479);
      doubleArray0[2] = 1606.59;
      doubleArray0[3] = 3016.999236995;
      doubleArray0[4] = (-1.0);
      double double0 = 2408.226;
      doubleArray0[5] = 2408.226;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0, 229);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1640.574168978857;
      doubleArray0[2] = 1937.716395781724;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 924.25;
      MathArrays.distance1(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (1,937.716 >= -\u221E)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = (-915);
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-915);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3367);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.distanceInf(intArray1, intArray0);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-250.7);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-250.7);
      doubleArray1[1] = (-250.7);
      doubleArray1[2] = (-250.7);
      doubleArray1[3] = (-250.7);
      doubleArray1[4] = (-250.7);
      doubleArray1[5] = (-250.7);
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 145;
      intArray0[1] = 4300;
      intArray0[2] = 1;
      intArray0[3] = (-3423);
      intArray0[4] = 10000;
      intArray0[5] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2333.054807;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1984.271;
      doubleArray0[5] = (-521.01407539299);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[8][1];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray1;
      doubleArray2[7] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 11
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-508);
      intArray0[2] = 0;
      intArray0[3] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) 0, Double.POSITIVE_INFINITY, 0.0, 1532.8413410022, 0.0, 692.0454954764, 0.0, 0.0);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
  }
}
