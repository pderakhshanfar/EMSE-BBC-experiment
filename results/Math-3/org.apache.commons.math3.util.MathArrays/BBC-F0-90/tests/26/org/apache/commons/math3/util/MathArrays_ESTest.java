/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 16:07:14 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = (-415.45F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = Float.POSITIVE_INFINITY;
      floatArray0[5] = 635.9F;
      floatArray0[6] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) 3.4028235E38F;
      doubleArray0[2] = (double) 3.4028235E38F;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      try { 
        MathArrays.normalizeArray(doubleArray1, (-4.068233003401932E-9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 20.7096428358966;
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 20.7096428358966);
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer((-805));
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(integer0).when(field0).getZero();
      int[] intArray0 = new int[9];
      intArray0[0] = 9;
      intArray0[1] = 9;
      intArray0[2] = 9;
      intArray0[3] = 9;
      intArray0[4] = 9;
      intArray0[6] = 9;
      intArray0[7] = 9;
      intArray0[8] = 118;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.buildArray((Field<FieldElement<FieldElement>>) field0, 0);
      MathArrays.equals(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1278.025);
      double double0 = (-80.2141662);
      doubleArray0[1] = (-80.2141662);
      doubleArray0[2] = 2461.144;
      doubleArray0[3] = (-1450.2441);
      doubleArray0[4] = 1214.0;
      doubleArray0[5] = (-2232.06090339446);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-634.9);
      doubleArray0[8] = (-107.80158);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][6];
      doubleArray1[0] = null;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-80.2141662);
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = null;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-80.2141662);
      doubleArray1[3] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-792.611F);
      float[] floatArray1 = new float[4];
      MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1786.28312);
      doubleArray0[1] = (-1786.28312);
      doubleArray0[2] = (-1786.28312);
      doubleArray0[3] = (-1786.28312);
      doubleArray0[4] = (-1786.28312);
      doubleArray0[5] = (-1786.28312);
      doubleArray0[6] = 1.6;
      doubleArray0[7] = (-1786.28312);
      doubleArray0[3] = (-1786.28312);
      double[] doubleArray1 = MathArrays.scale((-1786.28312), doubleArray0);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1016));
      integerArray0[0] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      MathArrays.linearCombination(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 20.7096428358966;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.normalizeArray(doubleArray0, 20.7096428358966);
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer((-3203));
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(integer0).when(field0).getZero();
      int[] intArray0 = new int[9];
      intArray0[0] = 9;
      intArray0[1] = 9;
      intArray0[2] = 9;
      intArray0[3] = 9;
      intArray0[4] = 9;
      intArray0[5] = 9;
      intArray0[6] = 9;
      intArray0[7] = 9;
      intArray0[8] = 118;
      MathArrays.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<FieldElement>>) field0, 9);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2629.12072924);
      doubleArray0[1] = (-1479.27);
      doubleArray0[2] = (-460.92);
      doubleArray0[3] = 2047.6;
      doubleArray0[4] = (-3590.0);
      doubleArray0[5] = (-2629.0);
      doubleArray0[6] = 1.0E-5;
      doubleArray0[7] = (-1016.025647);
      doubleArray0[8] = 2054.7;
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1092;
      intArray0[1] = 134217729;
      intArray0[2] = 41;
      intArray0[3] = (-2081);
      intArray0[5] = 2564;
      intArray0[6] = 9;
      intArray0[7] = (-2286);
      MathArrays.distance(intArray0, intArray0);
      int[] intArray1 = new int[2];
      intArray1[0] = (-2073432487);
      intArray1[1] = 41;
      MathArrays.distance1(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.63E18;
      doubleArray1[1] = 3629.94437;
      doubleArray1[2] = 4.3466666666666665E18;
      MathArrays.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1528.44301996;
      doubleArray1[1] = 587.507;
      doubleArray1[2] = (-2455.45467);
      doubleArray1[3] = 1.34217729E8;
      doubleArray1[4] = 3.834E-20;
      doubleArray1[5] = (-1366.066167);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.convolve(doubleArray1, doubleArray0);
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 10 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = Double.NaN;
      doubleArray0[6] = (-2080.2822254092957);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = (-482.6252089);
      doubleArray2[4] = (-2080.2822254092957);
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray2, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double[][] doubleArray1 = new double[15][9];
      doubleArray1[0] = doubleArray0;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.copyOf(intArray0, 0);
      MathArrays.linearCombination((double) 0, (double) 0, (double) 0, (double) 0, (double) 0, (-414736.17623874976));
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2548.905903);
      doubleArray0[1] = 0.75;
      doubleArray0[2] = (-3552.0);
      doubleArray0[3] = (-4258.32065164);
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2011.24;
      doubleArray0[7] = (-3.5997360512765566E-9);
      MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = new double[2];
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 10 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = 687.54755F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3341.2056F;
      floatArray0[4] = (-668.7F);
      floatArray0[5] = 4260.841F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 3.4028235E38F;
      float[] floatArray1 = new float[7];
      floatArray1[0] = 687.54755F;
      floatArray1[1] = 687.54755F;
      floatArray1[2] = 3.4028235E38F;
      floatArray1[3] = 3.4028235E38F;
      floatArray1[4] = (-1.0F);
      floatArray1[5] = (-158.5031F);
      floatArray1[6] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) 3.4028235E38F;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) 0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][5];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1408.0096;
      doubleArray0[3] = (-2080.7580708);
      double double0 = new Double(1408.0096);
      MathArrays.scaleInPlace(3523.566588581, doubleArray0);
      double[] doubleArray1 = MathArrays.scale((-132.8), doubleArray0);
      MathArrays.OrderDirection.values();
      float[] floatArray0 = new float[3];
      floatArray0[0] = 209.8069F;
      floatArray0[1] = (-1380.39F);
      floatArray0[2] = 733.1161F;
      MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray1);
      int[] intArray0 = new int[8];
      intArray0[0] = 210;
      intArray0[1] = 297;
      intArray0[2] = 84;
      intArray0[3] = 18;
      intArray0[4] = (-666);
      intArray0[5] = 978;
      intArray0[6] = 1401;
      intArray0[7] = (-1250);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1408.00959894;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1408.00959894;
      doubleArray0[3] = (-2080.7580708);
      doubleArray0[4] = 1.864050261338492E13;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-2080.7580708);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      MathArrays.scaleInPlace(1.889351111111111E37, doubleArray1);
      MathArrays.scale(480.269241, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.safeNorm(doubleArray1);
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1427;
      MathArrays.distance1(intArray0, intArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1427;
      float float0 = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1976.65F;
      float[] floatArray1 = new float[0];
      MathArrays.equals(floatArray0, floatArray1);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-2147);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2147));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 43.214F;
      floatArray0[1] = 2280.76F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1203.9237F;
      floatArray0[4] = 283.25F;
      floatArray0[5] = (-327.0F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-2574.271F);
      floatArray0[8] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1452.2350335416;
      doubleArray0[1] = (-250.3);
      doubleArray0[2] = 714.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 3.834E-20;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      MathArrays.scale((-4973.8750645695), doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.checkOrder(doubleArray1);
      int[] intArray0 = new int[7];
      intArray0[0] = 11;
      intArray0[1] = (-1215);
      intArray0[2] = 511;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = 35;
      intArray0[5] = 530;
      intArray0[6] = 2147481032;
      MathArrays.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.linearCombination(1.0E-6, 1494.4246163, 1.0E-6, 1494.4246163, 1.0E-6, 1494.4246163, 2585.265766890613, 1628.4940839379162);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-400.00757F);
      floatArray0[1] = 1752.3448F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = 666.5F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-852.3481F);
      floatArray0[7] = 700.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][7];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-789));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1299.2506F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-760.9F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1051.0F);
      floatArray0[5] = Float.NaN;
      floatArray0[6] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2585.265766890613;
      MathArrays.checkPositive(doubleArray0);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-732.66F);
      floatArray1[2] = 3644.0F;
      floatArray1[3] = (-1597.0F);
      floatArray1[4] = Float.NaN;
      floatArray1[5] = 3.4028235E38F;
      floatArray1[6] = 3.4028235E38F;
      floatArray1[7] = (-1027.8479F);
      floatArray1[8] = (-2201.7F);
      MathArrays.equals(floatArray0, floatArray1);
      int[] intArray0 = new int[5];
      intArray0[0] = (-404);
      intArray0[1] = (-1);
      intArray0[2] = (-659);
      intArray0[3] = 3333;
      intArray0[4] = 7;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.copyOf(intArray0, 3333);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.linearCombination((-312.3366), (-312.3366), 2183.17479, (double) 1, (double) 1, 2629.24451, (-118.14), 1.0E-6);
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer integer0 = new Integer(3046);
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.linearCombination((-910.927863), (-910.927863), 420.65, (-910.927863), (-312.3366), (-2817.345192646743), 1.0E-6, 2844.7089);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 3046;
      floatArray0[1] = (float) 3046;
      MathArrays.equals((float[]) null, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 420.65;
      MathArrays.convolve(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.equals((double[]) null, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.087);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-3.9986783938944604E-8);
      doubleArray1[1] = 811.1;
      doubleArray1[2] = 2202.872733702834;
      doubleArray1[3] = 1.0527645835466665E22;
      doubleArray1[4] = (-2658.66763);
      doubleArray1[5] = 20.6764365;
      doubleArray1[6] = 1196.3452704825106;
      doubleArray1[7] = 4.3466666666666665E18;
      MathArrays.equals((double[]) null, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-190.12157161364394);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3153.8727101153595;
      doubleArray0[3] = (-0.010714690733195933);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-2080.7580708);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (-190.12157161364394);
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(900);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[3][2];
      long[] longArray1 = new long[4];
      longArray1[0] = (long) 1;
      longArray1[1] = (long) 1;
      longArray1[2] = (long) 1;
      longArray1[3] = (long) 1;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = (long) 1;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = (long) 1;
      longArray3[1] = (long) 1;
      longArray3[2] = (long) 1;
      longArray0[2] = longArray3;
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1581.9885883577954;
      doubleArray0[1] = (-1171.0);
      doubleArray0[2] = 1.25;
      doubleArray0[3] = (-520.48522);
      MathArrays.copyOf(doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-9L);
      doubleArray1[1] = 2384.762;
      doubleArray1[3] = (double) (-9L);
      doubleArray1[5] = 330.51768259;
      doubleArray1[6] = (double) 7910884519577875650L;
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      Integer[] integerArray0 = new Integer[2];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer.getInteger("{", int0);
      long[][] longArray0 = new long[2][2];
      long[] longArray1 = new long[9];
      longArray1[0] = 1563L;
      longArray1[1] = (long) int0;
      longArray1[2] = (long) 1;
      longArray1[3] = (long) 1;
      longArray1[4] = (long) 1;
      longArray1[5] = (long) 1;
      longArray1[6] = (long) 1;
      longArray1[7] = (long) 1;
      longArray1[8] = (long) int0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = (long) int0;
      longArray2[1] = (long) 1;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[1];
      floatArray1[0] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.safeNorm(doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-3272);
      intArray0[1] = (-1188);
      intArray0[2] = 13;
      int[] intArray1 = new int[6];
      intArray1[0] = (-3272);
      intArray1[1] = (-3272);
      intArray1[2] = (-3272);
      intArray1[3] = 2296;
      intArray1[4] = 13;
      intArray1[5] = 13;
      MathArrays.distanceInf(intArray0, intArray1);
      int[] intArray2 = new int[5];
      intArray2[0] = 2296;
      intArray2[1] = 13;
      intArray2[2] = 2296;
      intArray2[3] = (-1188);
      intArray2[4] = 2296;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray2, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      int[] intArray0 = new int[4];
      intArray0[0] = 7;
      intArray0[1] = 0;
      intArray0[2] = 2081;
      intArray0[3] = 13;
      MathArrays.distanceInf(intArray0, intArray0);
      int[] intArray1 = new int[9];
      intArray0[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 2081;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 2081;
      intArray1[7] = 13;
      intArray1[8] = 0;
      MathArrays.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      MathArrays.safeNorm(doubleArray0);
      long[][] longArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long[][] longArray0 = new long[1][1];
      MathArrays.checkNonNegative(longArray0);
      int int0 = 25;
      double[][] doubleArray0 = new double[6][7];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 25;
      doubleArray1[1] = (double) 25;
      doubleArray1[2] = (double) 25;
      doubleArray0[3] = doubleArray1;
      doubleArray0[4] = null;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 25;
      doubleArray2[1] = (double) 25;
      doubleArray2[2] = (double) 25;
      doubleArray2[3] = (double) 25;
      doubleArray2[4] = (double) 25;
      doubleArray0[5] = doubleArray2;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      MathArrays.linearCombination(1.0, 109.85279, 109.85279, (-1221.158715), 1.0, 1.0, (-1000.13), (-1221.158715));
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.POSITIVE_INFINITY;
      floatArray0[1] = Float.POSITIVE_INFINITY;
      MathArrays.equals(floatArray0, floatArray0);
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.checkOrder(doubleArray0);
      double double0 = 1.0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long[][] longArray0 = new long[1][1];
      MathArrays.checkNonNegative(longArray0);
      int int0 = 25;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-190.12157161364394);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3154.1662738;
      doubleArray0[3] = (-0.010714690733195933);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-2080.7580708);
      doubleArray0[6] = 1408.00959894;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(1408.00959894, doubleArray0);
      double[] doubleArray1 = MathArrays.scale((-8.637232983699599E29), doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 518;
      intArray0[1] = 542;
      intArray0[2] = (-1219);
      intArray0[3] = 134217729;
      MathArrays.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 2983.3708F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      MathArrays.equals(floatArray0, floatArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = null;
      long[][] longArray0 = new long[1][1];
      MathArrays.checkNonNegative(longArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      MathArrays.safeNorm(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2558.21304;
      doubleArray0[1] = 2558.21304;
      doubleArray0[2] = 2558.21304;
      doubleArray0[3] = 2558.21304;
      doubleArray0[4] = 2558.21304;
      MathArrays.normalizeArray(doubleArray0, (-7.877917738262007E-9));
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      MathArrays.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-530.0);
      doubleArray0[1] = 2077.851014;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1856.6512601;
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale(1.304E19, doubleArray0);
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      MathArrays.copyOf(intArray0, 1500);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-1));
      doubleArray0[0] = double0;
      Double double1 = new Double((-1));
      doubleArray0[1] = double1;
      Double double2 = new Double((-1271.0));
      doubleArray0[2] = double2;
      Double double3 = new Double(5057.49889040943);
      doubleArray0[3] = double3;
      Double double4 = new Double(1362.911251);
      doubleArray0[4] = double4;
      Double double5 = new Double((-1));
      doubleArray0[5] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) doubleArray0[2];
      doubleArray1[1] = 5057.49889040943;
      doubleArray1[2] = 1480.819;
      doubleArray1[3] = (double) doubleArray0[0];
      doubleArray1[4] = (double) doubleArray0[1];
      doubleArray1[5] = (double) doubleArray0[3];
      doubleArray1[6] = (-1271.0);
      doubleArray1[7] = (-1271.0);
      doubleArray1[8] = (double) doubleArray0[2];
      MathArrays.safeNorm(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-1,271 < 5,057.499)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1373.354;
      doubleArray0[1] = 1.3039999999999992E19;
      doubleArray0[2] = 1.3039999999999992E19;
      doubleArray0[3] = (-1659.08327582205);
      doubleArray0[4] = 9944220.08951339;
      Double double0 = new Double(1.3039999999999992E19);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 9944220.08951339;
      Double double1 = new Double(1373.354);
      doubleArray1[1] = double1;
      Double double2 = new Double((-1357.80494423779));
      doubleArray1[2] = double2;
      doubleArray1[3] = (Double) 1.3039999999999992E19;
      doubleArray1[4] = (Double) 0.0;
      doubleArray1[5] = double0;
      doubleArray1[6] = (Double) 9944220.08951339;
      doubleArray1[7] = (Double) 0.0;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (13,039,999,999,999,992,000 >= 13,039,999,999,999,992,000)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray1, doubleArray1);
      MathArrays.equals(doubleArray0, doubleArray1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "CONTINUED_FRACTION_NAN_DIVERGENCE";
      stringArray0[2] = "}0[CnhEM(Pyb=_";
      stringArray0[3] = "$VALUES";
      stringArray0[4] = "&k9v)f6pm";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[6] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long[][] longArray0 = new long[1][1];
      MathArrays.checkNonNegative(longArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[][] longArray0 = new long[1][1];
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 532);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long[][] longArray0 = new long[1][1];
      long[] longArray1 = new long[1];
      longArray1[0] = (-1L);
      longArray0[0] = longArray1;
      MathArrays.OrderDirection.values();
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-1L);
      doubleArray1[1] = (double) (-1L);
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = null;
      double[] doubleArray2 = new double[0];
      doubleArray0[3] = doubleArray2;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 1.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1.0, 1.7976931348623157E308, 0.0, 0.0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.7976931348623157E308;
      MathArrays.safeNorm(doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false, false);
      MathArrays.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      long[] longArray0 = new long[5];
      longArray0[0] = 501L;
      longArray0[1] = (long) 2675;
      longArray0[2] = 501L;
      longArray0[3] = 501L;
      longArray0[4] = 1084L;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1L);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-1L);
      doubleArray1[1] = (double) (-1L);
      doubleArray1[2] = 2996.46812;
      doubleArray1[3] = 721.84;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 2996.46812);
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) (-1L);
      doubleArray3[1] = 1257.46585242133;
      doubleArray3[2] = (double) (-1L);
      doubleArray3[3] = (double) (-1L);
      doubleArray3[4] = 2996.46812;
      doubleArray3[5] = (double) (-1L);
      doubleArray3[6] = 2996.46812;
      doubleArray3[7] = 2996.46812;
      MathArrays.equalsIncludingNaN(doubleArray2, doubleArray3);
      try { 
        MathArrays.linearCombination(doubleArray3, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      double double0 = Double.NaN;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(Double.NaN, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        MathArrays.scale(2318.08908642019, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1123.733281191405;
      doubleArray1[1] = 1123.733281191405;
      MathArrays.distance1(doubleArray0, doubleArray1);
      int[] intArray0 = new int[3];
      intArray0[0] = 2009527042;
      intArray0[1] = 1628967263;
      intArray0[2] = (-1866);
      MathArrays.copyOf(intArray0);
      MathArrays.equals(doubleArray1, doubleArray0);
      MathArrays.scale(3.141592653589793, doubleArray1);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-701.3);
      MathArrays.normalizeArray(doubleArray2, (-701.3));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[2];
      MathArrays.distance(intArray0, intArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = (-1);
      intArray1[1] = 545;
      intArray1[2] = 1345;
      intArray1[3] = (-686);
      intArray1[4] = 851;
      intArray1[5] = 3882;
      intArray1[6] = 721;
      intArray1[7] = 2;
      MathArrays.distance(intArray0, intArray1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "?%B";
      stringArray0[1] = "(YJ;\"1;sL !";
      stringArray0[2] = "insufficient data: only {0} rows and {1} columns.";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1241.1;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = 1013.1334456703363;
      doubleArray0[4] = 345.637653;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 3643.119;
      doubleArray0[8] = 20.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1091.0);
      doubleArray1[1] = 1241.1;
      doubleArray1[2] = 20.0;
      doubleArray1[4] = 20.0;
      doubleArray1[5] = 20.0;
      doubleArray1[6] = 1241.1;
      doubleArray1[7] = 1013.1334456703363;
      doubleArray1[8] = 3643.119;
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      MathArrays.equals(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1373.354;
      doubleArray0[1] = 1.3039999999999992E19;
      doubleArray0[2] = 8338937.360647893;
      doubleArray0[3] = (-1659.08327582205);
      doubleArray0[4] = 9944220.08951339;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1484.931;
      doubleArray0[7] = 1607.0;
      doubleArray0[8] = (-0.5);
      MathArrays.safeNorm(doubleArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = 501L;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 501;
      intArray0[1] = 501;
      intArray0[2] = 269;
      int int2 = (-1271);
      intArray0[3] = (-1271);
      intArray0[4] = 0;
      int int3 = 0;
      intArray0[5] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      MathArrays.distance(intArray0, intArray1);
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int4 = (-493);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-493), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.linearCombination(1.304E19, 20.7096428358966, Double.NaN, 20.7096428358966, 20.7096428358966, 1.304E19);
      Double double0 = new Double(20.7096428358966);
      Double double1 = new Double(888.7);
      Double double2 = new Double(Double.NaN);
      Double double3 = new Double(1699.64);
      Double double4 = new Double(2072.2671260842685);
      Double double5 = new Double(1706.183);
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = double4;
      doubleArray1[1] = double4;
      doubleArray1[2] = double4;
      doubleArray1[3] = double3;
      doubleArray1[4] = double3;
      doubleArray1[5] = double2;
      doubleArray1[6] = double1;
      doubleArray1[7] = double0;
      doubleArray1[8] = double4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      MathArrays.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2558.21304;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      double[] doubleArray1 = MathArrays.scale(3.834E-20, doubleArray0);
      MathArrays.linearCombination(793.217357, 2558.21304, 3.834E-20, 2153.5, 567340.3684, 2.092571258544922, 2558.21304, 3.834E-20);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 3.834E-20);
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      MathArrays.checkOrder(doubleArray2);
      MathArrays.distance(doubleArray1, doubleArray0);
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 567340.3684;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 4.9E-324;
      doubleArray3[4] = 1.304E19;
      doubleArray3[5] = 2.092571258544922;
      doubleArray3[6] = 567340.3684;
      doubleArray3[7] = (-564.6792027984);
      MathArrays.equals(doubleArray2, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 501;
      intArray0[2] = 269;
      intArray0[3] = (-1271);
      MathArrays.linearCombination((double) 269, 1.304E19, (double) (-1271), 2.85040095144011776E17, 1.304E19, 641.6237854383, 593.21107474, (double) 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1271);
      doubleArray0[1] = 549.01074875415;
      doubleArray0[3] = (double) (-1271);
      doubleArray0[4] = 549.01074875415;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2551.16);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.8;
      doubleArray0[1] = 1576.71954157166;
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      MathArrays.distance(intArray0, intArray1);
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2162;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2162, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2558.21304;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.scale(2558.21304, doubleArray0);
      MathArrays.linearCombination(793.217357, 2558.21304, 0.0, 2153.5, 567340.3684, 2.092571258544922, 2558.21304, 3.834E-20);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.834E-20);
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      MathArrays.checkOrder(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long[][] longArray0 = new long[4][0];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = (-2187L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 0L;
      longArray2[2] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = (-2187L);
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      MathArrays.linearCombination((double) 0L, (double) 0L, (double) 0L, (double) (-2187L), (double) 0L, (-3.356118100840571E-7), (double) 0L, (-3.356118100840571E-7));
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (-796.0047772526909));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 501;
      intArray0[2] = 269;
      intArray0[3] = (-1271);
      intArray0[4] = 2;
      intArray0[5] = 0;
      MathArrays.copyOf(intArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-493), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2558.21304;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.scale(3.834E-20, doubleArray0);
      MathArrays.linearCombination(793.217357, 2558.21304, 3.834E-20, 2153.5, 567340.3684, 2.092571258544922, 2558.21304, 3.834E-20);
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.8;
      doubleArray0[1] = 1576.71954157166;
      doubleArray0[2] = 3.141592653589793;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (-198);
      intArray0[2] = 0;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.ebeAdd(doubleArray1, doubleArray1);
      long[] longArray0 = new long[2];
      MathArrays.normalizeArray(doubleArray2, 753.22);
      long[][] longArray1 = new long[3][6];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      MathArrays.checkRectangular(longArray1);
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (3,153.439 >= 6.283)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.linearCombination(669.1, 0.49999999999999994, 1939.5035, (-3733.466327125), 1939.5035, 0.49999999999999994);
      Double double0 = new Double(1575.94);
      Double double1 = new Double((-7239766.706841083));
      Double double2 = new Double(3.834E-20);
      Double double3 = new Double((-1271.0));
      Double double4 = new Double(1699.64);
      Double double5 = new Double((-3733.466327125));
      Double[] doubleArray1 = new Double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 20.7096428358966;
      doubleArray0[1] = (-753.22);
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-753.22));
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      MathArrays.linearCombination((-2215.876240164883), 1.34217729E8, 549.01074875415, 1.304E19, (-4.068233003401932E-9), (-4286.02435), 641.6237854383, 1.7827257129423813E-8);
      MathArrays.normalizeArray(doubleArray0, (-753.22));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = 669.1;
      double[] doubleArray0 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 1.34217729E8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 501;
      intArray0[2] = 269;
      intArray0[3] = (-1271);
      int int0 = 547;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 501;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 701.3053;
      doubleArray0[3] = (double) 501;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 269);
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      int int0 = 501;
      intArray0[1] = 501;
      intArray0[2] = 269;
      MathArrays.linearCombination((double) 0, 3083.3840779925595, (-671.37408), 0.4311765432357788, 3083.3840779925595, 10.471483861310386);
      double[] doubleArray0 = new double[0];
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2558.21304;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.scale(3.834E-20, doubleArray0);
      MathArrays.linearCombination(2558.21304, 3930.796318155527, 221.62536906, 2558.21304, 3.141592653589793, 1.34217729E8, 1.34217729E8, 484.99939809);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.834E-20);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 501;
      intArray0[2] = 269;
      intArray0[3] = (-1271);
      intArray0[4] = 2;
      intArray0[5] = 0;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 269;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[0];
      MathArrays.scale((-260.590309), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2077.851014;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.linearCombination(2303.498972106, 2077.851014, 1.0, Double.NaN, (-1436.84035979243), Double.NEGATIVE_INFINITY, (-1269.76008), 9953648.162875338);
      MathArrays.equals((float[]) null, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[10];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "org.apache.ommons.math3.util.MathArrays$2";
      stringArray0[6] = "aN:p|LAeoI2&U0]GW6";
      stringArray0[7] = "";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection.values();
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-969.0);
      doubleArray0[1] = 9944220.08951339;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-3106.97818);
      doubleArray0[4] = 53.119678;
      doubleArray0[5] = 1.34217729E8;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 53.119678;
      doubleArray1[1] = 9944220.08951339;
      doubleArray1[2] = 1.34217729E8;
      doubleArray1[3] = (-969.0);
      doubleArray1[4] = 1.34217729E8;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "org.apache.ommons.math3.util.MathArrays$2";
      stringArray0[6] = "aN:p|LAeoI2&U0]GW6";
      stringArray0[7] = "";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection.values();
      long[][] longArray0 = new long[0][2];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3204.0;
      doubleArray0[1] = 1287.40255521;
      doubleArray0[2] = (-860.09);
      doubleArray0[3] = 2153.5;
      doubleArray0[4] = (-1.0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1287.40255521;
      doubleArray1[1] = 2153.5;
      MathArrays.copyOf(doubleArray1);
      MathArrays.linearCombination(0.7249995199969751, (-619.12844081455), (-427.46260159766), (-42.77992033999209), (-1973.58279494), 3204.0, 1287.40255521, 1287.40255521);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 103;
      intArray0[2] = (-1328);
      intArray0[3] = (-1505);
      MathArrays.distance(intArray0, intArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 122, (-1328));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = 6.953787630480924E13;
      double double1 = 1204.51507082;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 10.471483861310386;
      doubleArray0[1] = 10.471483861310386;
      doubleArray0[2] = 6.953787630480924E13;
      doubleArray0[3] = 6.953787630480924E13;
      doubleArray0[4] = 10.471483861310386;
      doubleArray0[5] = 6.953787630480924E13;
      doubleArray0[6] = 10.471483861310386;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not increasing (69,537,876,304,809.24 > 10.471)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[6];
      intArray0[0] = 510;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 510;
      MathArrays.ebeMultiply(doubleArray2, doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2049.311022439024);
      doubleArray0[1] = 1022.623619765;
      doubleArray0[2] = (-3733.466327125);
      String string0 = "aN:p|LAeoI2&U0]GW6";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "aN:p|LAeoI2&U0]GW6";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[2] = "aN:p|LAeoI2&U0]GW6";
      stringArray0[3] = "aN:p|LAeoI2&U0]GW6";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection.values();
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-3733.466327125);
      doubleArray1[1] = (-3733.466327125);
      doubleArray1[2] = (-2049.311022439024);
      doubleArray1[3] = 1022.623619765;
      doubleArray1[4] = 1022.623619765;
      doubleArray1[5] = (-3733.466327125);
      doubleArray1[6] = (-2049.311022439024);
      doubleArray1[7] = (-2049.311022439024);
      doubleArray1[8] = (-2049.311022439024);
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-3,733.466 < -2,049.311)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2049.311022439024);
      doubleArray0[1] = 1022.623619765;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "aN:p|LAeoI2&U0]GW6";
      stringArray0[1] = "aN:p|LAeoI2&U0]GW6";
      stringArray0[2] = "aN:p|LAeoI2&U0]GW6";
      stringArray0[3] = "aN:p|LAeoI2&U0]GW6";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 132);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1.0, 1.7976931348623157E308, 0.0, 0.0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      float[] floatArray0 = new float[5];
      floatArray0[0] = 930.60913F;
      floatArray0[1] = (-1250.5245F);
      floatArray0[2] = 2951.2786F;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 1815.13284219305;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = (-615.041);
      doubleArray2[3] = 1296.57057034;
      doubleArray2[4] = (double) 930.60913F;
      doubleArray2[5] = (double) (-1250.5245F);
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 1.0;
      doubleArray2[8] = (double) 2951.2786F;
      MathArrays.distance(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long[][] longArray0 = new long[4][0];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = (-2187L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 0L;
      longArray2[1] = (-2187L);
      longArray2[2] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = (-2187L);
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = (-2187L);
      longArray3[5] = (-2187L);
      longArray3[6] = (-2187L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = 0L;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 8338937.360647893;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (8,338,937.361 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MathArrays.linearCombination((-753.22), 1204.51507082, 1204.51507082, (-753.22), 20.7096428358966, 20.7096428358966);
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(20.7096428358966);
      doubleArray0[0] = double0;
      Double double1 = new Double((-753.22));
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(1699.64);
      doubleArray0[3] = double3;
      Double double4 = new Double((-226.79353818808494));
      doubleArray0[4] = double4;
      Double double5 = new Double(2.0);
      doubleArray0[5] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4258.32065164);
      doubleArray0[1] = (-250.3);
      doubleArray0[2] = 65.26958998353248;
      doubleArray0[3] = 1645.2526572349368;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      MathArrays.linearCombination(0.06666666666666667, (double) 0.0F, 2486055.0223783473, 0.0, (-1.0), 1.304E19);
      float[] floatArray1 = new float[4];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray1, floatArray1);
      MathArrays.ebeDivide(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("$VALUES");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.$VALUES
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-2049.311022439024);
      doubleArray0[0] = (-2049.311022439024);
      double double1 = 1022.623619765;
      doubleArray0[1] = 1022.623619765;
      double double2 = (-3733.466327125);
      doubleArray0[2] = (-3733.466327125);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "aN:p|LAeoI2&U0]GW6";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[2] = "aN:p|LAeoI2&U0]GW6";
      stringArray0[3] = "aN:p|LAeoI2&U0]GW6";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection.values();
      int int0 = 132;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 132);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 351.890637681;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4258.32065164);
      doubleArray0[1] = (-250.3);
      doubleArray0[2] = (-4258.32065164);
      doubleArray0[3] = 1645.2526572349368;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 684.89575F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, (-2928.6286), 0.0, 2326.0056418882, (-308.5315022471), (-308.5315022471));
      Double double0 = new Double(95191.68787885226);
      Double double1 = new Double((-2928.6286));
      Double double2 = new Double(1.34217729E8);
      Double double3 = new Double(2326.0056418882);
      Double double4 = new Double((-308.5315022471));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.8;
      doubleArray0[1] = 1576.71954157166;
      doubleArray0[2] = 3.141592653589793;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4258.32065164);
      doubleArray0[1] = (-250.3);
      doubleArray0[2] = 0.4138065645655634;
      doubleArray0[3] = 1645.2526572349368;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.checkPositive(doubleArray1);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      doubleArray0[5] = (double) 333;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 501;
      intArray0[2] = 269;
      intArray0[3] = (-1271);
      intArray0[4] = 2;
      intArray0[5] = 0;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[24];
      doubleArray0[0] = (double) 269;
      doubleArray0[1] = (double) 501;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 3.834E-20;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4258.32065164);
      doubleArray0[1] = (-250.3);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1645.2526572349368;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 1645.2526572349368;
      doubleArray2[1] = (-250.3);
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2077.851014;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 701.3053;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 2801.268861933785;
      MathArrays.copyOf(doubleArray0, 547);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      MathArrays.convolve(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 2801.268861933785;
      doubleArray2[1] = 701.3053;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 2801.268861933785;
      MathArrays.linearCombination((-1.0), 701.3053, 1.0, (-3201.8777), 2077.851014, (-2490.28433086));
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      MathArrays.linearCombination((double) 474, 2486055.0223783473, (double) 269, 1159.80031439, 1.0, (-1269.76008), 109.85279, (-1889.53108386717));
      MathArrays.equals((float[]) null, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2077.851014;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-985.2484F);
      floatArray0[1] = (-985.2484F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-615.041);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1205.6856242);
      doubleArray0[4] = 0.0;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      MathArrays.linearCombination(1.304E19, (-1205.6856242), 2.925681159240093E-8, 1.304E19, 2.925681159240093E-8, (-4258.32065164));
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("}P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.}P
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 294;
      intArray0[1] = 258;
      intArray0[2] = 0;
      intArray0[3] = (-3732);
      intArray0[4] = 10;
      intArray0[5] = 0;
      intArray0[6] = (-2576);
      MathArrays.distance(intArray0, intArray0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 294;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 294;
      floatArray0[3] = (float) (-2576);
      floatArray0[4] = (float) 258;
      float[] floatArray1 = new float[1];
      floatArray1[0] = (float) 258;
      MathArrays.equals(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1427;
      MathArrays.distance1(intArray0, intArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1427;
      float float0 = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1976.65F;
      float[] floatArray1 = new float[0];
      MathArrays.equals(floatArray0, floatArray1);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-2147);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2147));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.checkOrder(doubleArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      MathArrays.linearCombination(9953648.162875338, 9953648.162875338, 0.0, (double) 1.0F, (-1436.84035979243), Double.NEGATIVE_INFINITY, 172.8448, Double.NaN);
      MathArrays.equals(floatArray0, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      MathArrays.scale((-8.637232983699599E29), doubleArray0);
      MathArrays.OrderDirection.values();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-957.0F);
      floatArray0[1] = -0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 772.51F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3204.0;
      doubleArray0[1] = 1287.40255521;
      doubleArray0[2] = (-860.09);
      doubleArray0[3] = 2153.5;
      doubleArray0[4] = (-1.0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1287.40255521;
      doubleArray1[1] = 2153.5;
      MathArrays.copyOf(doubleArray1);
      MathArrays.linearCombination(0.7249995199969751, (-619.12844081455), (-427.46260159766), (-42.77992033999209), (-1973.58279494), 3204.0, 1287.40255521, 1287.40255521);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 103;
      intArray0[2] = (-1328);
      intArray0[3] = (-1505);
      MathArrays.distance(intArray0, intArray0);
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 122, (-1328));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MathArrays.linearCombination((-753.22), 1204.51507082, 1204.51507082, (-753.22), 20.7096428358966, 20.7096428358966);
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(20.7096428358966);
      doubleArray0[0] = double0;
      Double double1 = new Double((-753.22));
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(1699.64);
      doubleArray0[3] = double3;
      Double double4 = new Double((-226.79353818808494));
      doubleArray0[4] = double4;
      Double double5 = new Double(2.0);
      doubleArray0[5] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-753.22);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false, false);
      MathArrays.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-493.5);
      doubleArray0[2] = (-615.0410893);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.linearCombination(1.304E19, 1.304E19, 0.0, 0.0, 1.304E19, 1.304E19);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.ommons.math3.util.MathArrays$2";
      stringArray0[3] = "org.apache.ommons.math3.util.MathArrays$2";
      stringArray0[4] = "";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      MathArrays.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 132);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1.0, 1.7976931348623157E308, 0.0, 0.0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      float[] floatArray0 = new float[5];
      floatArray0[0] = 930.60913F;
      floatArray0[1] = (-1250.5245F);
      floatArray0[2] = 2951.2786F;
      MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      int[] intArray0 = new int[9];
      intArray0[0] = 1652;
      intArray0[1] = (-2984);
      intArray0[2] = (-1974);
      intArray0[3] = (-1);
      intArray0[4] = 1605;
      intArray0[5] = 1560;
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = 2125;
      MathArrays.copyOf(intArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 34;
      intArray0[0] = 34;
      int int1 = 118;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long[][] longArray0 = new long[4][0];
      double double0 = 669.1;
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 1.34217729E8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-343.452599417);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      MathArrays.copyOf(intArray0);
      MathArrays.linearCombination(4483.0, (-980.175), (double) 0, Double.NaN, 2153.5, (double) 2, 2536.035, 2412.9659904);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.linearCombination((-760.749), (-2236.128139959), (-3663.314515483841), (-15.6911902), 0.0, (-2236.128139959));
      MathArrays.scale(0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 1.0;
      doubleArray0[0] = 1.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double double1 = 1699.64;
      double double2 = 1.304E19;
      MathArrays.linearCombination(1699.64, 1.304E19, 6.283185307179586, 0.0, (-3524.841164368153), 1.0);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long[][] longArray0 = new long[4][0];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = (-2187L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 0L;
      longArray2[1] = (-2187L);
      longArray2[2] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = (-2187L);
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = (-2187L);
      longArray3[5] = (-2187L);
      longArray3[6] = (-2187L);
      longArray0[0] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = 1294L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 3 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4258.32065164);
      doubleArray0[1] = (-250.3);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1645.2526572349368;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.checkPositive(doubleArray1);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      MathArrays.copyOf(intArray0);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-250.3);
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = (-1.0);
      MathArrays.distance(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-493.5);
      doubleArray0[2] = (-615.0410893);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.linearCombination(1.304E19, 1.304E19, 0.0, 0.0, 1.304E19, 1.304E19);
      MathArrays.scaleInPlace(243542.25, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][5];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 34;
      intArray0[0] = 34;
      intArray0[1] = 118;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2292;
      intArray0[5] = 2295;
      int int1 = 298;
      intArray0[6] = 298;
      MathArrays.copyOf(intArray0);
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-2039.2174));
      doubleArray0[0] = double0;
      Double double1 = new Double((-2860.8069));
      doubleArray0[1] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1.0));
      double[] doubleArray2 = MathArrays.scale(1817.25108125, doubleArray0);
      MathArrays.distance1(doubleArray1, doubleArray2);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      int[] intArray0 = new int[7];
      intArray0[0] = (-2170);
      int int0 = 4823;
      intArray0[1] = 4823;
      intArray0[2] = 0;
      int int1 = 103;
      intArray0[3] = 103;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray2, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4258.32065164);
      doubleArray0[1] = (-250.3);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1645.2526572349368;
      doubleArray0[5] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[3];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      float float1 = 0.0F;
      floatArray0[2] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.checkPositive(doubleArray1);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      MathArrays.OrderDirection.values();
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,258.321 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.8;
      doubleArray0[1] = 1576.71954157166;
      doubleArray0[2] = 3.141592653589793;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.ebeAdd(doubleArray1, doubleArray1);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (-198);
      intArray0[2] = 0;
      intArray0[3] = (-506);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-506);
      longArray0[3] = (long) 1;
      longArray0[4] = (-1327L);
      longArray0[5] = (long) (-506);
      longArray0[6] = (long) (-198);
      longArray0[7] = (long) 1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -506 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4258.32065164);
      doubleArray0[1] = (-250.3);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1645.2526572349368;
      doubleArray0[4] = 1.304E19;
      MathArrays.normalizeArray(doubleArray0, 1.304E19);
      long[] longArray0 = new long[6];
      longArray0[0] = 2212L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2212L;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.checkOrder(doubleArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("OG6I7#5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.OG6I7#5
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.8;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 547);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1235.0;
      doubleArray1[1] = 3.141592653589793;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1566.2466884317594;
      doubleArray1[4] = 3.141592653589793;
      doubleArray1[6] = 1566.2466884317594;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1.0, 1.7976931348623157E308, 0.0, 0.0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      float[] floatArray0 = new float[5];
      floatArray0[0] = 930.60913F;
      floatArray0[1] = (-1250.5245F);
      floatArray0[2] = 2951.2786F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = Float.POSITIVE_INFINITY;
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long[][] longArray0 = new long[4][0];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = (-2187L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 0L;
      longArray2[1] = (-2187L);
      longArray1[0] = 0L;
      longArray0[1] = longArray2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.8;
      doubleArray0[1] = 1576.71954157166;
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      MathArrays.distance(intArray0, intArray1);
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      int int0 = 2162;
      MathArrays.buildArray(field0, 2162, 1);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("znW9HXVN^;Kpo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.znW9HXVN^;Kpo
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long[][] longArray0 = new long[9][5];
      long[] longArray1 = new long[6];
      longArray1[0] = 4503599627370495L;
      longArray1[1] = 0L;
      longArray1[2] = (-3944L);
      longArray1[3] = 0L;
      longArray1[4] = (-4480L);
      longArray1[5] = 532L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = 0L;
      longArray2[1] = 4503599627370495L;
      longArray2[2] = (-3944L);
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = (-4480L);
      longArray2[6] = 4503599627370495L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = 532L;
      longArray3[1] = (-4480L);
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = 0L;
      longArray4[1] = (-3944L);
      longArray4[2] = (-3944L);
      longArray4[3] = (-4480L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = 4503599627370495L;
      longArray5[1] = 532L;
      longArray5[2] = 0L;
      longArray5[3] = (-3944L);
      longArray5[4] = 2806L;
      longArray5[5] = 532L;
      longArray5[6] = 0L;
      longArray5[7] = 0L;
      longArray5[8] = (-3944L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      longArray6[0] = 0L;
      longArray6[1] = (-4480L);
      longArray6[2] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      longArray7[0] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[3];
      longArray8[0] = 2806L;
      longArray8[1] = (-4480L);
      longArray8[2] = (-4480L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[1];
      longArray9[0] = 0L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,944 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2153.5;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,153.5 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 501;
      intArray0[2] = 269;
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = 0;
      MathArrays.copyOf(intArray0);
      MathArrays.linearCombination((double) 501, (double) 0, (double) 0, 20.0, 0.0, (-1892.5723654), 685.704, (-1031.928));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][9];
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 685.704;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 269;
      doubleArray2[6] = 685.704;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) 501;
      doubleArray3[4] = (double) 269;
      doubleArray3[5] = (-2203.70633381512);
      doubleArray3[6] = 0.0;
      doubleArray1[4] = doubleArray3;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.copyOf(doubleArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1573.5F;
      floatArray0[2] = (-185.69096F);
      floatArray0[3] = (-705.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 3007.2556F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1206;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1206, 1206);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 844.6;
      doubleArray0[1] = 1022.623619765;
      doubleArray0[2] = 844.6;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3029.7824251;
      doubleArray0[5] = (-3404.14132252);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,022.624 >= 844.6)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 844.6;
      double double0 = 1022.623619765;
      doubleArray0[1] = 1022.623619765;
      double double1 = (-3733.466327125);
      doubleArray0[2] = (-3733.466327125);
      double double2 = 0.0;
      doubleArray0[3] = 0.0;
      double double3 = 3029.7824251;
      doubleArray0[4] = 3029.7824251;
      double double4 = (-3404.14132252);
      doubleArray0[5] = (-3404.14132252);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,022.624 >= -3,733.466)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1123.622;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double1 = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MathArrays.linearCombination(5443.532414645971, (-55.7165), (-55.7165), (-1172.7));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 5443.532414645971;
      doubleArray0[2] = 5443.532414645971;
      doubleArray0[3] = (-1172.7);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 5443.532414645971;
      doubleArray0[6] = (-1172.7);
      doubleArray0[7] = (-1172.7);
      doubleArray0[8] = 5443.532414645971;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (13,040,000,000,000,000,000 >= 5,443.532)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1.0));
      double[] doubleArray2 = MathArrays.scale(1817.25108125, doubleArray0);
      MathArrays.distance1(doubleArray1, doubleArray2);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      int[] intArray0 = new int[7];
      intArray0[0] = (-2170);
      intArray0[1] = 4823;
      intArray0[2] = 0;
      intArray0[3] = 103;
      intArray0[4] = 139;
      intArray0[5] = (-409);
      intArray0[6] = 1;
      MathArrays.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = (-1271);
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = 269;
      intArray0[6] = 501;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      MathArrays.distance(intArray0, intArray1);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<String>>) null, 0, 2144919086);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3493.5610028428);
      doubleArray0[1] = 706.03248;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 959.3293264515;
      doubleArray0[4] = 1161.5985499;
      double double0 = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = Double.NaN;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1607;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1607, 1607);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equals(doubleArray0, (double[]) null);
      long[][] longArray0 = new long[1][1];
      long[] longArray1 = new long[1];
      longArray1[0] = (-1L);
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 243.4241559017;
      doubleArray0[1] = 3.32;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-5621.858938);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-3629.64251334);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-1);
      intArray0[3] = (-2136);
      intArray0[4] = (-3688);
      intArray0[5] = 1000000000;
      intArray0[6] = 32;
      intArray0[7] = 276;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-276));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2077.851014;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 701.3053;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 2801.268861933785;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 547);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.0;
      MathArrays.convolve(doubleArray0, doubleArray2);
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 2801.268861933785;
      doubleArray3[1] = 701.3053;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 2801.268861933785;
      doubleArray3[4] = 1.304E19;
      doubleArray3[5] = 701.3053;
      doubleArray3[6] = 701.3053;
      doubleArray3[7] = 2077.851014;
      doubleArray3[8] = 2077.851014;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2183.17479;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-331.198016);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2699.289123;
      doubleArray0[6] = (-5246.0);
      doubleArray0[7] = 3.834E-20;
      doubleArray0[8] = 0.0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,183.175 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4258.32065164);
      doubleArray0[1] = (-250.3);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1645.2526572349368;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.checkPositive(doubleArray1);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 310;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.ebeAdd(doubleArray1, doubleArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 310;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 310;
      longArray0[3] = (long) 310;
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2171.194514);
      doubleArray0[2] = 1004.0;
      doubleArray0[3] = Double.NaN;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.normalizeArray(doubleArray1, (-2171.194514));
      MathArrays.normalizeArray(doubleArray0, 0.0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray1, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1.0, 1.7976931348623157E308, 0.0, 0.0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 20.7096428358966;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 1.7976931348623157E308;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      MathArrays.linearCombination(585.961462854889, 221.1, 1.7976931348623157E308, (-3733.466327125), (-927.62367438), 1.0);
      MathArrays.convolve(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.checkOrder(doubleArray0);
      MathArrays.scale(1.3421323818429741E8, doubleArray0);
      MathArrays.OrderDirection.values();
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-207.49F);
      floatArray0[1] = 0.5F;
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      double double0 = new Double((-207.49F));
      int[] intArray0 = new int[4];
      floatArray0[0] = (float) 518;
      intArray0[1] = 134217729;
      intArray0[2] = 542;
      intArray0[3] = (-1219);
      MathArrays.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-493.5);
      doubleArray0[2] = (-615.0410893);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.linearCombination(1.304E19, 1.304E19, 0.0, 0.0, 1.304E19, 1.304E19);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.ommons.math3.util.MathArrays$2";
      stringArray0[3] = "org.apache.ommons.math3.util.MathArrays$2";
      stringArray0[4] = "";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      MathArrays.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 132);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4258.32065164);
      doubleArray0[1] = (-250.3);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1645.2526572349368;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.checkPositive(doubleArray1);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 310;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 310;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 310;
      MathArrays.copyOf(intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      MathArrays.distance1(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 857.42304;
      doubleArray0[1] = (-1000.13);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 2726.640929652361;
      doubleArray0[4] = 1925.6361615932103;
      doubleArray0[5] = 703.4;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (857.423 >= -1,000.13)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-493.5);
      doubleArray0[2] = (-615.0410893);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.linearCombination(1.304E19, 1.304E19, 0.0, 0.0, 1.304E19, 1.304E19);
      float[] floatArray0 = null;
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.8;
      doubleArray0[1] = 1576.71954157166;
      doubleArray0[2] = 3.141592653589793;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.linearCombination(109.85279, 1.3039999999999998E19, 3.141592653589793, 3.141592653589793, 1576.71954157166, 1.633123935319537E16, 2801.268861933785, 1576.71954157166);
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1311);
      MathArrays.convolve(doubleArray0, doubleArray1);
      MathArrays.linearCombination((-2490.28433086), 517.757174594, 20.7096428358966, 1.0, 2169.796048377, 1.0);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.ebeDivide(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 34;
      intArray0[1] = 118;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2292;
      intArray0[5] = 2295;
      intArray0[6] = 298;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {34, 118, 0, 0, 2292, 2295, 298}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-2039.2174));
      doubleArray0[0] = double0;
      Double double1 = new Double((-2860.8069));
      doubleArray0[1] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1824.0442F);
      floatArray0[1] = (-437.58926F);
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-2025.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1269.76008);
      doubleArray0[1] = (-2536.035);
      doubleArray0[2] = (-1381.9712379106);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 6.283185307179586;
      doubleArray0[7] = 0.0;
      MathArrays.safeNorm(doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1,269.76 >= -2,536.035)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-343.452599417);
      doubleArray0[1] = 1699.64;
      doubleArray0[2] = (-1170.806518214);
      doubleArray0[3] = (-1357.1834687804635);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 221.1;
      doubleArray0[6] = (-656.393717986829);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-343.453 < 1,699.64)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2558.21304;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.scale(3.834E-20, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 3.834E-20;
      doubleArray1[3] = 2558.21304;
      doubleArray1[4] = 3.834E-20;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 2558.21304;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 105;
      intArray0[1] = 772;
      intArray0[2] = 3403;
      intArray0[3] = 257;
      int[] intArray1 = MathArrays.copyOf(intArray0, 105);
      assertEquals(105, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.0;
      double double2 = 2196.48650845283;
      MathArrays.linearCombination(0.0, 0.0, 2196.48650845283, 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2196.48650845283;
      doubleArray0[5] = 2196.48650845283;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1241.1;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = 1013.1334456703363;
      doubleArray0[4] = 345.637653;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 3643.119;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 20.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1091.0);
      doubleArray1[1] = 1241.1;
      doubleArray1[2] = 20.0;
      doubleArray1[3] = 1241.1;
      doubleArray1[4] = 20.0;
      doubleArray1[5] = 20.0;
      doubleArray1[6] = 1241.1;
      doubleArray1[7] = 1013.1334456703363;
      doubleArray1[8] = 3643.119;
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {-0.0, 1540329.2099999997, 400.0, 1257399.9194214542, 6912.75306, 2.608E20, 4521474.9909, 0.0, 72862.38}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.141592653589793;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double double0 = MathArrays.linearCombination((-20.0), (-2722.493), 927.2828397731, (-2722.493), 0.0, 927.2828397731, 0.0, 1.0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1607.0F);
      floatArray0[1] = (-577.8021F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-2055.293F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = 754.6365F;
      floatArray0[7] = 2617.8315F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double double1 = MathArrays.linearCombination((double) (-577.8021F), 0.0, 3.141592653589793, Double.POSITIVE_INFINITY, 0.0, (double) (-2055.293F), (-1585.59), (-2054.5827879));
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1851.2);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2364.666632584);
      doubleArray0[4] = 296.66724;
      doubleArray0[5] = (-1867.29448224688);
      doubleArray0[6] = 669.1;
      doubleArray0[7] = 1524.46039175388;
      doubleArray0[8] = (-4497.0);
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-4497.0));
      MathArrays.equals(doubleArray1, doubleArray1);
      MathArrays.linearCombination((-2364.666632584), 1.304E19, 0.0, 0.0, 1.304E19, (-1831.5121387634), (-1867.29448224688), (-2364.666632584));
      long[][] longArray0 = new long[9][1];
      long[] longArray1 = new long[3];
      longArray1[0] = (-1614L);
      longArray1[1] = 0L;
      longArray1[2] = (-994L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = (-994L);
      longArray2[1] = (-1614L);
      longArray2[2] = (-1614L);
      longArray2[3] = (-994L);
      longArray2[4] = (-1614L);
      longArray2[5] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = (-1614L);
      longArray3[3] = 0L;
      longArray3[4] = (-1614L);
      longArray3[5] = (-1614L);
      longArray3[6] = (-1614L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      longArray4[0] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      longArray5[0] = 0L;
      longArray5[1] = 0L;
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray5[4] = (-994L);
      longArray5[5] = 0L;
      longArray5[6] = (-1L);
      longArray5[7] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      longArray7[0] = (-400L);
      longArray7[1] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[3];
      longArray8[0] = (-400L);
      longArray8[1] = (-994L);
      longArray8[2] = (-1L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[0];
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 240.4834344;
      doubleArray0[1] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double double0 = MathArrays.linearCombination(0.0, 0.0, 1.34217729E8, 0.0, (-2974.202759085812), (-1950.8091881799148), (-2974.202759085812), 0.0);
      assertEquals(5802102.069934656, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double double0 = (-460.247274);
      double double1 = (-761.4605473811681);
      MathArrays.linearCombination((-460.247274), (-460.247274), (-761.4605473811681), (-460.247274), (-460.247274), (-460.247274), (-761.4605473811681), (-460.247274));
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("overflow: lcm({0}, {1}) is 2^63");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.overflow: lcm({0}, {1}) is 2^63
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
