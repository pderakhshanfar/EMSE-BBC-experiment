/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:47:37 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<Object> fieldElement0 = (FieldElement<Object>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      FieldElement<Object> fieldElement1 = (FieldElement<Object>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0).when(field0).getZero();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1492;
      doubleArray0[1] = (double) 1492;
      doubleArray0[2] = (double) 1492;
      doubleArray0[3] = 0.01745329052209854;
      doubleArray0[4] = (double) 1492;
      doubleArray0[5] = 2696.0;
      doubleArray0[6] = (double) 1492;
      doubleArray0[7] = (double) 1492;
      doubleArray0[8] = (double) 1492;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1492.0, 1492.0, 1492.0, 0.01745329052209854, 1492.0, 2696.0, 1492.0, 1492.0, 1492.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      FieldElement<Object>[] fieldElementArray0 = MathArrays.buildArray(field0, 1492);
      assertEquals(1492, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3333.189243185957;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 343.918757723;
      doubleArray0[3] = 1.639101597131499E12;
      doubleArray0[4] = 1.7976931348623157E308;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {3333.189243185957, 1.304E19, 343.918757723, 1.639101597131499E12, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1660099222737955E-7;
      doubleArray0[1] = 6.52E18;
      doubleArray0[2] = (-3299.0092344079117);
      doubleArray0[3] = (-1161.697905);
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 0.14285714285714285;
      doubleArray0[6] = 1.8307188599677033E-8;
      doubleArray0[7] = (-1.0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3.1660099222737955E-7, 6.52E18, (-3299.0092344079117), (-1161.697905), 1.304E19, 0.14285714285714285, 1.8307188599677033E-8, (-1.0)}, doubleArray0, 0.01);
      assertEquals(1.4579163213298629E19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      FieldElement<Object>[][] fieldElementArray0 = MathArrays.buildArray(field0, 1492, 1492);
      assertEquals(1492, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2.2860509143963117E-8;
      doubleArray0[1] = 1.86285714285714278E18;
      doubleArray0[2] = 0.25;
      doubleArray0[3] = (-2488.32721);
      doubleArray0[4] = 1128.577785992465;
      doubleArray0[5] = 2101.4756677213;
      doubleArray0[6] = (-452.6763325728121);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.2860509143963117E-8, 1.86285714285714278E18, 0.25, (-2488.32721), 1128.577785992465, 2101.4756677213, (-452.6763325728121)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2.2860509143963117E-8, 1.86285714285714278E18, 0.25, (-2488.32721), 1128.577785992465, 2101.4756677213, (-452.6763325728121)}, doubleArray0, 0.01);
      assertEquals(1.86285714285714278E18, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.2860509143963117E-8, 1.86285714285714278E18, 0.25, (-2488.32721), 1128.577785992465, 2101.4756677213, (-452.6763325728121)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4.503599627370496E15);
      doubleArray0[1] = 994.0;
      doubleArray0[2] = 3592.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 2385.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-4.503599627370496E15), 994.0, 3592.0, Double.NaN, 2385.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-4.503599627370496E15), 994.0, 3592.0, Double.NaN, 2385.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      MathArrays.scaleInPlace(1.86285714285714278E18, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-8.389562734415895E33), 1.85168E21, 6.691382857142857E21, Double.NaN, 4.442914285714286E21}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-7.038029000536037E-17));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-8.389562734415895E33), 1.85168E21, 6.691382857142857E21, Double.NaN, 4.442914285714286E21}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-7.038029000546931E-17), 1.553379830664092E-29, 5.613420877007463E-29, Double.NaN, 3.7271739397724946E-29}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {(-8.389562734415895E33), 1.85168E21, 6.691382857142857E21, Double.NaN, 4.442914285714286E21}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-7.038029000546931E-17), 1.553379830664092E-29, 5.613420877007463E-29, Double.NaN, 3.7271739397724946E-29}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Field<Pair<FieldElement<Double>, Integer>> field0 = (Field<Pair<FieldElement<Double>, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-2062);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2062));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1053.0062996148213;
      doubleArray0[1] = 4878.4;
      doubleArray0[2] = (-1381.0);
      doubleArray0[3] = 3.7271739397724946E-29;
      doubleArray0[4] = (-1.401298464324817E-45);
      doubleArray0[2] = 2285.8179827433;
      doubleArray0[6] = (-2830.0773877929005);
      double double0 = new Double((-1.401298464324817E-45));
      assertEquals((-1.401298464324817E-45), double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1053.0062996148213, 4878.4, 2285.8179827433, 3.7271739397724946E-29, (-1.401298464324817E-45), 0.0, (-2830.0773877929005)}, doubleArray0, 0.01);
      assertEquals(6175.9137541061755, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 100.0;
      doubleArray0[3] = 100.0;
      doubleArray0[4] = 100.0;
      doubleArray0[5] = 100.0;
      doubleArray0[6] = (-1415.92883172905);
      doubleArray0[7] = 100.0;
      double[] doubleArray1 = MathArrays.scale(100.0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {100.0, 100.0, 100.0, 100.0, 100.0, 100.0, (-1415.92883172905), 100.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {10000.0, 10000.0, 10000.0, 10000.0, 10000.0, 10000.0, (-141592.88317290499), 10000.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 100.0;
      doubleArray2[1] = (-1415.92883172905);
      doubleArray2[2] = (-1415.92883172905);
      doubleArray2[3] = 100.0;
      doubleArray2[4] = 100.0;
      doubleArray2[5] = 100.0;
      doubleArray2[6] = 100.0;
      doubleArray2[7] = 100.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {100.0, 100.0, 100.0, 100.0, 100.0, 100.0, (-1415.92883172905), 100.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {100.0, (-1415.92883172905), (-1415.92883172905), 100.0, 100.0, 100.0, 100.0, 100.0}, doubleArray2, 0.01);
      assertEquals((-374778.649518715), double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2146849798;
      intArray0[1] = (-924);
      intArray0[2] = 221;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1;
      intArray1[1] = (-924);
      intArray1[2] = 2146849798;
      intArray1[3] = 2146849798;
      intArray1[4] = 221;
      intArray1[5] = 221;
      intArray1[6] = 221;
      intArray1[7] = 221;
      intArray1[8] = 221;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2146849798, (-924), 221}, intArray0);
      assertArrayEquals(new int[] {1, (-924), 2146849798, 2146849798, 221, 221, 221, 221, 221}, intArray1);
      assertEquals((-1267922), int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.8389248958353506E-24;
      doubleArray0[1] = (-3387.0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.8389248958353506E-24, (-3387.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4737344355864458E-47, (-2.6004877244388666E-20), 1.1471769E7}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3.8389248958353506E-24, (-3387.0)}, doubleArray0, 0.01);
      assertEquals(3387.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1404.8088F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = Float.NEGATIVE_INFINITY;
      floatArray0[3] = 564.8205F;
      floatArray0[4] = (-1008.0F);
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1404.8088F), 0.0F, Float.NEGATIVE_INFINITY, 564.8205F, (-1008.0F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 564.8205F;
      doubleArray0[1] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) (-1008.0F);
      doubleArray0[3] = (double) (-1404.8088F);
      try { 
        MathArrays.normalizeArray(doubleArray0, (-1008.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-392.5999444963);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1872.6;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 3148.35390306;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-392.5999444963), 1.304E19, (-1.0), 1872.6, 1.34217729E8, 1.0, 1.304E19, 3148.35390306}, doubleArray0, 0.01);
      assertEquals(1.8441344853345161E19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long[][] longArray0 = new long[30][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(30, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-2550.817);
      doubleArray0[2] = 1.4499990399939502;
      doubleArray0[3] = 391.1755476802;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 6.52E18;
      doubleArray0[6] = 3627.303017;
      doubleArray0[7] = (-3148.35390306);
      doubleArray0[8] = 275.44767086563;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-2550.817), 1.4499990399939502, 391.1755476802, 1.304E19, 6.52E18, 3627.303017, (-3148.35390306), 275.44767086563}, doubleArray0, 0.01);
      assertEquals(1.4579163213298629E19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-605.0F);
      floatArray0[1] = 2247.7844F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 49.865F;
      floatArray0[4] = (-2246.5637F);
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 2247.7844F;
      floatArray1[1] = 2247.7844F;
      floatArray1[2] = 49.865F;
      floatArray1[3] = (-2246.5637F);
      floatArray1[4] = (-605.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-605.0F), 2247.7844F, (-1.0F), 49.865F, (-2246.5637F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2247.7844F, 2247.7844F, 49.865F, (-2246.5637F), (-605.0F)}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 4577762542105553359L;
      longArray0[1] = (-5034868814120038111L);
      longArray0[2] = (-1493L);
      longArray0[3] = 25L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -5,034,868,814,120,038,111 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 11;
      intArray0[1] = 20;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 11;
      intArray1[1] = 839;
      intArray1[2] = 11;
      intArray1[3] = 11;
      intArray1[4] = 2;
      intArray1[5] = 11;
      intArray1[6] = 20;
      intArray1[7] = 11;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {11, 20}, intArray0);
      assertArrayEquals(new int[] {11, 839, 11, 11, 2, 11, 20, 11}, intArray1);
      assertEquals(819, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 11;
      doubleArray0[1] = (double) 11;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 839);
      assertEquals(839, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {11.0, 11.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertEquals(839, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {11.0, 11.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {11, 20}, intArray0);
      assertArrayEquals(new int[] {11, 839, 11, 11, 2, 11, 20, 11}, intArray1);
      assertEquals(819.0, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertEquals(839, doubleArray1.length);
      assertEquals(839, doubleArray2.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {11.0, 11.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1357.8833F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 0.0F;
      floatArray0[4] = Float.POSITIVE_INFINITY;
      floatArray0[5] = (-4052.0625F);
      floatArray0[6] = (-1.4E-45F);
      floatArray0[7] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {1357.8833F, 0.0F, Float.NaN, 0.0F, Float.POSITIVE_INFINITY, (-4052.0625F), (-1.4E-45F), Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, Float.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (-1908.255454020871);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-520.57137);
      doubleArray0[4] = 3208.93548;
      doubleArray0[5] = 2466.0707756;
      doubleArray0[6] = (-1705.24);
      doubleArray0[7] = 2299.8217;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.34217729E8, (-1908.255454020871), Double.NaN, (-520.57137), 3208.93548, 2466.0707756, (-1705.24), 2299.8217}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-57.4);
      doubleArray0[1] = 2349.49984767;
      doubleArray0[2] = 764.891141;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-2085.1);
      doubleArray0[5] = Double.NaN;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2938.581320545235);
      doubleArray0[1] = 1081.0098030425;
      doubleArray0[2] = 125.61072938;
      doubleArray0[3] = 2.9711701664493005E11;
      doubleArray0[4] = (-1650.1);
      doubleArray0[5] = 1000.110433837173;
      doubleArray0[6] = 63.84515283006;
      doubleArray0[7] = 1286.306;
      doubleArray0[8] = 936.4;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2938.581320545235), 1081.0098030425, 125.61072938, 2.9711701664493005E11, (-1650.1), 1000.110433837173, 63.84515283006, 1286.306, 936.4}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2938.581320545235), 1081.0098030425, 125.61072938, 2.9711701664493005E11, (-1650.1), 1000.110433837173, 63.84515283006, 1286.306, 936.4}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2.9711701664393005E11, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(5403.5985505722, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 5403.5985505722;
      doubleArray1[1] = 5403.5985505722;
      doubleArray1[2] = 5403.5985505722;
      doubleArray1[3] = 5403.5985505722;
      doubleArray1[4] = 5403.5985505722;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1632.1F);
      floatArray0[1] = 1009.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (-1419.662F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 856.0023F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1632.1F), 1009.0F, 1.0F, Float.NaN, (-1419.662F), 0.0F, (-1.0F), 856.0023F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Double double1 = new Double(1.0E-6);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.0E-6, (double)double1, 0.01);
      assertNotNull(double1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-808.4F);
      floatArray0[5] = 417.5334F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, (-808.4F), 417.5334F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (-363.35455F);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-363.35455F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scale((-363.35455F), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1443;
      intArray0[1] = (-305);
      intArray0[2] = (-1008);
      intArray0[3] = (-2882);
      intArray0[4] = 569;
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = 2143579132;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1008);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = null;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 469.982079;
      doubleArray0[1] = (-3.43338934259355E-8);
      doubleArray0[2] = 310.80421267843326;
      doubleArray0[3] = 0.6409968137741089;
      doubleArray0[4] = (-561.6476923106);
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1402);
      intArray0[1] = 1;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 21;
      intArray1[1] = 1;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1402), 1}, intArray0);
      assertArrayEquals(new int[] {21, 1}, intArray1);
      assertEquals(1423, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 139.0;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 1334.6;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1451.1488038);
      doubleArray0[7] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, 139.0, 0.0, 3.834E-20, 1334.6, 0.0, (-1451.1488038), 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.304E19, 139.0, 0.0, 3.834E-20, 1334.6, 0.0, (-1451.1488038), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 139.0, 0.0, 3.834E-20, 1334.6, 0.0, (-1451.1488038), 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1389L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1389L, 0L, 0L}, longArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 0.0);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.304E19, 139.0, 0.0, 3.834E-20, 1334.6, 0.0, (-1451.1488038), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 139.0, 0.0, 3.834E-20, 1334.6, 0.0, (-1451.1488038), 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      double double1 = MathArrays.distance(doubleArray2, doubleArray1);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.304E19, 139.0, 0.0, 3.834E-20, 1334.6, 0.0, (-1451.1488038), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 139.0, 0.0, 3.834E-20, 1334.6, 0.0, (-1451.1488038), 0.0}, doubleArray1, 0.01);
      assertEquals(1.304E19, double1, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      try { 
        MathArrays.normalizeArray(doubleArray2, (-1851.0));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1129.0;
      doubleArray2[1] = 1129.0;
      doubleArray2[2] = 1129.0;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray2, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = new long[0];
      MathArrays.checkNonNegative(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, (-3104));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1947.781973880202);
      doubleArray0[1] = (-1947.781973880202);
      doubleArray0[2] = (-1947.781973880202);
      doubleArray0[3] = (-1947.781973880202);
      doubleArray0[4] = (-1947.781973880202);
      doubleArray0[5] = (-1947.781973880202);
      doubleArray0[6] = (-1947.781973880202);
      MathArrays.scaleInPlace((-1947.781973880202), doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {3793854.617772656, 3793854.617772656, 3793854.617772656, 3793854.617772656, 3793854.617772656, 3793854.617772656, 3793854.617772656}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[20];
      intArray0[0] = 1048;
      intArray0[3] = 1048;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(20, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1048;
      doubleArray0[1] = (-3239.0771514);
      doubleArray0[2] = (double) 1048;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (double) 1048;
      doubleArray0[5] = (double) 1048;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1048.0, (-3239.0771514), 1048.0, 1.304E19, 1048.0, 1048.0}, doubleArray0, 0.01);
      assertEquals(1.304E19, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1048.0, (-3239.0771514), 1048.0, 1.304E19, 1048.0, 1048.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(20, intArray0.length);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[3][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[1][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 6;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 6;
      doubleArray2[1] = (double) 6;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Double double0 = new Double((-481.085546936));
      assertEquals((-481.085546936), (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2927.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2927.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[7] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1202.22821464;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[2];
      intArray0[0] = 4005;
      intArray0[1] = (-725);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {4005, (-725)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(0.7937005259840998, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 156;
      intArray0[1] = 156;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {156, 156}, intArray0);
      assertEquals(0.0, double1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale(1129.0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      long[][] longArray0 = new long[2][0];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 155L;
      longArray0[1] = 155L;
      longArray0[2] = 155L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {155L, 155L, 155L}, longArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 155L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {155.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-572);
      intArray0[1] = (-572);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-572), (-572)}, intArray0);
      assertEquals(0, int0);
      
      long[][] longArray1 = new long[6][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(6, longArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-572));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[7] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 155L;
      longArray0[1] = 155L;
      longArray0[2] = 155L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {155L, 155L, 155L}, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-572);
      intArray0[1] = (-2809);
      intArray0[2] = (-572);
      intArray0[3] = (-572);
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3848;
      intArray1[1] = (-572);
      intArray1[2] = (-1904);
      intArray1[3] = (-2809);
      intArray1[4] = (-572);
      intArray1[5] = (-572);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-572), (-2809), (-572), (-572)}, intArray0);
      assertArrayEquals(new int[] {3848, (-572), (-1904), (-2809), (-572), (-572)}, intArray1);
      assertEquals(5596.33469335064, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertTrue(boolean1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1623.9363);
      doubleArray0[1] = 3059.601;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1151.522F;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1151.522F;
      doubleArray1[1] = (double) 1151.522F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1151.52197265625, 1151.52197265625}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[][] doubleArray2 = new double[3][7];
      doubleArray2[0] = null;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = null;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[3][9];
      doubleArray1[0] = doubleArray0;
      Double double0 = new Double(518.537);
      assertEquals(518.537, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3.1660099222737955E-7;
      doubleArray3[1] = 518.537;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1491.0;
      doubleArray0[1] = 239.3;
      doubleArray0[2] = 1202.22821464;
      doubleArray0[3] = (-1795.39057);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1491.0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1491.0, 239.3, 1202.22821464, (-1795.39057)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1954.9796899950425, 313.76702871617283, 1576.3459036621064, (-2354.092622373322)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 239.3;
      doubleArray2[1] = 1202.22821464;
      doubleArray2[2] = 1491.0;
      doubleArray2[3] = 1202.22821464;
      doubleArray2[4] = (-1795.39057);
      doubleArray2[5] = (-1795.39057);
      doubleArray2[6] = 1202.22821464;
      doubleArray2[7] = 1491.0;
      doubleArray2[8] = 1491.0;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1202.22821464;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 1202.22821464;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, Double.NaN, 1202.22821464, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, Double.NaN, 1202.22821464, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[5];
      intArray0[1] = 156;
      intArray0[2] = 156;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, Double.NaN, 1202.22821464, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, Double.NaN, 1202.22821464, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Double double0 = new Double(-0.0);
      assertEquals(-0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.0);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0.0);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double3;
      doubleArray0[1] = double3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1349), 77);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[] floatArray0 = new float[9];
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1151.522F;
      floatArray0[1] = 1151.522F;
      floatArray0[2] = 1151.522F;
      floatArray0[3] = 1151.522F;
      floatArray0[4] = 1151.522F;
      floatArray0[5] = 1151.522F;
      floatArray0[7] = 1151.522F;
      floatArray0[8] = 1151.522F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1151.522F, 1151.522F, 1151.522F, 1151.522F, 1151.522F, 1151.522F, 0.0F, 1151.522F, 1151.522F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = 0.3153223395347595;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.3153223395347595);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Double double0 = new Double(-0.0);
      assertEquals(-0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.0);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0.0);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double3;
      doubleArray0[1] = double3;
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = 4;
      double double4 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {4, 4, 4, 4, 4}, intArray0);
      assertEquals(0.0, double4, 0.01);
      
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (double) 4;
      doubleArray1[2] = (double) 4;
      doubleArray1[3] = (-3413.55385057864);
      doubleArray1[4] = (double) 4;
      doubleArray1[5] = (double) 4;
      doubleArray1[6] = (double) 4;
      double double5 = MathArrays.safeNorm(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertNotEquals(double5, double4, 0.01);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, (-3413.55385057864), 4.0, 4.0, 4.0}, doubleArray1, 0.01);
      assertEquals(3413.5679121412336, double5, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1907.0017F;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {1907.0017F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {1907.0017F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean2);
      
      boolean boolean3 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean3);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1202.22821464;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[7] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2141180435;
      doubleArray0[1] = (double) 0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {2.141180435E9, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      MathArrays.buildArray(field0, 2141180435, 0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2795.0684240394);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 534.2290701558989;
      doubleArray0[7] = 0.0;
      int[] intArray0 = new int[1];
      int int0 = (-655);
      intArray0[0] = (-655);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-655)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, (-1.0), (-2795.0684240394), 0.0, 3.834E-20, 534.2290701558989, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2845.671919403102, double1, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1202.22821464;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 1202.22821464;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, Double.NaN, 1202.22821464, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, Double.NaN, 1202.22821464, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[5];
      intArray0[1] = 156;
      intArray0[2] = 156;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(14, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2184.1785F;
      floatArray0[1] = (-69.23016F);
      floatArray0[2] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {2184.1785F, (-69.23016F), 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double double1 = MathArrays.linearCombination(0.0, (double) (-69.23016F), (double) 2184.1785F, 4957.943232683, (double) (-69.23016F), (double) (-69.23016F));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.083382566397601E7, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(14, doubleArray0.length);
      assertEquals(27, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertEquals(14, doubleArray0.length);
      assertEquals(27, doubleArray1.length);
      assertEquals(27, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-481.085546936), 0.0, 2927.0, (-481.085546936), 518.537, 2927.0);
      assertEquals(109620.40311832806, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-414.3491);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-414.3491)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3059.601;
      doubleArray0[1] = 3059.601;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 20;
      intArray0[1] = 268;
      intArray0[2] = 268;
      intArray0[3] = 268;
      intArray0[5] = 243;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 243;
      intArray1[1] = 268;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = 3059.601;
      int int0 = 16;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1202.22821464;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 1202.22821464;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, Double.NaN, 1202.22821464, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2466.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = -0.0F;
      floatArray0[3] = 1262.1576F;
      floatArray0[4] = (-412.728F);
      doubleArray0[1] = (double) 1417.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-2466.0F), 0.0F, -0.0F, 1262.1576F, (-412.728F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-2466.0F), 0.0F, -0.0F, 1262.1576F, (-412.728F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {1202.22821464, 1417.0, 0.0, Double.NaN, 1202.22821464, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1202.22821464;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 1202.22821464;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, Double.NaN, 1202.22821464, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, Double.NaN, 1202.22821464, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3027;
      intArray0[1] = 156;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1202.22821464;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 1202.22821464;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, Double.NaN, 1202.22821464, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, Double.NaN, 1202.22821464, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3027;
      intArray0[1] = 156;
      intArray0[2] = (-2711);
      intArray0[3] = 4;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {3027, 156, (-2711), 4, 0}, intArray0);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, Double.NaN, 1202.22821464, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 20.0;
      double double0 = 645.499959;
      doubleArray0[1] = 645.499959;
      double double1 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[4] = 1.0E-5;
      doubleArray0[5] = 2501.8922629;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {20.0, 645.499959, 0.0, 0.0, 1.0E-5, 2501.8922629}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {40.0, 1290.999918, 0.0, 0.0, 2.0E-5, 5003.7845258}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-778L);
      longArray0[1] = 3616L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (645.5 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 645.499959;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[4] = 1.0E-5;
      doubleArray0[5] = 2501.8922629;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {20.0, 645.499959, 0.0, 0.0, 1.0E-5, 2501.8922629}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {40.0, 1290.999918, 0.0, 0.0, 2.0E-5, 5003.7845258}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray0 = new long[8][0];
      long[] longArray1 = new long[8];
      longArray1[0] = (-778L);
      longArray1[1] = 3616L;
      longArray1[2] = (-1L);
      longArray1[3] = 1389L;
      longArray1[4] = (-1L);
      longArray1[5] = (-1215L);
      longArray1[6] = 17L;
      longArray1[7] = (-2564L);
      longArray0[5] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-604L);
      longArray2[1] = 1389L;
      longArray2[2] = (-1L);
      longArray2[3] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray3[1] = (-1L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 1389L;
      longArray4[1] = 0L;
      longArray4[2] = (-778L);
      longArray4[3] = 1389L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 0L;
      longArray5[1] = (-778L);
      longArray5[2] = 0L;
      longArray5[3] = 17L;
      longArray5[4] = 270L;
      longArray5[5] = 17L;
      longArray5[6] = (-778L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = (-1L);
      longArray6[1] = (-1L);
      longArray6[2] = (-778L);
      longArray6[3] = (-778L);
      longArray6[4] = (-604L);
      longArray6[5] = (-1L);
      longArray6[6] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[5];
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray2));
      
      longArray7[0] = (-2564L);
      longArray7[1] = 1389L;
      longArray7[2] = (-1L);
      longArray7[3] = (-2564L);
      longArray7[4] = (-604L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[2];
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray7));
      
      longArray8[0] = 17L;
      longArray8[1] = 1389L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-10.2);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-10.2)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 104.03999999999999}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = new Double((-10.2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-10.2), double1, 0.01);
      
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1907.0017F;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {1907.0017F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new float[] {1907.0017F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean2);
      
      boolean boolean3 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1.0), Double.NaN, 512.0, (-1.0), 512.0, 20.129091050551);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (-10.2);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-10.2), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 104.03999999999999, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-10.2), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 104.03999999999999, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1975.2481086255;
      doubleArray1[1] = (-612.2382087146);
      doubleArray1[2] = (-2359.308);
      doubleArray1[3] = (-232.21255);
      doubleArray1[4] = (-3326.591158852047);
      doubleArray1[5] = 3.834E-20;
      doubleArray1[6] = (-1431.226);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-82.01880425582048);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2203.149719759);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-82.01880425582048), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2203.149719759, -0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-82.01880425582048), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-82.01880425582048), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2203.149719759, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2285.168524014821, -0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray3, (MathArrays.OrderDirection) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1202.22821464;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray3);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1202.22821464, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3059.601;
      doubleArray0[1] = 1303.7;
      doubleArray0[2] = (-527.259);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3059.601, 1303.7, (-527.259), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][4];
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1303.7;
      doubleArray2[1] = 3059.601;
      doubleArray2[2] = 1303.7;
      doubleArray2[3] = 3363.562303006;
      doubleArray2[4] = (-1633.0651964121);
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 4593;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = 1907.0017F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 4593.0F, 0.0F, 0.0F, 1907.0017F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 4593.0F, 0.0F, 0.0F, 1907.0017F}, floatArray0, 0.01F);
      assertTrue(boolean2);
      
      boolean boolean3 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "column index ({0})";
      stringArray0[1] = "NOT_DECREASING_SEQUENCE";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-2399.7703F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-3695.1F);
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1.4E-45F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = (-1583.0138F);
      floatArray1[6] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-2399.7703F), 0.0F, 0.0F, 1.0F, 0.0F, (-3695.1F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.4E-45F, 0.0F, 0.0F, (-1583.0138F), 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = (-10.2);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 1.7976931348623157E308, (-10.2), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 104.03999999999999, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      longArray1[1] = (-395L);
      longArray1[2] = (-7278142539171889152L);
      longArray1[3] = 0L;
      longArray1[4] = (-1015L);
      longArray1[5] = 155L;
      try { 
        MathArrays.checkNonNegative(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -395 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = 0L;
      longArray0[0] = 0L;
      long long1 = 155L;
      longArray0[1] = 155L;
      long long2 = 47L;
      longArray0[2] = 47L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 155L, 47L}, longArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-1205);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1205));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2665.59224815062);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2299.8217;
      doubleArray0[7] = 15.0;
      doubleArray0[8] = 2301.16549846642;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, (-2665.59224815062), 0.0, 0.0, 0.0, 2299.8217, 15.0, 2301.16549846642, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(1398.7, 15.0, 0.0, 2299.8217, 2299.8217, 0.0);
      assertEquals(20980.5, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.scale((-1.0), doubleArray1);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, (-2665.59224815062), 0.0, 0.0, 0.0, 2299.8217, 15.0, 2301.16549846642, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, (-1.0), Double.NaN, Double.NaN, Double.NaN, (-1.0), (-1.0), (-1.0), Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertEquals(10, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, (-2665.59224815062), 0.0, 0.0, 0.0, 2299.8217, 15.0, 2301.16549846642, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, (-2665.59224815062), Double.NaN, Double.NaN, Double.NaN, 2299.8217, 15.0, 2301.16549846642, Double.NaN}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray3, 0.0);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertEquals(10, doubleArray3.length);
      assertEquals(10, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, (-2665.59224815062), 0.0, 0.0, 0.0, 2299.8217, 15.0, 2301.16549846642, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, (-2665.59224815062), Double.NaN, Double.NaN, Double.NaN, 2299.8217, 15.0, 2301.16549846642, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, -0.0, Double.NaN, Double.NaN, Double.NaN, 0.0, 0.0, 0.0, Double.NaN}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, false);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertEquals(10, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, (-2665.59224815062), 0.0, 0.0, 0.0, 2299.8217, 15.0, 2301.16549846642, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, (-2665.59224815062), Double.NaN, Double.NaN, Double.NaN, 2299.8217, 15.0, 2301.16549846642, Double.NaN}, doubleArray3, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(10, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, (-2665.59224815062), 0.0, 0.0, 0.0, 2299.8217, 15.0, 2301.16549846642, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double double0 = new Double(-0.0);
      assertEquals(-0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.0);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0.0);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = double3;
      doubleArray1[1] = double3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray1.length);
      assertTrue(boolean0);
      
      MathArrays.scaleInPlace(-0.0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "abQFZM";
      stringArray0[1] = "";
      int[] intArray0 = new int[8];
      intArray0[0] = 2631;
      intArray0[1] = 199;
      intArray0[2] = 301;
      intArray0[3] = 242;
      intArray0[4] = (-1160);
      intArray0[5] = 134217729;
      intArray0[6] = 134217729;
      intArray0[7] = 299;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2631, 199, 301, 242, (-1160), 134217729, 134217729, 299}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) (-1160);
      doubleArray3[1] = (double) 242;
      try { 
        MathArrays.checkPositive(doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,160 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2599);
      intArray0[1] = (-3557);
      intArray0[2] = 2935;
      intArray0[3] = 0;
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale((-900.1460425257131), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray1, (-2388));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 75.1801;
      doubleArray0[1] = 75.1801;
      doubleArray0[2] = 75.1801;
      doubleArray0[3] = 75.1801;
      doubleArray0[4] = 75.1801;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {75.1801, 75.1801, 75.1801, 75.1801, 75.1801, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Double>>) null, 235, 235);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1896.1742F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1900.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {1896.1742F, 0.0F, (-1900.0F), 0.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = 4235.819593684805;
      double double1 = MathArrays.linearCombination(Double.NaN, 1193.719103308, Double.NaN, 0.9305076599121094, 4235.819593684805, (-1142.0516943670104), 1.0, 1193.719103308);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1142.0516943670104);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1142.0516943670104);
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1142.0516943670104), Double.NaN, (-1142.0516943670104)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-627.0F);
      floatArray0[1] = 1128.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-627.0F), 1128.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      int int0 = 1386;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1386, (-938));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 4199.6875F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-0.23736149F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1467.7F);
      floatArray0[5] = 1861.249F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (-3177.0F);
      floatArray0[8] = (-3074.6F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {4199.6875F, 0.0F, (-0.23736149F), 0.0F, (-1467.7F), 1861.249F, 1.0F, (-3177.0F), (-3074.6F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.9868161777724352E-8;
      doubleArray0[1] = (double) 1861.249F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) 4199.6875F;
      doubleArray0[6] = (double) 1.0F;
      doubleArray0[7] = 49.13076;
      doubleArray0[8] = (double) (-0.23736149F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.9868161777724352E-8, 1861.2490234375, 0.0, 0.0, 1.0, 4199.6875, 1.0, 49.13076, (-0.23736149072647095)}, doubleArray0, 0.01);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[7];
      floatArray0[3] = (float) (-1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean2);
      
      boolean boolean3 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1487.311), (-1487.311), (-1487.311), (-5056.0), 0.0, 1193.719103308, 1555.8113, 1555.8113);
      assertEquals(1.2152487227928689E7, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.2152487227928689E7;
      doubleArray0[2] = (-1487.311);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.2152487227928689E7, (-1487.311)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Double>[][] fieldElementArray0 = MathArrays.buildArray(field0, 1386, (-938));
      assertEquals(1386, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-550);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 4593;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 639;
      floatArray0[6] = (float) (-550);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, (-550.0F), 0.0F, 4593.0F, 0.0F, 639.0F, (-550.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean2 = MathArrays.equals(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {0.0F, (-550.0F), 0.0F, 4593.0F, 0.0F, 639.0F, (-550.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(boolean2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 3.32;
      doubleArray0[3] = (-1308.94464);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3219.19213974;
      doubleArray0[6] = (-3990.78);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2734);
      assertEquals(7, doubleArray0.length);
      assertEquals(2734, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-20.0), 3.32, (-1308.94464), 0.0, 3219.19213974, (-3990.78)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-3990.78);
      doubleArray2[3] = (-1308.94464);
      doubleArray2[4] = 3219.19213974;
      // Undeclared exception!
      MathArrays.convolve(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      int int0 = 0;
      int int1 = 0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 4593;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int2 = (-550);
      intArray0[4] = (-550);
      intArray0[5] = 639;
      intArray0[6] = (-977);
      intArray0[7] = (-977);
      int int3 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertArrayEquals(new int[] {0, 4593, 0, 0, (-550), 639, (-977), (-977)}, intArray0);
      assertEquals(0, int3);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.7976931348623157E308);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 1.7976931348623157E308, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.POSITIVE_INFINITY, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 1.7976931348623157E308, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.POSITIVE_INFINITY, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3.26E18;
      doubleArray3[1] = (-1258.3883922674393);
      doubleArray3[2] = 1.7976931348623157E308;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = Double.NaN;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = (-20.0);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1.0), Double.NaN, 512.0, (-1.0), 512.0, 20.129091050551);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-49);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {0, 0, (-49)}, intArray0);
      assertEquals(0.0, double1, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, (-49)}, intArray0);
      assertArrayEquals(new int[] {0, 0, (-49)}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-49);
      intArray2[1] = 0;
      intArray2[2] = (-49);
      intArray2[3] = 755;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray2, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1487.311), (-1487.311), (-1487.311), (-5056.0), 0.0, 1193.719103308, 1555.8113, 1555.8113);
      assertEquals(1.2152487227928689E7, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1555.8113;
      doubleArray0[1] = 1126.0680370125608;
      doubleArray0[2] = 1.2152487227928689E7;
      MathArrays.checkPositive(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1555.8113, 1126.0680370125608, 1.2152487227928689E7}, doubleArray0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1555.8113, 1126.0680370125608, 1.2152487227928689E7}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {1126.0680370125608, 1555.8113, 1.2152487227928689E7}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 134217729;
      intArray0[1] = 1720;
      intArray0[2] = (-1237);
      intArray0[3] = 369;
      intArray0[4] = 134217729;
      intArray0[5] = 242;
      intArray0[6] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2);
      assertEquals(7, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {134217729, 1720, (-1237), 369, 134217729, 242, 2}, intArray0);
      assertArrayEquals(new int[] {134217729, 1720}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(0.7937005259840998, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 156;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {0, 156}, intArray0);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 1199, (-777));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1487.311), (-1487.311), (-1487.311), (-5056.0), 0.0, 1193.719103308, 1555.8113, 1555.8113);
      assertEquals(1.2152487227928689E7, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.2152487227928689E7;
      doubleArray0[2] = (-1487.311);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.2152487227928689E7, (-1487.311)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1386, (-938));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 645.499959;
      doubleArray0[2] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = 47L;
      longArray0[1] = 47L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {47L, 47L, 0L, 0L}, longArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 20.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertEquals(3, doubleArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.7976931348623157E308);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 1.7976931348623157E308, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.POSITIVE_INFINITY, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 5811.29245929046;
      double[] doubleArray3 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray2, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3059.601;
      doubleArray0[1] = 1303.7;
      doubleArray0[2] = (-527.259);
      doubleArray0[3] = 5734.681066140461;
      doubleArray0[4] = 1126.0680370125608;
      doubleArray0[5] = 2356.8;
      doubleArray0[6] = 0.7853981633974483;
      doubleArray0[7] = (-1487.311);
      doubleArray0[8] = 2862.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -527.259 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 21;
      intArray0[0] = 21;
      intArray0[1] = 2862;
      int int1 = 1025;
      intArray0[2] = 1025;
      intArray0[3] = 1747;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {21, 2862, 1025, 1747}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {21, 2862, 1025, 1747}, intArray0);
      assertArrayEquals(new int[] {21, 2862, 1025, 1747}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 21;
      doubleArray0[1] = (double) 2862;
      MathArrays.checkOrder(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {21.0, 2862.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1747;
      longArray0[1] = (long) 1025;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1747L, 1025L}, longArray0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1725);
      assertEquals(1725, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {21.0, 2862.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(1725, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {21.0, 2862.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1725);
      assertEquals(1725, doubleArray1.length);
      assertEquals(1725, doubleArray2.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {21.0, 2862.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1);
      assertEquals(1725, doubleArray1.length);
      assertEquals(1725, doubleArray3.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {21.0, 2862.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.scaleInPlace(312.76486107370454, doubleArray3);
      assertEquals(1725, doubleArray1.length);
      assertEquals(1725, doubleArray3.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {21.0, 2862.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      
      double double1 = MathArrays.linearCombination((-593.565964), 1.633123935319537E16, 1145.0257436023, (double) 1025, 2862.0, (double) 1025, 21.0, (-1.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-9.69366782999004E18), double1, 0.01);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1747L, 1025L}, longArray0);
      
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      try { 
        MathArrays.ebeDivide(doubleArray3, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,725 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 4593;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-550);
      intArray0[5] = 639;
      intArray0[6] = (-977);
      intArray0[7] = (-977);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 4593, 0, 0, (-550), 639, (-977), (-977)}, intArray0);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 4593;
      floatArray0[3] = (float) 4593;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 4593;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) (-550);
      doubleArray1[4] = (-3539.531);
      doubleArray1[5] = (double) (-977);
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1987.3053500347;
      int[] intArray0 = new int[6];
      intArray0[0] = 2147477267;
      intArray0[1] = (-977);
      intArray0[2] = 639;
      intArray0[3] = 639;
      intArray0[4] = 0;
      intArray0[5] = (-977);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2147477267, (-977), 639, 639, 0, (-977)}, intArray0);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 392.0F;
      floatArray0[2] = (float) 4593;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 639;
      floatArray0[5] = (float) 639;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 392.0F, 4593.0F, 0.0F, 639.0F, 639.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {2147477267, (-977), 639, 639, 0, (-977)}, intArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double double0 = new Double(-0.0);
      assertEquals(-0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.0);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0.0);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 217;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 201);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 645.499959;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0E-5;
      doubleArray0[5] = 2501.8922629;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {20.0, 645.499959, 0.0, 0.0, 1.0E-5, 2501.8922629}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {40.0, 1290.999918, 0.0, 0.0, 2.0E-5, 5003.7845258}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray0 = new long[8][0];
      long[] longArray1 = new long[8];
      longArray1[0] = (-778L);
      longArray1[1] = 3616L;
      longArray1[2] = (-1L);
      longArray1[3] = 1389L;
      longArray1[4] = (-1L);
      longArray1[5] = (-1215L);
      longArray1[6] = 17L;
      longArray1[7] = (-2564L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-604L);
      longArray2[1] = 1389L;
      longArray2[2] = (-1L);
      longArray2[3] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[1] = (-1L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 1389L;
      longArray4[1] = 0L;
      longArray4[2] = (-778L);
      longArray4[3] = 1389L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 0L;
      longArray5[1] = (-778L);
      longArray5[2] = 0L;
      longArray5[3] = 17L;
      longArray5[4] = 270L;
      longArray5[5] = 17L;
      longArray5[6] = (-778L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = (-1L);
      longArray6[1] = (-1L);
      longArray6[2] = (-778L);
      longArray6[3] = (-778L);
      longArray6[4] = (-604L);
      longArray6[5] = (-1L);
      longArray6[6] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[5];
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      
      longArray7[0] = (-2564L);
      longArray7[1] = 1389L;
      longArray7[2] = (-1L);
      longArray7[3] = (-2564L);
      longArray7[4] = (-604L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[2];
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray3));
      
      longArray8[0] = 17L;
      longArray8[1] = 1389L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2895.118510598041);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 534.2290701558989;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1.0);
      double double0 = MathArrays.linearCombination(0.0, (-1.0), 0.0, (-1.0), 3.834E-20, 6.283185307179586);
      assertEquals(2.4089732467726534E-19, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 6.283185307179586, (-1.0), (-2895.118510598041), 0.0, 3.834E-20, 534.2290701558989, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, Double.NaN, 1.0, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1487.311), (-1487.311), (-1487.311), (-5056.0), 0.0, 1193.719103308, 1555.8113, 1555.8113);
      assertEquals(1.2152487227928689E7, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1487.311);
      doubleArray0[2] = (-210.52273);
      doubleArray0[3] = 1.2152487227928689E7;
      doubleArray0[4] = (-2733.780067165);
      doubleArray0[5] = (-5056.0);
      doubleArray0[6] = 1193.719103308;
      doubleArray0[7] = 1.2152487227928689E7;
      doubleArray0[8] = 1193.719103308;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1487.311), (-210.52273), 1.2152487227928689E7, (-2733.780067165), (-5056.0), 1193.719103308, 1.2152487227928689E7, 1193.719103308}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TANGENT_TABLE_B";
      stringArray0[1] = "";
      stringArray0[2] = "oW0";
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 645.499959;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0E-5;
      doubleArray0[5] = 2501.8922629;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {20.0, 645.499959, 0.0, 0.0, 1.0E-5, 2501.8922629}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {40.0, 1290.999918, 0.0, 0.0, 2.0E-5, 5003.7845258}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {20.0, 645.499959, 0.0, 0.0, 1.0E-5, 2501.8922629}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {40.0, 1290.999918, 0.0, 0.0, 2.0E-5, 5003.7845258}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1987.3053500347;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-3803.0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1987.3053500347, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3803.0), -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1987.3053500347;
      doubleArray2[1] = (-3803.0);
      doubleArray2[2] = 1987.3053500347;
      doubleArray2[3] = 1987.3053500347;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 4593;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-550);
      intArray0[5] = 639;
      intArray0[6] = (-977);
      intArray0[7] = (-977);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 4593, 0, 0, (-550), 639, (-977), (-977)}, intArray0);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 4593;
      floatArray0[3] = (float) 4593;
      floatArray0[4] = (float) 4593;
      floatArray0[5] = (float) 4593;
      floatArray0[6] = (float) (-550);
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 4593.0F, 4593.0F, 4593.0F, 4593.0F, (-550.0F)}, floatArray0, 0.01F);
      assertTrue(boolean2);
      
      boolean boolean3 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 4593.0F, 4593.0F, 4593.0F, 4593.0F, (-550.0F)}, floatArray0, 0.01F);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double double0 = new Double(-0.0);
      assertEquals(-0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.0);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0.0);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = double3;
      MathArrays.scaleInPlace(-0.0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[20];
      stringArray0[0] = "abQFZM";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2701.90264676);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2701.90264676, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertEquals(6, doubleArray0.length);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[0]);
      assertEquals(6, doubleArray0.length);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[3]);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      
      double double6 = MathArrays.linearCombination(0.01745329052209854, Double.NaN, (double) doubleArray0[0], 2701.90264676);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = MathArrays.linearCombination(522.508891897069, 1475.0, (double) doubleArray0[3], Double.NEGATIVE_INFINITY, 0.0, 0.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(double7, double6, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2701.90264676;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1475.0;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = 1475.0;
      doubleArray1[6] = 3.834E-20;
      doubleArray1[7] = (double) doubleArray0[2];
      doubleArray1[8] = (double) doubleArray0[1];
      MathArrays.scaleInPlace((double) doubleArray0[3], doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-832.23));
      assertEquals((-832.23), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-832.23));
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-832.23), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-832.23), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-832.23));
      assertEquals((-832.23), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-832.23));
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-832.23), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      double double2 = 0.0;
      Double double3 = new Double(0.0);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-572);
      intArray0[1] = 3262;
      intArray0[2] = 0;
      intArray0[3] = (-124);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2895.118510598041);
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-];}L";
      stringArray0[1] = "N7\"y])!dn>ee'";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      double[][] doubleArray1 = new double[5][2];
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (-1.0);
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double double0 = new Double(-0.0);
      assertEquals(-0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.0);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0.0);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = double3;
      doubleArray1[1] = double3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray1.length);
      assertTrue(boolean0);
      
      MathArrays.scaleInPlace(-0.0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "abQFZM";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      assertEquals(2, stringArray0.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 4825;
      intArray0[1] = 299;
      intArray0[2] = (-916);
      intArray0[3] = 1687;
      intArray0[4] = 0;
      intArray0[5] = 3921;
      intArray0[6] = 178;
      intArray0[7] = 0;
      intArray0[8] = 99;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {4825, 299, (-916), 1687, 0, 3921, 178, 0, 99}, intArray0);
      assertArrayEquals(new int[] {4825, 299, (-916), 1687, 0, 3921, 178, 0, 99}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double double0 = MathArrays.linearCombination((-1.0), 0.11111095942313305, (double) 0, (-487.0462907363));
      assertEquals((-0.11111095942313305), double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-3.141592653589793), 1.375, (-1884.8087544536), Double.NaN, (-487.0462907363), 272952.9803930939);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1687;
      doubleArray0[1] = (double) (-916);
      doubleArray0[2] = 272952.9803930939;
      doubleArray0[3] = (-487.0462907363);
      doubleArray0[4] = (double) 3921;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1687;
      doubleArray0[7] = (-1869.372182);
      doubleArray0[8] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-916 <= 272,952.98)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = (-10.2);
      doubleArray0[4] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 1.7976931348623157E308, (-10.2), 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 645.499959;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0E-5;
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 155L;
      longArray0[2] = 47L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 155L, 47L}, longArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray1 = new Double[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 842.667349434539;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {842.667349434539}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {710088.2618030314}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {842.667349434539}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {710088.2618030314}, doubleArray1, 0.01);
      assertEquals(709245.5944535969, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      double double0 = 4236.683766;
      try { 
        MathArrays.normalizeArray(doubleArray0, 4236.683766);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2701.90264676);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2701.90264676, (double)double1, 0.01);
      assertNotNull(double1);
      
      double double2 = MathArrays.linearCombination(1489.7015309443, (-852.7391512946564), 0.0, 0.0, (double) doubleArray0[0], (-3496.27071329), (-936.077939017), (double) doubleArray0[0]);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1270326.8191797927), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Double double0 = new Double((-1487.311));
      assertEquals((-1487.311), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(272952.9803930939);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(272952.9803930939, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.0);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double((-1487.311));
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((-1487.311), (double)double3, 0.01);
      assertNotNull(double3);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double1;
      doubleArray0[1] = double3;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) doubleArray0[1];
      doubleArray1[1] = 2215.23609991;
      doubleArray1[2] = 3.834E-20;
      MathArrays.scaleInPlace(0.19999998807907104, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-297.4621822698712), 443.0471935743279, 7.667999542951583E-21}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-20.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-20.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-20.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, (-20.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray0 = new long[8][7];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 1L;
      longArray1[2] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1L;
      longArray2[1] = 17L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = 17L;
      longArray4[3] = 1L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[9];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = 0L;
      longArray6[1] = 0L;
      longArray6[2] = 47L;
      longArray6[3] = 0L;
      longArray6[4] = 1L;
      longArray6[5] = 1L;
      longArray6[6] = 1L;
      longArray6[7] = 0L;
      longArray6[8] = 1L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[6];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      
      longArray7[0] = 47L;
      longArray7[1] = 0L;
      longArray7[2] = 17L;
      longArray7[3] = 0L;
      longArray7[4] = 0L;
      longArray7[5] = (-1L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[8];
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray1));
      
      longArray8[0] = 1576L;
      longArray8[1] = 1L;
      longArray8[2] = 1L;
      longArray8[3] = 47L;
      longArray8[4] = 47L;
      longArray8[5] = 2683L;
      longArray8[6] = 47L;
      longArray8[7] = 1L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2605;
      intArray0[2] = 3329;
      intArray0[3] = 134;
      intArray0[4] = (-1145);
      intArray0[5] = (-2418);
      intArray0[6] = (-2081);
      intArray0[7] = 74;
      intArray0[8] = 1144;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1145));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-788.4);
      doubleArray0[1] = 1751.6322;
      doubleArray0[2] = (-292.62856);
      doubleArray0[3] = 93.0;
      doubleArray0[4] = 401.0357;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1604.3827824063;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1.304E19;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-788.4), 1751.6322, (-292.62856), 93.0, 401.0357, 0.0, 1604.3827824063, 0.0, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(0.0, (-1070.4088662986), 0.0, 1604.3827824063, 1604.3827824063, 1751.6322);
      assertEquals(2810288.5427884688, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-788.4), 1751.6322, (-292.62856), 93.0, 401.0357, 0.0, 1604.3827824063, 0.0, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-788.4), 1751.6322, (-292.62856), 93.0, 401.0357, 0.0, 1604.3827824063, 0.0, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[][] doubleArray2 = new double[2][8];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-788.4), (-292.62856), 0.0, 0.0, 93.0, 401.0357, 1604.3827824063, 1751.6322, 1.304E19}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 3420;
      intArray0[1] = 349;
      intArray0[2] = (-3623);
      intArray0[3] = 0;
      intArray0[4] = 3632;
      intArray0[5] = 534;
      intArray0[6] = 593;
      intArray0[7] = 0;
      intArray0[8] = (-4400);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {3420, 349, (-3623), 0, 3632, 534, 593, 0, (-4400)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 534;
      doubleArray0[1] = (double) 593;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-540.915753);
      doubleArray0[4] = (double) 349;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 349;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-540.915753), 0.0, 0.0, 349.0, 349.0, 534.0, 593.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.linearCombination((-3.43338934259355E-8), 0.0, 0.0, (-1839.1726930483035), 0.0, 1555.517457572569, 1895.69843, (-1533.2250864191));
      assertEquals((-2906532.3891613022), double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-101.87);
      doubleArray0[1] = 1489.7015309443;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1154.2925;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 923.87;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,489.702 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2895.118510598041);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 534.2290701558989;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1.0);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8667153.368224662, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2378.826;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1823.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.0);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 930;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 930, 930);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MathArrays.linearCombination(1115.965054449644, (-1173.91), (-1173.91), (-1173.91));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1115.965054449644;
      doubleArray0[1] = 922.32121457;
      doubleArray0[2] = 68022.15103101855;
      doubleArray0[3] = 68022.15103101855;
      doubleArray0[4] = 68022.15103101855;
      doubleArray0[5] = (-1173.91);
      doubleArray0[6] = 68022.15103101855;
      int int0 = 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      MathArrays.normalizeArray(doubleArray0, 0.0);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = 75.1801;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 75.1801;
      doubleArray0[1] = 75.1801;
      doubleArray0[2] = 75.1801;
      doubleArray0[3] = 75.1801;
      doubleArray0[4] = 75.1801;
      doubleArray0[5] = 75.1801;
      doubleArray0[6] = 75.1801;
      MathArrays.scaleInPlace(75.1801, doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("V!#_pmtIm8@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.V!#_pmtIm8@
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3925.154811;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1837.011);
      doubleArray0[5] = 4679.21;
      MathArrays.copyOf(doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1931;
      intArray0[1] = 312;
      intArray0[2] = (-735);
      intArray0[3] = 983;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 455;
      intArray0[7] = 0;
      intArray0[8] = (-162);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, (-3.141592653589793), 0.0, 1397.1597, (-797.0), (double) 312, (double) (-162), Double.NaN);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = 2726.005016139;
      doubleArray1[2] = 934.716;
      doubleArray1[3] = 1202.22821464;
      doubleArray1[4] = 0.0;
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1247.4134);
      doubleArray0[1] = 983.717518929448;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3.141592653589793;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 335.35930789;
      doubleArray0[7] = 1.34217729E8;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      try { 
        MathArrays.convolve(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = (-758.3);
      MathArrays.linearCombination(0.0, 2179.412879138176, (-758.3), (-758.3), 2179.412879138176, 0.0);
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = 597L;
      longArray0[1] = (-1L);
      longArray0[2] = 2622L;
      longArray0[3] = 1138L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 913.680333107;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 624.22926682661;
      doubleArray0[4] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = (-977);
      intArray0[3] = 639;
      intArray0[4] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 365.62515F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-977);
      float[] floatArray1 = new float[8];
      floatArray1[0] = 365.62515F;
      floatArray1[1] = (float) (-977);
      floatArray1[2] = (float) 0;
      floatArray1[3] = (float) (-977);
      floatArray1[4] = 365.62515F;
      floatArray1[5] = (float) 0;
      floatArray1[6] = (float) (-1);
      floatArray1[7] = (float) 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(159);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(470);
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("LG2]@3c", integer1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = Integer.valueOf((-921));
      integerArray0[4] = integer4;
      int int0 = 109;
      Integer integer5 = new Integer(109);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-525.926);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = (-3778.958820402672);
      doubleArray0[5] = 0.0;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -525.926)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long[][] longArray0 = new long[8][0];
      long[] longArray1 = new long[1];
      longArray1[0] = (-2117L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = (-2315L);
      longArray2[1] = (-2117L);
      longArray2[2] = (-2117L);
      longArray2[3] = (-2117L);
      longArray2[4] = (-2117L);
      longArray2[5] = (-2117L);
      longArray2[6] = (-2117L);
      longArray2[7] = (-2117L);
      longArray2[8] = (-2117L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = (-2315L);
      longArray3[1] = (-2315L);
      longArray3[2] = (-2315L);
      longArray3[3] = (-2315L);
      longArray3[4] = (-2117L);
      longArray3[5] = (-2315L);
      longArray3[6] = (-2117L);
      longArray3[7] = (-2117L);
      longArray3[8] = (-2117L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = (-2315L);
      longArray4[1] = (-2315L);
      longArray4[2] = (-2315L);
      longArray4[3] = (-2315L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      longArray5[0] = (-2117L);
      longArray5[1] = (-2315L);
      longArray5[2] = (-2117L);
      longArray5[3] = (-2117L);
      longArray5[4] = 0L;
      longArray5[5] = (-2117L);
      longArray5[6] = (-2315L);
      longArray5[7] = (-2117L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      longArray6[0] = 0L;
      longArray6[1] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[8];
      longArray7[0] = 0L;
      longArray7[1] = 1L;
      longArray7[2] = 0L;
      longArray7[3] = (-2117L);
      longArray7[4] = (-2315L);
      longArray7[5] = (-2117L);
      longArray7[6] = (-2315L);
      longArray7[7] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,117 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double double0 = MathArrays.linearCombination(605.00512425756, 605.00512425756, 605.00512425756, 1793.7876);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 605.00512425756;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-832.23));
      doubleArray0[0] = double0;
      Double double1 = new Double((-832.23));
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double double3 = MathArrays.linearCombination(0.0, (-2113.2), (double) doubleArray0[2], 0.0);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = MathArrays.linearCombination(1989.038456, (-3.141592653589793), 0.0, 0.0, (-2113.2), 1989.038456);
      assertEquals((-4209484.813820276), double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = (-10.2);
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 104.03999999999999, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1987.3053500347;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1064.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-96.77545797341);
      doubleArray0[5] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2256.2901062457604, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 139.0;
      doubleArray0[2] = 2243.96;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 1334.6;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1451.1488038);
      doubleArray0[7] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 139.0, 2243.96, 3.834E-20, 1334.6, 0.0, (-1451.1488038), 0.0}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1389L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 2243.96);
      assertArrayEquals(new double[] {2243.9599999999996, 2.3919512269938647E-14, 3.8614696944785275E-13, 6.597655398773004E-36, 2.296617343558282E-13, 0.0, (-2.4971778142446685E-13), 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[3][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.OrderDirection.values();
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(2701.90264676);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[0]);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[3]);
      doubleArray0[5] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 987.702391444599;
      doubleArray1[1] = (double) doubleArray0[3];
      doubleArray1[2] = (double) doubleArray0[2];
      doubleArray1[3] = (double) doubleArray0[4];
      doubleArray1[4] = 2215.23609991;
      doubleArray1[5] = 987.702391444599;
      doubleArray1[6] = 0.0;
      MathArrays.scaleInPlace(987.702391444599, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",JJ!yzRz>wef{r";
      stringArray0[1] = "EXPONENT";
      stringArray0[2] = ".1\"R ;(wg-";
      stringArray0[3] = "WEIGHT_AT_LEAST_ONE_NON_ZERO";
      stringArray0[4] = "%CV|Y.qr8Ym(=";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(1, doubleArray1.length);
      
      double[][] doubleArray2 = new double[6][4];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1202.22821464;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 5811.29245929046;
      doubleArray0[5] = (-20.0);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1258.83960779);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 5811.29245929046);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      MathArrays.ebeSubtract(doubleArray0, doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 4 and 5 are not strictly decreasing (0.987 <= 0.987)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-572);
      intArray0[1] = 3262;
      intArray0[2] = 0;
      intArray0[3] = (-124);
      intArray0[4] = (-523);
      intArray0[5] = 1556;
      intArray0[6] = (-453);
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2599);
      intArray0[1] = (-3557);
      intArray0[2] = 2935;
      intArray0[3] = 0;
      intArray0[4] = 771;
      intArray0[5] = 1048;
      intArray0[6] = 1276;
      intArray0[7] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-637);
      intArray0[1] = 0;
      intArray0[2] = (-1092);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1092);
      doubleArray0[1] = (-77.8539381132789);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 0;
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) (-637);
      doubleArray2[3] = (double) (-637);
      doubleArray2[4] = (double) (-1092);
      doubleArray2[5] = (double) (-637);
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double double0 = MathArrays.linearCombination(2239.629689559, 2239.629689559, Double.NaN, 0.0, 2239.629689559, 121.1079108);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2665.59224815062);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2299.8217;
      doubleArray0[7] = 15.0;
      doubleArray0[8] = 2301.16549846642;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1398.7, 15.0, 0.0, 2299.8217, 2299.8217, 0.0);
      MathArrays.scale((-1.0), doubleArray1);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.normalizeArray(doubleArray2, 0.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 242, 242);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-633);
      intArray0[3] = 134217729;
      intArray0[4] = 291;
      intArray0[5] = 0;
      intArray0[6] = 1708;
      intArray0[7] = (-2101);
      MathArrays.copyOf(intArray0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2101);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-2853.58088662);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, -0.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[2][2];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      MathArrays.ebeDivide(doubleArray1, doubleArray1);
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {0.0, (-2853.58088662), 0.0, (-2101.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 4825;
      intArray0[1] = 299;
      intArray0[2] = (-916);
      intArray0[3] = 1687;
      intArray0[4] = 0;
      intArray0[5] = 3921;
      intArray0[6] = 178;
      intArray0[7] = 0;
      intArray0[8] = 99;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {4825, 299, (-916), 1687, 0, 3921, 178, 0, 99}, intArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 299;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1687;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 842.667349434539;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.normalizeArray(doubleArray0, 842.667349434539);
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      long long0 = 3798L;
      longArray0[1] = 3798L;
      longArray0[2] = (-1L);
      longArray0[3] = 1513L;
      longArray0[4] = (-1073741824L);
      longArray0[5] = (-829L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MathArrays.linearCombination(240.7417268, 240.7417268, 3.141592653589793, 240.7417268, 240.7417268, 240.7417268);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Field<String> field0 = null;
      int int0 = 568;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 568);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-72.0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 820);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2621.850143);
      doubleArray0[1] = 2576.828255;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-195.025004445534);
      doubleArray0[5] = 1943.07488;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.scaleInPlace(3775539.989287014, doubleArray0);
      double[] doubleArray2 = MathArrays.scale((-5094451.151987708), doubleArray1);
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 1943.07488;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-195.025004445534);
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
