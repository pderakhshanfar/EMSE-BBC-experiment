/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 07:07:38 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2337.34496642653;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {5463181.492079437, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 307, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[8];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float[] floatArray1 = new float[1];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double double0 = MathArrays.linearCombination((double) 1.0F, (double) 0.0F, (-1175.238942365), (double) 0.0F, (-1175.238942365), 1016.7759698961, (-1842.281), (-1842.281));
      assertEquals(2199044.5674781604, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      double double0 = MathArrays.linearCombination((double) int0, (double) 714, (double) int0, (double) integerArray0[1]);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[4];
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][8];
      double[] doubleArray2 = new double[4];
      doubleArray1[0] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 1.304E19;
      doubleArray0[3] = 3.560302642502725E25;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3.560302642502964E25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.8441344853345161E19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = 1.86285714285714278E18;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.86285714285714278E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 3.834E-20;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3.834E-20, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long[][] longArray0 = new long[4][5];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 369;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 371;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {371L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1678);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,678 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long[][] longArray0 = new long[5][7];
      long[] longArray1 = new long[2];
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1678);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,678 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(134217729);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-975));
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "overflow: lcm({0}, {1}) is 2^31";
      stringArray0[1] = "";
      stringArray0[2] = "OfQ0o0.E,BE*,5S";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(714);
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(2071.544139704094);
      doubleArray0[0] = double0;
      Double double1 = new Double((-645.1286143));
      doubleArray0[1] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-2557);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1842.281);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[4];
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2617.384637427693);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {6850702.340242497, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 429.0502604359;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[6];
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.304E19;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2.608E19, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2578.6450287);
      double[] doubleArray1 = MathArrays.scale(1525.1731729547, doubleArray0);
      assertArrayEquals(new double[] {(-3932880.220346242), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.checkOrder(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Object>[][] fieldElementArray0 = MathArrays.buildArray(field0, 147, (-926));
      assertEquals(147, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 964.34017622699;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(929951.9754855022, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-81.0F);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 4211.541F;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals((-341134.822265625), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, (-1584.3127455184408), (-839.506986612869), 0.0, 0.0, 1.304E19);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2435.615, (-737.7306643989), 2435.615, (-737.7306643989), 6850702.340242497, (-1047.6060189232676), (double) 858, (-1047.6060189232676));
      assertEquals((-7.181329507198331E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2.095628259825298E7, 542.4, (double) (-1678), 0.0, 3218.233093, (-2393.76673900967));
      assertEquals(1.135898398195601E10, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-2393.76673900967), 0.0, 0.0, 4577.80325027769, (-4577.80325027769));
      assertEquals((-2.095628259825298E7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = MathArrays.linearCombination(8.0, 8.0, 8.0, 0.5463024377822876);
      assertEquals(68.3704195022583, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.304E19, (-4813.841780603), 1.304E19, 2072.4608639);
      assertEquals((-3.5747607153807123E22), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.scale(1, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-968);
      int[] intArray1 = new int[3];
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(968, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1677.599);
      double[] doubleArray1 = new double[3];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(1677.599, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-321);
      int[] intArray1 = new int[8];
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(321, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 2146164635;
      int[] intArray1 = new int[9];
      intArray1[4] = 2146164635;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals((-2638026), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1709.574361);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1709.574361));
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(2.2737367544323206E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[10];
      int[] intArray1 = new int[15];
      intArray1[0] = 212;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(212.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.8307188599677033E-8;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 4577.80325027769);
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(4577.803250259382, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 87);
      assertEquals(87, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Integer>[] fieldElementArray0 = MathArrays.buildArray(field0, 175);
      assertEquals(175, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-2203.0), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.scale(1508.41893938, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 3004.5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[7];
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[8];
      int[] intArray1 = new int[3];
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[5];
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[7];
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[1];
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 209);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2145904614));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 3727);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1631));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1797), 858);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<Object, Double>>) null, 1796);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2108));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[8][3];
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1678);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3493.6);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = MathArrays.copyOf(intArray0, 6);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double((-660.9983794870075));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      Field<Pair<Object, Double>> field0 = (Field<Pair<Object, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1796);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      FieldElement<Double>[][] fieldElementArray0 = MathArrays.buildArray(field0, 858, 858);
      assertEquals(858, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1297.6;
      doubleArray0[1] = Double.NaN;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.222784168432015E26);
      assertArrayEquals(new double[] {2.222784168432015E26, Double.NaN, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = Double.NaN;
      try { 
        MathArrays.normalizeArray(doubleArray0, 2.222784168432015E26);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) Float.NEGATIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.16666666666745392);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      try { 
        MathArrays.normalizeArray(doubleArray0, Float.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {4.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4355.92;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 4181.6773);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {4181.6773, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[4];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-891.65F);
      float[] floatArray1 = new float[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float[] floatArray1 = new float[6];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[] floatArray0 = new float[9];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float[] floatArray0 = new float[6];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[5] = Float.NaN;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[2];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float[] floatArray0 = new float[6];
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float[] floatArray0 = new float[9];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = MathArrays.linearCombination(790.741, (-40.9937), 1.304E19, 348.0034775, Double.NaN, 2.0, 3.834E-20, (-1175.238942365));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-262.6026819343), (-262.6026819343), Double.NaN, Double.NaN, (-1564.32013806), 1.8307188599677033E-8);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = MathArrays.linearCombination((double) 0.0F, (double) 0.0F, (double) 0.0F, (double) 0.0F, (double) 0.0F, (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.34217729E8, Double.NaN, 1.34217729E8, (double) (-1678));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double[] doubleArray1 = new double[1];
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 14 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[6][8];
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[6][0];
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) (-1.4E-45F);
      doubleArray0[3] = (double) (-1.4E-45F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.981735293180747E-45, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 2.6569E36;
      doubleArray0[4] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.6569E36, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      long[][] longArray0 = new long[4][5];
      long[] longArray1 = new long[3];
      longArray1[0] = (-1359L);
      longArray0[2] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,359 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = (-1480L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,480 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long[][] longArray0 = new long[5][8];
      long[] longArray1 = new long[6];
      longArray0[1] = longArray1;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long[][] longArray0 = new long[5][8];
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[][] longArray0 = new long[0][6];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (-284.3);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.141592653589793;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1100.6544510217582;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 5026.0F;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (5,026 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double double1 = new Double((-2184.25));
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Integer integer0 = new Integer((-1356));
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(290);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "cBd1Pzxwef$u";
      stringArray0[1] = "~h}#`N,pSf5c";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(2071.544139704094);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(2361);
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[7];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 17
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[7];
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[8];
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.scaleInPlace((-284.3), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[][] doubleArray1 = new double[7][6];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
