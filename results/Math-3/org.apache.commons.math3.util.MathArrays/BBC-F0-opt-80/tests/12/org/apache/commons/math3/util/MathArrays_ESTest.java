/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 07:05:26 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1254;
      MathArrays.distanceInf(intArray0, intArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1254;
      doubleArray0[1] = (double) 1254;
      doubleArray0[2] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.buildArray(field0, 0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = null;
      double[][] doubleArray1 = new double[4][2];
      double[] doubleArray2 = new double[9];
      doubleArray1[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray1[2] = doubleArray3;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1896.555);
      doubleArray0[1] = (-312.9264269964);
      doubleArray0[2] = (-0.010714690733195933);
      doubleArray0[3] = 5.8798224E-39;
      doubleArray0[4] = 4416.9274097;
      doubleArray0[5] = 1146.45;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = (-1802.872477784);
      doubleArray0[8] = 5.8798224E-39;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2140108728;
      intArray0[1] = 8;
      intArray0[2] = 227;
      intArray0[3] = 123;
      intArray0[4] = 343;
      intArray0[5] = 2146033625;
      intArray0[6] = 2049;
      int[] intArray1 = new int[7];
      intArray1[0] = 123;
      intArray1[1] = 2140108728;
      intArray1[2] = 227;
      intArray1[4] = 2049;
      intArray1[5] = 2146033625;
      intArray1[6] = 227;
      MathArrays.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1478.7845943680568;
      int int0 = 178;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 178);
      MathArrays.convolve(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "invalid binary digit: {0}";
      stringArray0[1] = "2$S~mRUw+";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.distance1(doubleArray0, doubleArray1);
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int[] intArray0 = new int[1];
      MathArrays.distanceInf(intArray0, intArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      MathArrays.buildArray(field0, 0, (-496));
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.75;
      doubleArray0[1] = (-2096.00426357);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1453.9502033;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 2008.26347;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 108.950511807159;
      doubleArray0[1] = (-1725.0);
      doubleArray0[2] = (-3162.5068);
      doubleArray0[3] = 1523.025029841788;
      doubleArray0[4] = (-1509.0809193816792);
      doubleArray0[5] = (-189.138866991387);
      doubleArray0[6] = 670.8828832097768;
      doubleArray0[7] = (-1.401298464324817E-45);
      doubleArray0[8] = 1700.687966;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = 1254;
      floatArray0[0] = 1310.0F;
      float float0 = 0.0F;
      floatArray0[1] = 0.0F;
      float float1 = 0.0F;
      floatArray0[3] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      int int1 = 1567;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1567);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[3];
      floatArray1[0] = (-1200.0099F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      MathArrays.equals(floatArray0, floatArray1);
      MathArrays.linearCombination((double) 0.0F, 3.834E-20, (double) 0.0F, (-943.69458), 4882013.639339142, (double) 0.0F, (double) 0.0F, 0.0);
      MathArrays.equalsIncludingNaN(floatArray1, floatArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-2454.617F);
      floatArray0[2] = 0.0F;
      float[] floatArray1 = new float[3];
      floatArray1[0] = 806.1173F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int[] intArray0 = new int[1];
      intArray0[0] = 1254;
      MathArrays.distanceInf(intArray0, intArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      MathArrays.buildArray(field0, 1254, (-496));
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[1];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = 2;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = 2.608E18;
      doubleArray0[2] = (-569.1098);
      doubleArray0[3] = 712.49;
      doubleArray0[4] = 0.167;
      doubleArray0[5] = (-2187.873518876401);
      doubleArray0[6] = 9.3142857142857139E17;
      doubleArray0[7] = (-24.182119784949094);
      doubleArray0[8] = (-385.0);
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.24740394949913025;
      doubleArray0[1] = 1494.34685342;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2242.192);
      doubleArray0[5] = (-2437.53801);
      doubleArray0[6] = (-50.215149);
      doubleArray0[7] = (-1119.513526);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.normalizeArray(doubleArray0, 189.0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-485.18715860216);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      MathArrays.copyOf(doubleArray1, 0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 941.4F;
      floatArray0[1] = (-941.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 4494.2437F;
      floatArray0[4] = -0.0F;
      floatArray0[5] = Float.POSITIVE_INFINITY;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = (-1387.179);
      doubleArray2[2] = (double) 941.4F;
      doubleArray2[3] = (double) 941.4F;
      doubleArray2[4] = (double) 4494.2437F;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-318.7677899365);
      doubleArray0[3] = 928.3233239;
      doubleArray0[4] = 4.5971724515755791E18;
      doubleArray0[5] = (-350.26912284);
      doubleArray0[6] = 1.304E19;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 278.0F;
      floatArray0[1] = 2986.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-611.5F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 3678.158F;
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      MathArrays.equals((float[]) null, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.5463024377822876;
      doubleArray0[1] = (-273.67);
      doubleArray0[2] = (-2292.857068132674);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 791.4650819094;
      doubleArray0[5] = (-0.25);
      doubleArray0[6] = (-3045.090640074484);
      doubleArray0[7] = (-21575.96);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-0.25);
      doubleArray1[1] = (-21575.96);
      doubleArray1[2] = (-3045.090640074484);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-3045.090640074484);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      float[] floatArray1 = new float[3];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 2960.0383F;
      floatArray1[2] = 1.0F;
      MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      float[] floatArray2 = new float[8];
      floatArray2[0] = 2960.0383F;
      floatArray2[1] = 1.0F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray2[4] = 1.0F;
      floatArray2[5] = 2960.0383F;
      floatArray2[6] = 2960.0383F;
      floatArray2[7] = 0.0F;
      MathArrays.equals(floatArray2, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NON_SQUARE_OPERATOR";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.equals(floatArray2, floatArray2);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1.0F;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-4516.0);
      doubleArray1[1] = 0.1428571343421936;
      doubleArray1[2] = 749.06657364;
      doubleArray1[3] = 4584.806230982793;
      doubleArray1[4] = 0.031;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[8][7];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = null;
      doubleArray2[2] = null;
      doubleArray2[3] = null;
      doubleArray2[4] = null;
      doubleArray2[5] = null;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 749.06657364;
      doubleArray3[1] = (-4516.0);
      doubleArray3[2] = (-4516.0);
      doubleArray3[3] = 749.06657364;
      doubleArray3[4] = (-4516.0);
      doubleArray3[5] = 753086.6470313413;
      doubleArray2[6] = doubleArray3;
      doubleArray2[7] = null;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.distance(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 1183.23F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1605.9806F;
      floatArray0[4] = (-5495.1943F);
      floatArray0[5] = (-1870.5F);
      floatArray0[6] = (-2765.6772F);
      floatArray0[7] = (-3434.027F);
      floatArray0[8] = 0.0F;
      float[] floatArray1 = new float[9];
      floatArray1[0] = (-3434.027F);
      floatArray1[1] = 1605.9806F;
      floatArray1[2] = (-3434.027F);
      floatArray1[3] = (-3835.7395F);
      floatArray1[4] = (-1870.5F);
      floatArray1[5] = 0.0F;
      floatArray1[6] = (-5495.1943F);
      floatArray1[7] = (-1870.5F);
      floatArray1[8] = 0.0F;
      MathArrays.equals(floatArray0, floatArray1);
      MathArrays.scaleInPlace((-5495.1943F), doubleArray0);
      MathArrays.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[] floatArray0 = new float[4];
      MathArrays.equals(floatArray0, (float[]) null);
      MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      MathArrays.equals(floatArray0, (float[]) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "NON_SQUARE_OPERATOR";
      stringArray0[1] = "NON_SQUARE_OPERATOR";
      stringArray0[2] = "NON_SQUARE_OPERATOR";
      stringArray0[3] = "NON_SQUARE_OPERATOR";
      stringArray0[4] = "";
      stringArray0[5] = "NON_SQUARE_OPERATOR";
      stringArray0[6] = "NON_SQUARE_OPERATOR";
      stringArray0[7] = "NON_SQUARE_OPERATOR";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.equals((float[]) null, floatArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 231.86696650621;
      doubleArray0[2] = 1728.84479167;
      doubleArray0[3] = 3276.1;
      doubleArray0[4] = 0.09090909090909091;
      doubleArray0[5] = 0.7853981633974483;
      doubleArray0[6] = (-4264.0695978018);
      doubleArray0[7] = 941.04455107715;
      MathArrays.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = new int[3];
      intArray1[0] = 41;
      intArray1[1] = 2146009200;
      intArray1[2] = 895;
      MathArrays.distanceInf(intArray1, intArray0);
      int[] intArray2 = new int[6];
      intArray2[0] = 41;
      intArray2[1] = 41;
      intArray2[2] = 895;
      intArray2[3] = 2146009200;
      intArray2[4] = 2146009200;
      intArray2[5] = 895;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray2, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1937.9679976118207);
      doubleArray0[1] = (-1937.9679976118207);
      MathArrays.normalizeArray(doubleArray0, (-1937.9679976118207));
      double[] doubleArray1 = MathArrays.scale((-1937.9679976118207), doubleArray0);
      MathArrays.copyOf(doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 19.6F;
      floatArray0[1] = (-603.0F);
      float[] floatArray1 = new float[8];
      floatArray1[0] = (-603.0F);
      floatArray1[1] = 330.64F;
      floatArray1[2] = 19.6F;
      floatArray1[3] = (-603.0F);
      floatArray1[4] = 19.6F;
      floatArray1[5] = 19.6F;
      floatArray1[6] = (-603.0F);
      floatArray1[7] = (-1.4E-45F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 551.490883443216;
      doubleArray1[1] = (-3908.329475684892);
      doubleArray1[2] = (-5287.82);
      doubleArray1[3] = (-0.05417713522911072);
      doubleArray1[4] = 72.9584;
      MathArrays.equals(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-0.05417713522911072);
      doubleArray2[1] = (-0.05417713522911072);
      doubleArray2[2] = (-3908.329475684892);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[3];
      MathArrays.distanceInf(intArray0, intArray0);
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 2116;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      MathArrays.distanceInf(intArray0, intArray1);
      int[] intArray2 = new int[3];
      intArray2[0] = 0;
      intArray2[1] = 2116;
      intArray2[2] = 2116;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[3];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 396.63;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.linearCombination(Double.NaN, 0.0, 0.902267575263977, 0.0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = new int[5];
      intArray1[0] = 1254;
      intArray1[1] = 1254;
      intArray1[2] = 1254;
      intArray1[3] = 1254;
      intArray1[4] = (-678);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[2];
      intArray0[0] = 1147;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.scale(1948.8732561870672, doubleArray1);
      try { 
        MathArrays.normalizeArray(doubleArray1, (-1205.10727));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1946.5);
      doubleArray0[1] = (-1946.5);
      doubleArray0[3] = (-1946.5);
      doubleArray0[3] = (-1946.5);
      doubleArray0[4] = (-1946.5);
      double[] doubleArray1 = MathArrays.scale((-1946.5), doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[1][9];
      doubleArray2[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 4073.635F;
      floatArray0[1] = 3119.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.distanceInf(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 1254;
      intArray0[0] = 1254;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[1] = "NON_SQUARE_OPERATOR";
      stringArray0[3] = "NON_SQUARE_OPERATOR";
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-813.675);
      doubleArray0[1] = (double) 1254;
      doubleArray0[2] = (double) 1254;
      doubleArray0[3] = (double) 1254;
      doubleArray0[4] = (double) 1254;
      doubleArray0[5] = (double) 1254;
      double double0 = 1.63E18;
      doubleArray0[6] = 1.63E18;
      double double1 = (-1947.053279939319);
      doubleArray0[7] = (-1947.053279939319);
      doubleArray0[8] = (double) 1254;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,254 >= 1,254)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1054.9211F);
      MathArrays.equals((float[]) null, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "NON_SQUARE_OPERATOR";
      stringArray0[1] = "NON_SQUARE_OPERATOR";
      stringArray0[2] = "NON_SQUARE_OPERATOR";
      stringArray0[3] = "NON_SQUARE_OPERATOR";
      stringArray0[5] = "NON_SQUARE_OPERATOR";
      stringArray0[6] = "NON_SQUARE_OPERATOR";
      stringArray0[7] = "NON_SQUARE_OPERATOR";
      stringArray0[8] = "NON_SQUARE_OPERATOR";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.equals(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[0];
      MathArrays.equals((float[]) null, floatArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 905;
      intArray0[1] = (-1);
      intArray0[2] = 3694;
      int[] intArray1 = new int[9];
      intArray1[0] = 905;
      intArray1[1] = (-1);
      intArray1[2] = 3694;
      intArray1[3] = 905;
      intArray1[4] = 1;
      intArray1[5] = 905;
      intArray1[6] = (-1);
      intArray1[7] = 3694;
      intArray1[8] = (-1);
      MathArrays.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "S";
      stringArray0[1] = ",T4d Tuq3@)B";
      stringArray0[2] = "@<w[noq9J'-u";
      stringArray0[3] = "unparseable real vector: \"{0}\"";
      stringArray0[4] = "u";
      stringArray0[5] = "";
      stringArray0[6] = "length ({0})";
      stringArray0[7] = "CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-3088.7861F);
      floatArray0[3] = (-1370.2157F);
      MathArrays.equals(floatArray0, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      MathArrays.checkPositive(doubleArray1);
      MathArrays.OrderDirection.values();
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[] floatArray0 = new float[4];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.equals(floatArray0, floatArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NON_SQUARE_OPERATOR";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 905;
      floatArray0[1] = (float) 905;
      floatArray0[2] = (float) 905;
      floatArray0[3] = (float) 905;
      floatArray0[4] = (float) 905;
      floatArray0[5] = (float) 905;
      float[] floatArray1 = new float[8];
      floatArray1[0] = (float) 905;
      floatArray1[1] = (float) 905;
      floatArray1[2] = (float) 905;
      floatArray1[3] = (float) 905;
      floatArray1[4] = (float) 905;
      floatArray1[5] = (float) 905;
      floatArray1[6] = (float) 905;
      floatArray1[7] = 0.0F;
      MathArrays.equals(floatArray0, floatArray1);
      int[] intArray0 = new int[5];
      intArray0[0] = 905;
      intArray0[1] = 905;
      intArray0[2] = 905;
      intArray0[3] = 905;
      intArray0[4] = 905;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MathArrays.linearCombination((double) 2, 1.304E19, 2.356194490192345, 633.869506221484, 1859.939970494269, 2.356194490192345, 3.834E-20, (double) 2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ARRAY_SUMS_TO_ZERO";
      stringArray0[1] = "ARRAY_SUMS_TO_ZERO";
      stringArray0[2] = "ARRAY_SUMS_TO_ZERO";
      stringArray0[3] = "ARRAY_SUMS_TO_ZERO";
      stringArray0[4] = "ARRAY_SUMS_TO_ZERO";
      stringArray0[5] = "ARRAY_SUMS_TO_ZERO";
      stringArray0[6] = "ARRAY_SUMS_TO_ZERO";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.6080000000000004E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 2.6080000000000004E19;
      doubleArray0[3] = (double) 2;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1330.352490393059;
      doubleArray2[2] = 1330.352490393059;
      doubleArray2[3] = 0.058823529411764705;
      doubleArray2[4] = (-3103.743878409);
      doubleArray2[5] = 4.5971724515755715E18;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "shape must be positive ({0})";
      stringArray0[1] = "C|H<&[";
      stringArray0[2] = "z7;txhY\"r[U=^||5V";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[4] = "~N8}\"lK{V%:b\u0013@C";
      stringArray0[5] = "+`}OxL{-Z";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[7] = "xf$PPYPeyk";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1330.352490393059;
      doubleArray2[1] = 4.5971724515755715E18;
      doubleArray2[2] = 1330.352490393059;
      doubleArray2[3] = 0.058823529411764705;
      doubleArray2[4] = (-3103.743878409);
      MathArrays.distance(doubleArray1, doubleArray0);
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 2.718281828459045;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-420.765234546596);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 3383.42737315;
      doubleArray1[1] = (-420.765234546596);
      doubleArray1[2] = (-420.765234546596);
      doubleArray1[4] = 420.765234546596;
      doubleArray1[5] = (-420.765234546596);
      doubleArray1[6] = 1.894431125E7;
      doubleArray1[7] = 420.765234546596;
      doubleArray1[8] = 1.0;
      MathArrays.distance(doubleArray0, doubleArray1);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[0];
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float[] floatArray0 = new float[3];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-420.765234546596);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 3383.42737315;
      doubleArray1[1] = (-420.765234546596);
      doubleArray1[2] = (-420.765234546596);
      doubleArray1[4] = 420.765234546596;
      doubleArray1[5] = (-420.765234546596);
      doubleArray1[6] = 1.894431125E7;
      doubleArray1[7] = 420.765234546596;
      doubleArray1[8] = 420.765234546596;
      MathArrays.distance(doubleArray0, doubleArray1);
      MathArrays.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1330.352490393059;
      doubleArray2[1] = 4.5971724515755715E18;
      doubleArray2[2] = 1330.352490393059;
      MathArrays.safeNorm(doubleArray1);
      MathArrays.OrderDirection.values();
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 2;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 2;
      integerArray0[1] = (Integer) 2;
      integerArray0[2] = (Integer) 2;
      integerArray0[3] = (Integer) 2;
      integerArray0[4] = (Integer) 2;
      integerArray0[5] = (Integer) 2;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, false);
      MathArrays.scale(545.884, doubleArray1);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.ebeSubtract(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 3119.0F;
      floatArray0[1] = 4073.635F;
      floatArray0[2] = 4073.635F;
      floatArray0[3] = 1261.212F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4073.635F;
      doubleArray0[1] = (double) 3119.0F;
      doubleArray0[2] = (double) 3119.0F;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float[] floatArray0 = new float[4];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.equals(floatArray0, floatArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NON_SQUARE_OPERATOR";
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1442710.684768556;
      doubleArray0[1] = 0.0;
      MathArrays.equals((double[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1946.5);
      doubleArray0[1] = (-1946.5);
      doubleArray0[3] = (-1946.5);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1946.5);
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 1279.1738388082354;
      doubleArray1[3] = (-1946.5);
      MathArrays.equals(doubleArray0, doubleArray1);
      MathArrays.equals(doubleArray0, (double[]) null);
      try { 
        Integer.valueOf("2N~Y", (-1144));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1144 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1254;
      String[] stringArray0 = new String[4];
      stringArray0[1] = "NON_SQUARE_OPERATOR";
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1254;
      doubleArray0[1] = 1254.0;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.equals(doubleArray0, (double[]) null);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      long[][] longArray0 = new long[6][1];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = (long) 1254;
      longArray3[1] = (long) 1254;
      longArray3[2] = (long) 1254;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      longArray5[0] = (long) 0;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[9];
      longArray6[0] = (long) 1254;
      longArray6[1] = (long) 1254;
      longArray6[2] = (long) 0;
      longArray6[3] = (long) 0;
      longArray6[4] = 4L;
      longArray6[5] = (long) 1254;
      longArray6[6] = (long) 0;
      longArray6[7] = (long) 1254;
      longArray6[8] = (long) 0;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1946.5);
      doubleArray0[1] = (-1946.5);
      doubleArray0[3] = (-1946.5);
      doubleArray0[3] = (-1946.5);
      doubleArray0[4] = (-1946.5);
      MathArrays.scale((-1946.5), doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 4073.635F;
      int[] intArray0 = new int[6];
      intArray0[0] = (-503);
      intArray0[1] = 1339;
      intArray0[2] = 43;
      intArray0[3] = 88;
      intArray0[4] = 704;
      intArray0[5] = (-1524);
      int[] intArray1 = new int[7];
      intArray1[0] = 704;
      intArray1[1] = 43;
      intArray1[2] = 704;
      intArray1[3] = 1339;
      intArray1[4] = (-503);
      intArray1[5] = 1339;
      intArray1[6] = 704;
      MathArrays.distance1(intArray0, intArray1);
      MathArrays.normalizeArray(doubleArray0, 1.494140625);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "COSINE_TABLE_A";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, (-395.0), 5.650007086920087E-9, 0.5850973129272461, 0.0, 0.0, (-395.0));
      MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1946.5);
      doubleArray0[1] = (-1946.5);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-643);
      intArray0[2] = 0;
      intArray0[3] = (-643);
      intArray0[4] = (-643);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      MathArrays.copyOf(intArray0, 0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-643);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.linearCombination((double) 0.0F, (-1946.5), 5.0299802875684455E7, (-1946.5), (double) 0, (-11144.1057019));
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      long[][] longArray0 = new long[4][5];
      long[] longArray1 = new long[4];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) (-643);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = (-2299L);
      longArray2[1] = 1935L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = (-2299L);
      longArray3[1] = (long) 0;
      longArray3[2] = (long) (-643);
      longArray3[3] = 1935L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 2147033430;
      int int1 = 1034;
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1330.352490393059;
      doubleArray1[1] = 4.5971724515755715E18;
      doubleArray1[2] = 1330.352490393059;
      doubleArray1[3] = 0.058823529411764705;
      doubleArray1[4] = (-3103.743878409);
      doubleArray1[5] = 4.5971724515755715E18;
      doubleArray1[6] = 1330.352490393059;
      doubleArray1[7] = 2.718281828459045;
      MathArrays.safeNorm(doubleArray1);
      MathArrays.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1254;
      MathArrays.distanceInf(intArray0, intArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(0);
      Integer.getInteger("gD]:=*v\"5H+dYY9", (Integer) 1254);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[8];
      intArray1[0] = 905;
      intArray1[1] = 0;
      intArray1[2] = 905;
      intArray1[3] = 905;
      intArray1[4] = 1254;
      intArray1[5] = 1254;
      intArray1[6] = 905;
      intArray1[7] = 0;
      MathArrays.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      MathArrays.equals(doubleArray2, doubleArray1);
      MathArrays.equals((double[]) null, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[6];
      int int0 = (-1144);
      try { 
        Integer.valueOf(",?", (-1144));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1144 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      MathArrays.equals(doubleArray2, doubleArray1);
      MathArrays.equals((double[]) null, (double[]) null);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1144));
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(164);
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-1144));
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(1123);
      MathArrays.scale((-7786.0), doubleArray2);
      MathArrays.checkPositive(doubleArray1);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1144);
      intArray0[1] = (int) integerArray0[3];
      intArray0[2] = (int) integerArray0[1];
      intArray0[3] = (int) integerArray0[2];
      MathArrays.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-17.773379405725276);
      int[] intArray0 = new int[5];
      intArray0[0] = 2147033430;
      intArray0[1] = 2;
      double[] doubleArray1 = MathArrays.scale(430.9211, doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -7,658.924 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 348;
      intArray0[0] = 348;
      int int1 = 134217729;
      intArray0[1] = 134217729;
      int int2 = (-44);
      intArray0[2] = (-44);
      int int3 = 6;
      intArray0[3] = 6;
      int int4 = 85;
      intArray0[4] = 85;
      intArray0[5] = 35;
      intArray0[6] = 134217729;
      intArray0[7] = 134217729;
      MathArrays.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-922.83223505), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1254;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1254;
      doubleArray0[1] = (double) 1254;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      long[][] longArray0 = new long[0][4];
      MathArrays.checkNonNegative(longArray0);
      MathArrays.equals(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MathArrays.linearCombination((-23.693423837), 0.0, (double) (-1.0F), 3380.27, 633.869506221484, (-23.693423837), (double) (-1.0F), 0.5850973129272461);
      double[] doubleArray0 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = 1104;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1104);
      MathArrays.OrderDirection.values();
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,104 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-420.765234546596);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 396.63;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 396.63;
      doubleArray1[2] = 0.0;
      MathArrays.normalizeArray(doubleArray1, (-3081.893404738));
      MathArrays.OrderDirection.values();
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      MathArrays.linearCombination(0.0, 0.0, 0.0, 2909.8782891351, 2.0, 2.2860509143963117E-8);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.copyOf(intArray0);
      MathArrays.linearCombination(0.0, 1.304E19, (double) 4, (-5284.3357));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1254;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1254;
      doubleArray0[2] = (double) 1254;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-2729);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      MathArrays.normalizeArray(doubleArray0, 118.140377);
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1254;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.OrderDirection.values();
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1254;
      doubleArray0[3] = (double) 1254;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-2729);
      doubleArray0[6] = (double) (-2729);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 1254;
      integerArray0[1] = (Integer) 1254;
      integerArray0[2] = (Integer) 1254;
      integerArray0[3] = (Integer) 1254;
      integerArray0[4] = (Integer) 1254;
      integerArray0[5] = (Integer) 1254;
      integerArray0[6] = (Integer) 1254;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1254);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.625;
      doubleArray0[2] = 40.19140625;
      doubleArray0[3] = 93.3939;
      doubleArray0[4] = 288.2288;
      doubleArray0[5] = 1013.620097834;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0.0F;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[5];
      intArray0[0] = 2147033430;
      intArray0[1] = 2;
      intArray0[2] = 79;
      intArray0[3] = (-1946);
      intArray0[4] = 1047;
      MathArrays.OrderDirection.values();
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1047;
      doubleArray1[1] = (double) 79;
      doubleArray1[2] = (double) 2147033430;
      doubleArray1[3] = (double) 2147033430;
      doubleArray1[4] = 1.63E18;
      MathArrays.checkPositive(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1254;
      MathArrays.distanceInf(intArray0, intArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      Double double0 = new Double(1254);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(1254, doubleArray0);
      double[] doubleArray2 = MathArrays.scale(1254, doubleArray1);
      MathArrays.checkPositive(doubleArray2);
      MathArrays.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1946.5);
      doubleArray0[1] = (-1.0);
      MathArrays.normalizeArray(doubleArray0, (-1.0));
      MathArrays.scale((-1.0), doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[][] longArray0 = new long[1][0];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 0;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0L;
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      long[][] longArray1 = new long[4][7];
      long[] longArray2 = new long[7];
      longArray2[0] = 393L;
      longArray2[1] = 371L;
      longArray2[2] = 3569L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = 0L;
      longArray2[6] = 374L;
      longArray1[0] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = 0L;
      longArray1[1] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 393L;
      longArray4[4] = 0L;
      longArray4[5] = 3569L;
      longArray4[6] = 371L;
      longArray1[2] = longArray4;
      long[] longArray5 = new long[0];
      longArray1[3] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-420.765234546596);
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      MathArrays.equals(floatArray0, floatArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray1 = MathArrays.scale((-468.0170655027786), doubleArray0);
      MathArrays.scale(0, doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      floatArray0[1] = (-259.0F);
      long[] longArray0 = new long[8];
      longArray0[0] = (-1075L);
      longArray0[1] = (-634L);
      longArray0[2] = 0L;
      longArray0[3] = (-634L);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1946);
      MathArrays.distance1(intArray0, intArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      long[][] longArray1 = new long[6][0];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      long[] longArray2 = new long[6];
      longArray2[0] = (-1075L);
      longArray2[1] = (-609L);
      longArray2[2] = (-1075L);
      longArray2[3] = 0L;
      longArray2[4] = (long) (-1946);
      longArray2[5] = (-1075L);
      longArray1[5] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      floatArray0[1] = (-1.0F);
      long[] longArray0 = new long[8];
      longArray0[0] = (-1075L);
      longArray0[1] = (-634L);
      longArray0[2] = 0L;
      longArray0[3] = (-634L);
      longArray0[4] = 0L;
      longArray0[5] = 1946L;
      longArray0[6] = (-634L);
      longArray0[7] = (-634L);
      long[] longArray1 = new long[7];
      longArray1[0] = (-1075L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4192.0;
      doubleArray0[1] = (double) (-1075L);
      doubleArray0[2] = (double) (-1075L);
      doubleArray0[3] = (double) 1946L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (-634L);
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) (-634L);
      MathArrays.copyOf(doubleArray0, 1547);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      floatArray0[1] = (-259.0F);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1946);
      intArray0[1] = (-1946);
      intArray0[2] = (-1946);
      intArray0[3] = (-1946);
      intArray0[4] = (-1946);
      intArray0[5] = (-1946);
      intArray0[6] = (-1946);
      intArray0[7] = (-1946);
      intArray0[8] = (-1946);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "7zSbWsQ%#6?Al].>[y";
      stringArray0[2] = " &vt3j{`RfU8<}'89E@";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      floatArray0[1] = (-259.0F);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1946);
      intArray0[1] = 2129587950;
      intArray0[2] = (-1946);
      intArray0[3] = (-1946);
      MathArrays.distance1(intArray0, intArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7zSbWsQ%#6?Al].>[y";
      stringArray0[1] = "org3apache.comm\ns.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1946);
      doubleArray0[1] = (double) (-259.0F);
      doubleArray0[2] = (double) (-259.0F);
      doubleArray0[3] = (double) (-1946);
      doubleArray0[4] = (double) 0;
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-1946);
      doubleArray1[1] = (double) 2129587950;
      doubleArray1[2] = (double) (-1946);
      doubleArray1[3] = (double) (-259.0F);
      doubleArray1[4] = 0.8414709568023682;
      MathArrays.ebeMultiply(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      long[][] longArray0 = new long[4][6];
      long[] longArray1 = new long[2];
      longArray1[0] = (-290L);
      longArray1[1] = 1745L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray0[1] = longArray2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[28];
      stringArray0[0] = "";
      stringArray0[1] = "dZR\u0000F'/87?-xmD";
      stringArray0[2] = "cannot access {0} method in percentile implementation {1}";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[5] = "P0Mw/.J}=C";
      stringArray0[6] = "CR^";
      stringArray0[7] = "";
      stringArray0[8] = "LOESS_EXPECTS_AT_LEAST_ONE_POINT";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int[] intArray0 = new int[1];
      int int0 = 1254;
      intArray0[0] = 1254;
      MathArrays.distanceInf(intArray0, intArray0);
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Pair<FieldElement<String>, String> pair0 = new Pair<FieldElement<String>, String>(fieldElement0, "");
      Integer integer0 = new Integer(0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0).when(field0).getZero();
      int int1 = 905;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 905, 905);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int[] intArray0 = new int[11];
      intArray0[0] = 1254;
      MathArrays.equals(floatArray0, floatArray0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1254;
      longArray0[1] = (long) 1254;
      longArray0[2] = (long) 1254;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = (-3081.3333418);
      double double1 = 2211.0;
      double double2 = 576.1194814830125;
      MathArrays.linearCombination(0.14285714285714285, (-3081.3333418), 1.0, 1.0, 2211.0, 576.1194814830125, 1263.70892, 1238.6003134862);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1029.73708875973;
      doubleArray0[1] = 1029.73708875973;
      double double3 = 266.0;
      doubleArray0[2] = 266.0;
      doubleArray0[3] = 1029.73708875973;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      int[] intArray0 = new int[1];
      int int0 = 877;
      intArray0[0] = 877;
      MathArrays.copyOf(intArray0);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long[][] longArray0 = new long[9][8];
      long[] longArray1 = new long[2];
      longArray1[0] = 2111495460L;
      longArray1[1] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = 0L;
      longArray2[1] = 2111495460L;
      longArray2[2] = 2111495460L;
      longArray2[3] = 2111495460L;
      longArray2[4] = 2111495460L;
      longArray2[5] = 2111495460L;
      longArray2[6] = 2111495460L;
      longArray2[7] = 0L;
      longArray2[8] = 2111495460L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      longArray4[0] = 2111495460L;
      longArray4[1] = 2111495460L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = 0L;
      longArray5[1] = 2111495460L;
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      longArray6[0] = 2111495460L;
      longArray6[1] = 0L;
      longArray6[2] = 0L;
      longArray6[3] = 2111495460L;
      longArray6[4] = 0L;
      longArray6[5] = 2111495460L;
      longArray6[6] = 2111495460L;
      longArray6[7] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      longArray0[6] = longArray7;
      long[] longArray8 = new long[4];
      longArray8[0] = 2111495460L;
      longArray8[1] = 2111495460L;
      longArray8[2] = 0L;
      longArray8[3] = 0L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[6];
      longArray9[0] = 1946L;
      longArray9[1] = 2111495460L;
      longArray9[2] = 2111495460L;
      longArray9[3] = 2111495460L;
      longArray9[4] = 119L;
      longArray9[5] = 2111495460L;
      longArray0[8] = longArray9;
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int[] intArray0 = new int[1];
      intArray0[0] = 1254;
      MathArrays.distanceInf(intArray0, intArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 905, 905);
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      MathArrays.scale(0.5039018405998233, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.625;
      doubleArray0[2] = 5285.7897;
      doubleArray0[3] = 93.3939;
      doubleArray0[4] = 288.2288;
      doubleArray0[5] = 1013.620097834;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 11
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1946.5);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "DECREASING";
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.625;
      doubleArray0[2] = 40.19140625;
      doubleArray0[3] = 93.3939;
      doubleArray0[4] = 288.2288;
      doubleArray0[5] = 1013.620097834;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = 40.19140625;
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = 4477.50761;
      doubleArray1[4] = 0.625;
      doubleArray1[5] = 288.2288;
      MathArrays.convolve(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      MathArrays.linearCombination(0.0, 633.869506221484, (-1.0), 0.0, 1.34217729E8, (double) (-1.0F), (-1327.1275958042), 0.0);
      double[] doubleArray0 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][4];
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      floatArray0[1] = (-1.0F);
      long[][] longArray0 = new long[3][5];
      long[] longArray1 = new long[8];
      longArray1[0] = (-1075L);
      longArray1[1] = (-634L);
      longArray1[2] = 0L;
      longArray1[3] = (-634L);
      longArray1[4] = 0L;
      longArray1[5] = 1946L;
      longArray1[6] = (-634L);
      longArray1[7] = (-634L);
      long[] longArray2 = new long[7];
      longArray2[0] = (-1075L);
      longArray2[1] = 1946L;
      longArray2[2] = (-1075L);
      longArray2[3] = (-634L);
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 348;
      intArray0[1] = 134217729;
      intArray0[2] = (-44);
      intArray0[3] = 0;
      intArray0[4] = 85;
      intArray0[5] = 35;
      intArray0[6] = 134217729;
      intArray0[7] = 134217729;
      MathArrays.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2182.6;
      doubleArray0[1] = 2182.6;
      MathArrays.normalizeArray(doubleArray0, 100.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (2,182.6 <= 2,182.6)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-420.765234546596);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 3383.42737315;
      doubleArray1[1] = (-420.765234546596);
      doubleArray1[2] = (-420.765234546596);
      doubleArray1[4] = 420.765234546596;
      doubleArray1[5] = (-420.765234546596);
      doubleArray1[6] = 1.894431125E7;
      doubleArray1[7] = 420.765234546596;
      doubleArray1[8] = 1.0;
      MathArrays.distance(doubleArray0, doubleArray1);
      MathArrays.normalizeArray(doubleArray1, 3804.192607696596);
      MathArrays.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      floatArray0[1] = (-259.0F);
      long[] longArray0 = new long[8];
      longArray0[0] = (-1075L);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 546.1074651;
      doubleArray0[2] = (double) (-1075L);
      doubleArray0[3] = (double) (-259.0F);
      doubleArray0[4] = 946.6237;
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) (-634L);
      doubleArray0[7] = (double) (-634L);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.linearCombination(546.1074651, (-634.0), 9408907.958940506, 0.14159265358979312);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      floatArray0[1] = (-259.0F);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-259.0F);
      doubleArray0[1] = (double) (-259.0F);
      doubleArray0[2] = (double) 2153.456F;
      doubleArray0[3] = (double) 2153.456F;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2413.00129867124);
      MathArrays.OrderDirection.values();
      int[] intArray0 = new int[4];
      intArray0[0] = (-2729);
      intArray0[1] = (-2729);
      MathArrays.copyOf(intArray0);
      MathArrays.equals(doubleArray1, doubleArray1);
      MathArrays.equals(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = (-1.0F);
      floatArray0[1] = (-1.0F);
      float float1 = (-259.0F);
      floatArray0[1] = (-259.0F);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-259.0F);
      doubleArray0[1] = (double) (-259.0F);
      doubleArray0[2] = (double) 2153.456F;
      doubleArray0[3] = (double) 2153.456F;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      floatArray0[1] = (-259.0F);
      long[] longArray0 = new long[8];
      longArray0[0] = (-1075L);
      longArray0[1] = (-634L);
      longArray0[2] = 0L;
      longArray0[3] = (-634L);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1946);
      MathArrays.distance1(intArray0, intArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "7zSbWsQ%#6?Al].>[y";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1946.5);
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1.0));
      double[] doubleArray2 = MathArrays.scale((-1.0), doubleArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7zSbWsQ%#6?Al].>[y";
      stringArray0[1] = "ARRAY_SUMS_TO_ZERO";
      stringArray0[2] = "7zSbWsQ%#6?Al].>[y";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = -0.0F;
      floatArray0[4] = (-2225.541F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.distance1(doubleArray1, doubleArray2);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1497);
      intArray0[1] = (-4288);
      intArray0[2] = 1928;
      intArray0[3] = 2142391991;
      intArray0[4] = 1304;
      intArray0[5] = 65;
      intArray0[6] = (-2155);
      MathArrays.copyOf(intArray0, 289);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1946.5);
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1.0));
      double[] doubleArray2 = MathArrays.scale((-1.0), doubleArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7zSbWsQ%#6?Al].>[y";
      stringArray0[1] = "ARRAY_SUMS_TO_ZERO";
      stringArray0[2] = "7zSbWsQ%#6?Al].>[y";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (-1946.5);
      doubleArray3[3] = (-1946.5);
      doubleArray3[4] = (-1946.5);
      doubleArray3[5] = (-1946.5);
      MathArrays.equalsIncludingNaN(doubleArray3, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = (-1946.5);
      double double1 = (-1.0);
      String[] stringArray0 = new String[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      long[][] longArray0 = new long[4][6];
      long[] longArray1 = new long[2];
      longArray1[0] = (-290L);
      longArray1[1] = 1745L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = (-290L);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      MathArrays.linearCombination(doubleArray0, doubleArray1);
      MathArrays.ebeMultiply(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 396.63;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      floatArray0[1] = (-259.0F);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-259.0F);
      doubleArray0[1] = (double) (-259.0F);
      doubleArray0[2] = (double) 2153.456F;
      doubleArray0[3] = (double) 2153.456F;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2413.00129867124);
      MathArrays.OrderDirection.values();
      int[] intArray0 = new int[4];
      intArray0[0] = 2145906793;
      intArray0[1] = 2145906793;
      intArray0[2] = 2145906793;
      intArray0[3] = 2145906793;
      MathArrays.copyOf(intArray0);
      MathArrays.equals(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-420.765234546596);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 396.63;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 396.63;
      doubleArray1[2] = 0.0;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-3081.893404738));
      MathArrays.OrderDirection.values();
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 396.63;
      doubleArray3[1] = 578.2376150883406;
      doubleArray3[2] = 0.0;
      int[] intArray0 = new int[1];
      intArray0[0] = 2145906793;
      MathArrays.copyOf(intArray0);
      try { 
        MathArrays.ebeDivide(doubleArray3, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.625;
      doubleArray0[2] = 40.19140625;
      doubleArray0[3] = 93.3939;
      doubleArray0[5] = 1013.620097834;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7zSbWsQ%#6?Al].>[y";
      stringArray0[1] = "DECREASING";
      stringArray0[2] = "DECREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[5];
      intArray0[0] = 2147033430;
      intArray0[1] = 2;
      intArray0[2] = 79;
      intArray0[3] = (-1943);
      intArray0[0] = 1034;
      int int0 = new Integer(79);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "[bb8shd(0}XE(";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      floatArray0[1] = (-259.0F);
      floatArray0[2] = 2153.456F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "_m0l}Pl$";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "INCREASING";
      stringArray0[4] = "bqN";
      stringArray0[5] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int[] intArray0 = new int[1];
      intArray0[0] = 1254;
      MathArrays.distanceInf(intArray0, intArray0);
      floatArray0[0] = 1310.0F;
      floatArray0[1] = 0.0F;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1906.98515865;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      float[] floatArray1 = new float[2];
      floatArray1[0] = (float) 0;
      float[] floatArray2 = new float[1];
      floatArray2[0] = 0.0F;
      MathArrays.equals(floatArray1, floatArray2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[3];
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      MathArrays.linearCombination(0.0, 0.0, 0.0, (-904.9176));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      long[][] longArray0 = new long[4][6];
      long[] longArray1 = new long[2];
      longArray1[0] = (-290L);
      longArray1[1] = 1745L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = (-290L);
      longArray3[1] = 1745L;
      longArray3[2] = 1745L;
      longArray3[3] = (-290L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = (-290L);
      longArray4[1] = (-290L);
      longArray4[2] = (-290L);
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -290 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long[][] longArray0 = new long[7][1];
      long[] longArray1 = new long[7];
      longArray1[0] = 10000L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = 1391L;
      longArray1[5] = 0L;
      longArray1[6] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = 0L;
      longArray2[1] = 10000L;
      longArray2[2] = 1391L;
      longArray2[4] = 0L;
      longArray2[5] = 1589L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = 10000L;
      longArray3[1] = 0L;
      longArray3[2] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = (-1L);
      longArray4[1] = 0L;
      longArray4[2] = 10000L;
      longArray4[3] = 0L;
      longArray4[4] = 0L;
      longArray4[5] = (-1L);
      longArray4[6] = 1391L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      longArray5[1] = 0L;
      longArray5[2] = 1L;
      longArray5[3] = (-634L);
      longArray5[4] = 0L;
      longArray5[5] = 1391L;
      longArray5[6] = 1L;
      longArray5[7] = 10000L;
      longArray0[2] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-35);
      intArray0[1] = (-2902);
      intArray0[2] = 0;
      intArray0[3] = 205;
      intArray0[4] = 0;
      intArray0[5] = (-35);
      MathArrays.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 264);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 46.8016147415631;
      doubleArray0[2] = (double) (-2871);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 93.3939);
      MathArrays.scale((-432.0930196303179), doubleArray1);
      MathArrays.scaleInPlace(93.3939, doubleArray0);
      long[][] longArray0 = new long[9][8];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) (-2871);
      longArray1[1] = (long) (-2871);
      longArray1[2] = (long) (-2871);
      longArray1[3] = (long) (-2871);
      longArray1[4] = (long) (-2871);
      longArray1[5] = (long) (-2871);
      longArray1[6] = (long) (-2871);
      longArray1[7] = (long) (-2871);
      longArray1[8] = (long) (-2871);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (long) (-2871);
      longArray2[1] = (long) (-2871);
      longArray2[2] = (long) (-2871);
      longArray2[3] = (long) (-2871);
      longArray2[4] = (long) (-2871);
      longArray2[5] = (long) (-2871);
      longArray2[6] = (long) (-2871);
      longArray2[7] = (long) (-2871);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = (long) (-2871);
      longArray3[1] = (long) (-2871);
      longArray3[2] = (long) (-2871);
      longArray3[3] = (long) (-2871);
      longArray3[4] = (long) (-2871);
      longArray3[5] = (long) (-2871);
      longArray3[6] = (long) (-2871);
      longArray3[7] = (long) (-2871);
      longArray3[8] = (long) (-2871);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      longArray4[0] = 0L;
      longArray4[1] = (long) (-2871);
      longArray4[2] = (long) (-2871);
      longArray4[3] = (long) (-2871);
      longArray4[4] = (long) (-2871);
      longArray4[5] = (long) (-2871);
      longArray4[6] = (long) (-2871);
      longArray4[7] = (long) (-2871);
      longArray4[8] = (long) (-2871);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = 0L;
      longArray5[1] = (long) (-2871);
      longArray5[2] = (long) (-2871);
      longArray5[3] = (long) (-2871);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      longArray6[0] = (long) (-2871);
      longArray6[1] = 0L;
      longArray6[2] = (long) (-2871);
      longArray6[3] = (long) (-2871);
      longArray6[4] = (long) (-2871);
      longArray6[5] = 0L;
      longArray6[6] = (long) (-2871);
      longArray6[7] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[9];
      longArray7[0] = (long) (-2871);
      longArray7[1] = 0L;
      longArray7[2] = (long) (-2871);
      longArray7[3] = (long) (-2871);
      longArray7[4] = (-514L);
      longArray7[5] = 0L;
      longArray7[6] = 0L;
      longArray7[7] = (long) (-2871);
      longArray7[8] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[9];
      longArray8[0] = 0L;
      longArray8[1] = 0L;
      longArray8[2] = (long) (-2871);
      longArray8[3] = 0L;
      longArray8[4] = (-514L);
      longArray8[5] = (long) (-2871);
      longArray8[6] = (long) (-2871);
      longArray8[7] = (long) (-2871);
      longArray8[8] = 0L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[6];
      longArray9[0] = 0L;
      longArray9[1] = (-514L);
      longArray9[2] = (long) (-2871);
      longArray9[3] = 0L;
      longArray9[4] = 0L;
      longArray9[5] = 0L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,871 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      floatArray0[1] = (-259.0F);
      floatArray0[2] = 2153.456F;
      MathArrays.linearCombination((double) 2153.456F, (double) (-1.0F), 0.14285714285714285, 1029.73708875973, 1.34217729E8, 0.14285714285714285, 0.14285714285714285, (double) (-259.0F));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.14285714285714285;
      doubleArray0[1] = (-0.12502530217170715);
      doubleArray0[2] = (double) (-259.0F);
      doubleArray0[3] = 0.14285714285714285;
      doubleArray0[4] = (double) 2153.456F;
      doubleArray0[5] = (double) 2153.456F;
      doubleArray0[6] = (double) 2153.456F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1946.5);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 4575.57F;
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 87;
      intArray0[1] = 1351;
      intArray0[2] = 0;
      intArray0[3] = 298;
      intArray0[4] = 659;
      intArray0[5] = (-1280);
      intArray0[6] = 87;
      intArray0[7] = 659;
      MathArrays.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long[][] longArray0 = new long[7][1];
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      longArray1[1] = 10000L;
      longArray1[2] = 1391L;
      longArray1[4] = 0L;
      longArray1[5] = 1589L;
      longArray0[1] = longArray1;
      longArray0[2] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = (-1L);
      longArray2[1] = 0L;
      longArray2[2] = 10000L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = (-1L);
      longArray2[6] = 1391L;
      longArray0[3] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[1] = 0L;
      longArray3[2] = 1L;
      longArray3[3] = (-634L);
      longArray3[4] = 0L;
      longArray3[5] = 1391L;
      longArray3[6] = 1L;
      longArray3[7] = 10000L;
      longArray0[4] = longArray3;
      long[] longArray4 = new long[1];
      longArray4[0] = 0L;
      longArray0[5] = longArray4;
      long[] longArray5 = new long[0];
      longArray0[6] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1375.8335;
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.equals((float[]) null, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.625;
      doubleArray0[2] = 40.19140625;
      doubleArray0[3] = 93.3939;
      doubleArray0[4] = 288.2288;
      doubleArray0[5] = 1013.620097834;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-795.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2994.5386F);
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int[] intArray0 = new int[1];
      int int0 = 1254;
      intArray0[0] = 1254;
      MathArrays.distanceInf(intArray0, intArray0);
      floatArray0[0] = 1310.0F;
      float float0 = 0.0F;
      floatArray0[1] = 0.0F;
      float float1 = (-3187.2F);
      floatArray0[2] = (-3187.2F);
      float float2 = 0.0F;
      floatArray0[3] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int1 = 1567;
      MathArrays.buildArray(field0, 1567);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("number of points ({0})");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.number of points ({0})
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1946.5);
      doubleArray0[1] = (-1.0);
      MathArrays.normalizeArray(doubleArray0, (-1.0));
      MathArrays.scale((-1.0), doubleArray0);
      int int0 = 0;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2111495460, (-489));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2226.10797921459);
      doubleArray0[1] = (-1315.87368283);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 100.0);
      assertArrayEquals(new double[] {62.849223728888006, 37.150776271112}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[1][3];
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (-634L);
      longArray1[4] = 3695L;
      longArray1[5] = 0L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      MathArrays.scaleInPlace((-976.0), doubleArray0);
      double double0 = MathArrays.linearCombination(0.0, 1.34217729E8, 0.0, 2665.15345, 3.834E-20, 1284292.7144420801, 0.0, 834.0);
      assertEquals(4.923978267170935E-14, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2182.6;
      doubleArray0[1] = (-1315.87368283);
      MathArrays.normalizeArray(doubleArray0, 100.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 546.1074651;
      doubleArray0[1] = 1906.98515865;
      doubleArray0[2] = 93.3939;
      doubleArray0[3] = (-428.9021);
      doubleArray0[4] = (-116.01);
      doubleArray0[5] = 0.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2226.10797921459);
      doubleArray0[1] = (-1315.87368283);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 100.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      MathArrays.linearCombination(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int[] intArray0 = new int[1];
      int int0 = 1254;
      intArray0[0] = 1254;
      MathArrays.distanceInf(intArray0, intArray0);
      floatArray0[0] = 1310.0F;
      floatArray0[1] = 0.0F;
      float float0 = (-3187.2F);
      floatArray0[2] = (-3187.2F);
      float float1 = 0.0F;
      floatArray0[3] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 1567;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1567);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int[] intArray0 = new int[1];
      intArray0[0] = 1254;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      floatArray0[0] = 1310.0F;
      floatArray0[1] = 0.0F;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1906.98515865;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3636592.3953113654}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {1906.98515865}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long[][] longArray0 = new long[7][1];
      long[] longArray1 = new long[7];
      longArray1[0] = 10000L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = 1391L;
      longArray1[5] = 0L;
      longArray1[6] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = 0L;
      longArray2[2] = 1391L;
      longArray2[3] = (-1L);
      longArray2[4] = 0L;
      longArray2[5] = 1589L;
      longArray0[1] = longArray2;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (-1L);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-1L);
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-3081.893404738);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double double1 = 2.0;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[5];
      intArray0[0] = 2147033430;
      intArray0[1] = 2;
      intArray0[2] = 79;
      intArray0[3] = (-1946);
      intArray0[4] = 1034;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "[bb8shd(0}XE(";
      stringArray0[1] = "DECREASING";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[3] = "7zSbWsQ%#6?Al].>[y";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 178;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2350), 178);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-2920.5752686511823);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[8];
      double[] doubleArray2 = MathArrays.scale(0.6409968137741089, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[8][9];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      MathArrays.linearCombination(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      float[] floatArray0 = new float[4];
      float float0 = 1310.0F;
      floatArray0[0] = 1310.0F;
      float float1 = 0.0F;
      floatArray0[1] = 0.0F;
      try { 
        MathArrays.normalizeArray(doubleArray1, 1310.0F);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1110.498;
      doubleArray1[1] = 0.0;
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      floatArray0[1] = (-259.0F);
      floatArray0[2] = 2153.456F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MathArrays.linearCombination((-23.693423837), 0.0, (double) (-1.0F), 3380.27, 633.869506221484, (-23.693423837), (double) (-1.0F), 0.5850973129272461);
      double[] doubleArray0 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 3380.27);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1200.91125;
      double double0 = 2249.3517548351056;
      doubleArray0[2] = 2249.3517548351056;
      doubleArray0[3] = 0.0;
      double double1 = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 437.7743965778097;
      doubleArray0[6] = (-2158.0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1574;
      intArray0[1] = 0;
      intArray0[2] = 2626;
      intArray0[3] = (-643);
      intArray0[4] = (-2787);
      intArray0[5] = (-38);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-643));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 178;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2357), 178);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2920.5752686511823);
      doubleArray0[1] = (-2325.9697781862);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-2325.9697781862);
      doubleArray1[2] = (-2920.5752686511823);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (-2920.5752686511823);
      doubleArray1[6] = (-2325.9697781862);
      doubleArray1[7] = (-2920.5752686511823);
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-420.765234546596);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 396.63;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 396.63;
      doubleArray1[2] = 0.0;
      MathArrays.normalizeArray(doubleArray1, (-3081.893404738));
      MathArrays.OrderDirection.values();
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 396.63;
      doubleArray2[1] = 578.2376150883406;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-2920.5752686511823);
      doubleArray2[4] = (-3081.893404738);
      doubleArray2[5] = 2.0;
      doubleArray2[6] = 2.0;
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-420.765234546596);
      doubleArray0[1] = (-420.765234546596);
      doubleArray0[2] = 396.63;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 1486.5338;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-2920.5752686511823);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 8529759.899856925}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2142082939;
      intArray0[1] = (-1509);
      intArray0[2] = 263;
      intArray0[3] = 843;
      intArray0[4] = 1369;
      intArray0[5] = 73;
      intArray0[6] = (-317);
      int[] intArray1 = new int[3];
      intArray1[0] = 263;
      intArray1[1] = 843;
      intArray1[2] = 843;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1906.98515865;
      doubleArray0[2] = 93.3939;
      doubleArray0[3] = (-428.9021);
      doubleArray0[4] = (-116.01);
      doubleArray0[5] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2781;
      intArray0[1] = 2438;
      intArray0[2] = 2;
      intArray0[3] = 246;
      intArray0[4] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {2781, 2438, 2, 246, 1}, intArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MathArrays.linearCombination(0.24690247007974778, 0.24690247007974778, 0.24690247007974778, 0.24690247007974778, 0.24690247007974778, 0.24690247007974778);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MathArrays.linearCombination((-1590.37), (-1590.37), 3259.1369494, 1.304E19);
      double[] doubleArray0 = new double[4];
      try { 
        MathArrays.normalizeArray(doubleArray0, (-1590.37));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2226.10797921459);
      doubleArray0[1] = (-1315.87368283);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double double0 = MathArrays.linearCombination((-13791.436406637999), (-56.7698977923127), (-651.5354636622355), (-2226.10797921459), 0.07073719799518585, Double.NEGATIVE_INFINITY, (-1980.62458), (-1279.433));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4768.8837925);
      doubleArray0[2] = (-2515.4849224);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-3081.893404738);
      doubleArray0[6] = (-3425.174287);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.0);
      MathArrays.OrderDirection.values();
      double[][] doubleArray2 = new double[4][5];
      doubleArray2[2] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-420.765234546596);
      doubleArray0[0] = (-420.765234546596);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 396.63;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double double1 = 2.0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 396.63;
      doubleArray1[2] = 0.0;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-3081.893404738));
      MathArrays.OrderDirection.values();
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-3081.893404738);
      doubleArray3[2] = 2.0;
      doubleArray3[3] = (-3081.893404738);
      double[][] doubleArray4 = new double[2][3];
      doubleArray4[0] = doubleArray0;
      doubleArray4[1] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray3, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      long[][] longArray0 = new long[4][6];
      long[] longArray1 = new long[2];
      longArray1[0] = (-290L);
      longArray1[1] = 1745L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = (-290L);
      MathArrays.OrderDirection.values();
      int[] intArray0 = new int[4];
      intArray0[0] = 2145906793;
      intArray0[1] = 2145906793;
      intArray0[2] = 2145906793;
      intArray0[3] = 2145906793;
      MathArrays.copyOf(intArray0);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 2145906793;
      doubleArray2[2] = (double) 2145906793;
      doubleArray2[3] = (double) 2145906793;
      doubleArray2[4] = (double) (-290L);
      doubleArray2[5] = (double) 2145906793;
      MathArrays.equals(doubleArray0, doubleArray2);
      MathArrays.copyOf(intArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-962), (-270));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      int int1 = (-2068);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, (-2068));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1590.37), (-1590.37), 3259.1369494, 1.304E19);
      assertEquals(4.2499145820176004E22, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3259.1369494;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4.2499145820176004E22;
      doubleArray0[3] = 4.2499145820176004E22;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3.612354790889167E45, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(2243.8491365531795, 3.612354790889167E45, 0.0, 3259.1369494, 0.0, 3175.7269347, 0.0, (-1.0));
      assertEquals(8.105579178460399E48, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = (-462);
      intArray0[2] = (-462);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      int[] intArray1 = MathArrays.copyOf(intArray0, 87);
      assertEquals(87, intArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      MathArrays.scaleInPlace(3.32, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-3.32)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 330.161714536325;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1461.2743292781;
      doubleArray0[4] = 157.9;
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (330.162 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 3.141592653589793;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-353.9));
      MathArrays.scale((-2174.360590774), doubleArray1);
      int int0 = 2111495460;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-1), 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3346.9897784609884, 1.89472749121386E7, 3346.9897784609884, 819.457, Double.NaN, (-576.319));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      double double0 = 1.304E19;
      double double1 = 0.0;
      MathArrays.linearCombination(0.0, 0.0, 1.304E19, 0.0, 1.304E19, 1.304E19);
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      MathArrays.copyOf(doubleArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1946.5);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1946.5);
      doubleArray0[3] = (-1946.5);
      doubleArray0[4] = (-1946.5);
      MathArrays.scale((-1946.5), doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("afL{?Wm;Fz&ZOKZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.afL{?Wm;Fz&ZOKZ
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2165;
      intArray0[1] = 134217729;
      intArray0[2] = 0;
      intArray0[3] = 324;
      intArray0[4] = 477;
      intArray0[5] = 1820;
      intArray0[6] = 3560;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2001);
      assertEquals(2001, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = (-1.0);
      double[] doubleArray1 = MathArrays.scale(Double.NEGATIVE_INFINITY, doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double double0 = (-152.0956642838);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-152.0956642838);
      doubleArray0[1] = (-152.0956642838);
      doubleArray0[2] = (-152.0956642838);
      doubleArray0[3] = (-152.0956642838);
      MathArrays.scale((-152.0956642838), doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-281));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1.0));
      double[] doubleArray2 = MathArrays.scale((-1.0), doubleArray0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {-0.0, 1.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(1.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      floatArray0[1] = (-259.0F);
      floatArray0[2] = 2153.456F;
      MathArrays.linearCombination((double) 2153.456F, (double) (-1.0F), 0.14285714285714285, 1029.73708875973, 1.34217729E8, 0.14285714285714285, 0.14285714285714285, (double) (-259.0F));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.9171917934957992E7;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = 1029.73708875973;
      doubleArray0[3] = 0.14285714285714285;
      MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int[] intArray0 = new int[1];
      intArray0[0] = 1254;
      MathArrays.distanceInf(intArray0, intArray0);
      floatArray0[0] = 1310.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-3187.2F);
      int int0 = 584;
      MathArrays.distance(intArray0, intArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1946;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 1254;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      longArray0[6] = 0L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      long long0 = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 3695L;
      longArray0[3] = 0L;
      long long1 = 1935L;
      longArray0[4] = 1935L;
      longArray0[5] = (-493L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -493 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double double0 = (-946.17860538618);
      MathArrays.linearCombination((-946.17860538618), (-946.17860538618), (-946.17860538618), (-946.17860538618));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1521;
      intArray0[1] = 29;
      intArray0[2] = (-7);
      intArray0[3] = (-1413);
      intArray0[4] = 2585;
      intArray0[5] = 584;
      intArray0[6] = 1946;
      intArray0[7] = 1;
      MathArrays.distance(intArray0, intArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) 1521;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.checkOrder(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      MathArrays.linearCombination(0.0, 633.869506221484, (-1.0), 0.0, 1.34217729E8, (double) (-1.0F), (-1327.1275958042), 0.0);
      double[] doubleArray0 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1327.1275958042);
      doubleArray1[1] = 1.34217729E8;
      doubleArray1[2] = 1.34217729E8;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-811.22892852);
      doubleArray1[5] = (-1.0);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3657.2006);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1375.8335);
      doubleArray0[0] = (-1375.8335);
      double double1 = 1.0E-5;
      doubleArray0[1] = 1.0E-5;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,375.833 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2.608E19}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1750.6842F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 3119.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      long[][] longArray0 = new long[7][1];
      long[] longArray1 = new long[7];
      longArray1[0] = 10000L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = 1391L;
      longArray1[5] = 0L;
      longArray1[6] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = 0L;
      longArray2[1] = 10000L;
      longArray2[2] = 1391L;
      longArray2[3] = (-1L);
      longArray2[4] = 0L;
      longArray2[5] = 1589L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = 10000L;
      longArray3[1] = 0L;
      longArray3[2] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = (-1L);
      longArray4[1] = 0L;
      longArray4[2] = 10000L;
      longArray4[3] = 0L;
      longArray4[4] = 0L;
      longArray4[5] = (-1L);
      longArray4[6] = 1391L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      longArray5[0] = 1L;
      longArray5[1] = 0L;
      longArray5[2] = 1L;
      longArray5[3] = (-634L);
      longArray5[4] = 0L;
      longArray5[5] = 1391L;
      longArray5[6] = 1L;
      longArray5[7] = 10000L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1040.38741339656);
      double double0 = 0.0;
      doubleArray0[3] = 0.0;
      double double1 = (-634.6);
      doubleArray0[4] = (-634.6);
      int int0 = (-3511);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-3511));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2871);
      intArray0[1] = 0;
      intArray0[2] = (-35);
      intArray0[3] = 205;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 51.3678596602808;
      doubleArray0[1] = (-82.44785996);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 331.63892498696;
      doubleArray0[5] = (-415.51495135564);
      doubleArray0[6] = 899.29975472145;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1200.91125;
      doubleArray0[2] = 2249.3517548351056;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 437.7743965778097;
      doubleArray0[6] = (-2158.0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1574;
      intArray0[1] = 0;
      intArray0[2] = 2626;
      intArray0[3] = (-643);
      intArray0[4] = (-2787);
      intArray0[5] = (-38);
      intArray0[6] = (-939);
      intArray0[7] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4768.8837925);
      double double1 = (-2515.4849224);
      doubleArray0[2] = (-2515.4849224);
      double double2 = 3.834E-20;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 0.0;
      double double3 = (-3081.893404738);
      doubleArray0[5] = (-3081.893404738);
      double double4 = (-3425.174287);
      doubleArray0[6] = (-3425.174287);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double double5 = 2.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.0);
      MathArrays.OrderDirection.values();
      double[][] doubleArray2 = new double[4][5];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -2,515.485)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2226.10797921459);
      doubleArray0[1] = (-1315.87368283);
      doubleArray0[2] = 100.0;
      MathArrays.normalizeArray(doubleArray0, (-2226.10797921459));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-2,226.108 <= -1,315.874)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 58.67190359;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double double1 = 1.0;
      doubleArray0[3] = 1.0;
      double double2 = (-748.299649);
      doubleArray0[4] = (-748.299649);
      doubleArray0[5] = 1.304E19;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (58.672 >= -\u221E)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-420.765234546596);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 396.63;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 1486.5338;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double double0 = 682.174944;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale(682.174944, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
