/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:46:33 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1684.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1684.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 3799L;
      longArray0[2] = 573L;
      longArray0[3] = 1L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1L, 3799L, 573L, 1L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1684.0)}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1684.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.4E-45F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2108.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.4E-45F, 0.0F, (-2108.0F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1018.3789);
      doubleArray0[1] = (double) 1.4E-45F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 1.4E-45F;
      doubleArray0[5] = (double) (-2108.0F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2341.102215616655, double0, 0.01);
      assertArrayEquals(new double[] {(-1018.3789), 1.401298464324817E-45, 0.0, 0.0, 1.401298464324817E-45, (-2108.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MathArrays.scaleInPlace((-32.3711648107542), doubleArray0);
      assertArrayEquals(new double[] {32966.11121169457, (-4.536166353771542E-44), -0.0, -0.0, (-4.536166353771542E-44), 68238.41542106986}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long[][] longArray0 = new long[8][2];
      long[] longArray1 = new long[6];
      longArray1[0] = 376L;
      longArray1[1] = 2047L;
      longArray1[2] = 0L;
      longArray1[3] = 4577762542105553359L;
      longArray1[4] = (-557L);
      longArray1[5] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-291L);
      longArray2[1] = (-557L);
      longArray2[2] = (-557L);
      longArray2[3] = 2047L;
      longArray2[4] = 376L;
      longArray2[5] = 1272L;
      longArray2[6] = 0L;
      longArray2[7] = (-172L);
      longArray2[8] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[1] = 2047L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = (-172L);
      longArray3[5] = (-291L);
      longArray3[6] = (-557L);
      longArray3[7] = (-291L);
      longArray3[8] = (-172L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 434L;
      longArray4[1] = (-5561L);
      longArray4[2] = (-291L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = 434L;
      longArray5[1] = 2047L;
      longArray5[2] = 4577762542105553359L;
      longArray5[3] = 376L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = (-1516L);
      longArray6[1] = 434L;
      longArray6[2] = 4577762542105553359L;
      longArray6[3] = (-5561L);
      longArray6[4] = (-557L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[8];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray7[0] = (-919L);
      longArray7[1] = (-557L);
      longArray7[2] = 4577762542105553359L;
      longArray7[3] = (-557L);
      longArray7[4] = 0L;
      longArray7[5] = 2047L;
      longArray7[6] = (-573L);
      longArray7[7] = (-1516L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[1];
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray4));
      
      longArray8[0] = (-291L);
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2589);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(2589, doubleArray1.length);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1483.3576489558);
      doubleArray0[1] = (-1483.3576489558);
      doubleArray0[2] = 1975.424953947185;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8303003.578108595, double0, 0.01);
      assertArrayEquals(new double[] {(-1483.3576489558), (-1483.3576489558), 1975.424953947185}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1483.3576489558), (-1483.3576489558), 1975.424953947185}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1483.3576489558), (-1483.3576489558), 1975.424953947185}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1483.3576489558), (-1483.3576489558), 1975.424953947185}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        MathArrays.normalizeArray((double[]) null, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-7.9702297164664);
      doubleArray0[1] = (-66.90528256);
      doubleArray0[2] = 1834.0168892507781;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-7.9702297164664), (-66.90528256), 1834.0168892507781}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 753, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-138.8322180144235);
      doubleArray0[2] = (-1376.5);
      doubleArray0[3] = 1.63E18;
      doubleArray0[4] = 1038.95549738;
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 3556.98;
      doubleArray0[7] = (-385.8071);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-138.8322180144235), (-1376.5), 1.63E18, 1038.95549738, 1.34217729E8, 3556.98, (-385.8071)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NaN, (-138.8322180144235), (-1376.5), 1.63E18, 1038.95549738, 1.34217729E8, 3556.98, (-385.8071)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-138.8322180144235), (-1376.5), 1.63E18, 1038.95549738, 1.34217729E8, 3556.98, (-385.8071)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-138.8322180144235), (-1376.5), 1.63E18, 1038.95549738, 1.34217729E8, 3556.98, (-385.8071)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "DECREASING";
      stringArray0[1] = ">Jvo44/ QnDoh/g";
      stringArray0[2] = "Fp=}V6P*oF:F";
      stringArray0[3] = "_N6 kOEt_:u";
      stringArray0[4] = "";
      stringArray0[5] = "+EWlE;";
      stringArray0[6] = "0]3bF;";
      stringArray0[7] = "'fMyD[\"hivzIZ";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.5000000000042687;
      doubleArray0[1] = 0.5000000000042687;
      doubleArray0[2] = 1358.0;
      doubleArray0[3] = 0.5000000000042687;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, (-2.6033824355191673E-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2.6079999999999964E18;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 3497.5;
      doubleArray0[4] = (-364.5377149607);
      doubleArray0[5] = 1.1921056801463227E-8;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.329824289144998E19, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 2.6079999999999964E18, 1.304E19, 3497.5, (-364.5377149607), 1.1921056801463227E-8}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 892.066211;
      doubleArray0[3] = (-3768.10657558);
      doubleArray0[4] = (-3768.10657558);
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = 1.304E19;
      double[] doubleArray1 = MathArrays.scale((-3768.10657558), doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 892.066211, (-3768.10657558), (-3768.10657558), 1.304E19, 1.304E19, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4.91361097455632E22), (-4.91361097455632E22), (-3361400.5555218356), 1.4198627164929235E7, 1.4198627164929235E7, (-4.91361097455632E22), (-4.91361097455632E22), (-4.91361097455632E22), (-4.91361097455632E22)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3.194134624589264E19, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 892.066211, (-3768.10657558), (-3768.10657558), 1.304E19, 1.304E19, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals((-3.8444092264928645E42), double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 892.066211, (-3768.10657558), (-3768.10657558), 1.304E19, 1.304E19, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4.91361097455632E22), (-4.91361097455632E22), (-3361400.5555218356), 1.4198627164929235E7, 1.4198627164929235E7, (-4.91361097455632E22), (-4.91361097455632E22), (-4.91361097455632E22), (-4.91361097455632E22)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-2061);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2061));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 2859, (-989));
      assertNotNull(objectArray0);
      assertEquals(2859, objectArray0.length);
      
      Double double0 = new Double(2698.101);
      assertEquals(2698.101, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double((-2072.2843768));
      assertEquals((-2072.2843768), (double)double0, 0.01);
      assertNotNull(double0);
      
      Integer integer0 = new Integer(271);
      assertEquals(271, (int)integer0);
      assertNotNull(integer0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 4755;
      int int1 = 2145939084;
      // Undeclared exception!
      MathArrays.buildArray(field0, 4755, 2145939084);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 312;
      intArray0[1] = 2;
      intArray0[2] = 134217729;
      intArray0[3] = 1212;
      intArray0[4] = 1426;
      intArray0[5] = 357;
      intArray0[6] = (-2571);
      intArray0[7] = (-4306);
      intArray0[8] = 1;
      int int0 = new Integer(1212);
      assertEquals(1212, int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 66.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {66.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1798.4083753383);
      doubleArray0[1] = (double) 2;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1798.4083753383), 2.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {3234272.6844869438, 4.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1798.4083753383), 2.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 286.825F;
      floatArray0[1] = (-2722.2F);
      floatArray0[2] = 0.0F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 286.825F;
      floatArray1[2] = 286.825F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {286.825F, (-2722.2F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 286.825F, 286.825F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 146;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2289);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {146}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2289, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[1];
      int int0 = 302;
      Integer integer0 = new Integer(302);
      assertEquals(302, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, (int) integerArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 192.29355028;
      doubleArray0[1] = (-1294.40529);
      doubleArray0[2] = 2858.482926483611;
      doubleArray0[3] = 2.17333333335188787E18;
      doubleArray0[4] = 972.24372;
      doubleArray0[5] = 0.1256551444530487;
      doubleArray0[6] = 3339.158;
      doubleArray0[7] = 1.6159735104977849E24;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1249;
      intArray0[1] = (-2144014929);
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2144014929);
      intArray1[1] = 1249;
      intArray1[2] = (-2144014929);
      intArray1[3] = (-2144014929);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals((-6934940), int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1249, (-2144014929)}, intArray0);
      assertArrayEquals(new int[] {(-2144014929), 1249, (-2144014929), (-2144014929)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[2];
      longArray1[0] = 1023L;
      longArray1[1] = 1023L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1023L;
      longArray3[1] = 1023L;
      longArray3[2] = 1023L;
      longArray3[3] = 1023L;
      longArray3[4] = 1023L;
      longArray3[5] = 1L;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1023L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1L;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1023L;
      doubleArray2[1] = (double) 1023L;
      doubleArray2[2] = (double) 1023L;
      doubleArray2[3] = (double) 1023L;
      double[] doubleArray3 = MathArrays.convolve(doubleArray0, doubleArray2);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {1023.0, 1023.0, 1023.0, 1023.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1046529.0, 1046529.0, 1047552.0, 1047552.0, 1023.0, 1023.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1023.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(4, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      assertEquals(3, doubleArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray3);
      assertEquals(1047551.0, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {1023.0, 1023.0, 1023.0, 1023.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1046529.0, 1046529.0, 1047552.0, 1047552.0, 1023.0, 1023.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1023.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(4, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray3);
      assertEquals(1812641.3990301557, double1, 0.01);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {1023.0, 1023.0, 1023.0, 1023.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1046529.0, 1046529.0, 1047552.0, 1047552.0, 1023.0, 1023.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1023.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(4, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 7.441009893691904E35;
      doubleArray0[1] = 892.066211;
      doubleArray0[2] = 892.066211;
      doubleArray0[3] = 7.441009893691904E35;
      doubleArray0[4] = 892.066211;
      doubleArray0[5] = 892.066211;
      doubleArray0[6] = 2.608E18;
      double[] doubleArray1 = MathArrays.scale(7.441009893691904E35, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {7.441009893691904E35, 892.066211, 892.066211, 7.441009893691904E35, 892.066211, 892.066211, 2.608E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.53686282380208E71, 6.637873501879249E38, 6.637873501879249E38, 5.53686282380208E71, 6.637873501879249E38, 6.637873501879249E38, 1.9406153802748485E54}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.0523177109411473E36, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {7.441009893691904E35, 892.066211, 892.066211, 7.441009893691904E35, 892.066211, 892.066211, 2.608E18}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.4794255495071411);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-646);
      intArray0[1] = (-65);
      intArray0[2] = 150;
      intArray0[3] = (-1690);
      intArray0[4] = 2128;
      intArray0[5] = 17;
      intArray0[6] = 1765;
      intArray0[7] = 237;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-646), (-65), 150, (-1690), 2128, 17, 1765, 237}, intArray0);
      assertArrayEquals(new int[] {(-646), (-65), 150, (-1690), 2128, 17, 1765, 237}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.scaleInPlace((-1365.906523), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 146);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(16, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Double double0 = new Double(1.304E19);
      assertEquals(1.304E19, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1.304E19;
      MathArrays.scaleInPlace(1.304E19, doubleArray0);
      assertArrayEquals(new double[] {1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38, 1.700416E38}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 2781.9995F;
      floatArray0[3] = (-1532.904F);
      floatArray0[4] = 5087.3F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-37.95427F);
      floatArray0[7] = (-2350.0F);
      floatArray0[8] = 3174.8F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {Float.NaN, 0.0F, 2781.9995F, (-1532.904F), 5087.3F, 1.0F, (-37.95427F), (-2350.0F), 3174.8F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      int int0 = 135;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 135, 21);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-3847.41);
      doubleArray0[3] = 1.5874010519681994;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 1.34217729E8;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), Double.NaN, (-3847.41), 1.5874010519681994, 1.34217729E8, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), Double.NaN, (-3847.41), 1.5874010519681994, 1.34217729E8, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-1.0F);
      doubleArray2[1] = 1.34217729E8;
      doubleArray2[2] = 1.5874010519681994;
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = (-3847.41);
      doubleArray2[5] = Double.NaN;
      doubleArray2[6] = (-3847.41);
      doubleArray2[7] = Double.NaN;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((-4007.1004723), (-1179.2), 458.09596513647, (-482.416));
      assertEquals(4504180.053818885, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1111);
      assertEquals(1111, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1293);
      assertEquals(1293, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, integerArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 129);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-376.60193618914343);
      doubleArray0[1] = (-2887.06203361659);
      doubleArray0[1] = 20.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-376.60193618914343), 20.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.valueOf("INCREASING");
      assertEquals(MathArrays.OrderDirection.INCREASING, mathArrays_OrderDirection0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-691.4812364887939);
      doubleArray0[2] = (-3.940510424527919E-20);
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 1157.249848;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1213.50308173));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-691.4812364887939), (-3.940510424527919E-20), 1.34217729E8, 1157.249848}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.006251869300464314, 3.5627222911152616E-25, (-1213.4988705897265), (-0.01046300957407894)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, (-1213.50308173));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, (-691.4812364887939), (-3.940510424527919E-20), 1.34217729E8, 1157.249848}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.006251869300464314, 3.5627222911152616E-25, (-1213.4988705897265), (-0.01046300957407894)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, (-691.4812364887939), (-3.940510424527919E-20), 1.34217729E8, 1157.249848}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 223;
      intArray0[1] = (-164);
      intArray0[2] = (-53);
      intArray0[3] = 276;
      intArray0[4] = (-96);
      intArray0[5] = (-266);
      intArray0[6] = 86;
      intArray0[7] = 107;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {223, (-164), (-53), 276, (-96), (-266), 86, 107}, intArray1);
      assertArrayEquals(new int[] {223, (-164), (-53), 276, (-96), (-266), 86, 107}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      float float1 = 0.0F;
      floatArray0[1] = 0.0F;
      float float2 = 0.0F;
      floatArray0[2] = 0.0F;
      float float3 = (-1873.597F);
      floatArray0[3] = (-1873.597F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1873.597F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1873.597F);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0F);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {-0.0, -0.0, 0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1873.5970458984375), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      double double0 = (-1547.472286872401);
      double double1 = 8269489.763677923;
      double double2 = MathArrays.linearCombination(541.509, (double) 0.0F, (double) 0.0F, (-1547.472286872401), 8269489.763677923, (double) 0.0F, 8269489.763677923, (double) 0.0F);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 149, 149);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-3);
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(3.0, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {(-3), 0, 0, 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(5, intArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-3847.41), (double) (-1.0F), 161.133686627866, 0.0, 161.133686627866, 164.16518387);
      assertEquals(30299.951292914582, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3438;
      intArray0[1] = (-3310);
      intArray0[2] = 152;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 152;
      intArray1[1] = 3438;
      intArray1[2] = (-3310);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(6748, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {3438, (-3310), 152}, intArray0);
      assertArrayEquals(new int[] {152, 3438, (-3310)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 117;
      Integer integer0 = new Integer(117);
      assertEquals(117, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn("").when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, int0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1317;
      intArray0[1] = (-2486);
      intArray0[2] = 412;
      intArray0[3] = 2147483414;
      int[] intArray1 = MathArrays.copyOf(intArray0, 412);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1317, (-2486), 412, 2147483414}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(412, intArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1317;
      longArray0[1] = (long) 412;
      longArray0[2] = (long) 2147483414;
      longArray0[3] = 3292L;
      longArray0[4] = (long) 2147483414;
      longArray0[5] = (long) 2147483414;
      longArray0[6] = (long) 412;
      longArray0[7] = (long) 2147483414;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1317L, 412L, 2147483414L, 3292L, 2147483414L, 2147483414L, 412L, 2147483414L}, longArray0);
      assertEquals(8, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-947.5997204277538);
      doubleArray0[1] = (double) 3292L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-947.5997204277538), 3292.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 412);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int int0 = MathArrays.distance1(intArray1, intArray1);
      assertEquals(0, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1317, (-2486), 412, 2147483414}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(412, intArray1.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 329.61424803);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-947.5997204277538), 3292.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-133.22911279434823), 462.84336082434817}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-305.2077772105);
      doubleArray0[1] = 1916.0;
      doubleArray0[2] = (-1968.147442219272);
      doubleArray0[3] = 1.073741824E9;
      doubleArray0[4] = 361.870764;
      doubleArray0[5] = 3029.992;
      doubleArray0[6] = 0.0;
      doubleArray0[5] = 3694.0;
      doubleArray0[8] = 277.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-305.2077772105), 1916.0, (-1968.147442219272), 1.073741824E9, 361.870764, 3694.0, 0.0, 0.0, 277.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 117;
      Integer integer0 = new Integer(117);
      assertEquals(117, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, int0);
      assertNotNull(objectArray0);
      assertEquals(117, objectArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 117;
      floatArray0[1] = (float) int0;
      boolean boolean2 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 536;
      intArray0[0] = 536;
      int int1 = 0;
      int int2 = 155;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-895.822751123);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[4] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 396L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (long) 0;
      longArray4[1] = 396L;
      longArray4[2] = (long) 0;
      longArray4[3] = (long) 0;
      longArray4[4] = (long) 0;
      MathArrays.checkNonNegative(longArray4);
      assertNotSame(longArray4, longArray1);
      assertNotSame(longArray4, longArray2);
      assertNotSame(longArray4, longArray3);
      assertArrayEquals(new long[] {0L, 396L, 0L, 0L, 0L}, longArray4);
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertEquals(5, longArray4.length);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 396L;
      doubleArray3[3] = (double) 0L;
      doubleArray3[4] = (double) 396L;
      doubleArray3[5] = (double) 0L;
      doubleArray3[6] = (double) 0L;
      doubleArray3[7] = 2158.9978639035;
      try { 
        MathArrays.ebeMultiply(doubleArray3, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(117);
      assertEquals(117, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-895.822751123);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, (double[]) null);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-895.822751123);
      doubleArray2[1] = (-895.822751123);
      doubleArray2[2] = (-895.822751123);
      doubleArray2[3] = (-895.822751123);
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 117;
      Integer integer0 = new Integer(117);
      assertEquals(117, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      double[] doubleArray0 = null;
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 0, (double) 0, 1.0, (double) 0, 1187.5517588604819, 1.0, 1187.5517588604819, (double) 0);
      assertEquals(1187.5517588604819, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-300.0F);
      floatArray0[1] = (-300.0F);
      floatArray0[2] = 876.9958F;
      floatArray0[3] = 876.9958F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-300.0F), (-300.0F), 876.9958F, 876.9958F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 876.9958F, (double) 876.9958F, (double) (-300.0F), (double) 876.9958F);
      assertEquals(506022.87660465017, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-300.0F);
      floatArray1[1] = 876.9958F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 876.9958F;
      floatArray1[5] = 876.9958F;
      floatArray1[6] = 876.9958F;
      floatArray1[7] = 876.9958F;
      floatArray1[8] = (-300.0F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-300.0F), (-300.0F), 876.9958F, 876.9958F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-300.0F), 876.9958F, 0.0F, 0.0F, 876.9958F, 876.9958F, 876.9958F, 876.9958F, (-300.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer integer0 = new Integer(3804);
      assertEquals(3804, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-664));
      assertEquals((-664), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(3220);
      assertEquals(3220, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer1;
      integerArray0[1] = integer2;
      integerArray0[2] = integer2;
      integerArray0[3] = integer1;
      Integer integer3 = new Integer((-664));
      assertEquals((-664), (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[5] = integer3;
      integerArray0[6] = integer2;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(3220);
      assertEquals(3220, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(3220, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(3, integerArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 4433L;
      longArray0[1] = (long) (int)integerArray0[1];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {4433L, 3220L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 3220;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (int) integerArray0[0];
      intArray0[4] = (-1);
      intArray0[5] = (int) integerArray0[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {3220, (-1), (-1), 3220, (-1), 3220}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 1439;
      intArray0[0] = 1439;
      intArray0[1] = 0;
      int int1 = 2146775571;
      intArray0[2] = 0;
      intArray0[0] = (-2080);
      intArray0[2] = (-2261);
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-2261);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 282.0;
      doubleArray0[1] = 282.0;
      doubleArray0[2] = 282.0;
      doubleArray0[3] = 282.0;
      MathArrays.scaleInPlace(282.0, doubleArray0);
      assertArrayEquals(new double[] {79524.0, 79524.0, 79524.0, 79524.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 282.0;
      doubleArray1[1] = 282.0;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1.0F);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1989;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 134217729;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {1989, Integer.MAX_VALUE, 134217729}, intArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer integer0 = new Integer(3220);
      assertEquals(3220, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(3220);
      assertEquals(3220, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-2146203097));
      assertEquals((-2146203097), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-895.822751123);
      doubleArray0[0] = (-895.822751123);
      float float0 = 1677.3394F;
      float float1 = 876.9958F;
      float float2 = 0.0F;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 876.9958F;
      floatArray0[1] = 876.9958F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[1] = 1677.3394F;
      float float3 = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 1677.3394F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {876.9958F, 876.9958F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1677.3394F, 0.0F, 1677.3394F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(7, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      double double1 = 2710.786256911008;
      double double2 = MathArrays.linearCombination(2710.786256911008, (-1178.9608352), (double) 1.0F, (-414.3151948));
      assertEquals((-3196325.144691284), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1677.3394F;
      doubleArray1[1] = (-1178.9608352);
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[2];
      longArray1[0] = 1023L;
      longArray1[1] = (-1676L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-1676L);
      longArray3[1] = 1023L;
      longArray3[2] = (-1676L);
      longArray3[3] = 1023L;
      longArray3[4] = (-1676L);
      longArray3[5] = 1L;
      longArray3[6] = (-1676L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (double) (-1676L);
      doubleArray0[2] = (double) 1L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, (-1676.0), 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      assertFalse(boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {3.834E-20, (-1676.0), 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3.834E-20, (-1676.0), 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(1.304E19, 3264.3538, (double) (-1676L), 2096.0, (double) (-1676L), 3.834E-20);
      assertEquals(4.2567173551999995E22, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1483.3576489558);
      doubleArray0[1] = (-1483.3576489558);
      doubleArray0[2] = 1975.424953947185;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8303003.578108595, double0, 0.01);
      assertArrayEquals(new double[] {(-1483.3576489558), (-1483.3576489558), 1975.424953947185}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1483.3576489558), (-1483.3576489558), 1975.424953947185}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1483.3576489558), (-1483.3576489558), 1975.424953947185}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1483.3576489558), (-1483.3576489558), 1975.424953947185}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2118);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = (-2035.375194179136);
      doubleArray0[2] = 1.5874010519681994;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 356.22;
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = (-3847.41);
      doubleArray0[7] = (-3694.0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {(-20.0), (-2035.375194179136), 1.5874010519681994, Double.NaN, 356.22, 1.34217729E8, (-3847.41), (-3694.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-20.0), (-2035.375194179136), 1.5874010519681994, Double.NaN, 356.22, 1.34217729E8, (-3847.41), (-3694.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1260.511593;
      doubleArray0[2] = 1.34217729E8;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1260.511593, 1.34217729E8}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-2035.375194179136);
      doubleArray0[2] = (-2035.375194179136);
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (-2035.375194179136);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, (-2035.375194179136)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 4142752.181079756}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = MathArrays.linearCombination((-2035.375194179136), Double.NaN, (-2035.375194179136), 980.6114, (-2035.375194179136), 980.6114, (-2035.375194179136), (-4831.2675089));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 2.0, 3.0, 2.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = MathArrays.linearCombination((double) (-1.0F), 980.6114, (-1.0), (double) (-1.0F), (-1994.362039), 980.6114, 5284771.814558197, (-1994.362039));
      assertEquals((-1.0541704965494587E10), double0, 0.01);
      
      MathArrays.scaleInPlace((-1.0541704965494587E10), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0541704965494587E10, 1.0541704965494587E10, 1.0541704965494587E10}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 980.6114;
      doubleArray2[1] = (double) (-1.0F);
      doubleArray2[2] = (double) (-1.0F);
      doubleArray2[3] = 980.6114;
      doubleArray2[4] = (-1427.566869639);
      doubleArray2[5] = (double) (-1.0F);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = (-300.0F);
      floatArray0[0] = (-300.0F);
      floatArray0[1] = 1677.3394F;
      float float1 = 876.9958F;
      floatArray0[2] = 876.9958F;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3031.84;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3031.84}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9192053.785600001}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1362.4124F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1362.4124F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(3031.84, (double) 0.0F, 1079.9798047046, (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {3031.84}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9192053.785600001}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-9189021.945600001)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {3031.84}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-300.0F);
      double double0 = MathArrays.linearCombination((double) (-300.0F), 0.1256551444530487, 0.9285714285714286, 0.9285714285714286, (-1382.40134), (-1382.40134));
      assertEquals(1910996.6305353574, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-300.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[2] = 1975.424953947185;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 1975.424953947185}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 1975.424953947185}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 1975.424953947185}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[2];
      longArray1[0] = 1023L;
      longArray1[1] = (-1676L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-1676L);
      longArray3[1] = 1023L;
      longArray3[2] = (-1676L);
      longArray3[3] = 1023L;
      longArray3[4] = (-1676L);
      longArray3[5] = 1L;
      longArray3[6] = (-1676L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (double) (-1676L);
      doubleArray0[2] = (double) 1L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, (-1676.0), 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1676.000298329329, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, (-1676.0), 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1.0F);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-3037);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3037), (-3037));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 536;
      intArray0[1] = 0;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (-2377L);
      longArray0[2] = (long) 0;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,377 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-895.822751123);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "DECREASING";
      stringArray0[1] = "number of points ({0})";
      stringArray0[2] = "G";
      stringArray0[3] = "#JhnBgctXveN+4";
      stringArray0[4] = "NOT_POSITIVE_WINDOW_SIZE";
      stringArray0[5] = ":l`f'ag";
      stringArray0[6] = "LZjzNH`cK\"`9QLWBatz";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      double[] doubleArray3 = MathArrays.scale(0L, doubleArray1);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray3);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      long[][] longArray0 = new long[0][5];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[][] doubleArray1 = new double[7][1];
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-1.0F);
      doubleArray2[1] = (double) (-1.0F);
      doubleArray2[2] = (double) (-1.0F);
      doubleArray2[3] = 1302.7;
      doubleArray2[4] = (double) (-1.0F);
      doubleArray2[5] = (double) (-1.0F);
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1302.7;
      doubleArray3[1] = (double) (-1.0F);
      doubleArray1[4] = doubleArray3;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray1, mathArrays_OrderDirection1, false);
      assertTrue(boolean1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      assertEquals(2, stringArray1.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1.0F);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-3037);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3037), (-3037));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1483.3576489558);
      doubleArray0[1] = (-1483.3576489558);
      doubleArray0[2] = 1975.424953947185;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8303003.578108595, double0, 0.01);
      assertArrayEquals(new double[] {(-1483.3576489558), (-1483.3576489558), 1975.424953947185}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1483.3576489558), (-1483.3576489558), 1975.424953947185}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1483.3576489558), (-1483.3576489558), 1975.424953947185}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 533;
      intArray1[8] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-895.822751123);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = 0L;
      longArray2[4] = (long) 0;
      longArray0[1] = longArray2;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1483.3576489558);
      int[] intArray0 = new int[3];
      intArray0[0] = 102;
      intArray0[1] = (-2335);
      intArray0[2] = 272;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {102, (-2335), 272}, intArray0);
      assertEquals(3, intArray0.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {102, (-2335), 272}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1483.3576489558);
      doubleArray1[1] = (double) (-2335);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 272;
      doubleArray1[5] = 348.0;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-895.822751123);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = 0L;
      longArray2[4] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 396L;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "kt'Z2Ldhc$SFr!6jr";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-895.822751123);
      doubleArray3[1] = (double) 0L;
      doubleArray3[2] = (double) 0L;
      doubleArray3[3] = (double) 0L;
      doubleArray3[4] = (double) 396L;
      doubleArray3[5] = (double) 0L;
      doubleArray3[6] = (double) 0L;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray3);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123), 0.0, 0.0, 0.0, 396.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-895.822751123);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      int int0 = (-40);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-40));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[5] = 0.0;
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6.283185307179586, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      FieldElement<String> fieldElement1 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0, fieldElement1, fieldElement0, fieldElement1, fieldElement0).when(field0).getZero();
      FieldElement<String>[][] fieldElementArray0 = MathArrays.buildArray(field0, 155, 178);
      assertNotNull(fieldElementArray0);
      assertEquals(155, fieldElementArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 155;
      doubleArray0[1] = (double) 178;
      doubleArray0[2] = (double) 178;
      doubleArray0[3] = 2286.27319763;
      doubleArray0[4] = (double) 155;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {155.0, 178.0, 178.0, 2286.27319763, 155.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 178;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {178}, intArray0);
      assertEquals(1, intArray0.length);
      
      long[][] longArray0 = new long[2][7];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 178;
      longArray1[1] = (long) 178;
      longArray1[2] = (long) 178;
      longArray1[3] = (long) 178;
      longArray1[4] = (long) 155;
      longArray1[5] = (-1390L);
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 178;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray0[0] = longArray1;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 536;
      intArray0[1] = 0;
      intArray0[0] = 277;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {277, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = new int[12];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 277;
      intArray1[1] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "B=<xW`B/RZ(U@[=";
      stringArray0[2] = "";
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0, fieldElement0, fieldElement0, fieldElement0, fieldElement0).when(field0).getZero();
      FieldElement<String>[][] fieldElementArray0 = MathArrays.buildArray(field0, 155, 178);
      assertNotNull(fieldElementArray0);
      assertEquals(155, fieldElementArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 155;
      doubleArray0[1] = (double) 178;
      doubleArray0[2] = (double) 178;
      doubleArray0[3] = 2286.27319763;
      doubleArray0[4] = (double) 155;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {155.0, 178.0, 178.0, 2286.27319763, 155.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 178;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {178}, intArray0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 178;
      longArray0[1] = (long) 178;
      longArray0[2] = (long) 178;
      longArray0[3] = (long) 178;
      longArray0[4] = (long) 155;
      longArray0[5] = (-1390L);
      longArray0[6] = (long) 0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "L";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(155.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {155.0, 178.0, 178.0, 2286.27319763, 155.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {24025.0, 27590.0, 27590.0, 354372.34563265, 24025.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {155.0, 178.0, 178.0, 2286.27319763, 155.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {155.0, 178.0, 178.0, 2286.27319763, 155.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {155.0, 178.0, 178.0, 2286.27319763, 155.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 1317;
      intArray0[0] = 1317;
      intArray0[1] = (-2486);
      double double0 = (-240.181602);
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[0][9];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 2);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2L}, longArray0);
      assertEquals(1, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (double) 2L;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 6.283185307179586;
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 2.0, 0.0, 0.0, 0.0, 0.0, 6.283185307179586}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(13, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray2.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1317;
      intArray0[1] = (-2486);
      intArray0[2] = 412;
      intArray0[3] = 529;
      int[] intArray1 = MathArrays.copyOf(intArray0, 412);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1317, (-2486), 412, 529}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(412, intArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1317;
      longArray0[1] = (long) 412;
      longArray0[2] = (long) 529;
      longArray0[3] = 3292L;
      longArray0[4] = (long) 529;
      longArray0[5] = (long) 529;
      longArray0[6] = (long) 412;
      longArray0[7] = (long) 529;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1317L, 412L, 529L, 3292L, 529L, 529L, 412L, 529L}, longArray0);
      assertEquals(8, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-947.5997204277538);
      doubleArray0[1] = (double) 3292L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-947.5997204277538), 3292.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 412);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 0.0F, (double) 0.0F, (double) 0.0F, (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.6079999999999964E18;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.19999999999923582;
      doubleArray0[3] = 1948.2714731;
      doubleArray0[4] = (-3126.0);
      doubleArray0[5] = 0.19999954120254515;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3126.0);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.19999954120254515;
      doubleArray1[3] = 1.0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(4.3466666666666665E18, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 151.0;
      doubleArray0[2] = (-642.666874);
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 151.0, (-642.666874), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "B=<xW`B/RZ(U@[=";
      stringArray0[1] = "B=<xW`B/RZ(U@[=";
      stringArray0[2] = "F~ky>m:9?";
      stringArray0[1] = "F~ky>m:9?";
      stringArray0[4] = "";
      stringArray0[5] = "`";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {-0.0, -0.0, 0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 151.0, (-642.666874), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1135);
      intArray0[1] = (-134);
      intArray0[2] = 280;
      intArray0[3] = 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(2286.27319763, 3.834E-20, Double.NaN, 1811.04);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2286.27319763;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 2286.27319763;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {2286.27319763, Double.NaN, 2286.27319763}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, stringArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {2286.27319763, Double.NaN, 2286.27319763}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1135);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,135 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      FieldElement<String>[][] fieldElementArray0 = MathArrays.buildArray(field0, 155, 178);
      assertNotNull(fieldElementArray0);
      assertEquals(155, fieldElementArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 155;
      doubleArray0[1] = (double) 178;
      doubleArray0[2] = (double) 178;
      doubleArray0[3] = 2286.27319763;
      doubleArray0[4] = (double) 155;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {155.0, 178.0, 178.0, 2286.27319763, 155.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 178;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {178}, intArray0);
      assertEquals(1, intArray0.length);
      
      long[][] longArray0 = new long[2][7];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 178;
      longArray1[1] = (long) 178;
      longArray1[2] = (long) 178;
      longArray1[3] = (long) 178;
      longArray1[4] = (long) 155;
      longArray1[5] = (-1390L);
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 178;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 178;
      longArray0[1] = longArray2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (155 <= 178)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1811.04, (-587.254827734248), (-587.254827734248), 1811.04, 980.6114, (-1733.8361804336));
      assertEquals((-3827303.49070531), double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double1 = MathArrays.linearCombination((-587.254827734248), (-3827303.49070531), Double.NaN, 980.6114);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 980.6114;
      doubleArray0[1] = 980.6114;
      doubleArray0[3] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-587.254827734248);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {980.6114, 980.6114, 0.0, Double.NaN, (-587.254827734248)}, doubleArray0, 0.01);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 879;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 879}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "";
      stringArray0[2] = "ILLEGAL_STATE";
      stringArray0[3] = "";
      stringArray0[4] = ".y8eN5";
      stringArray0[5] = "N+fkdmx+T";
      boolean boolean3 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1811.04, (-587.254827734248), (-587.254827734248), 1811.04, 980.6114, (-1733.8361804336));
      assertEquals((-3827303.49070531), double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1182.2;
      doubleArray0[2] = 1.184154459111628E-8;
      doubleArray0[3] = 4692.928198006;
      doubleArray0[4] = (-491.666874);
      doubleArray0[5] = (-0.0013888888689039883);
      doubleArray0[6] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3.834E-20, 1182.2, 1.184154459111628E-8, 4692.928198006, (-491.666874), (-0.0013888888689039883), 3.834E-20}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1122.7F;
      floatArray0[4] = 3086.9F;
      floatArray0[5] = 1973.8578F;
      float float0 = 3181.2776F;
      floatArray0[6] = 3181.2776F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 3181.2776F;
      floatArray1[1] = 3181.2776F;
      floatArray1[2] = 1973.8578F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 1122.7F;
      floatArray1[5] = 3181.2776F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 1122.7F, 3086.9F, 1973.8578F, 3181.2776F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3181.2776F, 3181.2776F, 1973.8578F, 0.0F, 1122.7F, 3181.2776F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.375;
      doubleArray0[1] = (-1022.059349);
      doubleArray0[2] = (-1992.1333);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-663.5795897588);
      doubleArray0[5] = 0.041666666666666664;
      doubleArray0[6] = 2.608E18;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3068.34938928);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.375, (-1022.059349), (-1992.1333), 0.0, (-663.5795897588), 0.041666666666666664, 2.608E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.6177072125230084E-15, (-1.2024674767300878E-12), (-2.343773387430736E-12), 0.0, (-7.807109006806325E-13), 4.9021430682515406E-17, 3068.3493892800043}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2139758886;
      intArray0[1] = (-2666);
      intArray0[2] = 309;
      intArray0[3] = (-1423);
      intArray0[4] = 134217729;
      intArray0[5] = 134217729;
      intArray0[6] = 450;
      intArray0[7] = (-1649);
      intArray0[8] = 2142679434;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {2139758886, (-2666), 309, (-1423), 134217729, 134217729, 450, (-1649), 2142679434}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-895.822751123);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = 0L;
      longArray2[4] = (long) 0;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 151.0;
      doubleArray0[2] = (-642.666874);
      double double0 = MathArrays.linearCombination(1.01, 1537.9832566, Double.NaN, 1537.9832566, 280.0, 151.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1483.3576489558);
      doubleArray0[1] = 932.744107154709;
      doubleArray0[2] = 1975.424953947185;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(6972665.232824752, double0, 0.01);
      assertArrayEquals(new double[] {(-1483.3576489558), 932.744107154709, 1975.424953947185}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-53);
      intArray0[1] = 1462;
      intArray0[2] = (-92);
      intArray0[3] = (-92);
      intArray0[4] = (-1224);
      intArray0[5] = (-1317);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-53), 1462, (-92), (-92), (-1224), (-1317)}, intArray0);
      assertEquals(6, intArray0.length);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-53), 1462, (-92), (-92), (-1224), (-1317)}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1483.3576489558), 932.744107154709, 1975.424953947185}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2966.7152979116), 1865.488214309418, 3950.84990789437}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double2 = MathArrays.linearCombination(932.744107154709, (-1483.3576489558), 1.304E19, 2.800552834259E-8);
      assertEquals(3.6519070599426776E11, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1483.3576489558), 932.744107154709, 1975.424953947185}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2966.7152979116), 1865.488214309418, 3950.84990789437}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-92);
      doubleArray2[1] = (double) (-1224);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 6.283185307179586;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) (-1224);
      doubleArray2[6] = (double) (-92);
      doubleArray2[7] = (double) (-53);
      boolean boolean1 = MathArrays.equals(doubleArray2, doubleArray0);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1483.3576489558), 932.744107154709, 1975.424953947185}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-92.0), (-1224.0), 0.0, 6.283185307179586, 0.0, (-1224.0), (-92.0), (-53.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (-1.7976931348623157E308);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) (-1.0F);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (double) (-1.0F);
      doubleArray1[2] = (-1.7976931348623157E308);
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[0];
      int[] intArray0 = new int[5];
      intArray0[0] = 2145900887;
      intArray0[1] = 2214;
      intArray0[2] = 1635;
      intArray0[3] = 2146204119;
      intArray0[4] = 2147483457;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1563));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float[] floatArray0 = new float[1];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(3.834E-20, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(3220);
      assertEquals(3220, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (int)integerArray0[0];
      floatArray0[1] = (float) 3220;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-606.97064F);
      floatArray1[1] = (float) 3220;
      floatArray1[2] = (float) 3220;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 6082.0F;
      floatArray1[5] = (float) 3220;
      floatArray1[6] = (float) (int)integerArray0[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {3220.0F, 3220.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-606.97064F), 3220.0F, 3220.0F, 0.0F, 6082.0F, 3220.0F, 3220.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      double double0 = MathArrays.linearCombination(1447.60513826, (double) (-606.97064F), (-1383.15684917981), 240.181602);
      assertEquals((-1210862.6481155085), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-606.97064F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = 171.0;
      doubleArray0[3] = (double) (-606.97064F);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (-1210862.6481155085);
      doubleArray0[6] = (-1210862.6481155085);
      doubleArray0[7] = (double) 6082.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-606.971 < 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 151.0;
      doubleArray0[2] = (-642.666874);
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 151.0, (-642.666874), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "B=<xW`B/RZ(U@[=";
      stringArray0[1] = "B=<xW`B/RZ(U@[=";
      stringArray0[2] = "F~ky>m:9?";
      stringArray0[3] = "F~ky>m:9?";
      stringArray0[4] = "";
      stringArray0[5] = "`";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {-0.0, -0.0, 0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 151.0, (-642.666874), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3068.34938928;
      doubleArray0[2] = (-1355.796);
      double[][] doubleArray1 = new double[9][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      long[] longArray0 = new long[3];
      longArray0[0] = 1194L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (-919.159504);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) (-1.0F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-919.159504), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-919.159504), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-300.0), (-1.0), 0.0, 0.0, (-919.159504), 1767.59761, 513.9945254686, (-919.159504));
      assertEquals((-2096847.0955676192), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(0.9285714285714286, (-919.159504), (-1.0), (-2096847.0955676192), 1767.59761, (-738.7505539896376));
      assertEquals(790179.8766956454, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1483.3576489558);
      doubleArray0[1] = 932.744107154709;
      doubleArray0[2] = 1975.424953947185;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(6972665.232824752, double0, 0.01);
      assertArrayEquals(new double[] {(-1483.3576489558), 932.744107154709, 1975.424953947185}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-53);
      intArray0[1] = 1462;
      intArray0[2] = (-92);
      intArray0[3] = (-92);
      intArray0[4] = 1462;
      intArray0[5] = (-1317);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-53), 1462, (-92), (-92), 1462, (-1317)}, intArray0);
      assertEquals(6, intArray0.length);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-53), 1462, (-92), (-92), 1462, (-1317)}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1483.3576489558), 932.744107154709, 1975.424953947185}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2966.7152979116), 1865.488214309418, 3950.84990789437}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double2 = MathArrays.linearCombination(932.744107154709, 1.633123935319537E16, 1.304E19, 2.800552834259E-8);
      assertEquals(1.5232867634418153E19, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1483.3576489558), 932.744107154709, 1975.424953947185}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2966.7152979116), 1865.488214309418, 3950.84990789437}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double3 = MathArrays.linearCombination((-788.0), 1.633123935319537E16, 1324.118428, (-3853.890229), 0.0, 565.7, (double) 1462, (double) 0);
      assertEquals((-1.2869016610323055E19), double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "B=<xW`B/RZ(U@[=";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 3068.34938928;
      doubleArray0[2] = (-1355.796);
      double[][] doubleArray1 = new double[9][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      long[][] longArray0 = new long[2][0];
      long[] longArray1 = new long[3];
      longArray1[0] = 1194L;
      longArray1[1] = 1194L;
      longArray1[2] = 446L;
      longArray0[0] = longArray1;
      longArray0[1] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1260.511593;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "B=<xW`B/RZ(U@[=";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "BW_!M9.ot<[dba`";
      stringArray0[4] = "SQCfZk5";
      stringArray0[5] = "";
      stringArray0[6] = "B=<xW`B/RZ(U@[=";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(3220);
      assertEquals(3220, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(3220, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 536;
      intArray0[1] = 0;
      intArray0[1] = 277;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {536, 277, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      double double0 = MathArrays.linearCombination(3258.608566355, (double) 536, 1.0, 1839.77958745, (double) 536, (-2713.1740933082224), 100.0, 1.0);
      assertEquals(294292.6571405229, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) 536, 0.0, (-4087.55981206), 85.15327, (-4087.55981206), (double) 0);
      assertEquals((-348069.0843174944), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-895.822751123);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 21);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(21, doubleArray2.length);
      
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 21;
      longArray1[1] = (long) 21;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 21;
      longArray2[1] = (long) 21;
      longArray2[2] = (long) 21;
      longArray2[3] = 0L;
      longArray2[4] = (long) 21;
      double double1 = MathArrays.linearCombination((double) 21L, (-895.822751123), (-1937.8876194031793), (double) 0L);
      assertEquals((-18812.277773583), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1677.3394F;
      floatArray0[2] = 876.9958F;
      floatArray0[3] = (-507.17374F);
      floatArray0[4] = (-606.97064F);
      floatArray0[5] = 1677.3394F;
      floatArray0[6] = (-300.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 1677.3394F, 876.9958F, (-507.17374F), (-606.97064F), 1677.3394F, (-300.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      double double0 = MathArrays.linearCombination((double) (-507.17374F), (-1702.69333), (-1130.24453), (-1130.24453));
      assertEquals(2141014.0360076944, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (-2056.8962);
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 1.34217729E8;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1260.511593;
      doubleArray1[2] = (-2056.8962);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, (-2056.8962), 1.34217729E8, 1.34217729E8, 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1260.511593, 0.0, (-2056.8962)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[6][1];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3068.34938928;
      doubleArray0[2] = (-1355.796);
      double[][] doubleArray1 = new double[9][4];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3068.34938928, (-1355.796)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination(3068.34938928, 0.0, (-1311.3842337555736), (-347.31));
      assertEquals(455456.8582256483, double0, 0.01);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 3068.34938928;
      doubleArray3[3] = 3068.34938928;
      doubleArray3[4] = (-347.31);
      double double1 = MathArrays.distance(doubleArray0, doubleArray3);
      assertEquals(5384.034769592637, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {0.0, 3068.34938928, (-1355.796)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 3068.34938928, 3068.34938928, (-347.31)}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1483.3576489558);
      doubleArray0[1] = 932.744107154709;
      doubleArray0[2] = 1975.424953947185;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(6972665.232824752, double0, 0.01);
      assertArrayEquals(new double[] {(-1483.3576489558), 932.744107154709, 1975.424953947185}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-53);
      intArray0[1] = 1462;
      intArray0[2] = (-92);
      intArray0[3] = (-92);
      intArray0[4] = (-1224);
      intArray0[5] = (-1317);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-53), 1462, (-92), (-92), (-1224), (-1317)}, intArray0);
      assertEquals(6, intArray0.length);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-53), 1462, (-92), (-92), (-1224), (-1317)}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1483.3576489558), 932.744107154709, 1975.424953947185}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2966.7152979116), 1865.488214309418, 3950.84990789437}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double2 = MathArrays.linearCombination(932.744107154709, 1.633123935319537E16, 1.304E19, 2.800552834259E-8);
      assertEquals(1.5232867634418153E19, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1483.3576489558), 932.744107154709, 1975.424953947185}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2966.7152979116), 1865.488214309418, 3950.84990789437}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-300.0F);
      floatArray0[1] = 1677.3394F;
      floatArray0[2] = 876.9958F;
      floatArray0[3] = (-606.97064F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 240.181602;
      doubleArray0[1] = (double) (-606.97064F);
      double[] doubleArray1 = MathArrays.scale(876.9958F, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {240.181602, (-606.9706420898438)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {210638.25344700916, (-532310.6969009824)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(0.0, 0.041666666666666664, (double) (-300.0F), 1178.5);
      assertEquals((-353550.0), double0, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-353550.0);
      doubleArray2[1] = (-353550.0);
      doubleArray2[2] = 240.181602;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) (-606.97064F);
      doubleArray2[5] = (-353550.0);
      double double1 = MathArrays.distance(doubleArray0, doubleArray2);
      assertEquals(499736.2049825035, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {240.181602, (-606.9706420898438)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-353550.0), (-353550.0), 240.181602, 0.0, (-606.9706420898438), (-353550.0)}, doubleArray2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(1290.00539481921, 1290.00539481921, (double) 0.0F, (double) 0.0F);
      assertEquals(1664113.918662666, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long[][] longArray0 = new long[6][8];
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = 1594.9;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (MathArrays.OrderDirection) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.scale(502.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-300.0F);
      floatArray0[1] = 195.86F;
      floatArray0[2] = (-606.97064F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-300.0F), 195.86F, (-606.97064F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(1536.0, (double) 1677.3394F, (double) 195.86F, (double) 876.9958F);
      assertEquals(2748161.6456854222, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 536;
      intArray0[1] = 0;
      intArray0[2] = 277;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {536, 0, 277}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 277;
      intArray1[1] = 0;
      int int1 = MathArrays.distance1(intArray1, intArray0);
      assertEquals(259, int1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {536, 0, 277}, intArray0);
      assertArrayEquals(new int[] {277, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = 1594.9;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[2];
      longArray1[0] = 1023L;
      longArray1[1] = (-1676L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-1676L);
      longArray3[1] = 1023L;
      longArray3[2] = (-1676L);
      longArray3[3] = 1023L;
      longArray3[4] = (-1676L);
      longArray3[5] = 1L;
      longArray3[6] = (-1676L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (double) (-1676L);
      doubleArray0[2] = (double) 1L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, (-1676.0), 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1L;
      doubleArray2[1] = (double) (-1676L);
      doubleArray2[2] = 1.0;
      doubleArray2[3] = (double) 1L;
      double double0 = MathArrays.distance(doubleArray0, doubleArray2);
      assertEquals(1.0, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {1.0, (-1676.0), 1.0, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3.834E-20, (-1676.0), 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(4, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {3.834E-20, (-1676.0), 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {3.834E-20, (-1676.0), 1.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 3.834E-20;
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-916.903633);
      doubleArray0[4] = 480.0;
      doubleArray0[5] = 1341.7289273537515;
      doubleArray0[6] = 1.7976931348623157E308;
      double double1 = 722.7154504533;
      doubleArray0[7] = 722.7154504533;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 1.304E19, 0.0, (-916.903633), 480.0, 1341.7289273537515, 1.7976931348623157E308, 722.7154504533}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[4];
      double double0 = 3.834E-20;
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      MathArrays.scaleInPlace(0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(0, int1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(int1 == int0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, (-1.0), 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 536;
      intArray0[1] = 0;
      intArray0[2] = 277;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {536, 0, 277}, intArray0);
      assertEquals(3, intArray0.length);
      
      double double0 = MathArrays.linearCombination(3258.608566355, (double) 536, 1.0, Double.NaN, (double) 536, (-2713.1740933082224), 100.0, 1.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) 536, 0.0, (-4087.55981206), 85.15327, (-4087.55981206), (double) 0);
      assertEquals((-348069.0843174944), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-583.0);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-610.0211798);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-610.0211798)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[][] longArrayArray0 = null;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-895.822751123);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-895.822751123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = 0L;
      longArray2[4] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 396L;
      longArray0[2] = longArray3;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-916.903633);
      doubleArray0[4] = 480.0;
      doubleArray0[5] = 1341.7289273537515;
      doubleArray0[6] = 1.7976931348623157E308;
      doubleArray0[7] = 722.7154504533;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 1.304E19, 0.0, (-916.903633), 480.0, 1341.7289273537515, 1.7976931348623157E308, 722.7154504533}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 3031.84;
      doubleArray0[0] = 3031.84;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3031.84}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9192053.785600001}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = 0;
      intArray0[2] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3031.84}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9192053.785600001}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 5216;
      intArray0[1] = 0;
      intArray0[2] = 473;
      intArray0[3] = (-2161);
      intArray0[4] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {5216, 0, 473, (-2161), 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-2161);
      floatArray0[1] = (float) 473;
      floatArray0[2] = (float) 5216;
      floatArray0[3] = (float) 5216;
      floatArray0[4] = (float) (-2161);
      floatArray0[5] = (float) (-2161);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-2161.0F), 473.0F, 5216.0F, 5216.0F, (-2161.0F), (-2161.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = MathArrays.linearCombination((-3.141592653589793), (-3.141592653589793), (-3.141592653589793), (-3.141592653589793));
      assertEquals(19.739208802178716, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = 19.739208802178716;
      doubleArray0[2] = 19.739208802178716;
      doubleArray0[3] = 19.739208802178716;
      doubleArray0[4] = 19.739208802178716;
      doubleArray0[5] = 19.739208802178716;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (19.739 >= 19.739)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-147.6);
      doubleArray0[1] = (-4.9E-324);
      doubleArray0[2] = 1.1283548286454255E7;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.1283548287419632E7, double0, 0.01);
      assertArrayEquals(new double[] {(-147.6), (-4.9E-324), 1.1283548286454255E7}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.scaleInPlace(2634.993472962159, doubleArray0);
      assertArrayEquals(new double[] {(-388925.0366092147), (-1.302E-320), 2.9732076086660316E10}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-388925.0366092147), (-1.302E-320), 2.9732076086660316E10}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(2.9732465011696926E10, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-388925.0366092147), (-1.302E-320), 2.9732076086660316E10}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 277;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 277;
      doubleArray0[2] = (double) 536;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 277;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 277.0, 536.0, 0.0, 277.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 277.0, 536.0, 0.0, 277.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double double0 = new Double((-1.0F));
      assertEquals((-1.0), double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-240.181602);
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = 2286.27319763;
      doubleArray0[5] = 0.0;
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.safeNorm(doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -240.182)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 151.0;
      doubleArray0[2] = (-642.666874);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1135);
      intArray0[1] = (-134);
      intArray0[2] = 280;
      intArray0[3] = 0;
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.linearCombination(2286.27319763, 3.834E-20, Double.NaN, 1811.04);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1135);
      doubleArray0[1] = 1811.04;
      doubleArray0[2] = (double) 280;
      doubleArray0[3] = (double) (-199);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 280;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 280;
      doubleArray0[8] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-927.86614);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = 2640.8;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2556.714727624909);
      doubleArray0[4] = 118.4447894382697;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1542.98;
      doubleArray0[7] = 0.0;
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 81;
      intArray0[1] = 0;
      intArray0[2] = 2563;
      intArray0[3] = 3310;
      MathArrays.copyOf(intArray0, 1);
      int[] intArray1 = new int[6];
      intArray1[0] = 3310;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 81;
      intArray1[4] = 0;
      intArray1[5] = 3310;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-216.95);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-141.0);
      MathArrays.scaleInPlace((-141.0), doubleArray2);
      MathArrays.checkOrder(doubleArray1);
      MathArrays.distance1(doubleArray1, doubleArray0);
      double[][] doubleArray3 = new double[0][9];
      MathArrays.sortInPlace(doubleArray1, doubleArray3);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      MathArrays.checkOrder(doubleArray2);
      MathArrays.safeNorm(doubleArray0);
      long[][] longArray0 = new long[6][2];
      long[] longArray1 = new long[9];
      longArray1[0] = (-1409L);
      longArray1[1] = 45L;
      longArray1[2] = (-1L);
      longArray1[3] = 10000L;
      longArray1[4] = 623L;
      longArray1[5] = (-5905L);
      longArray1[6] = 0L;
      longArray1[7] = 2087L;
      longArray1[8] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 2087L;
      longArray2[1] = 2087L;
      longArray2[2] = 623L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = 45L;
      longArray3[1] = 1866L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = (-5905L);
      longArray4[1] = 45L;
      longArray4[2] = 10000L;
      longArray4[3] = 45L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      longArray5[0] = 623L;
      longArray5[1] = 1866L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      longArray6[0] = 2087L;
      longArray6[1] = 45L;
      longArray6[2] = (-1409L);
      longArray6[3] = 623L;
      longArray6[4] = (-5905L);
      longArray6[5] = 10000L;
      longArray6[6] = (-1409L);
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 3 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3031.84;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      float float0 = 13.446333F;
      float[] floatArray0 = null;
      float[] floatArray1 = new float[6];
      floatArray1[0] = 13.446333F;
      floatArray1[1] = 13.446333F;
      floatArray1[2] = 13.446333F;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 2, 140);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1483.3576489558);
      doubleArray0[1] = 932.744107154709;
      doubleArray0[2] = 1975.424953947185;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1385.0, 1975.424953947185, (-1483.3576489558), (-1483.3576489558), 932.744107154709, 0.0);
      MathArrays.linearCombination(6972665.232824752, (-1608.2081159), 4936313.475932529, (-1026.668));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      int int0 = 0;
      MathArrays.copyOf(doubleArray0, 0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 185;
      int int2 = 235;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 185, 235);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double double0 = 1594.9;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale(1594.9, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1955.0F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-1955.0F);
      doubleArray1[1] = (double) (-1955.0F);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 1.0F;
      double[][] doubleArray2 = new double[0][5];
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((-3657.938399931), 0.0, (double) (-1955.0F), (double) 1.0F, 1562.945, (-1711.91514));
      assertEquals((-2677584.2084873), double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      int int0 = 2;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<String>>) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = (-3037);
      int int1 = (-1534);
      int int2 = (-900);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-1534), (-900));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-2061);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2061));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-300.0F);
      floatArray0[1] = 1677.3394F;
      floatArray0[2] = 876.9958F;
      floatArray0[3] = (-606.97064F);
      floatArray0[4] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.linearCombination((double) 876.9958F, (double) (-606.97064F), (double) (-300.0F), (double) 876.9958F);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 876.9958F;
      doubleArray0[1] = (double) 876.9958F;
      doubleArray0[2] = (double) 1677.3394F;
      doubleArray0[3] = (double) (-300.0F);
      doubleArray0[4] = (double) (-300.0F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (876.996 < 1,677.339)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 195;
      intArray0[2] = 0;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.copyOf(doubleArray0, 0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 219.4425655054;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-622.04067575722);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1051.63);
      doubleArray0[5] = 2.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {219.4425655054, 0.0, (-622.04067575722), 1.0, (-1051.63), 2.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1684.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 3799L;
      longArray0[2] = 573L;
      longArray0[3] = (-2377L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,377 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1125.2991F);
      floatArray0[2] = (-4397.0F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 769.1987F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1.0F;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) (-4397.0F);
      doubleArray1[3] = (-3418.4766909507);
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = (double) 0.0F;
      doubleArray1[6] = (double) 0.0F;
      doubleArray1[7] = (double) 0.0F;
      doubleArray1[8] = 1053.771709;
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(1.0, double0, 0.01);
      
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 769.1987F;
      doubleArray2[1] = (double) 769.1987F;
      doubleArray2[2] = 3529.852716;
      doubleArray2[3] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[0][8];
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
      assertArrayEquals(new double[] {1.0, 769.19873046875, 769.19873046875, 3529.852716}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[2];
      long long0 = 1023L;
      longArray1[0] = 1023L;
      longArray1[1] = (-1676L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = (-1676L);
      longArray3[1] = 1023L;
      longArray3[2] = (-1676L);
      longArray3[3] = 1023L;
      longArray3[4] = (-1676L);
      longArray3[5] = 1L;
      longArray3[6] = (-1676L);
      longArray3[7] = (-1676L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      longArray4[0] = (-1676L);
      longArray4[1] = (-1676L);
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = null;
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 172.80702155357775;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1774.89965497161);
      doubleArray0[3] = 100.0;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = (-2969.0724116);
      doubleArray0[6] = 2.0;
      doubleArray0[7] = (-998.32636816);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[6][8];
      long[] longArray1 = new long[3];
      longArray1[0] = 603L;
      longArray1[1] = 0L;
      longArray1[2] = (-1796L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 603L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = (-1796L);
      longArray3[1] = (-1796L);
      longArray3[2] = (-1796L);
      longArray3[3] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      longArray4[0] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = 0L;
      longArray5[1] = (-1796L);
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray5[4] = 0L;
      longArray5[5] = 0L;
      longArray5[6] = 0L;
      longArray5[7] = (-1707L);
      longArray5[8] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      longArray6[0] = (-1707L);
      longArray6[1] = 603L;
      longArray6[2] = (-1707L);
      longArray6[3] = (-1707L);
      longArray6[4] = (-1796L);
      longArray6[5] = (-1796L);
      longArray6[6] = 603L;
      longArray6[7] = 603L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,796 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[1] = "809d~%\"#";
      stringArray0[2] = "l[1^{j&EXYY;oxhN#j8";
      String string0 = "HcK}QO]49Jrq";
      stringArray0[3] = "HcK}QO]49Jrq";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MathArrays.linearCombination(1734.327, (-2790.219957), (-2790.219957), (-1312.98207249897), 0.0, 3327.82);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2790.219957);
      double[][] doubleArray1 = new double[4][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      long[][] longArray0 = new long[7][4];
      long[] longArray1 = new long[7];
      longArray1[0] = (-1390L);
      longArray1[1] = 0L;
      longArray1[2] = (-711L);
      longArray1[3] = 9007199254740990L;
      longArray1[4] = 0L;
      longArray1[5] = (-2366L);
      longArray1[6] = 2144L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = 9007199254740990L;
      longArray2[1] = 2144L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = (-2366L);
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = 2144L;
      longArray4[1] = 0L;
      longArray4[2] = 2144L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      longArray5[0] = (-346L);
      longArray5[1] = (-1390L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      longArray6[0] = 0L;
      longArray6[1] = 0L;
      longArray6[2] = 2144L;
      longArray6[3] = (-711L);
      longArray6[4] = 0L;
      longArray6[5] = 0L;
      longArray6[6] = 948L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[9];
      longArray7[0] = (-2366L);
      longArray7[1] = (-2366L);
      longArray7[2] = (-346L);
      longArray7[3] = 0L;
      longArray7[4] = 2144L;
      longArray7[5] = 0L;
      longArray7[6] = (-1073741824L);
      longArray7[7] = (-2366L);
      longArray7[8] = (-711L);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,390 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-317.7);
      doubleArray0[1] = 1178.5;
      doubleArray0[2] = 2616.563;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-317.7 < 1,178.5)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3068.34938928;
      doubleArray0[2] = (-1355.796);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1355.796);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray2);
      assertEquals(3068.34938928, double0, 0.01);
      
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 3068.34938928;
      doubleArray3[4] = 712.4286;
      doubleArray3[5] = 3068.34938928;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 3068.34938928;
      double[] doubleArray4 = MathArrays.convolve(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4160055.8285882673), (-965907.8461656), 5254712.146106683, 2185979.8597156056, 5254712.146106683, 0.0, 9414767.97469495}, doubleArray4, 0.01);
      assertEquals(10, doubleArray4.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2140.537;
      doubleArray0[1] = (-4739.428074815157);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,739.428 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-2206.7687244089543);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = (-2023.0287065);
      doubleArray0[8] = (-2278.045785335);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 6.283185307179586;
      doubleArray2[2] = 2385.218688;
      doubleArray2[3] = (-2206.7687244089543);
      doubleArray2[4] = (-2278.045785335);
      doubleArray2[5] = 6.283185307179586;
      doubleArray2[6] = Double.NaN;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1135);
      intArray0[1] = (-134);
      intArray0[2] = 280;
      intArray0[3] = 0;
      intArray0[4] = (-199);
      intArray0[5] = (-2647);
      intArray0[6] = 93;
      intArray0[7] = 1922;
      intArray0[8] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }
}
